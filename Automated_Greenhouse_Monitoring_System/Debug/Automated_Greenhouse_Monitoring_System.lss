
Automated_Greenhouse_Monitoring_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008d42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019e  00800060  00008d42  00008dd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  008001fe  008001fe  00008f74  2**0
                  ALLOC
  3 .stab         0000a2c0  00000000  00000000  00008f74  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000418c  00000000  00000000  00013234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000173c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  00017580  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  00017790  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  00019e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  0001b2fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0001c5a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0001c784  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  0001ca82  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001d42c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8c 15 	jmp	0x2b18	; 0x2b18 <__vector_1>
       8:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__vector_2>
       c:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__vector_10>
      2c:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	fd e8       	ldi	r31, 0x8D	; 141
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3f       	cpi	r26, 0xFE	; 254
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae ef       	ldi	r26, 0xFE	; 254
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 33       	cpi	r26, 0x36	; 54
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 66 43 	call	0x86cc	; 0x86cc <main>
      8a:	0c 94 9f 46 	jmp	0x8d3e	; 0x8d3e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c7 43 	jmp	0x878e	; 0x878e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e6       	ldi	r26, 0x63	; 99
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e3 43 	jmp	0x87c6	; 0x87c6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d3 43 	jmp	0x87a6	; 0x87a6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ef 43 	jmp	0x87de	; 0x87de <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d3 43 	jmp	0x87a6	; 0x87a6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ef 43 	jmp	0x87de	; 0x87de <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c7 43 	jmp	0x878e	; 0x878e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e6       	ldi	r24, 0x63	; 99
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e3 43 	jmp	0x87c6	; 0x87c6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cf 43 	jmp	0x879e	; 0x879e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e6       	ldi	r22, 0x63	; 99
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 eb 43 	jmp	0x87d6	; 0x87d6 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d3 43 	jmp	0x87a6	; 0x87a6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ef 43 	jmp	0x87de	; 0x87de <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d3 43 	jmp	0x87a6	; 0x87a6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ef 43 	jmp	0x87de	; 0x87de <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d3 43 	jmp	0x87a6	; 0x87a6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ef 43 	jmp	0x87de	; 0x87de <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d3 43 	jmp	0x87a6	; 0x87a6 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 ef 43 	jmp	0x87de	; 0x87de <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 d7 43 	jmp	0x87ae	; 0x87ae <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 f3 43 	jmp	0x87e6	; 0x87e6 <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 cf 43 	jmp	0x879e	; 0x879e <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 eb 43 	jmp	0x87d6	; 0x87d6 <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	e5 59       	subi	r30, 0x95	; 149
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <USART_enuInit>:
#include "USART_priv.h"
#include "USART_config.h"


ES_t USART_enuInit(void)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <USART_enuInit+0x6>
     e94:	00 d0       	rcall	.+0      	; 0xe96 <USART_enuInit+0x8>
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8UCSRAvalue = 0;
     e9e:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u16UBRRvalue = 0;
     ea0:	1a 82       	std	Y+2, r1	; 0x02
     ea2:	19 82       	std	Y+1, r1	; 0x01
	
	#if USART_SPEED == NORMAL_SPEED
	UCSRA &= ~(MASK_BIT << U2X);
     ea4:	ab e2       	ldi	r26, 0x2B	; 43
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	eb e2       	ldi	r30, 0x2B	; 43
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	8d 7f       	andi	r24, 0xFD	; 253
     eb0:	8c 93       	st	X, r24
	#if USART_MODE == TRANSMITTER
	UCSRB |= (MASK_BIT << TXEN);
	#elif USART_MODE == RECEIVER
	UCSRB |= (MASK_BIT << RXEN);
	#elif USART_MODE == TRANSCEIVER
	UCSRB |= (MASK_BIT << TXEN);
     eb2:	aa e2       	ldi	r26, 0x2A	; 42
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	ea e2       	ldi	r30, 0x2A	; 42
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	88 60       	ori	r24, 0x08	; 8
     ebe:	8c 93       	st	X, r24
	UCSRB |= (MASK_BIT << RXEN);
     ec0:	aa e2       	ldi	r26, 0x2A	; 42
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	ea e2       	ldi	r30, 0x2A	; 42
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	80 61       	ori	r24, 0x10	; 16
     ecc:	8c 93       	st	X, r24
	#elif USART_DATA_LENGTH == SEVEN_DATA_LENGTH
	Local_u8UCSRAvalue &= ~(MASK_BIT << UCSZ0);
	Local_u8UCSRAvalue |=  (MASK_BIT << UCSZ1);
	UCSRB &= ~(MASK_BIT << UCSZ2);
	#elif USART_DATA_LENGTH == EIGHT_DATA_LENGTH
	Local_u8UCSRAvalue |=  (MASK_BIT << UCSZ0);
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	82 60       	ori	r24, 0x02	; 2
     ed2:	8b 83       	std	Y+3, r24	; 0x03
	Local_u8UCSRAvalue |=  (MASK_BIT << UCSZ1);
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	84 60       	ori	r24, 0x04	; 4
     ed8:	8b 83       	std	Y+3, r24	; 0x03
	UCSRB &= ~(MASK_BIT << UCSZ2);
     eda:	aa e2       	ldi	r26, 0x2A	; 42
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	ea e2       	ldi	r30, 0x2A	; 42
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	8b 7f       	andi	r24, 0xFB	; 251
     ee6:	8c 93       	st	X, r24
	#else
	#error "USART DATA LENGTH has a wrong configuration"
	#endif
	
	#if TRANSMITTION_MODE == ASYNCHRONOUS
	Local_u8UCSRAvalue &= ~(MASK_BIT << UMSEL);
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	8f 7b       	andi	r24, 0xBF	; 191
     eec:	8b 83       	std	Y+3, r24	; 0x03
	#else
	#error "USART TRANSMITTION MODE has a wrong configuration"
	#endif
	
	#if PARITY_STATE == NO_PARITY
	Local_u8UCSRAvalue &= ~(MASK_BIT << UPM0);
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	8f 7e       	andi	r24, 0xEF	; 239
     ef2:	8b 83       	std	Y+3, r24	; 0x03
	Local_u8UCSRAvalue &= ~(MASK_BIT << UPM1);
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	8f 7d       	andi	r24, 0xDF	; 223
     ef8:	8b 83       	std	Y+3, r24	; 0x03
	#else
	#error "USART PARITY has a wrong configuration"
	#endif
	
	#if NO_STOP_BITS == ONE_STOP_BITS
	Local_u8UCSRAvalue &= ~(MASK_BIT << USBS);
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	87 7f       	andi	r24, 0xF7	; 247
     efe:	8b 83       	std	Y+3, r24	; 0x03
	Local_u8UCSRAvalue |=  (MASK_BIT << USBS);
	#else
	#error "USART STOP BITS has a wrong configuration"
	#endif
	
	Local_u8UCSRAvalue |= (MASK_BIT << URSEL);
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	80 68       	ori	r24, 0x80	; 128
     f04:	8b 83       	std	Y+3, r24	; 0x03
	UCSRC = Local_u8UCSRAvalue;
     f06:	e0 e4       	ldi	r30, 0x40	; 64
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	80 83       	st	Z, r24
	
	
	Local_u16UBRRvalue = (u16)CALCULATE_BAUDRATE(USART_BAUD_RATE);
     f0e:	83 e3       	ldi	r24, 0x33	; 51
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	9a 83       	std	Y+2, r25	; 0x02
     f14:	89 83       	std	Y+1, r24	; 0x01
	
	Local_u16UBRRvalue &= ~(MASK_BIT << 15);
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	9a 81       	ldd	r25, Y+2	; 0x02
     f1a:	9f 77       	andi	r25, 0x7F	; 127
     f1c:	9a 83       	std	Y+2, r25	; 0x02
     f1e:	89 83       	std	Y+1, r24	; 0x01
	UBRRL = (u8)Local_u16UBRRvalue;
     f20:	e9 e2       	ldi	r30, 0x29	; 41
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	80 83       	st	Z, r24
	UBRRH = (Local_u16UBRRvalue >> 8);
     f28:	e0 e4       	ldi	r30, 0x40	; 64
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	9a 81       	ldd	r25, Y+2	; 0x02
     f30:	89 2f       	mov	r24, r25
     f32:	99 27       	eor	r25, r25
     f34:	80 83       	st	Z, r24
	
	Local_enuErrorState = ES_OK;
     f36:	1c 82       	std	Y+4, r1	; 0x04
	
	return Local_enuErrorState;
     f38:	8c 81       	ldd	r24, Y+4	; 0x04
}
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <USART_enuSendCharacter>:

ES_t USART_enuSendCharacter(u8 Copy_u8SendedChar)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <USART_enuSendCharacter+0x6>
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	89 83       	std	Y+1, r24	; 0x01
	
	while(!((UCSRA >> UDRE) & 1));
     f58:	eb e2       	ldi	r30, 0x2B	; 43
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	82 95       	swap	r24
     f60:	86 95       	lsr	r24
     f62:	87 70       	andi	r24, 0x07	; 7
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	81 70       	andi	r24, 0x01	; 1
     f6a:	90 70       	andi	r25, 0x00	; 0
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	a1 f3       	breq	.-24     	; 0xf58 <USART_enuSendCharacter+0x10>
	UDR = Copy_u8SendedChar;
     f70:	ec e2       	ldi	r30, 0x2C	; 44
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	80 83       	st	Z, r24
	
	Local_enuErrorState = ES_OK;
     f78:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret

00000f86 <USART_enuReceiveCharacter>:

ES_t USART_enuReceiveCharacter(u8 *Copy_Pu8ReceivedChar)
{
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <USART_enuReceiveCharacter+0x6>
     f8c:	0f 92       	push	r0
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	9b 83       	std	Y+3, r25	; 0x03
     f94:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_Pu8ReceivedChar != NULL)
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	9b 81       	ldd	r25, Y+3	; 0x03
     f9e:	00 97       	sbiw	r24, 0x00	; 0
     fa0:	69 f0       	breq	.+26     	; 0xfbc <USART_enuReceiveCharacter+0x36>
	{
		while(!((UCSRA >> RXC) & 1));
     fa2:	eb e2       	ldi	r30, 0x2B	; 43
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	88 23       	and	r24, r24
     faa:	dc f7       	brge	.-10     	; 0xfa2 <USART_enuReceiveCharacter+0x1c>
		*Copy_Pu8ReceivedChar = UDR;
     fac:	ec e2       	ldi	r30, 0x2C	; 44
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	ea 81       	ldd	r30, Y+2	; 0x02
     fb4:	fb 81       	ldd	r31, Y+3	; 0x03
     fb6:	80 83       	st	Z, r24
		
		Local_enuErrorState = ES_OK;
     fb8:	19 82       	std	Y+1, r1	; 0x01
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <USART_enuReceiveCharacter+0x3a>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     fbc:	82 e0       	ldi	r24, 0x02	; 2
     fbe:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
}
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <USART_enuSendString>:

ES_t USART_enuSendString(u8 *Copy_Pu8SendedString)
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <USART_enuSendString+0x6>
     fd4:	0f 92       	push	r0
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	9b 83       	std	Y+3, r25	; 0x03
     fdc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_Pu8SendedString != NULL)
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	9b 81       	ldd	r25, Y+3	; 0x03
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	f9 f0       	breq	.+62     	; 0x1028 <USART_enuSendString+0x5a>
     fea:	17 c0       	rjmp	.+46     	; 0x101a <USART_enuSendString+0x4c>
	{
		while(*Copy_Pu8SendedString != '\0')
		{
			while(!((UCSRA >> UDRE) & 1));
     fec:	eb e2       	ldi	r30, 0x2B	; 43
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	82 95       	swap	r24
     ff4:	86 95       	lsr	r24
     ff6:	87 70       	andi	r24, 0x07	; 7
     ff8:	88 2f       	mov	r24, r24
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	81 70       	andi	r24, 0x01	; 1
     ffe:	90 70       	andi	r25, 0x00	; 0
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	a1 f3       	breq	.-24     	; 0xfec <USART_enuSendString+0x1e>
			UDR = *Copy_Pu8SendedString;
    1004:	ac e2       	ldi	r26, 0x2C	; 44
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	ea 81       	ldd	r30, Y+2	; 0x02
    100a:	fb 81       	ldd	r31, Y+3	; 0x03
    100c:	80 81       	ld	r24, Z
    100e:	8c 93       	st	X, r24
			Copy_Pu8SendedString++;
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	9b 81       	ldd	r25, Y+3	; 0x03
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	9b 83       	std	Y+3, r25	; 0x03
    1018:	8a 83       	std	Y+2, r24	; 0x02
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_Pu8SendedString != NULL)
	{
		while(*Copy_Pu8SendedString != '\0')
    101a:	ea 81       	ldd	r30, Y+2	; 0x02
    101c:	fb 81       	ldd	r31, Y+3	; 0x03
    101e:	80 81       	ld	r24, Z
    1020:	88 23       	and	r24, r24
    1022:	21 f7       	brne	.-56     	; 0xfec <USART_enuSendString+0x1e>
			while(!((UCSRA >> UDRE) & 1));
			UDR = *Copy_Pu8SendedString;
			Copy_Pu8SendedString++;
		}
		
		Local_enuErrorState = ES_OK;
    1024:	19 82       	std	Y+1, r1	; 0x01
    1026:	02 c0       	rjmp	.+4      	; 0x102c <USART_enuSendString+0x5e>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1028:	82 e0       	ldi	r24, 0x02	; 2
    102a:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    102c:	89 81       	ldd	r24, Y+1	; 0x01
}
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <USART_enuReceiveStringUntilEnter>:

/* we will stop receive string (end of string) when we press 'Enter' --> (\r = 13), \n */
ES_t USART_enuReceiveStringUntilEnter(u8 *Copy_Pu8ReceivedString)
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	00 d0       	rcall	.+0      	; 0x1040 <USART_enuReceiveStringUntilEnter+0x6>
    1040:	00 d0       	rcall	.+0      	; 0x1042 <USART_enuReceiveStringUntilEnter+0x8>
    1042:	0f 92       	push	r0
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	9d 83       	std	Y+5, r25	; 0x05
    104a:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	8b 83       	std	Y+3, r24	; 0x03
	
	u8 Local_u8String = 0, Local_u8CharIndex = 0;
    1050:	1a 82       	std	Y+2, r1	; 0x02
    1052:	19 82       	std	Y+1, r1	; 0x01
	
	if(Copy_Pu8ReceivedString != NULL)
    1054:	8c 81       	ldd	r24, Y+4	; 0x04
    1056:	9d 81       	ldd	r25, Y+5	; 0x05
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	41 f1       	breq	.+80     	; 0x10ac <USART_enuReceiveStringUntilEnter+0x72>
	{
		while(1)
		{
			while(!((UCSRA >> RXC) & 1));
    105c:	eb e2       	ldi	r30, 0x2B	; 43
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	88 23       	and	r24, r24
    1064:	dc f7       	brge	.-10     	; 0x105c <USART_enuReceiveStringUntilEnter+0x22>
			Local_u8String = UDR;
    1066:	ec e2       	ldi	r30, 0x2C	; 44
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	8a 83       	std	Y+2, r24	; 0x02
			
			if(Local_u8String == '\r' || Local_u8String == '\n')
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	8d 30       	cpi	r24, 0x0D	; 13
    1072:	19 f0       	breq	.+6      	; 0x107a <USART_enuReceiveStringUntilEnter+0x40>
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	8a 30       	cpi	r24, 0x0A	; 10
    1078:	51 f4       	brne	.+20     	; 0x108e <USART_enuReceiveStringUntilEnter+0x54>
			{
				Copy_Pu8ReceivedString[Local_u8CharIndex] = '\0';
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	8c 81       	ldd	r24, Y+4	; 0x04
    1082:	9d 81       	ldd	r25, Y+5	; 0x05
    1084:	fc 01       	movw	r30, r24
    1086:	e2 0f       	add	r30, r18
    1088:	f3 1f       	adc	r31, r19
    108a:	10 82       	st	Z, r1
    108c:	11 c0       	rjmp	.+34     	; 0x10b0 <USART_enuReceiveStringUntilEnter+0x76>
				break;
			}
			else
			{
				Copy_Pu8ReceivedString[Local_u8CharIndex++] = Local_u8String;
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	8c 81       	ldd	r24, Y+4	; 0x04
    1096:	9d 81       	ldd	r25, Y+5	; 0x05
    1098:	fc 01       	movw	r30, r24
    109a:	e2 0f       	add	r30, r18
    109c:	f3 1f       	adc	r31, r19
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	8f 5f       	subi	r24, 0xFF	; 255
    10a6:	89 83       	std	Y+1, r24	; 0x01
			}
			
			Local_enuErrorState = ES_OK;
    10a8:	1b 82       	std	Y+3, r1	; 0x03
    10aa:	d8 cf       	rjmp	.-80     	; 0x105c <USART_enuReceiveStringUntilEnter+0x22>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    10ac:	82 e0       	ldi	r24, 0x02	; 2
    10ae:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return Local_enuErrorState;
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <USART_enuReceiveStringWithKey>:


ES_t USART_enuReceiveStringWithKey(u8 *Copy_Pu8ReceivedString)
{
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <USART_enuReceiveStringWithKey+0x6>
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <USART_enuReceiveStringWithKey+0x8>
    10ca:	00 d0       	rcall	.+0      	; 0x10cc <USART_enuReceiveStringWithKey+0xa>
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	9e 83       	std	Y+6, r25	; 0x06
    10d2:	8d 83       	std	Y+5, r24	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	8c 83       	std	Y+4, r24	; 0x04
	
	u8 Local_u8String = 0, Local_u8CharIndex = 0;
    10d8:	1b 82       	std	Y+3, r1	; 0x03
    10da:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8StringKey = 0;
    10dc:	19 82       	std	Y+1, r1	; 0x01
	
	if(Copy_Pu8ReceivedString != NULL)
    10de:	8d 81       	ldd	r24, Y+5	; 0x05
    10e0:	9e 81       	ldd	r25, Y+6	; 0x06
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	79 f1       	breq	.+94     	; 0x1144 <USART_enuReceiveStringWithKey+0x82>
	{
		while(!((UCSRA >> RXC) & 1));
    10e6:	eb e2       	ldi	r30, 0x2B	; 43
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	88 23       	and	r24, r24
    10ee:	dc f7       	brge	.-10     	; 0x10e6 <USART_enuReceiveStringWithKey+0x24>
		Local_u8StringKey = UDR;
    10f0:	ec e2       	ldi	r30, 0x2C	; 44
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	89 83       	std	Y+1, r24	; 0x01
		
		while(1)
		{
			while(!((UCSRA >> RXC) & 1));
    10f8:	eb e2       	ldi	r30, 0x2B	; 43
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	88 23       	and	r24, r24
    1100:	dc f7       	brge	.-10     	; 0x10f8 <USART_enuReceiveStringWithKey+0x36>
			Local_u8String = UDR;
    1102:	ec e2       	ldi	r30, 0x2C	; 44
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	8b 83       	std	Y+3, r24	; 0x03
			
			if(Local_u8String == Local_u8StringKey)
    110a:	9b 81       	ldd	r25, Y+3	; 0x03
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	98 17       	cp	r25, r24
    1110:	51 f4       	brne	.+20     	; 0x1126 <USART_enuReceiveStringWithKey+0x64>
			{
				Copy_Pu8ReceivedString[Local_u8CharIndex] = '\0';
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	8d 81       	ldd	r24, Y+5	; 0x05
    111a:	9e 81       	ldd	r25, Y+6	; 0x06
    111c:	fc 01       	movw	r30, r24
    111e:	e2 0f       	add	r30, r18
    1120:	f3 1f       	adc	r31, r19
    1122:	10 82       	st	Z, r1
    1124:	11 c0       	rjmp	.+34     	; 0x1148 <USART_enuReceiveStringWithKey+0x86>
				break;
			}
			else
			{
				Copy_Pu8ReceivedString[Local_u8CharIndex++] = Local_u8String;
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	fc 01       	movw	r30, r24
    1132:	e2 0f       	add	r30, r18
    1134:	f3 1f       	adc	r31, r19
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	80 83       	st	Z, r24
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	8f 5f       	subi	r24, 0xFF	; 255
    113e:	8a 83       	std	Y+2, r24	; 0x02
			}
			
			Local_enuErrorState = ES_OK;
    1140:	1c 82       	std	Y+4, r1	; 0x04
    1142:	da cf       	rjmp	.-76     	; 0x10f8 <USART_enuReceiveStringWithKey+0x36>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1144:	82 e0       	ldi	r24, 0x02	; 2
    1146:	8c 83       	std	Y+4, r24	; 0x04
	}
	
	return Local_enuErrorState;
    1148:	8c 81       	ldd	r24, Y+4	; 0x04
    114a:	26 96       	adiw	r28, 0x06	; 6
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	de bf       	out	0x3e, r29	; 62
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	cd bf       	out	0x3d, r28	; 61
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <TIMER1_enuInit>:
#include "TIMER1_config.h"

#include "../interrupt.h"

ES_t TIMER1_enuInit(void)
{
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	0f 92       	push	r0
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	89 83       	std	Y+1, r24	; 0x01
	
	/* Mask the four bits of Waveform Generation Mode */
	TCCR1A &= 0xFC;
    116a:	af e4       	ldi	r26, 0x4F	; 79
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	ef e4       	ldi	r30, 0x4F	; 79
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	8c 7f       	andi	r24, 0xFC	; 252
    1176:	8c 93       	st	X, r24
	TCCR1B &= 0xE7;
    1178:	ae e4       	ldi	r26, 0x4E	; 78
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	ee e4       	ldi	r30, 0x4E	; 78
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	87 7e       	andi	r24, 0xE7	; 231
    1184:	8c 93       	st	X, r24
	TCCR1A &= ~(MASK_BIT << WGM10);
	TCCR1A &= ~(MASK_BIT << WGM11);
	TCCR1B |=  (MASK_BIT << WGM12);
	TCCR1B &= ~(MASK_BIT << WGM13);
	#elif TIMER1_MODE == TIMER1_FAST_PWM_8B
	TCCR1A |=  (MASK_BIT << WGM10);
    1186:	af e4       	ldi	r26, 0x4F	; 79
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	ef e4       	ldi	r30, 0x4F	; 79
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	81 60       	ori	r24, 0x01	; 1
    1192:	8c 93       	st	X, r24
	TCCR1A &= ~(MASK_BIT << WGM11);
    1194:	af e4       	ldi	r26, 0x4F	; 79
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	ef e4       	ldi	r30, 0x4F	; 79
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	8d 7f       	andi	r24, 0xFD	; 253
    11a0:	8c 93       	st	X, r24
	TCCR1B |=  (MASK_BIT << WGM12);
    11a2:	ae e4       	ldi	r26, 0x4E	; 78
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	ee e4       	ldi	r30, 0x4E	; 78
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	88 60       	ori	r24, 0x08	; 8
    11ae:	8c 93       	st	X, r24
	TCCR1B &= ~(MASK_BIT << WGM13);
    11b0:	ae e4       	ldi	r26, 0x4E	; 78
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	ee e4       	ldi	r30, 0x4E	; 78
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	8f 7e       	andi	r24, 0xEF	; 239
    11bc:	8c 93       	st	X, r24
	#else
	#error "Timer1 Mode has a wrong configuration"
	#endif
	
	/* Mask the three bits of Timer1 Prescaler */
	TCCR1B &= 0xF8;
    11be:	ae e4       	ldi	r26, 0x4E	; 78
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	ee e4       	ldi	r30, 0x4E	; 78
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	88 7f       	andi	r24, 0xF8	; 248
    11ca:	8c 93       	st	X, r24
	#elif TIMER1_PRES == PRES_8
	TCCR1B &= ~(MASK_BIT << CS10);
	TCCR1B |=  (MASK_BIT << CS11);
	TCCR1B &= ~(MASK_BIT << CS12);
	#elif TIMER1_PRES == PRES_64
	TCCR1B |=  (MASK_BIT << CS10);
    11cc:	ae e4       	ldi	r26, 0x4E	; 78
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ee e4       	ldi	r30, 0x4E	; 78
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	81 60       	ori	r24, 0x01	; 1
    11d8:	8c 93       	st	X, r24
	TCCR1B |=  (MASK_BIT << CS11);
    11da:	ae e4       	ldi	r26, 0x4E	; 78
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	ee e4       	ldi	r30, 0x4E	; 78
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	82 60       	ori	r24, 0x02	; 2
    11e6:	8c 93       	st	X, r24
	TCCR1B &= ~(MASK_BIT << CS12);
    11e8:	ae e4       	ldi	r26, 0x4E	; 78
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	ee e4       	ldi	r30, 0x4E	; 78
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	8b 7f       	andi	r24, 0xFB	; 251
    11f4:	8c 93       	st	X, r24
	#error "Timer1 Prescaler has a wrong configuration"
	#endif
	
	

	return Local_enuErrorState;	
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11f8:	0f 90       	pop	r0
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <TIMER1_enuDelayMilliSecondSyn>:

ES_t TIMER1_enuDelayMilliSecondSyn(u32 Copy_u32DelayTime_ms)
{
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	00 d0       	rcall	.+0      	; 0x1206 <TIMER1_enuDelayMilliSecondSyn+0x6>
    1206:	00 d0       	rcall	.+0      	; 0x1208 <TIMER1_enuDelayMilliSecondSyn+0x8>
    1208:	0f 92       	push	r0
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	6a 83       	std	Y+2, r22	; 0x02
    1210:	7b 83       	std	Y+3, r23	; 0x03
    1212:	8c 83       	std	Y+4, r24	; 0x04
    1214:	9d 83       	std	Y+5, r25	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    121a:	89 81       	ldd	r24, Y+1	; 0x01
}
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <TIMER1_enuDelayMilliSecondASyn>:

ES_t TIMER1_enuDelayMilliSecondASyn(u32 Copy_u32DelayTime_ms, void (*Copy_PFunApp)(void *), void *Copy_PParameterApp)
{
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	29 97       	sbiw	r28, 0x09	; 9
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
    1240:	6a 83       	std	Y+2, r22	; 0x02
    1242:	7b 83       	std	Y+3, r23	; 0x03
    1244:	8c 83       	std	Y+4, r24	; 0x04
    1246:	9d 83       	std	Y+5, r25	; 0x05
    1248:	5f 83       	std	Y+7, r21	; 0x07
    124a:	4e 83       	std	Y+6, r20	; 0x06
    124c:	39 87       	std	Y+9, r19	; 0x09
    124e:	28 87       	std	Y+8, r18	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    1254:	89 81       	ldd	r24, Y+1	; 0x01
}
    1256:	29 96       	adiw	r28, 0x09	; 9
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	de bf       	out	0x3e, r29	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	cd bf       	out	0x3d, r28	; 61
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <TIMER1_enuSetPreload>:

ES_t TIMER1_enuSetPreload(u8 Copy_u8PreloadValue)
{
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	00 d0       	rcall	.+0      	; 0x126e <TIMER1_enuSetPreload+0x6>
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    1278:	89 81       	ldd	r24, Y+1	; 0x01
}
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <TIMER1_enuSetOutputCompareRegisterChannelA>:

ES_t TIMER1_enuSetOutputCompareRegisterChannelA(u8 Copy_u8OCRValue)
{
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	00 d0       	rcall	.+0      	; 0x128a <TIMER1_enuSetOutputCompareRegisterChannelA+0x6>
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    1294:	89 81       	ldd	r24, Y+1	; 0x01
}
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <TIMER1_enuSetOutputCompareRegisterChannelB>:

ES_t TIMER1_enuSetOutputCompareRegisterChannelB(u8 Copy_u8OCRValue)
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <TIMER1_enuSetOutputCompareRegisterChannelB+0x6>
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <TIMER1_enuSetCALLBACK_OVF>:

ES_t TIMER1_enuSetCALLBACK_OVF(void (*Copy_PFunApp)(void *), void *Copy_PParameterApp)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <TIMER1_enuSetCALLBACK_OVF+0x6>
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <TIMER1_enuSetCALLBACK_OVF+0x8>
    12c4:	0f 92       	push	r0
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	9b 83       	std	Y+3, r25	; 0x03
    12cc:	8a 83       	std	Y+2, r24	; 0x02
    12ce:	7d 83       	std	Y+5, r23	; 0x05
    12d0:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <TIMER1_enuSetCALLBACK_CTC_ChannelA>:

ES_t TIMER1_enuSetCALLBACK_CTC_ChannelA(void (*Copy_PFunApp)(void *), void *Copy_PParameterApp)
{
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <TIMER1_enuSetCALLBACK_CTC_ChannelA+0x6>
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <TIMER1_enuSetCALLBACK_CTC_ChannelA+0x8>
    12f0:	0f 92       	push	r0
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	9b 83       	std	Y+3, r25	; 0x03
    12f8:	8a 83       	std	Y+2, r24	; 0x02
    12fa:	7d 83       	std	Y+5, r23	; 0x05
    12fc:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    1302:	89 81       	ldd	r24, Y+1	; 0x01
}
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <TIMER1_enuSetCALLBACK_CTC_ChannelB>:

ES_t TIMER1_enuSetCALLBACK_CTC_ChannelB(void (*Copy_PFunApp)(void *), void *Copy_PParameterApp)
{
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	00 d0       	rcall	.+0      	; 0x131a <TIMER1_enuSetCALLBACK_CTC_ChannelB+0x6>
    131a:	00 d0       	rcall	.+0      	; 0x131c <TIMER1_enuSetCALLBACK_CTC_ChannelB+0x8>
    131c:	0f 92       	push	r0
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	9b 83       	std	Y+3, r25	; 0x03
    1324:	8a 83       	std	Y+2, r24	; 0x02
    1326:	7d 83       	std	Y+5, r23	; 0x05
    1328:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    132e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	08 95       	ret

00001340 <TIMER1_enuSetCALLBACK_ICU>:

ES_t TIMER1_enuSetCALLBACK_ICU(void (*Copy_PFunApp)(void *), void *Copy_PParameterApp)
{
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	00 d0       	rcall	.+0      	; 0x1346 <TIMER1_enuSetCALLBACK_ICU+0x6>
    1346:	00 d0       	rcall	.+0      	; 0x1348 <TIMER1_enuSetCALLBACK_ICU+0x8>
    1348:	0f 92       	push	r0
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	9b 83       	std	Y+3, r25	; 0x03
    1350:	8a 83       	std	Y+2, r24	; 0x02
    1352:	7d 83       	std	Y+5, r23	; 0x05
    1354:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    135a:	89 81       	ldd	r24, Y+1	; 0x01
}
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <TIMER1_enuEnableOVFInterrupt>:

ES_t TIMER1_enuEnableOVFInterrupt(void)
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	0f 92       	push	r0
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    137a:	89 81       	ldd	r24, Y+1	; 0x01
}
    137c:	0f 90       	pop	r0
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <TIMER1_enuEnableCTCInterruptChannelA>:

ES_t TIMER1_enuEnableCTCInterruptChannelA(void)
{
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	0f 92       	push	r0
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    1392:	89 81       	ldd	r24, Y+1	; 0x01
}
    1394:	0f 90       	pop	r0
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <TIMER1_enuEnableCTCInterruptChannelB>:

ES_t TIMER1_enuEnableCTCInterruptChannelB(void)
{
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	0f 92       	push	r0
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ac:	0f 90       	pop	r0
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <TIMER1_enuPrepareICU>:
EDGE_STATE_t ICU_enuEdgeDetect = FAILLING_DETECT;
ICU_STATE_t ICU_enuState = start;
u16 TimeOn = 0, TimeTotal = 0;

ES_t TIMER1_enuPrepareICU(EDGE_STATE_t Copy_enuEdgeState, NOISE_CANCELER_STATE_t Copy_enuNoiseCancelerState)
{
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <TIMER1_enuPrepareICU+0x6>
    13ba:	0f 92       	push	r0
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	8a 83       	std	Y+2, r24	; 0x02
    13c2:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	89 83       	std	Y+1, r24	; 0x01

	/* Mask the three bits of Timer1 Prescaler */
	TCCR1B &= 0xF8;
    13c8:	ae e4       	ldi	r26, 0x4E	; 78
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	ee e4       	ldi	r30, 0x4E	; 78
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	88 7f       	andi	r24, 0xF8	; 248
    13d4:	8c 93       	st	X, r24
	#elif TIMER1_PRES == PRES_8
	TCCR1B &= ~(MASK_BIT << CS10);
	TCCR1B |=  (MASK_BIT << CS11);
	TCCR1B &= ~(MASK_BIT << CS12);
	#elif TIMER1_PRES == PRES_64
	TCCR1B |=  (MASK_BIT << CS10);
    13d6:	ae e4       	ldi	r26, 0x4E	; 78
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	ee e4       	ldi	r30, 0x4E	; 78
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	81 60       	ori	r24, 0x01	; 1
    13e2:	8c 93       	st	X, r24
	TCCR1B |=  (MASK_BIT << CS11);
    13e4:	ae e4       	ldi	r26, 0x4E	; 78
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	ee e4       	ldi	r30, 0x4E	; 78
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	82 60       	ori	r24, 0x02	; 2
    13f0:	8c 93       	st	X, r24
	TCCR1B &= ~(MASK_BIT << CS12);
    13f2:	ae e4       	ldi	r26, 0x4E	; 78
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	ee e4       	ldi	r30, 0x4E	; 78
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	8b 7f       	andi	r24, 0xFB	; 251
    13fe:	8c 93       	st	X, r24
	TCCR1B |=  (MASK_BIT << CS12);
	#else
	#error "Timer1 Prescaler has a wrong configuration"
	#endif
	
	ICU_enuEdgeDetect = Copy_enuEdgeState;
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	80 93 fe 01 	sts	0x01FE, r24
	if(Copy_enuEdgeState == FAILLING_DETECT)
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	88 23       	and	r24, r24
    140a:	41 f4       	brne	.+16     	; 0x141c <TIMER1_enuPrepareICU+0x68>
	{
		TCCR1B &= ~(MASK_BIT << ICES1);
    140c:	ae e4       	ldi	r26, 0x4E	; 78
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	ee e4       	ldi	r30, 0x4E	; 78
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	8f 7b       	andi	r24, 0xBF	; 191
    1418:	8c 93       	st	X, r24
    141a:	0a c0       	rjmp	.+20     	; 0x1430 <TIMER1_enuPrepareICU+0x7c>
	}
	else if (Copy_enuEdgeState == RISING_DETECT)
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	81 30       	cpi	r24, 0x01	; 1
    1420:	39 f4       	brne	.+14     	; 0x1430 <TIMER1_enuPrepareICU+0x7c>
	{
		TCCR1B |=  (MASK_BIT << ICES1);
    1422:	ae e4       	ldi	r26, 0x4E	; 78
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	ee e4       	ldi	r30, 0x4E	; 78
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	80 64       	ori	r24, 0x40	; 64
    142e:	8c 93       	st	X, r24
	}
	
	if(Copy_enuNoiseCancelerState == DISABLE_NOISE_CANCELER)
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	88 23       	and	r24, r24
    1434:	41 f4       	brne	.+16     	; 0x1446 <TIMER1_enuPrepareICU+0x92>
	{
		TCCR1B &= ~(MASK_BIT << ICNC1);
    1436:	ae e4       	ldi	r26, 0x4E	; 78
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	ee e4       	ldi	r30, 0x4E	; 78
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	8f 77       	andi	r24, 0x7F	; 127
    1442:	8c 93       	st	X, r24
    1444:	0a c0       	rjmp	.+20     	; 0x145a <TIMER1_enuPrepareICU+0xa6>
	}
	else if (Copy_enuNoiseCancelerState == ENABLE_NOISE_CANCELER)
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	39 f4       	brne	.+14     	; 0x145a <TIMER1_enuPrepareICU+0xa6>
	{
		TCCR1B |=  (MASK_BIT << ICNC1);
    144c:	ae e4       	ldi	r26, 0x4E	; 78
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	ee e4       	ldi	r30, 0x4E	; 78
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	80 68       	ori	r24, 0x80	; 128
    1458:	8c 93       	st	X, r24
	}

	/* put 0 at the registers as initial value */
	ICR1H = 0;
    145a:	e7 e4       	ldi	r30, 0x47	; 71
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	10 82       	st	Z, r1
	ICR1L = 0;
    1460:	e6 e4       	ldi	r30, 0x46	; 70
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	10 82       	st	Z, r1
	TCNT1H = 0;
    1466:	ed e4       	ldi	r30, 0x4D	; 77
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	10 82       	st	Z, r1
	TCNT1L = 0;
    146c:	ec e4       	ldi	r30, 0x4C	; 76
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	10 82       	st	Z, r1
	
	Local_enuErrorState = ES_OK;
    1472:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    1474:	89 81       	ldd	r24, Y+1	; 0x01
}
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <TIMER1_enuCalculateICUResults>:

ES_t TIMER1_enuCalculateICUResults(f32 *Copy_Pf32Frequency, f32 *Copy_Pf32DutyCycle)
{
    1482:	ef 92       	push	r14
    1484:	ff 92       	push	r15
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	29 97       	sbiw	r28, 0x09	; 9
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	9f 83       	std	Y+7, r25	; 0x07
    14a0:	8e 83       	std	Y+6, r24	; 0x06
    14a2:	79 87       	std	Y+9, r23	; 0x09
    14a4:	68 87       	std	Y+8, r22	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	8d 83       	std	Y+5, r24	; 0x05
	
	f32 Local_f32Time = 0;
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	a0 e0       	ldi	r26, 0x00	; 0
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	9a 83       	std	Y+2, r25	; 0x02
    14b6:	ab 83       	std	Y+3, r26	; 0x03
    14b8:	bc 83       	std	Y+4, r27	; 0x04

	if(Copy_Pf32DutyCycle != NULL && Copy_Pf32Frequency != NULL)
    14ba:	88 85       	ldd	r24, Y+8	; 0x08
    14bc:	99 85       	ldd	r25, Y+9	; 0x09
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <TIMER1_enuCalculateICUResults+0x42>
    14c2:	75 c0       	rjmp	.+234    	; 0x15ae <TIMER1_enuCalculateICUResults+0x12c>
    14c4:	8e 81       	ldd	r24, Y+6	; 0x06
    14c6:	9f 81       	ldd	r25, Y+7	; 0x07
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	09 f4       	brne	.+2      	; 0x14ce <TIMER1_enuCalculateICUResults+0x4c>
    14cc:	70 c0       	rjmp	.+224    	; 0x15ae <TIMER1_enuCalculateICUResults+0x12c>
	{
		if(ICU_enuState == Off)
    14ce:	80 91 ff 01 	lds	r24, 0x01FF
    14d2:	83 30       	cpi	r24, 0x03	; 3
    14d4:	09 f0       	breq	.+2      	; 0x14d8 <TIMER1_enuCalculateICUResults+0x56>
    14d6:	6d c0       	rjmp	.+218    	; 0x15b2 <TIMER1_enuCalculateICUResults+0x130>
		{
			*Copy_Pf32DutyCycle = (f32)(TimeOn * 100.0 / TimeTotal);
    14d8:	80 91 00 02 	lds	r24, 0x0200
    14dc:	90 91 01 02 	lds	r25, 0x0201
    14e0:	cc 01       	movw	r24, r24
    14e2:	a0 e0       	ldi	r26, 0x00	; 0
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	bc 01       	movw	r22, r24
    14e8:	cd 01       	movw	r24, r26
    14ea:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	bc 01       	movw	r22, r24
    14f4:	cd 01       	movw	r24, r26
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	48 ec       	ldi	r20, 0xC8	; 200
    14fc:	52 e4       	ldi	r21, 0x42	; 66
    14fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	7c 01       	movw	r14, r24
    1508:	8d 01       	movw	r16, r26
    150a:	80 91 02 02 	lds	r24, 0x0202
    150e:	90 91 03 02 	lds	r25, 0x0203
    1512:	cc 01       	movw	r24, r24
    1514:	a0 e0       	ldi	r26, 0x00	; 0
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	bc 01       	movw	r22, r24
    151a:	cd 01       	movw	r24, r26
    151c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1520:	9b 01       	movw	r18, r22
    1522:	ac 01       	movw	r20, r24
    1524:	c8 01       	movw	r24, r16
    1526:	b7 01       	movw	r22, r14
    1528:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	e8 85       	ldd	r30, Y+8	; 0x08
    1532:	f9 85       	ldd	r31, Y+9	; 0x09
    1534:	80 83       	st	Z, r24
    1536:	91 83       	std	Z+1, r25	; 0x01
    1538:	a2 83       	std	Z+2, r26	; 0x02
    153a:	b3 83       	std	Z+3, r27	; 0x03
			Local_f32Time = ((f32)((TimeTotal * TIMER1_PRES) / (F_SYSTEM * 1000.0)));
    153c:	80 91 02 02 	lds	r24, 0x0202
    1540:	90 91 03 02 	lds	r25, 0x0203
    1544:	00 24       	eor	r0, r0
    1546:	96 95       	lsr	r25
    1548:	87 95       	ror	r24
    154a:	07 94       	ror	r0
    154c:	96 95       	lsr	r25
    154e:	87 95       	ror	r24
    1550:	07 94       	ror	r0
    1552:	98 2f       	mov	r25, r24
    1554:	80 2d       	mov	r24, r0
    1556:	cc 01       	movw	r24, r24
    1558:	a0 e0       	ldi	r26, 0x00	; 0
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	bc 01       	movw	r22, r24
    155e:	cd 01       	movw	r24, r26
    1560:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	bc 01       	movw	r22, r24
    156a:	cd 01       	movw	r24, r26
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	34 e2       	ldi	r19, 0x24	; 36
    1570:	44 e7       	ldi	r20, 0x74	; 116
    1572:	59 e4       	ldi	r21, 0x49	; 73
    1574:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	89 83       	std	Y+1, r24	; 0x01
    157e:	9a 83       	std	Y+2, r25	; 0x02
    1580:	ab 83       	std	Y+3, r26	; 0x03
    1582:	bc 83       	std	Y+4, r27	; 0x04
			*Copy_Pf32Frequency = ((f32)(1.0 / Local_f32Time));
    1584:	60 e0       	ldi	r22, 0x00	; 0
    1586:	70 e0       	ldi	r23, 0x00	; 0
    1588:	80 e8       	ldi	r24, 0x80	; 128
    158a:	9f e3       	ldi	r25, 0x3F	; 63
    158c:	29 81       	ldd	r18, Y+1	; 0x01
    158e:	3a 81       	ldd	r19, Y+2	; 0x02
    1590:	4b 81       	ldd	r20, Y+3	; 0x03
    1592:	5c 81       	ldd	r21, Y+4	; 0x04
    1594:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	ee 81       	ldd	r30, Y+6	; 0x06
    159e:	ff 81       	ldd	r31, Y+7	; 0x07
    15a0:	80 83       	st	Z, r24
    15a2:	91 83       	std	Z+1, r25	; 0x01
    15a4:	a2 83       	std	Z+2, r26	; 0x02
    15a6:	b3 83       	std	Z+3, r27	; 0x03
			
			ICU_enuState = start;
    15a8:	10 92 ff 01 	sts	0x01FF, r1
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <TIMER1_enuCalculateICUResults+0x130>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    15ae:	82 e0       	ldi	r24, 0x02	; 2
    15b0:	8d 83       	std	Y+5, r24	; 0x05
	}

	return Local_enuErrorState;
    15b2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    15b4:	29 96       	adiw	r28, 0x09	; 9
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	f8 94       	cli
    15ba:	de bf       	out	0x3e, r29	; 62
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	cd bf       	out	0x3d, r28	; 61
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	1f 91       	pop	r17
    15c6:	0f 91       	pop	r16
    15c8:	ff 90       	pop	r15
    15ca:	ef 90       	pop	r14
    15cc:	08 95       	ret

000015ce <TIMER1_enuEnableInputCaptureUnitInterrupt>:


ES_t TIMER1_enuEnableInputCaptureUnitInterrupt(void)
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	0f 92       	push	r0
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	89 83       	std	Y+1, r24	; 0x01

	TIMSK |= (MASK_BIT << TICIE1);
    15dc:	a9 e5       	ldi	r26, 0x59	; 89
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e9 e5       	ldi	r30, 0x59	; 89
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	80 62       	ori	r24, 0x20	; 32
    15e8:	8c 93       	st	X, r24

	Local_enuErrorState = ES_OK;
    15ea:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ee:	0f 90       	pop	r0
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <__vector_6>:

ISR(VECT_TIMER1_ICU)
{
    15f6:	1f 92       	push	r1
    15f8:	0f 92       	push	r0
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	0f 92       	push	r0
    15fe:	11 24       	eor	r1, r1
    1600:	2f 93       	push	r18
    1602:	3f 93       	push	r19
    1604:	8f 93       	push	r24
    1606:	9f 93       	push	r25
    1608:	af 93       	push	r26
    160a:	bf 93       	push	r27
    160c:	ef 93       	push	r30
    160e:	ff 93       	push	r31
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	00 d0       	rcall	.+0      	; 0x1616 <__vector_6+0x20>
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
	if(ICU_enuState == start)
    161a:	80 91 ff 01 	lds	r24, 0x01FF
    161e:	88 23       	and	r24, r24
    1620:	89 f5       	brne	.+98     	; 0x1684 <__vector_6+0x8e>
	{
		/* put 0 at the registers as initial value */
		ICR1H = 0;
    1622:	e7 e4       	ldi	r30, 0x47	; 71
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	10 82       	st	Z, r1
		ICR1L = 0;
    1628:	e6 e4       	ldi	r30, 0x46	; 70
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	10 82       	st	Z, r1
		TCNT1H = 0;
    162e:	ed e4       	ldi	r30, 0x4D	; 77
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	10 82       	st	Z, r1
		TCNT1L = 0;
    1634:	ec e4       	ldi	r30, 0x4C	; 76
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	10 82       	st	Z, r1
		
		ICU_enuEdgeDetect = !ICU_enuEdgeDetect;
    163a:	80 91 fe 01 	lds	r24, 0x01FE
    163e:	1a 82       	std	Y+2, r1	; 0x02
    1640:	88 23       	and	r24, r24
    1642:	11 f4       	brne	.+4      	; 0x1648 <__vector_6+0x52>
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	8a 83       	std	Y+2, r24	; 0x02
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	80 93 fe 01 	sts	0x01FE, r24
		if(ICU_enuEdgeDetect == FAILLING_DETECT)
    164e:	80 91 fe 01 	lds	r24, 0x01FE
    1652:	88 23       	and	r24, r24
    1654:	41 f4       	brne	.+16     	; 0x1666 <__vector_6+0x70>
		{
			TCCR1B &= ~(MASK_BIT << ICES1);
    1656:	ae e4       	ldi	r26, 0x4E	; 78
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	ee e4       	ldi	r30, 0x4E	; 78
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	8f 7b       	andi	r24, 0xBF	; 191
    1662:	8c 93       	st	X, r24
    1664:	0b c0       	rjmp	.+22     	; 0x167c <__vector_6+0x86>
		}
		else if (ICU_enuEdgeDetect == RISING_DETECT)
    1666:	80 91 fe 01 	lds	r24, 0x01FE
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	39 f4       	brne	.+14     	; 0x167c <__vector_6+0x86>
		{
			TCCR1B |=  (MASK_BIT << ICES1);
    166e:	ae e4       	ldi	r26, 0x4E	; 78
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	ee e4       	ldi	r30, 0x4E	; 78
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	80 64       	ori	r24, 0x40	; 64
    167a:	8c 93       	st	X, r24
		}
		
		ICU_enuState = Ton;
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	80 93 ff 01 	sts	0x01FF, r24
    1682:	67 c0       	rjmp	.+206    	; 0x1752 <__vector_6+0x15c>
	}
	else if(ICU_enuState == Ton)
    1684:	80 91 ff 01 	lds	r24, 0x01FF
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	09 f0       	breq	.+2      	; 0x168e <__vector_6+0x98>
    168c:	40 c0       	rjmp	.+128    	; 0x170e <__vector_6+0x118>
	{
		TimeOn = ICR1L;
    168e:	e6 e4       	ldi	r30, 0x46	; 70
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	88 2f       	mov	r24, r24
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	90 93 01 02 	sts	0x0201, r25
    169c:	80 93 00 02 	sts	0x0200, r24
		TimeOn |= ((u16)(ICR1H << 8));
    16a0:	e7 e4       	ldi	r30, 0x47	; 71
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	88 2f       	mov	r24, r24
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	98 2f       	mov	r25, r24
    16ac:	88 27       	eor	r24, r24
    16ae:	9c 01       	movw	r18, r24
    16b0:	80 91 00 02 	lds	r24, 0x0200
    16b4:	90 91 01 02 	lds	r25, 0x0201
    16b8:	82 2b       	or	r24, r18
    16ba:	93 2b       	or	r25, r19
    16bc:	90 93 01 02 	sts	0x0201, r25
    16c0:	80 93 00 02 	sts	0x0200, r24
		
		ICU_enuEdgeDetect = !ICU_enuEdgeDetect;
    16c4:	80 91 fe 01 	lds	r24, 0x01FE
    16c8:	19 82       	std	Y+1, r1	; 0x01
    16ca:	88 23       	and	r24, r24
    16cc:	11 f4       	brne	.+4      	; 0x16d2 <__vector_6+0xdc>
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	89 83       	std	Y+1, r24	; 0x01
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	80 93 fe 01 	sts	0x01FE, r24
		if(ICU_enuEdgeDetect == FAILLING_DETECT)
    16d8:	80 91 fe 01 	lds	r24, 0x01FE
    16dc:	88 23       	and	r24, r24
    16de:	41 f4       	brne	.+16     	; 0x16f0 <__vector_6+0xfa>
		{
			TCCR1B &= ~(MASK_BIT << ICES1);
    16e0:	ae e4       	ldi	r26, 0x4E	; 78
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	ee e4       	ldi	r30, 0x4E	; 78
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	8f 7b       	andi	r24, 0xBF	; 191
    16ec:	8c 93       	st	X, r24
    16ee:	0b c0       	rjmp	.+22     	; 0x1706 <__vector_6+0x110>
		}
		else if (ICU_enuEdgeDetect == RISING_DETECT)
    16f0:	80 91 fe 01 	lds	r24, 0x01FE
    16f4:	81 30       	cpi	r24, 0x01	; 1
    16f6:	39 f4       	brne	.+14     	; 0x1706 <__vector_6+0x110>
		{
			TCCR1B |=  (MASK_BIT << ICES1);
    16f8:	ae e4       	ldi	r26, 0x4E	; 78
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	ee e4       	ldi	r30, 0x4E	; 78
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	80 64       	ori	r24, 0x40	; 64
    1704:	8c 93       	st	X, r24
		}
		
		ICU_enuState = Ttotal;
    1706:	82 e0       	ldi	r24, 0x02	; 2
    1708:	80 93 ff 01 	sts	0x01FF, r24
    170c:	22 c0       	rjmp	.+68     	; 0x1752 <__vector_6+0x15c>
	}
	else if(ICU_enuState == Ttotal)
    170e:	80 91 ff 01 	lds	r24, 0x01FF
    1712:	82 30       	cpi	r24, 0x02	; 2
    1714:	f1 f4       	brne	.+60     	; 0x1752 <__vector_6+0x15c>
	{
		TimeTotal = ICR1L;
    1716:	e6 e4       	ldi	r30, 0x46	; 70
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	88 2f       	mov	r24, r24
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	90 93 03 02 	sts	0x0203, r25
    1724:	80 93 02 02 	sts	0x0202, r24
		TimeTotal |= ((u16)(ICR1H << 8));
    1728:	e7 e4       	ldi	r30, 0x47	; 71
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	88 2f       	mov	r24, r24
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	98 2f       	mov	r25, r24
    1734:	88 27       	eor	r24, r24
    1736:	9c 01       	movw	r18, r24
    1738:	80 91 02 02 	lds	r24, 0x0202
    173c:	90 91 03 02 	lds	r25, 0x0203
    1740:	82 2b       	or	r24, r18
    1742:	93 2b       	or	r25, r19
    1744:	90 93 03 02 	sts	0x0203, r25
    1748:	80 93 02 02 	sts	0x0202, r24
		
		ICU_enuState = Off;
    174c:	83 e0       	ldi	r24, 0x03	; 3
    174e:	80 93 ff 01 	sts	0x01FF, r24
	}
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	ff 91       	pop	r31
    175c:	ef 91       	pop	r30
    175e:	bf 91       	pop	r27
    1760:	af 91       	pop	r26
    1762:	9f 91       	pop	r25
    1764:	8f 91       	pop	r24
    1766:	3f 91       	pop	r19
    1768:	2f 91       	pop	r18
    176a:	0f 90       	pop	r0
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	0f 90       	pop	r0
    1770:	1f 90       	pop	r1
    1772:	18 95       	reti

00001774 <TIMER0_enuInit>:
u8 TIMER0_PRELOAD = 0;
u32 TIMER0_NUM_OVF = 0;
f32 TIMER0_f32OC0Value = 0;

ES_t TIMER0_enuInit(void)
{
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	0f 92       	push	r0
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	89 83       	std	Y+1, r24	; 0x01
	
	/* Mask the two bits of Wave Generation Mode */
	TCCR0 &= WGM_MASK;
    1782:	a3 e5       	ldi	r26, 0x53	; 83
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e3 e5       	ldi	r30, 0x53	; 83
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	87 7b       	andi	r24, 0xB7	; 183
    178e:	8c 93       	st	X, r24
	
	#if TIMER0_MODE == OVF
	TCCR0 &= ~(MASK_BIT << WGM00);
    1790:	a3 e5       	ldi	r26, 0x53	; 83
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e3 e5       	ldi	r30, 0x53	; 83
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	8f 7b       	andi	r24, 0xBF	; 191
    179c:	8c 93       	st	X, r24
	TCCR0 &= ~(MASK_BIT << WGM01);
    179e:	a3 e5       	ldi	r26, 0x53	; 83
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e3 e5       	ldi	r30, 0x53	; 83
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	87 7f       	andi	r24, 0xF7	; 247
    17aa:	8c 93       	st	X, r24
	#else
	#error "Timer0 Mode has a wrong configuration"
	#endif
	
	/* Mask the three bits of Timer0 Prescaler */
	TCCR0 &= PRESCALER_MASK;
    17ac:	a3 e5       	ldi	r26, 0x53	; 83
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e3 e5       	ldi	r30, 0x53	; 83
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	88 7f       	andi	r24, 0xF8	; 248
    17b8:	8c 93       	st	X, r24
	#elif TIMER0_PRES == PRES_256
	TCCR0 &= ~(MASK_BIT << CS00);
	TCCR0 &= ~(MASK_BIT << CS01);
	TCCR0 |=  (MASK_BIT << CS02);
	#elif TIMER0_PRES == PRES_1024
	TCCR0 |=  (MASK_BIT << CS00);
    17ba:	a3 e5       	ldi	r26, 0x53	; 83
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e3 e5       	ldi	r30, 0x53	; 83
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	81 60       	ori	r24, 0x01	; 1
    17c6:	8c 93       	st	X, r24
	TCCR0 &= ~(MASK_BIT << CS01);
    17c8:	a3 e5       	ldi	r26, 0x53	; 83
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e3 e5       	ldi	r30, 0x53	; 83
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	8d 7f       	andi	r24, 0xFD	; 253
    17d4:	8c 93       	st	X, r24
	TCCR0 |=  (MASK_BIT << CS02);
    17d6:	a3 e5       	ldi	r26, 0x53	; 83
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e3 e5       	ldi	r30, 0x53	; 83
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	84 60       	ori	r24, 0x04	; 4
    17e2:	8c 93       	st	X, r24
	#else
	#error "Timer0 Prescaler has a wrong configuration"
	#endif
	
	/* Mask the two bits of Output Compare Pin (OC0) */
	TCCR0 &= COM_OC0_MASK;
    17e4:	a3 e5       	ldi	r26, 0x53	; 83
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e3 e5       	ldi	r30, 0x53	; 83
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	8f 7c       	andi	r24, 0xCF	; 207
    17f0:	8c 93       	st	X, r24
	
	#if OC0_MODE == DISCONNECTED
	TCCR0 &= ~(MASK_BIT << COM00);
    17f2:	a3 e5       	ldi	r26, 0x53	; 83
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e3 e5       	ldi	r30, 0x53	; 83
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	8f 7e       	andi	r24, 0xEF	; 239
    17fe:	8c 93       	st	X, r24
	TCCR0 &= ~(MASK_BIT << COM01);
    1800:	a3 e5       	ldi	r26, 0x53	; 83
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e3 e5       	ldi	r30, 0x53	; 83
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	8f 7d       	andi	r24, 0xDF	; 223
    180c:	8c 93       	st	X, r24
	TCCR0 |=  (MASK_BIT << COM01);
	#else
	#error "OC0 has a wrong configuration"
	#endif
	
	Local_enuErrorState = ES_OK;
    180e:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    1810:	89 81       	ldd	r24, Y+1	; 0x01
}
    1812:	0f 90       	pop	r0
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <TIMER0_enuDelayMilliSecondSyn>:

ES_t TIMER0_enuDelayMilliSecondSyn(u32 Copy_u32DelayTime_ms)
{
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	66 97       	sbiw	r28, 0x16	; 22
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	6b 8b       	std	Y+19, r22	; 0x13
    1830:	7c 8b       	std	Y+20, r23	; 0x14
    1832:	8d 8b       	std	Y+21, r24	; 0x15
    1834:	9e 8b       	std	Y+22, r25	; 0x16
	ES_t Local_enuErrorState = ES_NOK;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	8a 8b       	std	Y+18, r24	; 0x12
	
	f32 Local_f32TimeOverFlow = 256.0 * TIMER0_PRES / F_SYSTEM;
    183a:	8f e6       	ldi	r24, 0x6F	; 111
    183c:	92 e1       	ldi	r25, 0x12	; 18
    183e:	a3 e8       	ldi	r26, 0x83	; 131
    1840:	b3 e4       	ldi	r27, 0x43	; 67
    1842:	8e 87       	std	Y+14, r24	; 0x0e
    1844:	9f 87       	std	Y+15, r25	; 0x0f
    1846:	a8 8b       	std	Y+16, r26	; 0x10
    1848:	b9 8b       	std	Y+17, r27	; 0x11
	f32 Local_f32Num_OVF_FLOAT = (f32)Copy_u32DelayTime_ms / Local_f32TimeOverFlow;
    184a:	6b 89       	ldd	r22, Y+19	; 0x13
    184c:	7c 89       	ldd	r23, Y+20	; 0x14
    184e:	8d 89       	ldd	r24, Y+21	; 0x15
    1850:	9e 89       	ldd	r25, Y+22	; 0x16
    1852:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	bc 01       	movw	r22, r24
    185c:	cd 01       	movw	r24, r26
    185e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1860:	3f 85       	ldd	r19, Y+15	; 0x0f
    1862:	48 89       	ldd	r20, Y+16	; 0x10
    1864:	59 89       	ldd	r21, Y+17	; 0x11
    1866:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	8a 87       	std	Y+10, r24	; 0x0a
    1870:	9b 87       	std	Y+11, r25	; 0x0b
    1872:	ac 87       	std	Y+12, r26	; 0x0c
    1874:	bd 87       	std	Y+13, r27	; 0x0d
	
	if((Local_f32Num_OVF_FLOAT - (u32)Local_f32Num_OVF_FLOAT) != 0.0)
    1876:	6a 85       	ldd	r22, Y+10	; 0x0a
    1878:	7b 85       	ldd	r23, Y+11	; 0x0b
    187a:	8c 85       	ldd	r24, Y+12	; 0x0c
    187c:	9d 85       	ldd	r25, Y+13	; 0x0d
    187e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	bc 01       	movw	r22, r24
    1888:	cd 01       	movw	r24, r26
    188a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    188e:	9b 01       	movw	r18, r22
    1890:	ac 01       	movw	r20, r24
    1892:	6a 85       	ldd	r22, Y+10	; 0x0a
    1894:	7b 85       	ldd	r23, Y+11	; 0x0b
    1896:	8c 85       	ldd	r24, Y+12	; 0x0c
    1898:	9d 85       	ldd	r25, Y+13	; 0x0d
    189a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	bc 01       	movw	r22, r24
    18a4:	cd 01       	movw	r24, r26
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e0       	ldi	r20, 0x00	; 0
    18ac:	50 e0       	ldi	r21, 0x00	; 0
    18ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    18b2:	88 23       	and	r24, r24
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <TIMER0_enuDelayMilliSecondSyn+0x9e>
    18b6:	6f c0       	rjmp	.+222    	; 0x1996 <TIMER0_enuDelayMilliSecondSyn+0x17c>
	{
		u32 Local_u32Num_OVF_INT = (u32)Local_f32Num_OVF_FLOAT + 1;
    18b8:	6a 85       	ldd	r22, Y+10	; 0x0a
    18ba:	7b 85       	ldd	r23, Y+11	; 0x0b
    18bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    18be:	9d 85       	ldd	r25, Y+13	; 0x0d
    18c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	01 96       	adiw	r24, 0x01	; 1
    18ca:	a1 1d       	adc	r26, r1
    18cc:	b1 1d       	adc	r27, r1
    18ce:	8e 83       	std	Y+6, r24	; 0x06
    18d0:	9f 83       	std	Y+7, r25	; 0x07
    18d2:	a8 87       	std	Y+8, r26	; 0x08
    18d4:	b9 87       	std	Y+9, r27	; 0x09
		Local_f32Num_OVF_FLOAT = Local_f32Num_OVF_FLOAT - (u32)Local_f32Num_OVF_FLOAT;
    18d6:	6a 85       	ldd	r22, Y+10	; 0x0a
    18d8:	7b 85       	ldd	r23, Y+11	; 0x0b
    18da:	8c 85       	ldd	r24, Y+12	; 0x0c
    18dc:	9d 85       	ldd	r25, Y+13	; 0x0d
    18de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	bc 01       	movw	r22, r24
    18e8:	cd 01       	movw	r24, r26
    18ea:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    18ee:	9b 01       	movw	r18, r22
    18f0:	ac 01       	movw	r20, r24
    18f2:	6a 85       	ldd	r22, Y+10	; 0x0a
    18f4:	7b 85       	ldd	r23, Y+11	; 0x0b
    18f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    18f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    18fa:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	8a 87       	std	Y+10, r24	; 0x0a
    1904:	9b 87       	std	Y+11, r25	; 0x0b
    1906:	ac 87       	std	Y+12, r26	; 0x0c
    1908:	bd 87       	std	Y+13, r27	; 0x0d
		u8 Local_u32PreLoad = 256 - (256 * Local_f32Num_OVF_FLOAT);
    190a:	6a 85       	ldd	r22, Y+10	; 0x0a
    190c:	7b 85       	ldd	r23, Y+11	; 0x0b
    190e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1910:	9d 85       	ldd	r25, Y+13	; 0x0d
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	40 e8       	ldi	r20, 0x80	; 128
    1918:	53 ec       	ldi	r21, 0xC3	; 195
    191a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	bc 01       	movw	r22, r24
    1924:	cd 01       	movw	r24, r26
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e8       	ldi	r20, 0x80	; 128
    192c:	53 e4       	ldi	r21, 0x43	; 67
    192e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	bc 01       	movw	r22, r24
    1938:	cd 01       	movw	r24, r26
    193a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	8d 83       	std	Y+5, r24	; 0x05
		TCNT0 = Local_u32PreLoad;
    1944:	e2 e5       	ldi	r30, 0x52	; 82
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	8d 81       	ldd	r24, Y+5	; 0x05
    194a:	80 83       	st	Z, r24
    194c:	1b c0       	rjmp	.+54     	; 0x1984 <TIMER0_enuDelayMilliSecondSyn+0x16a>
		while(Local_u32Num_OVF_INT)
		{
			while(!((TIFR >> TOV0) & MASK_BIT));
    194e:	e8 e5       	ldi	r30, 0x58	; 88
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	88 2f       	mov	r24, r24
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	81 70       	andi	r24, 0x01	; 1
    195a:	90 70       	andi	r25, 0x00	; 0
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	b9 f3       	breq	.-18     	; 0x194e <TIMER0_enuDelayMilliSecondSyn+0x134>
			TIFR |= (MASK_BIT << TOV0);
    1960:	a8 e5       	ldi	r26, 0x58	; 88
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e8 e5       	ldi	r30, 0x58	; 88
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	81 60       	ori	r24, 0x01	; 1
    196c:	8c 93       	st	X, r24
			Local_u32Num_OVF_INT--;
    196e:	8e 81       	ldd	r24, Y+6	; 0x06
    1970:	9f 81       	ldd	r25, Y+7	; 0x07
    1972:	a8 85       	ldd	r26, Y+8	; 0x08
    1974:	b9 85       	ldd	r27, Y+9	; 0x09
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	a1 09       	sbc	r26, r1
    197a:	b1 09       	sbc	r27, r1
    197c:	8e 83       	std	Y+6, r24	; 0x06
    197e:	9f 83       	std	Y+7, r25	; 0x07
    1980:	a8 87       	std	Y+8, r26	; 0x08
    1982:	b9 87       	std	Y+9, r27	; 0x09
	{
		u32 Local_u32Num_OVF_INT = (u32)Local_f32Num_OVF_FLOAT + 1;
		Local_f32Num_OVF_FLOAT = Local_f32Num_OVF_FLOAT - (u32)Local_f32Num_OVF_FLOAT;
		u8 Local_u32PreLoad = 256 - (256 * Local_f32Num_OVF_FLOAT);
		TCNT0 = Local_u32PreLoad;
		while(Local_u32Num_OVF_INT)
    1984:	8e 81       	ldd	r24, Y+6	; 0x06
    1986:	9f 81       	ldd	r25, Y+7	; 0x07
    1988:	a8 85       	ldd	r26, Y+8	; 0x08
    198a:	b9 85       	ldd	r27, Y+9	; 0x09
    198c:	00 97       	sbiw	r24, 0x00	; 0
    198e:	a1 05       	cpc	r26, r1
    1990:	b1 05       	cpc	r27, r1
    1992:	e9 f6       	brne	.-70     	; 0x194e <TIMER0_enuDelayMilliSecondSyn+0x134>
    1994:	30 c0       	rjmp	.+96     	; 0x19f6 <TIMER0_enuDelayMilliSecondSyn+0x1dc>
			Local_u32Num_OVF_INT--;
		}	
	}
	else
	{
		u32 Local_u32Num_OVF_INT = (u32)Local_f32TimeOverFlow;
    1996:	6e 85       	ldd	r22, Y+14	; 0x0e
    1998:	7f 85       	ldd	r23, Y+15	; 0x0f
    199a:	88 89       	ldd	r24, Y+16	; 0x10
    199c:	99 89       	ldd	r25, Y+17	; 0x11
    199e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	89 83       	std	Y+1, r24	; 0x01
    19a8:	9a 83       	std	Y+2, r25	; 0x02
    19aa:	ab 83       	std	Y+3, r26	; 0x03
    19ac:	bc 83       	std	Y+4, r27	; 0x04
    19ae:	1b c0       	rjmp	.+54     	; 0x19e6 <TIMER0_enuDelayMilliSecondSyn+0x1cc>
		while(Local_u32Num_OVF_INT)
		{
			while(!((TIFR >> TOV0) & MASK_BIT));
    19b0:	e8 e5       	ldi	r30, 0x58	; 88
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	88 2f       	mov	r24, r24
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	81 70       	andi	r24, 0x01	; 1
    19bc:	90 70       	andi	r25, 0x00	; 0
    19be:	00 97       	sbiw	r24, 0x00	; 0
    19c0:	b9 f3       	breq	.-18     	; 0x19b0 <TIMER0_enuDelayMilliSecondSyn+0x196>
			TIFR |= (MASK_BIT << TOV0);
    19c2:	a8 e5       	ldi	r26, 0x58	; 88
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	e8 e5       	ldi	r30, 0x58	; 88
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	81 60       	ori	r24, 0x01	; 1
    19ce:	8c 93       	st	X, r24
			Local_u32Num_OVF_INT--;
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	9a 81       	ldd	r25, Y+2	; 0x02
    19d4:	ab 81       	ldd	r26, Y+3	; 0x03
    19d6:	bc 81       	ldd	r27, Y+4	; 0x04
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	a1 09       	sbc	r26, r1
    19dc:	b1 09       	sbc	r27, r1
    19de:	89 83       	std	Y+1, r24	; 0x01
    19e0:	9a 83       	std	Y+2, r25	; 0x02
    19e2:	ab 83       	std	Y+3, r26	; 0x03
    19e4:	bc 83       	std	Y+4, r27	; 0x04
		}	
	}
	else
	{
		u32 Local_u32Num_OVF_INT = (u32)Local_f32TimeOverFlow;
		while(Local_u32Num_OVF_INT)
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
    19e8:	9a 81       	ldd	r25, Y+2	; 0x02
    19ea:	ab 81       	ldd	r26, Y+3	; 0x03
    19ec:	bc 81       	ldd	r27, Y+4	; 0x04
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	a1 05       	cpc	r26, r1
    19f2:	b1 05       	cpc	r27, r1
    19f4:	e9 f6       	brne	.-70     	; 0x19b0 <TIMER0_enuDelayMilliSecondSyn+0x196>
			TIFR |= (MASK_BIT << TOV0);
			Local_u32Num_OVF_INT--;
		}
	}
	
	Local_enuErrorState = ES_OK;
    19f6:	1a 8a       	std	Y+18, r1	; 0x12
	return Local_enuErrorState;
    19f8:	8a 89       	ldd	r24, Y+18	; 0x12
}
    19fa:	66 96       	adiw	r28, 0x16	; 22
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	08 95       	ret

00001a0c <TIMER0_enuDelayMilliSecondASyn>:

ES_t TIMER0_enuDelayMilliSecondASyn(u32 Copy_u32DelayTime_ms, void (*Copy_PFunApp)(void *), void *Copy_PParameterApp)
{
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	66 97       	sbiw	r28, 0x16	; 22
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	6f 87       	std	Y+15, r22	; 0x0f
    1a22:	78 8b       	std	Y+16, r23	; 0x10
    1a24:	89 8b       	std	Y+17, r24	; 0x11
    1a26:	9a 8b       	std	Y+18, r25	; 0x12
    1a28:	5c 8b       	std	Y+20, r21	; 0x14
    1a2a:	4b 8b       	std	Y+19, r20	; 0x13
    1a2c:	3e 8b       	std	Y+22, r19	; 0x16
    1a2e:	2d 8b       	std	Y+21, r18	; 0x15
	ES_t Local_enuErrorState = ES_NOK;
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	8e 87       	std	Y+14, r24	; 0x0e
	
	TIMSK &= ~(MASK_BIT << TOIE0);
    1a34:	a9 e5       	ldi	r26, 0x59	; 89
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	e9 e5       	ldi	r30, 0x59	; 89
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	8e 7f       	andi	r24, 0xFE	; 254
    1a40:	8c 93       	st	X, r24
	
	f32 Local_f32TimeOverFlow = 256.0 * TIMER0_PRES / F_SYSTEM;
    1a42:	8f e6       	ldi	r24, 0x6F	; 111
    1a44:	92 e1       	ldi	r25, 0x12	; 18
    1a46:	a3 e8       	ldi	r26, 0x83	; 131
    1a48:	b3 e4       	ldi	r27, 0x43	; 67
    1a4a:	8a 87       	std	Y+10, r24	; 0x0a
    1a4c:	9b 87       	std	Y+11, r25	; 0x0b
    1a4e:	ac 87       	std	Y+12, r26	; 0x0c
    1a50:	bd 87       	std	Y+13, r27	; 0x0d
	f32 Local_f32Num_OVF_FLOAT = (f32)Copy_u32DelayTime_ms / Local_f32TimeOverFlow;
    1a52:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a54:	78 89       	ldd	r23, Y+16	; 0x10
    1a56:	89 89       	ldd	r24, Y+17	; 0x11
    1a58:	9a 89       	ldd	r25, Y+18	; 0x12
    1a5a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	bc 01       	movw	r22, r24
    1a64:	cd 01       	movw	r24, r26
    1a66:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a68:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a6a:	4c 85       	ldd	r20, Y+12	; 0x0c
    1a6c:	5d 85       	ldd	r21, Y+13	; 0x0d
    1a6e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	8e 83       	std	Y+6, r24	; 0x06
    1a78:	9f 83       	std	Y+7, r25	; 0x07
    1a7a:	a8 87       	std	Y+8, r26	; 0x08
    1a7c:	b9 87       	std	Y+9, r27	; 0x09
	
	if((Local_f32Num_OVF_FLOAT - (u32)Local_f32Num_OVF_FLOAT) != 0.0)
    1a7e:	6e 81       	ldd	r22, Y+6	; 0x06
    1a80:	7f 81       	ldd	r23, Y+7	; 0x07
    1a82:	88 85       	ldd	r24, Y+8	; 0x08
    1a84:	99 85       	ldd	r25, Y+9	; 0x09
    1a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	bc 01       	movw	r22, r24
    1a90:	cd 01       	movw	r24, r26
    1a92:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1a96:	9b 01       	movw	r18, r22
    1a98:	ac 01       	movw	r20, r24
    1a9a:	6e 81       	ldd	r22, Y+6	; 0x06
    1a9c:	7f 81       	ldd	r23, Y+7	; 0x07
    1a9e:	88 85       	ldd	r24, Y+8	; 0x08
    1aa0:	99 85       	ldd	r25, Y+9	; 0x09
    1aa2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	bc 01       	movw	r22, r24
    1aac:	cd 01       	movw	r24, r26
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e0       	ldi	r20, 0x00	; 0
    1ab4:	50 e0       	ldi	r21, 0x00	; 0
    1ab6:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    1aba:	88 23       	and	r24, r24
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <TIMER0_enuDelayMilliSecondASyn+0xb4>
    1abe:	5b c0       	rjmp	.+182    	; 0x1b76 <TIMER0_enuDelayMilliSecondASyn+0x16a>
	{
		u32 Local_u32Num_OVF_INT = (u32)Local_f32Num_OVF_FLOAT + 1;
    1ac0:	6e 81       	ldd	r22, Y+6	; 0x06
    1ac2:	7f 81       	ldd	r23, Y+7	; 0x07
    1ac4:	88 85       	ldd	r24, Y+8	; 0x08
    1ac6:	99 85       	ldd	r25, Y+9	; 0x09
    1ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	01 96       	adiw	r24, 0x01	; 1
    1ad2:	a1 1d       	adc	r26, r1
    1ad4:	b1 1d       	adc	r27, r1
    1ad6:	8a 83       	std	Y+2, r24	; 0x02
    1ad8:	9b 83       	std	Y+3, r25	; 0x03
    1ada:	ac 83       	std	Y+4, r26	; 0x04
    1adc:	bd 83       	std	Y+5, r27	; 0x05
		Local_f32Num_OVF_FLOAT = Local_f32Num_OVF_FLOAT - (u32)Local_f32Num_OVF_FLOAT;
    1ade:	6e 81       	ldd	r22, Y+6	; 0x06
    1ae0:	7f 81       	ldd	r23, Y+7	; 0x07
    1ae2:	88 85       	ldd	r24, Y+8	; 0x08
    1ae4:	99 85       	ldd	r25, Y+9	; 0x09
    1ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	bc 01       	movw	r22, r24
    1af0:	cd 01       	movw	r24, r26
    1af2:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1af6:	9b 01       	movw	r18, r22
    1af8:	ac 01       	movw	r20, r24
    1afa:	6e 81       	ldd	r22, Y+6	; 0x06
    1afc:	7f 81       	ldd	r23, Y+7	; 0x07
    1afe:	88 85       	ldd	r24, Y+8	; 0x08
    1b00:	99 85       	ldd	r25, Y+9	; 0x09
    1b02:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	8e 83       	std	Y+6, r24	; 0x06
    1b0c:	9f 83       	std	Y+7, r25	; 0x07
    1b0e:	a8 87       	std	Y+8, r26	; 0x08
    1b10:	b9 87       	std	Y+9, r27	; 0x09
		u8 Local_u32PreLoad = 256 - (256 * Local_f32Num_OVF_FLOAT);
    1b12:	6e 81       	ldd	r22, Y+6	; 0x06
    1b14:	7f 81       	ldd	r23, Y+7	; 0x07
    1b16:	88 85       	ldd	r24, Y+8	; 0x08
    1b18:	99 85       	ldd	r25, Y+9	; 0x09
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e8       	ldi	r20, 0x80	; 128
    1b20:	53 ec       	ldi	r21, 0xC3	; 195
    1b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	bc 01       	movw	r22, r24
    1b2c:	cd 01       	movw	r24, r26
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	40 e8       	ldi	r20, 0x80	; 128
    1b34:	53 e4       	ldi	r21, 0x43	; 67
    1b36:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	bc 01       	movw	r22, r24
    1b40:	cd 01       	movw	r24, r26
    1b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	89 83       	std	Y+1, r24	; 0x01
		TIMER0_NUM_OVF = Local_u32Num_OVF_INT;
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b50:	ac 81       	ldd	r26, Y+4	; 0x04
    1b52:	bd 81       	ldd	r27, Y+5	; 0x05
    1b54:	80 93 0d 02 	sts	0x020D, r24
    1b58:	90 93 0e 02 	sts	0x020E, r25
    1b5c:	a0 93 0f 02 	sts	0x020F, r26
    1b60:	b0 93 10 02 	sts	0x0210, r27
		TIMER0_PRELOAD = Local_u32PreLoad;
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	80 93 0c 02 	sts	0x020C, r24
		TCNT0 = Local_u32PreLoad;
    1b6a:	e2 e5       	ldi	r30, 0x52	; 82
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    1b72:	1e 86       	std	Y+14, r1	; 0x0e
    1b74:	11 c0       	rjmp	.+34     	; 0x1b98 <TIMER0_enuDelayMilliSecondASyn+0x18c>
	}
	else
	{
		TIMER0_NUM_OVF = (u32)Local_f32Num_OVF_FLOAT;
    1b76:	6e 81       	ldd	r22, Y+6	; 0x06
    1b78:	7f 81       	ldd	r23, Y+7	; 0x07
    1b7a:	88 85       	ldd	r24, Y+8	; 0x08
    1b7c:	99 85       	ldd	r25, Y+9	; 0x09
    1b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	80 93 0d 02 	sts	0x020D, r24
    1b8a:	90 93 0e 02 	sts	0x020E, r25
    1b8e:	a0 93 0f 02 	sts	0x020F, r26
    1b92:	b0 93 10 02 	sts	0x0210, r27
		Local_enuErrorState = ES_OK;
    1b96:	1e 86       	std	Y+14, r1	; 0x0e
	}
	
	if(Copy_PFunApp != NULL)
    1b98:	8b 89       	ldd	r24, Y+19	; 0x13
    1b9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	71 f0       	breq	.+28     	; 0x1bbc <TIMER0_enuDelayMilliSecondASyn+0x1b0>
	{
		TIMER0_PFunISRfun_OVF = Copy_PFunApp;
    1ba0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba4:	90 93 05 02 	sts	0x0205, r25
    1ba8:	80 93 04 02 	sts	0x0204, r24
		TIMER0_PvidISRparameter_OVF = Copy_PParameterApp;
    1bac:	8d 89       	ldd	r24, Y+21	; 0x15
    1bae:	9e 89       	ldd	r25, Y+22	; 0x16
    1bb0:	90 93 07 02 	sts	0x0207, r25
    1bb4:	80 93 06 02 	sts	0x0206, r24
		Local_enuErrorState = ES_OK;
    1bb8:	1e 86       	std	Y+14, r1	; 0x0e
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <TIMER0_enuDelayMilliSecondASyn+0x1b4>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1bbc:	82 e0       	ldi	r24, 0x02	; 2
    1bbe:	8e 87       	std	Y+14, r24	; 0x0e
	}
	
	TIMSK |= (MASK_BIT << TOIE0);
    1bc0:	a9 e5       	ldi	r26, 0x59	; 89
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	e9 e5       	ldi	r30, 0x59	; 89
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	81 60       	ori	r24, 0x01	; 1
    1bcc:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    1bce:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    1bd0:	66 96       	adiw	r28, 0x16	; 22
    1bd2:	0f b6       	in	r0, 0x3f	; 63
    1bd4:	f8 94       	cli
    1bd6:	de bf       	out	0x3e, r29	; 62
    1bd8:	0f be       	out	0x3f, r0	; 63
    1bda:	cd bf       	out	0x3d, r28	; 61
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <TIMER0_enuGeneratePWM>:

ES_t TIMER0_enuGeneratePWM(u8 Copy_u8DutyCycle)
{
    1be2:	0f 93       	push	r16
    1be4:	1f 93       	push	r17
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <TIMER0_enuGeneratePWM+0xa>
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	89 83       	std	Y+1, r24	; 0x01
	#else
	#error "OC0 has a wrong configuration"
	#endif
	#endif
	
	OCR0 = TIMER0_f32OC0Value;	
    1bf6:	0c e5       	ldi	r16, 0x5C	; 92
    1bf8:	10 e0       	ldi	r17, 0x00	; 0
    1bfa:	80 91 11 02 	lds	r24, 0x0211
    1bfe:	90 91 12 02 	lds	r25, 0x0212
    1c02:	a0 91 13 02 	lds	r26, 0x0213
    1c06:	b0 91 14 02 	lds	r27, 0x0214
    1c0a:	bc 01       	movw	r22, r24
    1c0c:	cd 01       	movw	r24, r26
    1c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	f8 01       	movw	r30, r16
    1c18:	80 83       	st	Z, r24
	
	return Local_enuErrorState;
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	cf 91       	pop	r28
    1c22:	df 91       	pop	r29
    1c24:	1f 91       	pop	r17
    1c26:	0f 91       	pop	r16
    1c28:	08 95       	ret

00001c2a <TIMER0_enuSetOutputCompareRegister>:

ES_t TIMER0_enuSetOutputCompareRegister(u8 Copy_u8OCRValue)
{
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	00 d0       	rcall	.+0      	; 0x1c30 <TIMER0_enuSetOutputCompareRegister+0x6>
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	89 83       	std	Y+1, r24	; 0x01
	
	OCR0 = Copy_u8OCRValue;
    1c3a:	ec e5       	ldi	r30, 0x5C	; 92
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	80 83       	st	Z, r24
	Local_enuErrorState = ES_OK;
    1c42:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <TIMER0_enuSetPreload>:

ES_t TIMER0_enuSetPreload(u8 Copy_u8PreloadValue)
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <TIMER0_enuSetPreload+0x6>
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	89 83       	std	Y+1, r24	; 0x01
	
	TCNT0 = Copy_u8PreloadValue;
    1c60:	e2 e5       	ldi	r30, 0x52	; 82
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	80 83       	st	Z, r24
	Local_enuErrorState = ES_OK;
    1c68:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret

00001c76 <TIMER0_enuSetCALLBACK_CTC>:

ES_t TIMER0_enuSetCALLBACK_CTC(void (*Copy_PFunApp)(void *), void *Copy_PParameterApp)
{
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	00 d0       	rcall	.+0      	; 0x1c7c <TIMER0_enuSetCALLBACK_CTC+0x6>
    1c7c:	00 d0       	rcall	.+0      	; 0x1c7e <TIMER0_enuSetCALLBACK_CTC+0x8>
    1c7e:	0f 92       	push	r0
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	9b 83       	std	Y+3, r25	; 0x03
    1c86:	8a 83       	std	Y+2, r24	; 0x02
    1c88:	7d 83       	std	Y+5, r23	; 0x05
    1c8a:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_PFunApp != NULL)
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	9b 81       	ldd	r25, Y+3	; 0x03
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	71 f0       	breq	.+28     	; 0x1cb4 <TIMER0_enuSetCALLBACK_CTC+0x3e>
	{
		TIMER0_PFunISRfun_CTC = Copy_PFunApp;
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c9c:	90 93 09 02 	sts	0x0209, r25
    1ca0:	80 93 08 02 	sts	0x0208, r24
		TIMER0_PvidISRparameter_CTC = Copy_PParameterApp;
    1ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca8:	90 93 0b 02 	sts	0x020B, r25
    1cac:	80 93 0a 02 	sts	0x020A, r24
		Local_enuErrorState = ES_OK;
    1cb0:	19 82       	std	Y+1, r1	; 0x01
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <TIMER0_enuSetCALLBACK_CTC+0x42>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1cb4:	82 e0       	ldi	r24, 0x02	; 2
    1cb6:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	cf 91       	pop	r28
    1cc6:	df 91       	pop	r29
    1cc8:	08 95       	ret

00001cca <TIMER0_enuEnableOVFInterrupt>:

ES_t TIMER0_enuEnableOVFInterrupt(void)
{
    1cca:	df 93       	push	r29
    1ccc:	cf 93       	push	r28
    1cce:	0f 92       	push	r0
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	89 83       	std	Y+1, r24	; 0x01
	
	TIMSK |= (MASK_BIT << TOIE0);
    1cd8:	a9 e5       	ldi	r26, 0x59	; 89
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	e9 e5       	ldi	r30, 0x59	; 89
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	81 60       	ori	r24, 0x01	; 1
    1ce4:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    1ce6:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cea:	0f 90       	pop	r0
    1cec:	cf 91       	pop	r28
    1cee:	df 91       	pop	r29
    1cf0:	08 95       	ret

00001cf2 <TIMER0_enuEnableCTCInterrupt>:

ES_t TIMER0_enuEnableCTCInterrupt(void)
{
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	0f 92       	push	r0
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	89 83       	std	Y+1, r24	; 0x01
	
	TIMSK |= (MASK_BIT << OCIE0);
    1d00:	a9 e5       	ldi	r26, 0x59	; 89
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e9 e5       	ldi	r30, 0x59	; 89
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	82 60       	ori	r24, 0x02	; 2
    1d0c:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    1d0e:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d12:	0f 90       	pop	r0
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <__vector_11>:

ISR(VECT_TIMER0_OVF)
{
    1d1a:	1f 92       	push	r1
    1d1c:	0f 92       	push	r0
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	0f 92       	push	r0
    1d22:	11 24       	eor	r1, r1
    1d24:	2f 93       	push	r18
    1d26:	3f 93       	push	r19
    1d28:	4f 93       	push	r20
    1d2a:	5f 93       	push	r21
    1d2c:	6f 93       	push	r22
    1d2e:	7f 93       	push	r23
    1d30:	8f 93       	push	r24
    1d32:	9f 93       	push	r25
    1d34:	af 93       	push	r26
    1d36:	bf 93       	push	r27
    1d38:	ef 93       	push	r30
    1d3a:	ff 93       	push	r31
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_PFunISRfun_OVF != NULL)
    1d44:	80 91 04 02 	lds	r24, 0x0204
    1d48:	90 91 05 02 	lds	r25, 0x0205
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <__vector_11+0x38>
    1d50:	3e c0       	rjmp	.+124    	; 0x1dce <__vector_11+0xb4>
	{
		static u32 Local_u32Counter = 0;
		Local_u32Counter++;
    1d52:	80 91 15 02 	lds	r24, 0x0215
    1d56:	90 91 16 02 	lds	r25, 0x0216
    1d5a:	a0 91 17 02 	lds	r26, 0x0217
    1d5e:	b0 91 18 02 	lds	r27, 0x0218
    1d62:	01 96       	adiw	r24, 0x01	; 1
    1d64:	a1 1d       	adc	r26, r1
    1d66:	b1 1d       	adc	r27, r1
    1d68:	80 93 15 02 	sts	0x0215, r24
    1d6c:	90 93 16 02 	sts	0x0216, r25
    1d70:	a0 93 17 02 	sts	0x0217, r26
    1d74:	b0 93 18 02 	sts	0x0218, r27
		if(Local_u32Counter == TIMER0_NUM_OVF)
    1d78:	20 91 15 02 	lds	r18, 0x0215
    1d7c:	30 91 16 02 	lds	r19, 0x0216
    1d80:	40 91 17 02 	lds	r20, 0x0217
    1d84:	50 91 18 02 	lds	r21, 0x0218
    1d88:	80 91 0d 02 	lds	r24, 0x020D
    1d8c:	90 91 0e 02 	lds	r25, 0x020E
    1d90:	a0 91 0f 02 	lds	r26, 0x020F
    1d94:	b0 91 10 02 	lds	r27, 0x0210
    1d98:	28 17       	cp	r18, r24
    1d9a:	39 07       	cpc	r19, r25
    1d9c:	4a 07       	cpc	r20, r26
    1d9e:	5b 07       	cpc	r21, r27
    1da0:	b1 f4       	brne	.+44     	; 0x1dce <__vector_11+0xb4>
		{
			TCNT0 = TIMER0_PRELOAD;
    1da2:	e2 e5       	ldi	r30, 0x52	; 82
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 91 0c 02 	lds	r24, 0x020C
    1daa:	80 83       	st	Z, r24
			TIMER0_PFunISRfun_OVF((void *)TIMER0_PvidISRparameter_OVF);
    1dac:	e0 91 04 02 	lds	r30, 0x0204
    1db0:	f0 91 05 02 	lds	r31, 0x0205
    1db4:	80 91 06 02 	lds	r24, 0x0206
    1db8:	90 91 07 02 	lds	r25, 0x0207
    1dbc:	09 95       	icall
			Local_u32Counter = 0;
    1dbe:	10 92 15 02 	sts	0x0215, r1
    1dc2:	10 92 16 02 	sts	0x0216, r1
    1dc6:	10 92 17 02 	sts	0x0217, r1
    1dca:	10 92 18 02 	sts	0x0218, r1
		}
	}
}
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	ff 91       	pop	r31
    1dd4:	ef 91       	pop	r30
    1dd6:	bf 91       	pop	r27
    1dd8:	af 91       	pop	r26
    1dda:	9f 91       	pop	r25
    1ddc:	8f 91       	pop	r24
    1dde:	7f 91       	pop	r23
    1de0:	6f 91       	pop	r22
    1de2:	5f 91       	pop	r21
    1de4:	4f 91       	pop	r20
    1de6:	3f 91       	pop	r19
    1de8:	2f 91       	pop	r18
    1dea:	0f 90       	pop	r0
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	0f 90       	pop	r0
    1df0:	1f 90       	pop	r1
    1df2:	18 95       	reti

00001df4 <__vector_10>:

ISR(VECT_TIMER0_CTC)
{
    1df4:	1f 92       	push	r1
    1df6:	0f 92       	push	r0
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	0f 92       	push	r0
    1dfc:	11 24       	eor	r1, r1
    1dfe:	2f 93       	push	r18
    1e00:	3f 93       	push	r19
    1e02:	4f 93       	push	r20
    1e04:	5f 93       	push	r21
    1e06:	6f 93       	push	r22
    1e08:	7f 93       	push	r23
    1e0a:	8f 93       	push	r24
    1e0c:	9f 93       	push	r25
    1e0e:	af 93       	push	r26
    1e10:	bf 93       	push	r27
    1e12:	ef 93       	push	r30
    1e14:	ff 93       	push	r31
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_PFunISRfun_CTC != NULL)
    1e1e:	80 91 08 02 	lds	r24, 0x0208
    1e22:	90 91 09 02 	lds	r25, 0x0209
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	49 f0       	breq	.+18     	; 0x1e3c <__vector_10+0x48>
	{
		TIMER0_PFunISRfun_CTC((void *)TIMER0_PvidISRparameter_CTC);
    1e2a:	e0 91 08 02 	lds	r30, 0x0208
    1e2e:	f0 91 09 02 	lds	r31, 0x0209
    1e32:	80 91 0a 02 	lds	r24, 0x020A
    1e36:	90 91 0b 02 	lds	r25, 0x020B
    1e3a:	09 95       	icall
	}
    1e3c:	cf 91       	pop	r28
    1e3e:	df 91       	pop	r29
    1e40:	ff 91       	pop	r31
    1e42:	ef 91       	pop	r30
    1e44:	bf 91       	pop	r27
    1e46:	af 91       	pop	r26
    1e48:	9f 91       	pop	r25
    1e4a:	8f 91       	pop	r24
    1e4c:	7f 91       	pop	r23
    1e4e:	6f 91       	pop	r22
    1e50:	5f 91       	pop	r21
    1e52:	4f 91       	pop	r20
    1e54:	3f 91       	pop	r19
    1e56:	2f 91       	pop	r18
    1e58:	0f 90       	pop	r0
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	0f 90       	pop	r0
    1e5e:	1f 90       	pop	r1
    1e60:	18 95       	reti

00001e62 <SPI_enuInit>:

volatile static void (* SPI_PappFunc)(void *) = NULL;
volatile static void *SPI_PappParameter = NULL;

ES_t SPI_enuInit()
{
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	0f 92       	push	r0
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	89 83       	std	Y+1, r24	; 0x01
	
	#if SPI_STATE == ENABLE_SPI
	SPCR |=  (MASK_BIT << SPE);
    1e70:	ad e2       	ldi	r26, 0x2D	; 45
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	ed e2       	ldi	r30, 0x2D	; 45
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	80 64       	ori	r24, 0x40	; 64
    1e7c:	8c 93       	st	X, r24
	#endif
	
	#if SPI_DORD == LSB_FIRST
	SPCR |=  (MASK_BIT << DORD);
	#elif SPI_DORD == MSB_FIRST
	SPCR &= ~(MASK_BIT << DORD);
    1e7e:	ad e2       	ldi	r26, 0x2D	; 45
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	ed e2       	ldi	r30, 0x2D	; 45
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	8f 7d       	andi	r24, 0xDF	; 223
    1e8a:	8c 93       	st	X, r24
	#else
	#error "SPI DATA ORDER has a wrong configuration"
	#endif
	
	#if SPI_MODE == MASTER
	SPCR |=  (MASK_BIT << MSTR);
    1e8c:	ad e2       	ldi	r26, 0x2D	; 45
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	ed e2       	ldi	r30, 0x2D	; 45
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	80 61       	ori	r24, 0x10	; 16
    1e98:	8c 93       	st	X, r24
	#endif
	
	#if SPI_CPOL == IDLE_HIGH
	SPCR |=  (MASK_BIT << CPOL);
	#elif SPI_CPOL == IDLE_LOW
	SPCR &= ~(MASK_BIT << CPOL);
    1e9a:	ad e2       	ldi	r26, 0x2D	; 45
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	ed e2       	ldi	r30, 0x2D	; 45
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	87 7f       	andi	r24, 0xF7	; 247
    1ea6:	8c 93       	st	X, r24
	#else
	#error "SPI CLOCK POLARITY has a wrong configuration"
	#endif
	
	#if SPI_CPHA == READ_FIRST
	SPCR &= ~(MASK_BIT << CPHA);
    1ea8:	ad e2       	ldi	r26, 0x2D	; 45
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	ed e2       	ldi	r30, 0x2D	; 45
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	8b 7f       	andi	r24, 0xFB	; 251
    1eb4:	8c 93       	st	X, r24
	#else
	#error "SPI CLOCK PHASE has a wrong configuration"
	#endif
	
	#if SPI_SPEED == NORMAL_SPEED
	SPSR &= ~(MASK_BIT << SPI2X);
    1eb6:	ae e2       	ldi	r26, 0x2E	; 46
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	ee e2       	ldi	r30, 0x2E	; 46
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	8e 7f       	andi	r24, 0xFE	; 254
    1ec2:	8c 93       	st	X, r24
		SPCR |=  (MASK_BIT << SPR1);
		#else
		#error "SPI FREQUENCY at 64 Prescaler has a wrong configuration"
		#endif
	#elif ((SPI_FREQUENCY == F_DIVIDED_128) && (SPI_SPEED == NORMAL_SPEED))
	SPCR |=  (MASK_BIT << SPR0);
    1ec4:	ad e2       	ldi	r26, 0x2D	; 45
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	ed e2       	ldi	r30, 0x2D	; 45
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	81 60       	ori	r24, 0x01	; 1
    1ed0:	8c 93       	st	X, r24
	SPCR |=  (MASK_BIT << SPR1);
    1ed2:	ad e2       	ldi	r26, 0x2D	; 45
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	ed e2       	ldi	r30, 0x2D	; 45
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	82 60       	ori	r24, 0x02	; 2
    1ede:	8c 93       	st	X, r24
	SPCR |=  (MASK_BIT << SPR1);
	#else
	#error "SPI FREQUENCY has a wrong configuration"
	#endif
	
	Local_enuErrorState = ES_OK;
    1ee0:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ee4:	0f 90       	pop	r0
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <SPI_enuSendData_Master>:


ES_t SPI_enuSendData_Master(u8 Copy_u8MasterData, u8 *Copy_pu8SlaveData)
{
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	00 d0       	rcall	.+0      	; 0x1ef2 <SPI_enuSendData_Master+0x6>
    1ef2:	00 d0       	rcall	.+0      	; 0x1ef4 <SPI_enuSendData_Master+0x8>
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
    1ef8:	8a 83       	std	Y+2, r24	; 0x02
    1efa:	7c 83       	std	Y+4, r23	; 0x04
    1efc:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_pu8SlaveData != NULL)
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	9c 81       	ldd	r25, Y+4	; 0x04
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	89 f0       	breq	.+34     	; 0x1f2c <SPI_enuSendData_Master+0x40>
	{
		SPDR = Copy_u8MasterData;
    1f0a:	ef e2       	ldi	r30, 0x2F	; 47
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	80 83       	st	Z, r24
		while(!((SPSR >> SPIF) & 1));
    1f12:	ee e2       	ldi	r30, 0x2E	; 46
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	88 23       	and	r24, r24
    1f1a:	dc f7       	brge	.-10     	; 0x1f12 <SPI_enuSendData_Master+0x26>
		*Copy_pu8SlaveData = SPDR;
    1f1c:	ef e2       	ldi	r30, 0x2F	; 47
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	eb 81       	ldd	r30, Y+3	; 0x03
    1f24:	fc 81       	ldd	r31, Y+4	; 0x04
    1f26:	80 83       	st	Z, r24
		
		Local_enuErrorState = ES_OK;	
    1f28:	19 82       	std	Y+1, r1	; 0x01
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <SPI_enuSendData_Master+0x44>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1f2c:	82 e0       	ldi	r24, 0x02	; 2
    1f2e:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	08 95       	ret

00001f40 <SPI_enuReceiveData_Master>:

ES_t SPI_enuReceiveData_Master(u8 *Copy_pu8MasterData, u8 Copy_u8SlaveData)
{
    1f40:	df 93       	push	r29
    1f42:	cf 93       	push	r28
    1f44:	00 d0       	rcall	.+0      	; 0x1f46 <SPI_enuReceiveData_Master+0x6>
    1f46:	00 d0       	rcall	.+0      	; 0x1f48 <SPI_enuReceiveData_Master+0x8>
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
    1f4c:	9b 83       	std	Y+3, r25	; 0x03
    1f4e:	8a 83       	std	Y+2, r24	; 0x02
    1f50:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_pu8MasterData != NULL)
    1f56:	8a 81       	ldd	r24, Y+2	; 0x02
    1f58:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5a:	00 97       	sbiw	r24, 0x00	; 0
    1f5c:	89 f0       	breq	.+34     	; 0x1f80 <SPI_enuReceiveData_Master+0x40>
	{
		SPDR = Copy_u8SlaveData;
    1f5e:	ef e2       	ldi	r30, 0x2F	; 47
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	8c 81       	ldd	r24, Y+4	; 0x04
    1f64:	80 83       	st	Z, r24
		while(!((SPSR >> SPIF) & 1));
    1f66:	ee e2       	ldi	r30, 0x2E	; 46
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	88 23       	and	r24, r24
    1f6e:	dc f7       	brge	.-10     	; 0x1f66 <SPI_enuReceiveData_Master+0x26>
		*Copy_pu8MasterData = SPDR;
    1f70:	ef e2       	ldi	r30, 0x2F	; 47
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	ea 81       	ldd	r30, Y+2	; 0x02
    1f78:	fb 81       	ldd	r31, Y+3	; 0x03
    1f7a:	80 83       	st	Z, r24
		
		Local_enuErrorState = ES_OK;
    1f7c:	19 82       	std	Y+1, r1	; 0x01
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <SPI_enuReceiveData_Master+0x44>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1f80:	82 e0       	ldi	r24, 0x02	; 2
    1f82:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	cf 91       	pop	r28
    1f90:	df 91       	pop	r29
    1f92:	08 95       	ret

00001f94 <SPI_enuEnableInterrupt>:

ES_t SPI_enuEnableInterrupt()
{
    1f94:	df 93       	push	r29
    1f96:	cf 93       	push	r28
    1f98:	0f 92       	push	r0
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	89 83       	std	Y+1, r24	; 0x01
	
	SPCR |= (MASK_BIT << SPIE);
    1fa2:	ad e2       	ldi	r26, 0x2D	; 45
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	ed e2       	ldi	r30, 0x2D	; 45
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	80 68       	ori	r24, 0x80	; 128
    1fae:	8c 93       	st	X, r24
	
	Local_enuErrorState = ES_OK;
    1fb0:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fb4:	0f 90       	pop	r0
    1fb6:	cf 91       	pop	r28
    1fb8:	df 91       	pop	r29
    1fba:	08 95       	ret

00001fbc <SPI_enuCallBackFunc>:


ES_t SPI_enuCallBackFunc(void (* Copy_pAppFunc)(void *), void *Copy_pAppParameter)
{
    1fbc:	df 93       	push	r29
    1fbe:	cf 93       	push	r28
    1fc0:	00 d0       	rcall	.+0      	; 0x1fc2 <SPI_enuCallBackFunc+0x6>
    1fc2:	00 d0       	rcall	.+0      	; 0x1fc4 <SPI_enuCallBackFunc+0x8>
    1fc4:	0f 92       	push	r0
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	9b 83       	std	Y+3, r25	; 0x03
    1fcc:	8a 83       	std	Y+2, r24	; 0x02
    1fce:	7d 83       	std	Y+5, r23	; 0x05
    1fd0:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_pAppFunc != NULL)
    1fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd8:	9b 81       	ldd	r25, Y+3	; 0x03
    1fda:	00 97       	sbiw	r24, 0x00	; 0
    1fdc:	71 f0       	breq	.+28     	; 0x1ffa <SPI_enuCallBackFunc+0x3e>
	{
		SPI_PappFunc = Copy_pAppFunc;
    1fde:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe2:	90 93 1a 02 	sts	0x021A, r25
    1fe6:	80 93 19 02 	sts	0x0219, r24
		SPI_PappParameter = Copy_pAppParameter;
    1fea:	8c 81       	ldd	r24, Y+4	; 0x04
    1fec:	9d 81       	ldd	r25, Y+5	; 0x05
    1fee:	90 93 1c 02 	sts	0x021C, r25
    1ff2:	80 93 1b 02 	sts	0x021B, r24
		Local_enuErrorState = ES_OK;
    1ff6:	19 82       	std	Y+1, r1	; 0x01
    1ff8:	02 c0       	rjmp	.+4      	; 0x1ffe <SPI_enuCallBackFunc+0x42>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1ffa:	82 e0       	ldi	r24, 0x02	; 2
    1ffc:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	08 95       	ret

00002010 <VECT_SPI>:

ISR(VECT_SPI)
{
    2010:	1f 92       	push	r1
    2012:	0f 92       	push	r0
    2014:	0f b6       	in	r0, 0x3f	; 63
    2016:	0f 92       	push	r0
    2018:	11 24       	eor	r1, r1
    201a:	2f 93       	push	r18
    201c:	3f 93       	push	r19
    201e:	4f 93       	push	r20
    2020:	5f 93       	push	r21
    2022:	6f 93       	push	r22
    2024:	7f 93       	push	r23
    2026:	8f 93       	push	r24
    2028:	9f 93       	push	r25
    202a:	af 93       	push	r26
    202c:	bf 93       	push	r27
    202e:	ef 93       	push	r30
    2030:	ff 93       	push	r31
    2032:	df 93       	push	r29
    2034:	cf 93       	push	r28
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
	if(SPI_PappFunc != NULL)
    203a:	80 91 19 02 	lds	r24, 0x0219
    203e:	90 91 1a 02 	lds	r25, 0x021A
    2042:	00 97       	sbiw	r24, 0x00	; 0
    2044:	49 f0       	breq	.+18     	; 0x2058 <VECT_SPI+0x48>
	{
		SPI_PappFunc((void *)SPI_PappParameter);
    2046:	e0 91 19 02 	lds	r30, 0x0219
    204a:	f0 91 1a 02 	lds	r31, 0x021A
    204e:	80 91 1b 02 	lds	r24, 0x021B
    2052:	90 91 1c 02 	lds	r25, 0x021C
    2056:	09 95       	icall
	}
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	ff 91       	pop	r31
    205e:	ef 91       	pop	r30
    2060:	bf 91       	pop	r27
    2062:	af 91       	pop	r26
    2064:	9f 91       	pop	r25
    2066:	8f 91       	pop	r24
    2068:	7f 91       	pop	r23
    206a:	6f 91       	pop	r22
    206c:	5f 91       	pop	r21
    206e:	4f 91       	pop	r20
    2070:	3f 91       	pop	r19
    2072:	2f 91       	pop	r18
    2074:	0f 90       	pop	r0
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	0f 90       	pop	r0
    207a:	1f 90       	pop	r1
    207c:	18 95       	reti

0000207e <I2C_enuInitMaster>:
#include "I2C_Priv.h"



ES_t I2C_enuInitMaster	(void)
{
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	0f 92       	push	r0
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	89 83       	std	Y+1, r24	; 0x01

#if I2C_PRESCALER == I2C_PRESCALER_1
	SET_I2C_PRESCALER_1;
    208c:	a1 e2       	ldi	r26, 0x21	; 33
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	e1 e2       	ldi	r30, 0x21	; 33
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	8c 7f       	andi	r24, 0xFC	; 252
    2098:	8c 93       	st	X, r24
	SET_TWBR_VALUE;
    209a:	e0 e2       	ldi	r30, 0x20	; 32
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	8f ed       	ldi	r24, 0xDF	; 223
    20a0:	80 83       	st	Z, r24
	SET_I2C_ENABLE;
    20a2:	a6 e5       	ldi	r26, 0x56	; 86
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	e6 e5       	ldi	r30, 0x56	; 86
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	84 60       	ori	r24, 0x04	; 4
    20ae:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    20b0:	19 82       	std	Y+1, r1	; 0x01

#else
#error"The Selection of I2C_PRESCALER is Wrong"
#endif

	return Local_enuErrorState ;
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    20b4:	0f 90       	pop	r0
    20b6:	cf 91       	pop	r28
    20b8:	df 91       	pop	r29
    20ba:	08 95       	ret

000020bc <I2C_enuInitSlave>:



ES_t I2C_enuInitSlave	(void)
{
    20bc:	df 93       	push	r29
    20be:	cf 93       	push	r28
    20c0:	0f 92       	push	r0
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	89 83       	std	Y+1, r24	; 0x01

	SET_ECU_ADDRESS;
    20ca:	e2 e2       	ldi	r30, 0x22	; 34
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	82 e0       	ldi	r24, 0x02	; 2
    20d0:	80 83       	st	Z, r24
	SET_I2C_ENABLE;
    20d2:	a6 e5       	ldi	r26, 0x56	; 86
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	e6 e5       	ldi	r30, 0x56	; 86
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	84 60       	ori	r24, 0x04	; 4
    20de:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    20e0:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    20e4:	0f 90       	pop	r0
    20e6:	cf 91       	pop	r28
    20e8:	df 91       	pop	r29
    20ea:	08 95       	ret

000020ec <I2C_enuStartCondition>:



ES_t I2C_enuStartCondition	(void)
{
    20ec:	df 93       	push	r29
    20ee:	cf 93       	push	r28
    20f0:	0f 92       	push	r0
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	89 83       	std	Y+1, r24	; 0x01

	SET_START_CONDITION;
    20fa:	a6 e5       	ldi	r26, 0x56	; 86
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e6 e5       	ldi	r30, 0x56	; 86
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	80 62       	ori	r24, 0x20	; 32
    2106:	8c 93       	st	X, r24
	CLEAR_FLAG;
    2108:	a6 e5       	ldi	r26, 0x56	; 86
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e6 e5       	ldi	r30, 0x56	; 86
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	80 68       	ori	r24, 0x80	; 128
    2114:	8c 93       	st	X, r24
	while (WAIT_FLAG);
    2116:	e6 e5       	ldi	r30, 0x56	; 86
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	88 23       	and	r24, r24
    211e:	dc f7       	brge	.-10     	; 0x2116 <I2C_enuStartCondition+0x2a>
	if (START_CONDITION_TRANSMIT)
    2120:	e1 e2       	ldi	r30, 0x21	; 33
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	88 2f       	mov	r24, r24
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	88 7f       	andi	r24, 0xF8	; 248
    212c:	90 70       	andi	r25, 0x00	; 0
    212e:	88 30       	cpi	r24, 0x08	; 8
    2130:	91 05       	cpc	r25, r1
    2132:	09 f4       	brne	.+2      	; 0x2136 <I2C_enuStartCondition+0x4a>
		Local_enuErrorState = ES_OK;
    2134:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    2136:	89 81       	ldd	r24, Y+1	; 0x01
}
    2138:	0f 90       	pop	r0
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <I2C_enuRepeatStartCondition>:




ES_t I2C_enuRepeatStartCondition	(void)
{
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	0f 92       	push	r0
    2146:	cd b7       	in	r28, 0x3d	; 61
    2148:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	89 83       	std	Y+1, r24	; 0x01

	SET_START_CONDITION;
    214e:	a6 e5       	ldi	r26, 0x56	; 86
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	e6 e5       	ldi	r30, 0x56	; 86
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	80 62       	ori	r24, 0x20	; 32
    215a:	8c 93       	st	X, r24
	CLEAR_FLAG;
    215c:	a6 e5       	ldi	r26, 0x56	; 86
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	e6 e5       	ldi	r30, 0x56	; 86
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	80 68       	ori	r24, 0x80	; 128
    2168:	8c 93       	st	X, r24
	while (WAIT_FLAG);
    216a:	e6 e5       	ldi	r30, 0x56	; 86
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	88 23       	and	r24, r24
    2172:	dc f7       	brge	.-10     	; 0x216a <I2C_enuRepeatStartCondition+0x2a>
	if (REPEAT_START_CONDITION_TRANSMIT)
    2174:	e1 e2       	ldi	r30, 0x21	; 33
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	88 2f       	mov	r24, r24
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	88 7f       	andi	r24, 0xF8	; 248
    2180:	90 70       	andi	r25, 0x00	; 0
    2182:	80 31       	cpi	r24, 0x10	; 16
    2184:	91 05       	cpc	r25, r1
    2186:	09 f4       	brne	.+2      	; 0x218a <I2C_enuRepeatStartCondition+0x4a>
		Local_enuErrorState = ES_OK;
    2188:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    218a:	89 81       	ldd	r24, Y+1	; 0x01
}
    218c:	0f 90       	pop	r0
    218e:	cf 91       	pop	r28
    2190:	df 91       	pop	r29
    2192:	08 95       	ret

00002194 <I2C_enuStopCondition>:



ES_t I2C_enuStopCondition	(void)
{
    2194:	df 93       	push	r29
    2196:	cf 93       	push	r28
    2198:	0f 92       	push	r0
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	89 83       	std	Y+1, r24	; 0x01

	SET_STOP_CONDITION;
    21a2:	a6 e5       	ldi	r26, 0x56	; 86
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e6 e5       	ldi	r30, 0x56	; 86
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	80 61       	ori	r24, 0x10	; 16
    21ae:	8c 93       	st	X, r24
	CLEAR_FLAG;
    21b0:	a6 e5       	ldi	r26, 0x56	; 86
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e6 e5       	ldi	r30, 0x56	; 86
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	80 68       	ori	r24, 0x80	; 128
    21bc:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    21be:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    21c2:	0f 90       	pop	r0
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <I2C_enuSendSlaveAddress>:



ES_t I2C_enuSendSlaveAddress	(u8 Copy_u8SlaveAddress , u8 Copy_u8Action)
{
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	00 d0       	rcall	.+0      	; 0x21d0 <I2C_enuSendSlaveAddress+0x6>
    21d0:	0f 92       	push	r0
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
    21d6:	8a 83       	std	Y+2, r24	; 0x02
    21d8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	89 83       	std	Y+1, r24	; 0x01


	if (Copy_u8SlaveAddress <= I2C_MAX_SLAVES) SET_SLAVE_ADDRESS(Copy_u8SlaveAddress);
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	88 23       	and	r24, r24
    21e2:	2c f0       	brlt	.+10     	; 0x21ee <I2C_enuSendSlaveAddress+0x24>
    21e4:	e3 e2       	ldi	r30, 0x23	; 35
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	88 0f       	add	r24, r24
    21ec:	80 83       	st	Z, r24
	if (Copy_u8Action <= I2C_ONE)              SET_SLAVE_ACTION (Copy_u8Action);
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	82 30       	cpi	r24, 0x02	; 2
    21f2:	40 f4       	brcc	.+16     	; 0x2204 <I2C_enuSendSlaveAddress+0x3a>
    21f4:	a3 e2       	ldi	r26, 0x23	; 35
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	e3 e2       	ldi	r30, 0x23	; 35
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	90 81       	ld	r25, Z
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	89 2b       	or	r24, r25
    2202:	8c 93       	st	X, r24
	CLEAR_START_CONDITION;
    2204:	a6 e5       	ldi	r26, 0x56	; 86
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	e6 e5       	ldi	r30, 0x56	; 86
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	8f 7d       	andi	r24, 0xDF	; 223
    2210:	8c 93       	st	X, r24
	CLEAR_FLAG;
    2212:	a6 e5       	ldi	r26, 0x56	; 86
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e6 e5       	ldi	r30, 0x56	; 86
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	80 68       	ori	r24, 0x80	; 128
    221e:	8c 93       	st	X, r24
	while (WAIT_FLAG);
    2220:	e6 e5       	ldi	r30, 0x56	; 86
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	88 23       	and	r24, r24
    2228:	dc f7       	brge	.-10     	; 0x2220 <I2C_enuSendSlaveAddress+0x56>
	if (SLA_WRITE_TRANSMIT)
    222a:	e1 e2       	ldi	r30, 0x21	; 33
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	88 2f       	mov	r24, r24
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	88 7f       	andi	r24, 0xF8	; 248
    2236:	90 70       	andi	r25, 0x00	; 0
    2238:	88 31       	cpi	r24, 0x18	; 24
    223a:	91 05       	cpc	r25, r1
    223c:	11 f4       	brne	.+4      	; 0x2242 <I2C_enuSendSlaveAddress+0x78>
		Local_enuErrorState = ES_OK;
    223e:	19 82       	std	Y+1, r1	; 0x01
    2240:	0b c0       	rjmp	.+22     	; 0x2258 <I2C_enuSendSlaveAddress+0x8e>

	else if (SLA_READ_TRANSMIT)
    2242:	e1 e2       	ldi	r30, 0x21	; 33
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	88 2f       	mov	r24, r24
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	88 7f       	andi	r24, 0xF8	; 248
    224e:	90 70       	andi	r25, 0x00	; 0
    2250:	80 34       	cpi	r24, 0x40	; 64
    2252:	91 05       	cpc	r25, r1
    2254:	09 f4       	brne	.+2      	; 0x2258 <I2C_enuSendSlaveAddress+0x8e>
		Local_enuErrorState = ES_OK;
    2256:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    2258:	89 81       	ldd	r24, Y+1	; 0x01
}
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	0f 90       	pop	r0
    2260:	cf 91       	pop	r28
    2262:	df 91       	pop	r29
    2264:	08 95       	ret

00002266 <I2C_enuSlaveCheckItsAdress>:



ES_t I2C_enuSlaveCheckItsAdress (void)
{
    2266:	df 93       	push	r29
    2268:	cf 93       	push	r28
    226a:	0f 92       	push	r0
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	89 83       	std	Y+1, r24	; 0x01

	SET_ACKNOWLEDGE;
    2274:	a6 e5       	ldi	r26, 0x56	; 86
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e6 e5       	ldi	r30, 0x56	; 86
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	80 64       	ori	r24, 0x40	; 64
    2280:	8c 93       	st	X, r24
	CLEAR_FLAG;
    2282:	a6 e5       	ldi	r26, 0x56	; 86
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	e6 e5       	ldi	r30, 0x56	; 86
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	80 68       	ori	r24, 0x80	; 128
    228e:	8c 93       	st	X, r24
	while (WAIT_FLAG);
    2290:	e6 e5       	ldi	r30, 0x56	; 86
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	80 81       	ld	r24, Z
    2296:	88 23       	and	r24, r24
    2298:	dc f7       	brge	.-10     	; 0x2290 <I2C_enuSlaveCheckItsAdress+0x2a>
	if (SLAVE_WRITE_RECIEVE_ADDRESS)
    229a:	e1 e2       	ldi	r30, 0x21	; 33
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	88 2f       	mov	r24, r24
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	88 7f       	andi	r24, 0xF8	; 248
    22a6:	90 70       	andi	r25, 0x00	; 0
    22a8:	80 36       	cpi	r24, 0x60	; 96
    22aa:	91 05       	cpc	r25, r1
    22ac:	11 f4       	brne	.+4      	; 0x22b2 <I2C_enuSlaveCheckItsAdress+0x4c>
		Local_enuErrorState = ES_OK;
    22ae:	19 82       	std	Y+1, r1	; 0x01
    22b0:	0b c0       	rjmp	.+22     	; 0x22c8 <I2C_enuSlaveCheckItsAdress+0x62>
	else if(SLAVE_READ_RECIEVE_ADDRESS)
    22b2:	e1 e2       	ldi	r30, 0x21	; 33
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	88 2f       	mov	r24, r24
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	88 7f       	andi	r24, 0xF8	; 248
    22be:	90 70       	andi	r25, 0x00	; 0
    22c0:	88 3a       	cpi	r24, 0xA8	; 168
    22c2:	91 05       	cpc	r25, r1
    22c4:	09 f4       	brne	.+2      	; 0x22c8 <I2C_enuSlaveCheckItsAdress+0x62>
		Local_enuErrorState = ES_OK;
    22c6:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    22ca:	0f 90       	pop	r0
    22cc:	cf 91       	pop	r28
    22ce:	df 91       	pop	r29
    22d0:	08 95       	ret

000022d2 <I2C_enuMasterSendData>:




ES_t I2C_enuMasterSendData	(u8 Copy_u8Data)
{
    22d2:	df 93       	push	r29
    22d4:	cf 93       	push	r28
    22d6:	00 d0       	rcall	.+0      	; 0x22d8 <I2C_enuMasterSendData+0x6>
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
    22dc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	89 83       	std	Y+1, r24	; 0x01

	TWDR=Copy_u8Data;
    22e2:	e3 e2       	ldi	r30, 0x23	; 35
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	8a 81       	ldd	r24, Y+2	; 0x02
    22e8:	80 83       	st	Z, r24
	CLEAR_FLAG;
    22ea:	a6 e5       	ldi	r26, 0x56	; 86
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	e6 e5       	ldi	r30, 0x56	; 86
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	80 68       	ori	r24, 0x80	; 128
    22f6:	8c 93       	st	X, r24
	while (WAIT_FLAG);
    22f8:	e6 e5       	ldi	r30, 0x56	; 86
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	88 23       	and	r24, r24
    2300:	dc f7       	brge	.-10     	; 0x22f8 <I2C_enuMasterSendData+0x26>
	if (MASTER_DATA_TRANSMIT)
    2302:	e1 e2       	ldi	r30, 0x21	; 33
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	88 2f       	mov	r24, r24
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	88 7f       	andi	r24, 0xF8	; 248
    230e:	90 70       	andi	r25, 0x00	; 0
    2310:	88 32       	cpi	r24, 0x28	; 40
    2312:	91 05       	cpc	r25, r1
    2314:	09 f4       	brne	.+2      	; 0x2318 <I2C_enuMasterSendData+0x46>
		Local_enuErrorState = ES_OK;
    2316:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    2318:	89 81       	ldd	r24, Y+1	; 0x01
}
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	08 95       	ret

00002324 <I2C_enuSlaveRecieveData>:


ES_t I2C_enuSlaveRecieveData	(u8 * Copy_Pu8Data)
{
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	00 d0       	rcall	.+0      	; 0x232a <I2C_enuSlaveRecieveData+0x6>
    232a:	0f 92       	push	r0
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	9b 83       	std	Y+3, r25	; 0x03
    2332:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	89 83       	std	Y+1, r24	; 0x01

	CLEAR_FLAG;
    2338:	a6 e5       	ldi	r26, 0x56	; 86
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	e6 e5       	ldi	r30, 0x56	; 86
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	80 68       	ori	r24, 0x80	; 128
    2344:	8c 93       	st	X, r24
	while (WAIT_FLAG);
    2346:	e6 e5       	ldi	r30, 0x56	; 86
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	88 23       	and	r24, r24
    234e:	dc f7       	brge	.-10     	; 0x2346 <I2C_enuSlaveRecieveData+0x22>
	if (SLAVE_DATA_RECIEVED)
    2350:	e1 e2       	ldi	r30, 0x21	; 33
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	88 2f       	mov	r24, r24
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	88 7f       	andi	r24, 0xF8	; 248
    235c:	90 70       	andi	r25, 0x00	; 0
    235e:	80 38       	cpi	r24, 0x80	; 128
    2360:	91 05       	cpc	r25, r1
    2362:	39 f4       	brne	.+14     	; 0x2372 <I2C_enuSlaveRecieveData+0x4e>
	{
		*Copy_Pu8Data=TWDR; //RECIEVE_DATA
    2364:	e3 e2       	ldi	r30, 0x23	; 35
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	ea 81       	ldd	r30, Y+2	; 0x02
    236c:	fb 81       	ldd	r31, Y+3	; 0x03
    236e:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    2370:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
    2372:	89 81       	ldd	r24, Y+1	; 0x01
}
    2374:	0f 90       	pop	r0
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <GIE_enuGloable_Interrupt_Enable>:
#include "../../LIB/Error_States.h"

#include "GIE_priv.h"

ES_t GIE_enuGloable_Interrupt_Enable(void)
{
    2380:	df 93       	push	r29
    2382:	cf 93       	push	r28
    2384:	0f 92       	push	r0
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	89 83       	std	Y+1, r24	; 0x01
	
	SREG &= ~(MASK_BIT << GIE_I);
    238e:	af e5       	ldi	r26, 0x5F	; 95
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	ef e5       	ldi	r30, 0x5F	; 95
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	8f 77       	andi	r24, 0x7F	; 127
    239a:	8c 93       	st	X, r24
	SREG |= (MASK_BIT << GIE_I);
    239c:	af e5       	ldi	r26, 0x5F	; 95
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	ef e5       	ldi	r30, 0x5F	; 95
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	80 68       	ori	r24, 0x80	; 128
    23a8:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    23aa:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    23ae:	0f 90       	pop	r0
    23b0:	cf 91       	pop	r28
    23b2:	df 91       	pop	r29
    23b4:	08 95       	ret

000023b6 <GIE_enuGloable_Interrupt_Disable>:

ES_t GIE_enuGloable_Interrupt_Disable(void)
{
    23b6:	df 93       	push	r29
    23b8:	cf 93       	push	r28
    23ba:	0f 92       	push	r0
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	89 83       	std	Y+1, r24	; 0x01
	
	SREG &= ~(MASK_BIT << GIE_I);
    23c4:	af e5       	ldi	r26, 0x5F	; 95
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	ef e5       	ldi	r30, 0x5F	; 95
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	8f 77       	andi	r24, 0x7F	; 127
    23d0:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    23d2:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
    23d6:	0f 90       	pop	r0
    23d8:	cf 91       	pop	r28
    23da:	df 91       	pop	r29
    23dc:	08 95       	ret

000023de <EXTI_enuInit>:
/* array of pointers to the parameters of the function that will be executed when the interrupt is happen */
static volatile void *EXTI_APvidGenericParameters[MAX_NUM_EXTI] = {NULL, NULL, NULL};
	

ES_t EXTI_enuInit(EXTI_Configuration_t *Copy_PEXTI_Config)
{
    23de:	df 93       	push	r29
    23e0:	cf 93       	push	r28
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	2c 97       	sbiw	r28, 0x0c	; 12
    23e8:	0f b6       	in	r0, 0x3f	; 63
    23ea:	f8 94       	cli
    23ec:	de bf       	out	0x3e, r29	; 62
    23ee:	0f be       	out	0x3f, r0	; 63
    23f0:	cd bf       	out	0x3d, r28	; 61
    23f2:	9c 83       	std	Y+4, r25	; 0x04
    23f4:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	8a 83       	std	Y+2, r24	; 0x02
	
	if(Copy_PEXTI_Config != NULL)
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	9c 81       	ldd	r25, Y+4	; 0x04
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	09 f4       	brne	.+2      	; 0x2404 <EXTI_enuInit+0x26>
    2402:	7d c1       	rjmp	.+762    	; 0x26fe <EXTI_enuInit+0x320>
	{
		u8 Local_u8Iterator = 0;
    2404:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8Iterator = 0; Local_u8Iterator < MAX_NUM_EXTI; Local_u8Iterator++)
    2406:	19 82       	std	Y+1, r1	; 0x01
    2408:	75 c1       	rjmp	.+746    	; 0x26f4 <EXTI_enuInit+0x316>
		{
			switch(Copy_PEXTI_Config[Local_u8Iterator].EXTI_id)
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	28 2f       	mov	r18, r24
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	c9 01       	movw	r24, r18
    2412:	88 0f       	add	r24, r24
    2414:	99 1f       	adc	r25, r25
    2416:	28 0f       	add	r18, r24
    2418:	39 1f       	adc	r19, r25
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	9c 81       	ldd	r25, Y+4	; 0x04
    241e:	fc 01       	movw	r30, r24
    2420:	e2 0f       	add	r30, r18
    2422:	f3 1f       	adc	r31, r19
    2424:	80 81       	ld	r24, Z
    2426:	28 2f       	mov	r18, r24
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	3c 87       	std	Y+12, r19	; 0x0c
    242c:	2b 87       	std	Y+11, r18	; 0x0b
    242e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2430:	9c 85       	ldd	r25, Y+12	; 0x0c
    2432:	81 30       	cpi	r24, 0x01	; 1
    2434:	91 05       	cpc	r25, r1
    2436:	09 f4       	brne	.+2      	; 0x243a <EXTI_enuInit+0x5c>
    2438:	8e c0       	rjmp	.+284    	; 0x2556 <EXTI_enuInit+0x178>
    243a:	2b 85       	ldd	r18, Y+11	; 0x0b
    243c:	3c 85       	ldd	r19, Y+12	; 0x0c
    243e:	22 30       	cpi	r18, 0x02	; 2
    2440:	31 05       	cpc	r19, r1
    2442:	09 f4       	brne	.+2      	; 0x2446 <EXTI_enuInit+0x68>
    2444:	0b c1       	rjmp	.+534    	; 0x265c <EXTI_enuInit+0x27e>
    2446:	8b 85       	ldd	r24, Y+11	; 0x0b
    2448:	9c 85       	ldd	r25, Y+12	; 0x0c
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	09 f0       	breq	.+2      	; 0x2450 <EXTI_enuInit+0x72>
    244e:	4d c1       	rjmp	.+666    	; 0x26ea <EXTI_enuInit+0x30c>
			{
				case EXTI0:
				if(Copy_PEXTI_Config[Local_u8Iterator].EXTI_state == ENABLED)
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	28 2f       	mov	r18, r24
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	c9 01       	movw	r24, r18
    2458:	88 0f       	add	r24, r24
    245a:	99 1f       	adc	r25, r25
    245c:	28 0f       	add	r18, r24
    245e:	39 1f       	adc	r19, r25
    2460:	8b 81       	ldd	r24, Y+3	; 0x03
    2462:	9c 81       	ldd	r25, Y+4	; 0x04
    2464:	fc 01       	movw	r30, r24
    2466:	e2 0f       	add	r30, r18
    2468:	f3 1f       	adc	r31, r19
    246a:	81 81       	ldd	r24, Z+1	; 0x01
    246c:	88 23       	and	r24, r24
    246e:	09 f0       	breq	.+2      	; 0x2472 <EXTI_enuInit+0x94>
    2470:	3e c1       	rjmp	.+636    	; 0x26ee <EXTI_enuInit+0x310>
				{
					//Masking the 2 bits --> ISC00, ISC01
					MCUCR &= ~(3 << 0);
    2472:	a5 e5       	ldi	r26, 0x55	; 85
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	e5 e5       	ldi	r30, 0x55	; 85
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	80 81       	ld	r24, Z
    247c:	8c 7f       	andi	r24, 0xFC	; 252
    247e:	8c 93       	st	X, r24
					switch(Copy_PEXTI_Config[Local_u8Iterator].EXTI_control_state)
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	28 2f       	mov	r18, r24
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	c9 01       	movw	r24, r18
    2488:	88 0f       	add	r24, r24
    248a:	99 1f       	adc	r25, r25
    248c:	28 0f       	add	r18, r24
    248e:	39 1f       	adc	r19, r25
    2490:	8b 81       	ldd	r24, Y+3	; 0x03
    2492:	9c 81       	ldd	r25, Y+4	; 0x04
    2494:	fc 01       	movw	r30, r24
    2496:	e2 0f       	add	r30, r18
    2498:	f3 1f       	adc	r31, r19
    249a:	82 81       	ldd	r24, Z+2	; 0x02
    249c:	28 2f       	mov	r18, r24
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	3a 87       	std	Y+10, r19	; 0x0a
    24a2:	29 87       	std	Y+9, r18	; 0x09
    24a4:	89 85       	ldd	r24, Y+9	; 0x09
    24a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a8:	81 30       	cpi	r24, 0x01	; 1
    24aa:	91 05       	cpc	r25, r1
    24ac:	21 f1       	breq	.+72     	; 0x24f6 <EXTI_enuInit+0x118>
    24ae:	29 85       	ldd	r18, Y+9	; 0x09
    24b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    24b2:	22 30       	cpi	r18, 0x02	; 2
    24b4:	31 05       	cpc	r19, r1
    24b6:	2c f4       	brge	.+10     	; 0x24c2 <EXTI_enuInit+0xe4>
    24b8:	89 85       	ldd	r24, Y+9	; 0x09
    24ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    24bc:	00 97       	sbiw	r24, 0x00	; 0
    24be:	61 f0       	breq	.+24     	; 0x24d8 <EXTI_enuInit+0xfa>
    24c0:	47 c0       	rjmp	.+142    	; 0x2550 <EXTI_enuInit+0x172>
    24c2:	29 85       	ldd	r18, Y+9	; 0x09
    24c4:	3a 85       	ldd	r19, Y+10	; 0x0a
    24c6:	22 30       	cpi	r18, 0x02	; 2
    24c8:	31 05       	cpc	r19, r1
    24ca:	21 f1       	breq	.+72     	; 0x2514 <EXTI_enuInit+0x136>
    24cc:	89 85       	ldd	r24, Y+9	; 0x09
    24ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d0:	83 30       	cpi	r24, 0x03	; 3
    24d2:	91 05       	cpc	r25, r1
    24d4:	71 f1       	breq	.+92     	; 0x2532 <EXTI_enuInit+0x154>
    24d6:	3c c0       	rjmp	.+120    	; 0x2550 <EXTI_enuInit+0x172>
					{
						case LOW_LEVEL:
						MCUCR &= ~(MASK_BIT << ISC00);
    24d8:	a5 e5       	ldi	r26, 0x55	; 85
    24da:	b0 e0       	ldi	r27, 0x00	; 0
    24dc:	e5 e5       	ldi	r30, 0x55	; 85
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	80 81       	ld	r24, Z
    24e2:	8e 7f       	andi	r24, 0xFE	; 254
    24e4:	8c 93       	st	X, r24
						MCUCR &= ~(MASK_BIT << ISC01);
    24e6:	a5 e5       	ldi	r26, 0x55	; 85
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	e5 e5       	ldi	r30, 0x55	; 85
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	8d 7f       	andi	r24, 0xFD	; 253
    24f2:	8c 93       	st	X, r24
    24f4:	fc c0       	rjmp	.+504    	; 0x26ee <EXTI_enuInit+0x310>
						break;
						
						case LOGICAL:
						MCUCR |= (MASK_BIT << ISC00);
    24f6:	a5 e5       	ldi	r26, 0x55	; 85
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	e5 e5       	ldi	r30, 0x55	; 85
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	81 60       	ori	r24, 0x01	; 1
    2502:	8c 93       	st	X, r24
						MCUCR &= ~(MASK_BIT << ISC01);
    2504:	a5 e5       	ldi	r26, 0x55	; 85
    2506:	b0 e0       	ldi	r27, 0x00	; 0
    2508:	e5 e5       	ldi	r30, 0x55	; 85
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	80 81       	ld	r24, Z
    250e:	8d 7f       	andi	r24, 0xFD	; 253
    2510:	8c 93       	st	X, r24
    2512:	ed c0       	rjmp	.+474    	; 0x26ee <EXTI_enuInit+0x310>
						break;
						
						case FAILLING:
						MCUCR &= ~(MASK_BIT << ISC00);
    2514:	a5 e5       	ldi	r26, 0x55	; 85
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	e5 e5       	ldi	r30, 0x55	; 85
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	8e 7f       	andi	r24, 0xFE	; 254
    2520:	8c 93       	st	X, r24
						MCUCR |= (MASK_BIT << ISC01);
    2522:	a5 e5       	ldi	r26, 0x55	; 85
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	e5 e5       	ldi	r30, 0x55	; 85
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	82 60       	ori	r24, 0x02	; 2
    252e:	8c 93       	st	X, r24
    2530:	de c0       	rjmp	.+444    	; 0x26ee <EXTI_enuInit+0x310>
						break;
						
						case RISING:
						MCUCR |= (MASK_BIT << ISC00);
    2532:	a5 e5       	ldi	r26, 0x55	; 85
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	e5 e5       	ldi	r30, 0x55	; 85
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	81 60       	ori	r24, 0x01	; 1
    253e:	8c 93       	st	X, r24
						MCUCR |= (MASK_BIT << ISC01);
    2540:	a5 e5       	ldi	r26, 0x55	; 85
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	e5 e5       	ldi	r30, 0x55	; 85
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	82 60       	ori	r24, 0x02	; 2
    254c:	8c 93       	st	X, r24
    254e:	cf c0       	rjmp	.+414    	; 0x26ee <EXTI_enuInit+0x310>
						break;
						
						default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
    2550:	83 e0       	ldi	r24, 0x03	; 3
    2552:	8a 83       	std	Y+2, r24	; 0x02
    2554:	cc c0       	rjmp	.+408    	; 0x26ee <EXTI_enuInit+0x310>
					}
				}
				break;
				
				case EXTI1:
				if(Copy_PEXTI_Config[Local_u8Iterator].EXTI_state == ENABLED)
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	28 2f       	mov	r18, r24
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	c9 01       	movw	r24, r18
    255e:	88 0f       	add	r24, r24
    2560:	99 1f       	adc	r25, r25
    2562:	28 0f       	add	r18, r24
    2564:	39 1f       	adc	r19, r25
    2566:	8b 81       	ldd	r24, Y+3	; 0x03
    2568:	9c 81       	ldd	r25, Y+4	; 0x04
    256a:	fc 01       	movw	r30, r24
    256c:	e2 0f       	add	r30, r18
    256e:	f3 1f       	adc	r31, r19
    2570:	81 81       	ldd	r24, Z+1	; 0x01
    2572:	88 23       	and	r24, r24
    2574:	09 f0       	breq	.+2      	; 0x2578 <EXTI_enuInit+0x19a>
    2576:	bb c0       	rjmp	.+374    	; 0x26ee <EXTI_enuInit+0x310>
				{
					//Masking the 2 bits --> ISC10, ISC11
					MCUCR &= ~(3 << 2);
    2578:	a5 e5       	ldi	r26, 0x55	; 85
    257a:	b0 e0       	ldi	r27, 0x00	; 0
    257c:	e5 e5       	ldi	r30, 0x55	; 85
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	80 81       	ld	r24, Z
    2582:	83 7f       	andi	r24, 0xF3	; 243
    2584:	8c 93       	st	X, r24
					switch(Copy_PEXTI_Config[Local_u8Iterator].EXTI_control_state)
    2586:	89 81       	ldd	r24, Y+1	; 0x01
    2588:	28 2f       	mov	r18, r24
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	c9 01       	movw	r24, r18
    258e:	88 0f       	add	r24, r24
    2590:	99 1f       	adc	r25, r25
    2592:	28 0f       	add	r18, r24
    2594:	39 1f       	adc	r19, r25
    2596:	8b 81       	ldd	r24, Y+3	; 0x03
    2598:	9c 81       	ldd	r25, Y+4	; 0x04
    259a:	fc 01       	movw	r30, r24
    259c:	e2 0f       	add	r30, r18
    259e:	f3 1f       	adc	r31, r19
    25a0:	82 81       	ldd	r24, Z+2	; 0x02
    25a2:	28 2f       	mov	r18, r24
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	38 87       	std	Y+8, r19	; 0x08
    25a8:	2f 83       	std	Y+7, r18	; 0x07
    25aa:	8f 81       	ldd	r24, Y+7	; 0x07
    25ac:	98 85       	ldd	r25, Y+8	; 0x08
    25ae:	81 30       	cpi	r24, 0x01	; 1
    25b0:	91 05       	cpc	r25, r1
    25b2:	21 f1       	breq	.+72     	; 0x25fc <EXTI_enuInit+0x21e>
    25b4:	2f 81       	ldd	r18, Y+7	; 0x07
    25b6:	38 85       	ldd	r19, Y+8	; 0x08
    25b8:	22 30       	cpi	r18, 0x02	; 2
    25ba:	31 05       	cpc	r19, r1
    25bc:	2c f4       	brge	.+10     	; 0x25c8 <EXTI_enuInit+0x1ea>
    25be:	8f 81       	ldd	r24, Y+7	; 0x07
    25c0:	98 85       	ldd	r25, Y+8	; 0x08
    25c2:	00 97       	sbiw	r24, 0x00	; 0
    25c4:	61 f0       	breq	.+24     	; 0x25de <EXTI_enuInit+0x200>
    25c6:	47 c0       	rjmp	.+142    	; 0x2656 <EXTI_enuInit+0x278>
    25c8:	2f 81       	ldd	r18, Y+7	; 0x07
    25ca:	38 85       	ldd	r19, Y+8	; 0x08
    25cc:	22 30       	cpi	r18, 0x02	; 2
    25ce:	31 05       	cpc	r19, r1
    25d0:	21 f1       	breq	.+72     	; 0x261a <EXTI_enuInit+0x23c>
    25d2:	8f 81       	ldd	r24, Y+7	; 0x07
    25d4:	98 85       	ldd	r25, Y+8	; 0x08
    25d6:	83 30       	cpi	r24, 0x03	; 3
    25d8:	91 05       	cpc	r25, r1
    25da:	71 f1       	breq	.+92     	; 0x2638 <EXTI_enuInit+0x25a>
    25dc:	3c c0       	rjmp	.+120    	; 0x2656 <EXTI_enuInit+0x278>
					{
						case LOW_LEVEL:
						MCUCR &= ~(MASK_BIT << ISC10);
    25de:	a5 e5       	ldi	r26, 0x55	; 85
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	e5 e5       	ldi	r30, 0x55	; 85
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	8b 7f       	andi	r24, 0xFB	; 251
    25ea:	8c 93       	st	X, r24
						MCUCR &= ~(MASK_BIT << ISC11);
    25ec:	a5 e5       	ldi	r26, 0x55	; 85
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	e5 e5       	ldi	r30, 0x55	; 85
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	87 7f       	andi	r24, 0xF7	; 247
    25f8:	8c 93       	st	X, r24
    25fa:	79 c0       	rjmp	.+242    	; 0x26ee <EXTI_enuInit+0x310>
						break;
						
						case LOGICAL:
						MCUCR |= (MASK_BIT << ISC10);
    25fc:	a5 e5       	ldi	r26, 0x55	; 85
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	e5 e5       	ldi	r30, 0x55	; 85
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	84 60       	ori	r24, 0x04	; 4
    2608:	8c 93       	st	X, r24
						MCUCR &= ~(MASK_BIT << ISC11);
    260a:	a5 e5       	ldi	r26, 0x55	; 85
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	e5 e5       	ldi	r30, 0x55	; 85
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	87 7f       	andi	r24, 0xF7	; 247
    2616:	8c 93       	st	X, r24
    2618:	6a c0       	rjmp	.+212    	; 0x26ee <EXTI_enuInit+0x310>
						break;
						
						case FAILLING:
						MCUCR &= ~(MASK_BIT << ISC10);
    261a:	a5 e5       	ldi	r26, 0x55	; 85
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	e5 e5       	ldi	r30, 0x55	; 85
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	8b 7f       	andi	r24, 0xFB	; 251
    2626:	8c 93       	st	X, r24
						MCUCR |= (MASK_BIT << ISC11);
    2628:	a5 e5       	ldi	r26, 0x55	; 85
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	e5 e5       	ldi	r30, 0x55	; 85
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	88 60       	ori	r24, 0x08	; 8
    2634:	8c 93       	st	X, r24
    2636:	5b c0       	rjmp	.+182    	; 0x26ee <EXTI_enuInit+0x310>
						break;
						
						case RISING:
						MCUCR |= (MASK_BIT << ISC10);
    2638:	a5 e5       	ldi	r26, 0x55	; 85
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	e5 e5       	ldi	r30, 0x55	; 85
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 81       	ld	r24, Z
    2642:	84 60       	ori	r24, 0x04	; 4
    2644:	8c 93       	st	X, r24
						MCUCR |= (MASK_BIT << ISC11);
    2646:	a5 e5       	ldi	r26, 0x55	; 85
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	e5 e5       	ldi	r30, 0x55	; 85
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	80 81       	ld	r24, Z
    2650:	88 60       	ori	r24, 0x08	; 8
    2652:	8c 93       	st	X, r24
    2654:	4c c0       	rjmp	.+152    	; 0x26ee <EXTI_enuInit+0x310>
						break;
						
						default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
    2656:	83 e0       	ldi	r24, 0x03	; 3
    2658:	8a 83       	std	Y+2, r24	; 0x02
    265a:	49 c0       	rjmp	.+146    	; 0x26ee <EXTI_enuInit+0x310>
					}
				}
				break;
				
				case EXTI2:
				if(Copy_PEXTI_Config[Local_u8Iterator].EXTI_state == ENABLED)
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	28 2f       	mov	r18, r24
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	c9 01       	movw	r24, r18
    2664:	88 0f       	add	r24, r24
    2666:	99 1f       	adc	r25, r25
    2668:	28 0f       	add	r18, r24
    266a:	39 1f       	adc	r19, r25
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	9c 81       	ldd	r25, Y+4	; 0x04
    2670:	fc 01       	movw	r30, r24
    2672:	e2 0f       	add	r30, r18
    2674:	f3 1f       	adc	r31, r19
    2676:	81 81       	ldd	r24, Z+1	; 0x01
    2678:	88 23       	and	r24, r24
    267a:	c9 f5       	brne	.+114    	; 0x26ee <EXTI_enuInit+0x310>
				{
					//Masking the bit --> ISC2
					MCUCSR &= ~(1 << 6);
    267c:	a4 e5       	ldi	r26, 0x54	; 84
    267e:	b0 e0       	ldi	r27, 0x00	; 0
    2680:	e4 e5       	ldi	r30, 0x54	; 84
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	80 81       	ld	r24, Z
    2686:	8f 7b       	andi	r24, 0xBF	; 191
    2688:	8c 93       	st	X, r24
					switch(Copy_PEXTI_Config[Local_u8Iterator].EXTI_control_state)
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	28 2f       	mov	r18, r24
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	c9 01       	movw	r24, r18
    2692:	88 0f       	add	r24, r24
    2694:	99 1f       	adc	r25, r25
    2696:	28 0f       	add	r18, r24
    2698:	39 1f       	adc	r19, r25
    269a:	8b 81       	ldd	r24, Y+3	; 0x03
    269c:	9c 81       	ldd	r25, Y+4	; 0x04
    269e:	fc 01       	movw	r30, r24
    26a0:	e2 0f       	add	r30, r18
    26a2:	f3 1f       	adc	r31, r19
    26a4:	82 81       	ldd	r24, Z+2	; 0x02
    26a6:	28 2f       	mov	r18, r24
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	3e 83       	std	Y+6, r19	; 0x06
    26ac:	2d 83       	std	Y+5, r18	; 0x05
    26ae:	8d 81       	ldd	r24, Y+5	; 0x05
    26b0:	9e 81       	ldd	r25, Y+6	; 0x06
    26b2:	82 30       	cpi	r24, 0x02	; 2
    26b4:	91 05       	cpc	r25, r1
    26b6:	31 f0       	breq	.+12     	; 0x26c4 <EXTI_enuInit+0x2e6>
    26b8:	2d 81       	ldd	r18, Y+5	; 0x05
    26ba:	3e 81       	ldd	r19, Y+6	; 0x06
    26bc:	23 30       	cpi	r18, 0x03	; 3
    26be:	31 05       	cpc	r19, r1
    26c0:	49 f0       	breq	.+18     	; 0x26d4 <EXTI_enuInit+0x2f6>
    26c2:	10 c0       	rjmp	.+32     	; 0x26e4 <EXTI_enuInit+0x306>
					{			
						case FAILLING:
						MCUCSR &= ~(MASK_BIT << ISC2);
    26c4:	a4 e5       	ldi	r26, 0x54	; 84
    26c6:	b0 e0       	ldi	r27, 0x00	; 0
    26c8:	e4 e5       	ldi	r30, 0x54	; 84
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	80 81       	ld	r24, Z
    26ce:	8f 7b       	andi	r24, 0xBF	; 191
    26d0:	8c 93       	st	X, r24
    26d2:	0d c0       	rjmp	.+26     	; 0x26ee <EXTI_enuInit+0x310>
						break;
						
						case RISING:
						MCUCSR |= (MASK_BIT << ISC2);
    26d4:	a4 e5       	ldi	r26, 0x54	; 84
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	e4 e5       	ldi	r30, 0x54	; 84
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	80 64       	ori	r24, 0x40	; 64
    26e0:	8c 93       	st	X, r24
    26e2:	05 c0       	rjmp	.+10     	; 0x26ee <EXTI_enuInit+0x310>
						break;
						
						default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
    26e4:	83 e0       	ldi	r24, 0x03	; 3
    26e6:	8a 83       	std	Y+2, r24	; 0x02
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <EXTI_enuInit+0x310>
					}			
				}
				break;
				
				default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    26ea:	83 e0       	ldi	r24, 0x03	; 3
    26ec:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_PEXTI_Config != NULL)
	{
		u8 Local_u8Iterator = 0;
		for(Local_u8Iterator = 0; Local_u8Iterator < MAX_NUM_EXTI; Local_u8Iterator++)
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	8f 5f       	subi	r24, 0xFF	; 255
    26f2:	89 83       	std	Y+1, r24	; 0x01
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	83 30       	cpi	r24, 0x03	; 3
    26f8:	08 f4       	brcc	.+2      	; 0x26fc <EXTI_enuInit+0x31e>
    26fa:	87 ce       	rjmp	.-754    	; 0x240a <EXTI_enuInit+0x2c>
    26fc:	02 c0       	rjmp	.+4      	; 0x2702 <EXTI_enuInit+0x324>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    26fe:	82 e0       	ldi	r24, 0x02	; 2
    2700:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	return Local_enuErrorState;
    2702:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2704:	2c 96       	adiw	r28, 0x0c	; 12
    2706:	0f b6       	in	r0, 0x3f	; 63
    2708:	f8 94       	cli
    270a:	de bf       	out	0x3e, r29	; 62
    270c:	0f be       	out	0x3f, r0	; 63
    270e:	cd bf       	out	0x3d, r28	; 61
    2710:	cf 91       	pop	r28
    2712:	df 91       	pop	r29
    2714:	08 95       	ret

00002716 <EXTI_enuChange_Control_State>:

ES_t EXTI_enuChange_Control_State(EXTI_ID_t Copy_enuEXTI_Id, EXTI_CTL_STATE_t Copy_enuControlState)
{
    2716:	df 93       	push	r29
    2718:	cf 93       	push	r28
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
    271e:	2b 97       	sbiw	r28, 0x0b	; 11
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	f8 94       	cli
    2724:	de bf       	out	0x3e, r29	; 62
    2726:	0f be       	out	0x3f, r0	; 63
    2728:	cd bf       	out	0x3d, r28	; 61
    272a:	8a 83       	std	Y+2, r24	; 0x02
    272c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_enuEXTI_Id < MAX_NUM_EXTI)
    2732:	8a 81       	ldd	r24, Y+2	; 0x02
    2734:	83 30       	cpi	r24, 0x03	; 3
    2736:	08 f0       	brcs	.+2      	; 0x273a <EXTI_enuChange_Control_State+0x24>
    2738:	0d c1       	rjmp	.+538    	; 0x2954 <EXTI_enuChange_Control_State+0x23e>
	{
		switch(Copy_enuEXTI_Id)
    273a:	8a 81       	ldd	r24, Y+2	; 0x02
    273c:	28 2f       	mov	r18, r24
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	3b 87       	std	Y+11, r19	; 0x0b
    2742:	2a 87       	std	Y+10, r18	; 0x0a
    2744:	8a 85       	ldd	r24, Y+10	; 0x0a
    2746:	9b 85       	ldd	r25, Y+11	; 0x0b
    2748:	81 30       	cpi	r24, 0x01	; 1
    274a:	91 05       	cpc	r25, r1
    274c:	09 f4       	brne	.+2      	; 0x2750 <EXTI_enuChange_Control_State+0x3a>
    274e:	70 c0       	rjmp	.+224    	; 0x2830 <EXTI_enuChange_Control_State+0x11a>
    2750:	2a 85       	ldd	r18, Y+10	; 0x0a
    2752:	3b 85       	ldd	r19, Y+11	; 0x0b
    2754:	22 30       	cpi	r18, 0x02	; 2
    2756:	31 05       	cpc	r19, r1
    2758:	09 f4       	brne	.+2      	; 0x275c <EXTI_enuChange_Control_State+0x46>
    275a:	cf c0       	rjmp	.+414    	; 0x28fa <EXTI_enuChange_Control_State+0x1e4>
    275c:	8a 85       	ldd	r24, Y+10	; 0x0a
    275e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2760:	00 97       	sbiw	r24, 0x00	; 0
    2762:	09 f0       	breq	.+2      	; 0x2766 <EXTI_enuChange_Control_State+0x50>
    2764:	f4 c0       	rjmp	.+488    	; 0x294e <EXTI_enuChange_Control_State+0x238>
		{
			case EXTI0:
			//Masking the 2 bits --> ISC00, ISC01
			MCUCR &= ~(3 << 0);
    2766:	a5 e5       	ldi	r26, 0x55	; 85
    2768:	b0 e0       	ldi	r27, 0x00	; 0
    276a:	e5 e5       	ldi	r30, 0x55	; 85
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	80 81       	ld	r24, Z
    2770:	8c 7f       	andi	r24, 0xFC	; 252
    2772:	8c 93       	st	X, r24
			switch(Copy_enuControlState)
    2774:	8b 81       	ldd	r24, Y+3	; 0x03
    2776:	28 2f       	mov	r18, r24
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	39 87       	std	Y+9, r19	; 0x09
    277c:	28 87       	std	Y+8, r18	; 0x08
    277e:	88 85       	ldd	r24, Y+8	; 0x08
    2780:	99 85       	ldd	r25, Y+9	; 0x09
    2782:	81 30       	cpi	r24, 0x01	; 1
    2784:	91 05       	cpc	r25, r1
    2786:	21 f1       	breq	.+72     	; 0x27d0 <EXTI_enuChange_Control_State+0xba>
    2788:	28 85       	ldd	r18, Y+8	; 0x08
    278a:	39 85       	ldd	r19, Y+9	; 0x09
    278c:	22 30       	cpi	r18, 0x02	; 2
    278e:	31 05       	cpc	r19, r1
    2790:	2c f4       	brge	.+10     	; 0x279c <EXTI_enuChange_Control_State+0x86>
    2792:	88 85       	ldd	r24, Y+8	; 0x08
    2794:	99 85       	ldd	r25, Y+9	; 0x09
    2796:	00 97       	sbiw	r24, 0x00	; 0
    2798:	61 f0       	breq	.+24     	; 0x27b2 <EXTI_enuChange_Control_State+0x9c>
    279a:	47 c0       	rjmp	.+142    	; 0x282a <EXTI_enuChange_Control_State+0x114>
    279c:	28 85       	ldd	r18, Y+8	; 0x08
    279e:	39 85       	ldd	r19, Y+9	; 0x09
    27a0:	22 30       	cpi	r18, 0x02	; 2
    27a2:	31 05       	cpc	r19, r1
    27a4:	21 f1       	breq	.+72     	; 0x27ee <EXTI_enuChange_Control_State+0xd8>
    27a6:	88 85       	ldd	r24, Y+8	; 0x08
    27a8:	99 85       	ldd	r25, Y+9	; 0x09
    27aa:	83 30       	cpi	r24, 0x03	; 3
    27ac:	91 05       	cpc	r25, r1
    27ae:	71 f1       	breq	.+92     	; 0x280c <EXTI_enuChange_Control_State+0xf6>
    27b0:	3c c0       	rjmp	.+120    	; 0x282a <EXTI_enuChange_Control_State+0x114>
			{
				case LOW_LEVEL:
				MCUCR &= ~(MASK_BIT << ISC00);
    27b2:	a5 e5       	ldi	r26, 0x55	; 85
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	e5 e5       	ldi	r30, 0x55	; 85
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	8e 7f       	andi	r24, 0xFE	; 254
    27be:	8c 93       	st	X, r24
				MCUCR &= ~(MASK_BIT << ISC01);
    27c0:	a5 e5       	ldi	r26, 0x55	; 85
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	e5 e5       	ldi	r30, 0x55	; 85
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	80 81       	ld	r24, Z
    27ca:	8d 7f       	andi	r24, 0xFD	; 253
    27cc:	8c 93       	st	X, r24
    27ce:	c4 c0       	rjmp	.+392    	; 0x2958 <EXTI_enuChange_Control_State+0x242>
				break;
				
				case LOGICAL:
				MCUCR |= (MASK_BIT << ISC00);
    27d0:	a5 e5       	ldi	r26, 0x55	; 85
    27d2:	b0 e0       	ldi	r27, 0x00	; 0
    27d4:	e5 e5       	ldi	r30, 0x55	; 85
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 81       	ld	r24, Z
    27da:	81 60       	ori	r24, 0x01	; 1
    27dc:	8c 93       	st	X, r24
				MCUCR &= ~(MASK_BIT << ISC01);
    27de:	a5 e5       	ldi	r26, 0x55	; 85
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	e5 e5       	ldi	r30, 0x55	; 85
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	8d 7f       	andi	r24, 0xFD	; 253
    27ea:	8c 93       	st	X, r24
    27ec:	b5 c0       	rjmp	.+362    	; 0x2958 <EXTI_enuChange_Control_State+0x242>
				break;
				
				case FAILLING:
				MCUCR &= ~(MASK_BIT << ISC00);
    27ee:	a5 e5       	ldi	r26, 0x55	; 85
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	e5 e5       	ldi	r30, 0x55	; 85
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	8e 7f       	andi	r24, 0xFE	; 254
    27fa:	8c 93       	st	X, r24
				MCUCR |= (MASK_BIT << ISC01);
    27fc:	a5 e5       	ldi	r26, 0x55	; 85
    27fe:	b0 e0       	ldi	r27, 0x00	; 0
    2800:	e5 e5       	ldi	r30, 0x55	; 85
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	82 60       	ori	r24, 0x02	; 2
    2808:	8c 93       	st	X, r24
    280a:	a6 c0       	rjmp	.+332    	; 0x2958 <EXTI_enuChange_Control_State+0x242>
				break;
				
				case RISING:
				MCUCR |= (MASK_BIT << ISC00);
    280c:	a5 e5       	ldi	r26, 0x55	; 85
    280e:	b0 e0       	ldi	r27, 0x00	; 0
    2810:	e5 e5       	ldi	r30, 0x55	; 85
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	80 81       	ld	r24, Z
    2816:	81 60       	ori	r24, 0x01	; 1
    2818:	8c 93       	st	X, r24
				MCUCR |= (MASK_BIT << ISC01);
    281a:	a5 e5       	ldi	r26, 0x55	; 85
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	e5 e5       	ldi	r30, 0x55	; 85
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	80 81       	ld	r24, Z
    2824:	82 60       	ori	r24, 0x02	; 2
    2826:	8c 93       	st	X, r24
    2828:	97 c0       	rjmp	.+302    	; 0x2958 <EXTI_enuChange_Control_State+0x242>
				break;
				
				default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    282a:	83 e0       	ldi	r24, 0x03	; 3
    282c:	89 83       	std	Y+1, r24	; 0x01
    282e:	94 c0       	rjmp	.+296    	; 0x2958 <EXTI_enuChange_Control_State+0x242>
			}
			break;
			
			case EXTI1:
			//Masking the 2 bits --> ISC10, ISC11
			MCUCR &= ~(3 << 2);
    2830:	a5 e5       	ldi	r26, 0x55	; 85
    2832:	b0 e0       	ldi	r27, 0x00	; 0
    2834:	e5 e5       	ldi	r30, 0x55	; 85
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	80 81       	ld	r24, Z
    283a:	83 7f       	andi	r24, 0xF3	; 243
    283c:	8c 93       	st	X, r24
			switch(Copy_enuControlState)
    283e:	8b 81       	ldd	r24, Y+3	; 0x03
    2840:	28 2f       	mov	r18, r24
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	3f 83       	std	Y+7, r19	; 0x07
    2846:	2e 83       	std	Y+6, r18	; 0x06
    2848:	8e 81       	ldd	r24, Y+6	; 0x06
    284a:	9f 81       	ldd	r25, Y+7	; 0x07
    284c:	81 30       	cpi	r24, 0x01	; 1
    284e:	91 05       	cpc	r25, r1
    2850:	21 f1       	breq	.+72     	; 0x289a <EXTI_enuChange_Control_State+0x184>
    2852:	2e 81       	ldd	r18, Y+6	; 0x06
    2854:	3f 81       	ldd	r19, Y+7	; 0x07
    2856:	22 30       	cpi	r18, 0x02	; 2
    2858:	31 05       	cpc	r19, r1
    285a:	2c f4       	brge	.+10     	; 0x2866 <EXTI_enuChange_Control_State+0x150>
    285c:	8e 81       	ldd	r24, Y+6	; 0x06
    285e:	9f 81       	ldd	r25, Y+7	; 0x07
    2860:	00 97       	sbiw	r24, 0x00	; 0
    2862:	61 f0       	breq	.+24     	; 0x287c <EXTI_enuChange_Control_State+0x166>
    2864:	47 c0       	rjmp	.+142    	; 0x28f4 <EXTI_enuChange_Control_State+0x1de>
    2866:	2e 81       	ldd	r18, Y+6	; 0x06
    2868:	3f 81       	ldd	r19, Y+7	; 0x07
    286a:	22 30       	cpi	r18, 0x02	; 2
    286c:	31 05       	cpc	r19, r1
    286e:	21 f1       	breq	.+72     	; 0x28b8 <EXTI_enuChange_Control_State+0x1a2>
    2870:	8e 81       	ldd	r24, Y+6	; 0x06
    2872:	9f 81       	ldd	r25, Y+7	; 0x07
    2874:	83 30       	cpi	r24, 0x03	; 3
    2876:	91 05       	cpc	r25, r1
    2878:	71 f1       	breq	.+92     	; 0x28d6 <EXTI_enuChange_Control_State+0x1c0>
    287a:	3c c0       	rjmp	.+120    	; 0x28f4 <EXTI_enuChange_Control_State+0x1de>
			{
				case LOW_LEVEL:
				MCUCR &= ~(MASK_BIT << ISC10);
    287c:	a5 e5       	ldi	r26, 0x55	; 85
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	e5 e5       	ldi	r30, 0x55	; 85
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	8b 7f       	andi	r24, 0xFB	; 251
    2888:	8c 93       	st	X, r24
				MCUCR &= ~(MASK_BIT << ISC11);
    288a:	a5 e5       	ldi	r26, 0x55	; 85
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	e5 e5       	ldi	r30, 0x55	; 85
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	87 7f       	andi	r24, 0xF7	; 247
    2896:	8c 93       	st	X, r24
    2898:	5f c0       	rjmp	.+190    	; 0x2958 <EXTI_enuChange_Control_State+0x242>
				break;
				
				case LOGICAL:
				MCUCR |= (MASK_BIT << ISC10);
    289a:	a5 e5       	ldi	r26, 0x55	; 85
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	e5 e5       	ldi	r30, 0x55	; 85
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	80 81       	ld	r24, Z
    28a4:	84 60       	ori	r24, 0x04	; 4
    28a6:	8c 93       	st	X, r24
				MCUCR &= ~(MASK_BIT << ISC11);
    28a8:	a5 e5       	ldi	r26, 0x55	; 85
    28aa:	b0 e0       	ldi	r27, 0x00	; 0
    28ac:	e5 e5       	ldi	r30, 0x55	; 85
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	80 81       	ld	r24, Z
    28b2:	87 7f       	andi	r24, 0xF7	; 247
    28b4:	8c 93       	st	X, r24
    28b6:	50 c0       	rjmp	.+160    	; 0x2958 <EXTI_enuChange_Control_State+0x242>
				break;
				
				case FAILLING:
				MCUCR &= ~(MASK_BIT << ISC10);
    28b8:	a5 e5       	ldi	r26, 0x55	; 85
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	e5 e5       	ldi	r30, 0x55	; 85
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 81       	ld	r24, Z
    28c2:	8b 7f       	andi	r24, 0xFB	; 251
    28c4:	8c 93       	st	X, r24
				MCUCR |= (MASK_BIT << ISC11);
    28c6:	a5 e5       	ldi	r26, 0x55	; 85
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	e5 e5       	ldi	r30, 0x55	; 85
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	88 60       	ori	r24, 0x08	; 8
    28d2:	8c 93       	st	X, r24
    28d4:	41 c0       	rjmp	.+130    	; 0x2958 <EXTI_enuChange_Control_State+0x242>
				break;
				
				case RISING:
				MCUCR |= (MASK_BIT << ISC10);
    28d6:	a5 e5       	ldi	r26, 0x55	; 85
    28d8:	b0 e0       	ldi	r27, 0x00	; 0
    28da:	e5 e5       	ldi	r30, 0x55	; 85
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	84 60       	ori	r24, 0x04	; 4
    28e2:	8c 93       	st	X, r24
				MCUCR |= (MASK_BIT << ISC11);
    28e4:	a5 e5       	ldi	r26, 0x55	; 85
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	e5 e5       	ldi	r30, 0x55	; 85
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	80 81       	ld	r24, Z
    28ee:	88 60       	ori	r24, 0x08	; 8
    28f0:	8c 93       	st	X, r24
    28f2:	32 c0       	rjmp	.+100    	; 0x2958 <EXTI_enuChange_Control_State+0x242>
				break;
				
				default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    28f4:	83 e0       	ldi	r24, 0x03	; 3
    28f6:	89 83       	std	Y+1, r24	; 0x01
    28f8:	2f c0       	rjmp	.+94     	; 0x2958 <EXTI_enuChange_Control_State+0x242>
			}
			break;
			
			case EXTI2:
			//Masking the bit --> ISC2
			MCUCSR &= ~(1 << 6);
    28fa:	a4 e5       	ldi	r26, 0x54	; 84
    28fc:	b0 e0       	ldi	r27, 0x00	; 0
    28fe:	e4 e5       	ldi	r30, 0x54	; 84
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	80 81       	ld	r24, Z
    2904:	8f 7b       	andi	r24, 0xBF	; 191
    2906:	8c 93       	st	X, r24
			switch(Copy_enuControlState)
    2908:	8b 81       	ldd	r24, Y+3	; 0x03
    290a:	28 2f       	mov	r18, r24
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	3d 83       	std	Y+5, r19	; 0x05
    2910:	2c 83       	std	Y+4, r18	; 0x04
    2912:	8c 81       	ldd	r24, Y+4	; 0x04
    2914:	9d 81       	ldd	r25, Y+5	; 0x05
    2916:	82 30       	cpi	r24, 0x02	; 2
    2918:	91 05       	cpc	r25, r1
    291a:	31 f0       	breq	.+12     	; 0x2928 <EXTI_enuChange_Control_State+0x212>
    291c:	2c 81       	ldd	r18, Y+4	; 0x04
    291e:	3d 81       	ldd	r19, Y+5	; 0x05
    2920:	23 30       	cpi	r18, 0x03	; 3
    2922:	31 05       	cpc	r19, r1
    2924:	49 f0       	breq	.+18     	; 0x2938 <EXTI_enuChange_Control_State+0x222>
    2926:	10 c0       	rjmp	.+32     	; 0x2948 <EXTI_enuChange_Control_State+0x232>
			{
				case FAILLING:
				MCUCSR &= ~(MASK_BIT << ISC2);
    2928:	a4 e5       	ldi	r26, 0x54	; 84
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	e4 e5       	ldi	r30, 0x54	; 84
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	8f 7b       	andi	r24, 0xBF	; 191
    2934:	8c 93       	st	X, r24
    2936:	10 c0       	rjmp	.+32     	; 0x2958 <EXTI_enuChange_Control_State+0x242>
				break;
				
				case RISING:
				MCUCSR |= (MASK_BIT << ISC2);
    2938:	a4 e5       	ldi	r26, 0x54	; 84
    293a:	b0 e0       	ldi	r27, 0x00	; 0
    293c:	e4 e5       	ldi	r30, 0x54	; 84
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	80 81       	ld	r24, Z
    2942:	80 64       	ori	r24, 0x40	; 64
    2944:	8c 93       	st	X, r24
    2946:	08 c0       	rjmp	.+16     	; 0x2958 <EXTI_enuChange_Control_State+0x242>
				break;
				
				default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    2948:	83 e0       	ldi	r24, 0x03	; 3
    294a:	89 83       	std	Y+1, r24	; 0x01
    294c:	05 c0       	rjmp	.+10     	; 0x2958 <EXTI_enuChange_Control_State+0x242>
				break;
			}
			break;
			
			default:
			Local_enuErrorState = ES_OUT_OF_RANGE;
    294e:	83 e0       	ldi	r24, 0x03	; 3
    2950:	89 83       	std	Y+1, r24	; 0x01
    2952:	02 c0       	rjmp	.+4      	; 0x2958 <EXTI_enuChange_Control_State+0x242>
			break;
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2954:	83 e0       	ldi	r24, 0x03	; 3
    2956:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    2958:	89 81       	ldd	r24, Y+1	; 0x01
}
    295a:	2b 96       	adiw	r28, 0x0b	; 11
    295c:	0f b6       	in	r0, 0x3f	; 63
    295e:	f8 94       	cli
    2960:	de bf       	out	0x3e, r29	; 62
    2962:	0f be       	out	0x3f, r0	; 63
    2964:	cd bf       	out	0x3d, r28	; 61
    2966:	cf 91       	pop	r28
    2968:	df 91       	pop	r29
    296a:	08 95       	ret

0000296c <EXTI_enuEnable>:

ES_t EXTI_enuEnable(EXTI_ID_t Copy_enuEXTI_Id)
{
    296c:	df 93       	push	r29
    296e:	cf 93       	push	r28
    2970:	00 d0       	rcall	.+0      	; 0x2972 <EXTI_enuEnable+0x6>
    2972:	00 d0       	rcall	.+0      	; 0x2974 <EXTI_enuEnable+0x8>
    2974:	cd b7       	in	r28, 0x3d	; 61
    2976:	de b7       	in	r29, 0x3e	; 62
    2978:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_enuEXTI_Id < MAX_NUM_EXTI)
    297e:	8a 81       	ldd	r24, Y+2	; 0x02
    2980:	83 30       	cpi	r24, 0x03	; 3
    2982:	08 f0       	brcs	.+2      	; 0x2986 <EXTI_enuEnable+0x1a>
    2984:	40 c0       	rjmp	.+128    	; 0x2a06 <EXTI_enuEnable+0x9a>
	{
		switch(Copy_enuEXTI_Id)
    2986:	8a 81       	ldd	r24, Y+2	; 0x02
    2988:	28 2f       	mov	r18, r24
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	3c 83       	std	Y+4, r19	; 0x04
    298e:	2b 83       	std	Y+3, r18	; 0x03
    2990:	8b 81       	ldd	r24, Y+3	; 0x03
    2992:	9c 81       	ldd	r25, Y+4	; 0x04
    2994:	81 30       	cpi	r24, 0x01	; 1
    2996:	91 05       	cpc	r25, r1
    2998:	c1 f0       	breq	.+48     	; 0x29ca <EXTI_enuEnable+0x5e>
    299a:	2b 81       	ldd	r18, Y+3	; 0x03
    299c:	3c 81       	ldd	r19, Y+4	; 0x04
    299e:	22 30       	cpi	r18, 0x02	; 2
    29a0:	31 05       	cpc	r19, r1
    29a2:	11 f1       	breq	.+68     	; 0x29e8 <EXTI_enuEnable+0x7c>
    29a4:	8b 81       	ldd	r24, Y+3	; 0x03
    29a6:	9c 81       	ldd	r25, Y+4	; 0x04
    29a8:	00 97       	sbiw	r24, 0x00	; 0
    29aa:	79 f5       	brne	.+94     	; 0x2a0a <EXTI_enuEnable+0x9e>
		{
			case EXTI0:
			GICR &= ~(MASK_BIT << INT0);
    29ac:	ab e5       	ldi	r26, 0x5B	; 91
    29ae:	b0 e0       	ldi	r27, 0x00	; 0
    29b0:	eb e5       	ldi	r30, 0x5B	; 91
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	80 81       	ld	r24, Z
    29b6:	8f 7b       	andi	r24, 0xBF	; 191
    29b8:	8c 93       	st	X, r24
			GICR |= (MASK_BIT << INT0);
    29ba:	ab e5       	ldi	r26, 0x5B	; 91
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	eb e5       	ldi	r30, 0x5B	; 91
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	80 64       	ori	r24, 0x40	; 64
    29c6:	8c 93       	st	X, r24
    29c8:	20 c0       	rjmp	.+64     	; 0x2a0a <EXTI_enuEnable+0x9e>
			break;
			
			case EXTI1:
			GICR &= ~(MASK_BIT << INT1);
    29ca:	ab e5       	ldi	r26, 0x5B	; 91
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	eb e5       	ldi	r30, 0x5B	; 91
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	80 81       	ld	r24, Z
    29d4:	8f 77       	andi	r24, 0x7F	; 127
    29d6:	8c 93       	st	X, r24
			GICR |= (MASK_BIT << INT1);
    29d8:	ab e5       	ldi	r26, 0x5B	; 91
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	eb e5       	ldi	r30, 0x5B	; 91
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	80 68       	ori	r24, 0x80	; 128
    29e4:	8c 93       	st	X, r24
    29e6:	11 c0       	rjmp	.+34     	; 0x2a0a <EXTI_enuEnable+0x9e>
			break;
			
			case EXTI2:
			GICR &= ~(MASK_BIT << INT2);
    29e8:	ab e5       	ldi	r26, 0x5B	; 91
    29ea:	b0 e0       	ldi	r27, 0x00	; 0
    29ec:	eb e5       	ldi	r30, 0x5B	; 91
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	80 81       	ld	r24, Z
    29f2:	8f 7d       	andi	r24, 0xDF	; 223
    29f4:	8c 93       	st	X, r24
			GICR |= (MASK_BIT << INT2);
    29f6:	ab e5       	ldi	r26, 0x5B	; 91
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	eb e5       	ldi	r30, 0x5B	; 91
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	80 62       	ori	r24, 0x20	; 32
    2a02:	8c 93       	st	X, r24
    2a04:	02 c0       	rjmp	.+4      	; 0x2a0a <EXTI_enuEnable+0x9e>
			break;
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2a06:	83 e0       	ldi	r24, 0x03	; 3
    2a08:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    2a0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	cf 91       	pop	r28
    2a16:	df 91       	pop	r29
    2a18:	08 95       	ret

00002a1a <EXTI_enuDisable>:

ES_t EXTI_enuDisable(EXTI_ID_t Copy_enuEXTI_Id)
{
    2a1a:	df 93       	push	r29
    2a1c:	cf 93       	push	r28
    2a1e:	00 d0       	rcall	.+0      	; 0x2a20 <EXTI_enuDisable+0x6>
    2a20:	00 d0       	rcall	.+0      	; 0x2a22 <EXTI_enuDisable+0x8>
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62
    2a26:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_enuEXTI_Id < MAX_NUM_EXTI)
    2a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2e:	83 30       	cpi	r24, 0x03	; 3
    2a30:	58 f5       	brcc	.+86     	; 0x2a88 <EXTI_enuDisable+0x6e>
	{
		switch(Copy_enuEXTI_Id)
    2a32:	8a 81       	ldd	r24, Y+2	; 0x02
    2a34:	28 2f       	mov	r18, r24
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	3c 83       	std	Y+4, r19	; 0x04
    2a3a:	2b 83       	std	Y+3, r18	; 0x03
    2a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a40:	81 30       	cpi	r24, 0x01	; 1
    2a42:	91 05       	cpc	r25, r1
    2a44:	89 f0       	breq	.+34     	; 0x2a68 <EXTI_enuDisable+0x4e>
    2a46:	2b 81       	ldd	r18, Y+3	; 0x03
    2a48:	3c 81       	ldd	r19, Y+4	; 0x04
    2a4a:	22 30       	cpi	r18, 0x02	; 2
    2a4c:	31 05       	cpc	r19, r1
    2a4e:	a1 f0       	breq	.+40     	; 0x2a78 <EXTI_enuDisable+0x5e>
    2a50:	8b 81       	ldd	r24, Y+3	; 0x03
    2a52:	9c 81       	ldd	r25, Y+4	; 0x04
    2a54:	00 97       	sbiw	r24, 0x00	; 0
    2a56:	d1 f4       	brne	.+52     	; 0x2a8c <EXTI_enuDisable+0x72>
		{
			case EXTI0:
			GICR &= ~(1 << INT0);
    2a58:	ab e5       	ldi	r26, 0x5B	; 91
    2a5a:	b0 e0       	ldi	r27, 0x00	; 0
    2a5c:	eb e5       	ldi	r30, 0x5B	; 91
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	80 81       	ld	r24, Z
    2a62:	8f 7b       	andi	r24, 0xBF	; 191
    2a64:	8c 93       	st	X, r24
    2a66:	12 c0       	rjmp	.+36     	; 0x2a8c <EXTI_enuDisable+0x72>
			break;
			
			case EXTI1:
			GICR &= ~(1 << INT1);
    2a68:	ab e5       	ldi	r26, 0x5B	; 91
    2a6a:	b0 e0       	ldi	r27, 0x00	; 0
    2a6c:	eb e5       	ldi	r30, 0x5B	; 91
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	80 81       	ld	r24, Z
    2a72:	8f 77       	andi	r24, 0x7F	; 127
    2a74:	8c 93       	st	X, r24
    2a76:	0a c0       	rjmp	.+20     	; 0x2a8c <EXTI_enuDisable+0x72>
			break;
			
			case EXTI2:
			GICR &= ~(1 << INT2);
    2a78:	ab e5       	ldi	r26, 0x5B	; 91
    2a7a:	b0 e0       	ldi	r27, 0x00	; 0
    2a7c:	eb e5       	ldi	r30, 0x5B	; 91
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	80 81       	ld	r24, Z
    2a82:	8f 7d       	andi	r24, 0xDF	; 223
    2a84:	8c 93       	st	X, r24
    2a86:	02 c0       	rjmp	.+4      	; 0x2a8c <EXTI_enuDisable+0x72>
			break;
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2a88:	83 e0       	ldi	r24, 0x03	; 3
    2a8a:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a8e:	0f 90       	pop	r0
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	cf 91       	pop	r28
    2a98:	df 91       	pop	r29
    2a9a:	08 95       	ret

00002a9c <EXTI_enuCallBackFunc>:

ES_t EXTI_enuCallBackFunc(volatile void (*Copy_PFunc)(void*), volatile void *Copy_PvidAppParameter, EXTI_ID_t Copy_enuEXTI_Id)
{
    2a9c:	df 93       	push	r29
    2a9e:	cf 93       	push	r28
    2aa0:	00 d0       	rcall	.+0      	; 0x2aa2 <EXTI_enuCallBackFunc+0x6>
    2aa2:	00 d0       	rcall	.+0      	; 0x2aa4 <EXTI_enuCallBackFunc+0x8>
    2aa4:	00 d0       	rcall	.+0      	; 0x2aa6 <EXTI_enuCallBackFunc+0xa>
    2aa6:	cd b7       	in	r28, 0x3d	; 61
    2aa8:	de b7       	in	r29, 0x3e	; 62
    2aaa:	9b 83       	std	Y+3, r25	; 0x03
    2aac:	8a 83       	std	Y+2, r24	; 0x02
    2aae:	7d 83       	std	Y+5, r23	; 0x05
    2ab0:	6c 83       	std	Y+4, r22	; 0x04
    2ab2:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_PFunc != NULL)
    2ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aba:	9b 81       	ldd	r25, Y+3	; 0x03
    2abc:	00 97       	sbiw	r24, 0x00	; 0
    2abe:	01 f1       	breq	.+64     	; 0x2b00 <EXTI_enuCallBackFunc+0x64>
	{
		if(Copy_enuEXTI_Id < MAX_NUM_EXTI)
    2ac0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ac2:	83 30       	cpi	r24, 0x03	; 3
    2ac4:	d0 f4       	brcc	.+52     	; 0x2afa <EXTI_enuCallBackFunc+0x5e>
		{
			EXTI_APFunc[Copy_enuEXTI_Id] = Copy_PFunc;
    2ac6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ac8:	88 2f       	mov	r24, r24
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	88 0f       	add	r24, r24
    2ace:	99 1f       	adc	r25, r25
    2ad0:	fc 01       	movw	r30, r24
    2ad2:	e3 5e       	subi	r30, 0xE3	; 227
    2ad4:	fd 4f       	sbci	r31, 0xFD	; 253
    2ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    2ada:	91 83       	std	Z+1, r25	; 0x01
    2adc:	80 83       	st	Z, r24
			EXTI_APvidGenericParameters[Copy_enuEXTI_Id] = Copy_PvidAppParameter;
    2ade:	8e 81       	ldd	r24, Y+6	; 0x06
    2ae0:	88 2f       	mov	r24, r24
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	88 0f       	add	r24, r24
    2ae6:	99 1f       	adc	r25, r25
    2ae8:	fc 01       	movw	r30, r24
    2aea:	ed 5d       	subi	r30, 0xDD	; 221
    2aec:	fd 4f       	sbci	r31, 0xFD	; 253
    2aee:	8c 81       	ldd	r24, Y+4	; 0x04
    2af0:	9d 81       	ldd	r25, Y+5	; 0x05
    2af2:	91 83       	std	Z+1, r25	; 0x01
    2af4:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK;
    2af6:	19 82       	std	Y+1, r1	; 0x01
    2af8:	05 c0       	rjmp	.+10     	; 0x2b04 <EXTI_enuCallBackFunc+0x68>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    2afa:	83 e0       	ldi	r24, 0x03	; 3
    2afc:	89 83       	std	Y+1, r24	; 0x01
    2afe:	02 c0       	rjmp	.+4      	; 0x2b04 <EXTI_enuCallBackFunc+0x68>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2b00:	82 e0       	ldi	r24, 0x02	; 2
    2b02:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    2b04:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b06:	26 96       	adiw	r28, 0x06	; 6
    2b08:	0f b6       	in	r0, 0x3f	; 63
    2b0a:	f8 94       	cli
    2b0c:	de bf       	out	0x3e, r29	; 62
    2b0e:	0f be       	out	0x3f, r0	; 63
    2b10:	cd bf       	out	0x3d, r28	; 61
    2b12:	cf 91       	pop	r28
    2b14:	df 91       	pop	r29
    2b16:	08 95       	ret

00002b18 <__vector_1>:

/* ISR for EXTI0 */
ISR(VECT_INT0)
{	
    2b18:	1f 92       	push	r1
    2b1a:	0f 92       	push	r0
    2b1c:	0f b6       	in	r0, 0x3f	; 63
    2b1e:	0f 92       	push	r0
    2b20:	11 24       	eor	r1, r1
    2b22:	2f 93       	push	r18
    2b24:	3f 93       	push	r19
    2b26:	4f 93       	push	r20
    2b28:	5f 93       	push	r21
    2b2a:	6f 93       	push	r22
    2b2c:	7f 93       	push	r23
    2b2e:	8f 93       	push	r24
    2b30:	9f 93       	push	r25
    2b32:	af 93       	push	r26
    2b34:	bf 93       	push	r27
    2b36:	ef 93       	push	r30
    2b38:	ff 93       	push	r31
    2b3a:	df 93       	push	r29
    2b3c:	cf 93       	push	r28
    2b3e:	cd b7       	in	r28, 0x3d	; 61
    2b40:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_APFunc[EXTI0] != NULL)
    2b42:	80 91 1d 02 	lds	r24, 0x021D
    2b46:	90 91 1e 02 	lds	r25, 0x021E
    2b4a:	00 97       	sbiw	r24, 0x00	; 0
    2b4c:	49 f0       	breq	.+18     	; 0x2b60 <__vector_1+0x48>
	{
		EXTI_APFunc[EXTI0](EXTI_APvidGenericParameters[EXTI0]);
    2b4e:	e0 91 1d 02 	lds	r30, 0x021D
    2b52:	f0 91 1e 02 	lds	r31, 0x021E
    2b56:	80 91 23 02 	lds	r24, 0x0223
    2b5a:	90 91 24 02 	lds	r25, 0x0224
    2b5e:	09 95       	icall
	}
}
    2b60:	cf 91       	pop	r28
    2b62:	df 91       	pop	r29
    2b64:	ff 91       	pop	r31
    2b66:	ef 91       	pop	r30
    2b68:	bf 91       	pop	r27
    2b6a:	af 91       	pop	r26
    2b6c:	9f 91       	pop	r25
    2b6e:	8f 91       	pop	r24
    2b70:	7f 91       	pop	r23
    2b72:	6f 91       	pop	r22
    2b74:	5f 91       	pop	r21
    2b76:	4f 91       	pop	r20
    2b78:	3f 91       	pop	r19
    2b7a:	2f 91       	pop	r18
    2b7c:	0f 90       	pop	r0
    2b7e:	0f be       	out	0x3f, r0	; 63
    2b80:	0f 90       	pop	r0
    2b82:	1f 90       	pop	r1
    2b84:	18 95       	reti

00002b86 <__vector_2>:

/* ISR for EXTI1 */
ISR(VECT_INT1)
{
    2b86:	1f 92       	push	r1
    2b88:	0f 92       	push	r0
    2b8a:	0f b6       	in	r0, 0x3f	; 63
    2b8c:	0f 92       	push	r0
    2b8e:	11 24       	eor	r1, r1
    2b90:	2f 93       	push	r18
    2b92:	3f 93       	push	r19
    2b94:	4f 93       	push	r20
    2b96:	5f 93       	push	r21
    2b98:	6f 93       	push	r22
    2b9a:	7f 93       	push	r23
    2b9c:	8f 93       	push	r24
    2b9e:	9f 93       	push	r25
    2ba0:	af 93       	push	r26
    2ba2:	bf 93       	push	r27
    2ba4:	ef 93       	push	r30
    2ba6:	ff 93       	push	r31
    2ba8:	df 93       	push	r29
    2baa:	cf 93       	push	r28
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_APFunc[EXTI1] != NULL)
    2bb0:	80 91 1f 02 	lds	r24, 0x021F
    2bb4:	90 91 20 02 	lds	r25, 0x0220
    2bb8:	00 97       	sbiw	r24, 0x00	; 0
    2bba:	49 f0       	breq	.+18     	; 0x2bce <__vector_2+0x48>
	{
		EXTI_APFunc[EXTI1](EXTI_APvidGenericParameters[EXTI1]);
    2bbc:	e0 91 1f 02 	lds	r30, 0x021F
    2bc0:	f0 91 20 02 	lds	r31, 0x0220
    2bc4:	80 91 25 02 	lds	r24, 0x0225
    2bc8:	90 91 26 02 	lds	r25, 0x0226
    2bcc:	09 95       	icall
	}
}
    2bce:	cf 91       	pop	r28
    2bd0:	df 91       	pop	r29
    2bd2:	ff 91       	pop	r31
    2bd4:	ef 91       	pop	r30
    2bd6:	bf 91       	pop	r27
    2bd8:	af 91       	pop	r26
    2bda:	9f 91       	pop	r25
    2bdc:	8f 91       	pop	r24
    2bde:	7f 91       	pop	r23
    2be0:	6f 91       	pop	r22
    2be2:	5f 91       	pop	r21
    2be4:	4f 91       	pop	r20
    2be6:	3f 91       	pop	r19
    2be8:	2f 91       	pop	r18
    2bea:	0f 90       	pop	r0
    2bec:	0f be       	out	0x3f, r0	; 63
    2bee:	0f 90       	pop	r0
    2bf0:	1f 90       	pop	r1
    2bf2:	18 95       	reti

00002bf4 <__vector_3>:

/* ISR for EXTI2 */
ISR(VECT_INT2)
{	
    2bf4:	1f 92       	push	r1
    2bf6:	0f 92       	push	r0
    2bf8:	0f b6       	in	r0, 0x3f	; 63
    2bfa:	0f 92       	push	r0
    2bfc:	11 24       	eor	r1, r1
    2bfe:	2f 93       	push	r18
    2c00:	3f 93       	push	r19
    2c02:	4f 93       	push	r20
    2c04:	5f 93       	push	r21
    2c06:	6f 93       	push	r22
    2c08:	7f 93       	push	r23
    2c0a:	8f 93       	push	r24
    2c0c:	9f 93       	push	r25
    2c0e:	af 93       	push	r26
    2c10:	bf 93       	push	r27
    2c12:	ef 93       	push	r30
    2c14:	ff 93       	push	r31
    2c16:	df 93       	push	r29
    2c18:	cf 93       	push	r28
    2c1a:	cd b7       	in	r28, 0x3d	; 61
    2c1c:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_APFunc[EXTI2] != NULL)
    2c1e:	80 91 21 02 	lds	r24, 0x0221
    2c22:	90 91 22 02 	lds	r25, 0x0222
    2c26:	00 97       	sbiw	r24, 0x00	; 0
    2c28:	49 f0       	breq	.+18     	; 0x2c3c <__vector_3+0x48>
	{
		EXTI_APFunc[EXTI2](EXTI_APvidGenericParameters[EXTI2]);
    2c2a:	e0 91 21 02 	lds	r30, 0x0221
    2c2e:	f0 91 22 02 	lds	r31, 0x0222
    2c32:	80 91 27 02 	lds	r24, 0x0227
    2c36:	90 91 28 02 	lds	r25, 0x0228
    2c3a:	09 95       	icall
	}
    2c3c:	cf 91       	pop	r28
    2c3e:	df 91       	pop	r29
    2c40:	ff 91       	pop	r31
    2c42:	ef 91       	pop	r30
    2c44:	bf 91       	pop	r27
    2c46:	af 91       	pop	r26
    2c48:	9f 91       	pop	r25
    2c4a:	8f 91       	pop	r24
    2c4c:	7f 91       	pop	r23
    2c4e:	6f 91       	pop	r22
    2c50:	5f 91       	pop	r21
    2c52:	4f 91       	pop	r20
    2c54:	3f 91       	pop	r19
    2c56:	2f 91       	pop	r18
    2c58:	0f 90       	pop	r0
    2c5a:	0f be       	out	0x3f, r0	; 63
    2c5c:	0f 90       	pop	r0
    2c5e:	1f 90       	pop	r1
    2c60:	18 95       	reti

00002c62 <DIO_enuINIT>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: Atmega32 has 4 ports A, B, C, D and each port consist of 8 pins
 ******************************************************************************
**/
ES_t DIO_enuINIT(void)
{
    2c62:	df 93       	push	r29
    2c64:	cf 93       	push	r28
    2c66:	0f 92       	push	r0
    2c68:	cd b7       	in	r28, 0x3d	; 61
    2c6a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	89 83       	std	Y+1, r24	; 0x01
	
	/* initialize of DDR register of 4 ports */
	DDRA = CONC(PA_DDR7,PA_DDR6,PA_DDR5,PA_DDR4,PA_DDR3,PA_DDR2,PA_DDR1,PA_DDR0);
    2c70:	ea e3       	ldi	r30, 0x3A	; 58
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	8e ef       	ldi	r24, 0xFE	; 254
    2c76:	80 83       	st	Z, r24
	DDRB = CONC(PB_DDR7,PB_DDR6,PB_DDR5,PB_DDR4,PB_DDR3,PB_DDR2,PB_DDR1,PB_DDR0);
    2c78:	e7 e3       	ldi	r30, 0x37	; 55
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	8f ef       	ldi	r24, 0xFF	; 255
    2c7e:	80 83       	st	Z, r24
	DDRC = CONC(PC_DDR7,PC_DDR6,PC_DDR5,PC_DDR4,PC_DDR3,PC_DDR2,PC_DDR1,PC_DDR0);
    2c80:	e4 e3       	ldi	r30, 0x34	; 52
    2c82:	f0 e0       	ldi	r31, 0x00	; 0
    2c84:	8f ef       	ldi	r24, 0xFF	; 255
    2c86:	80 83       	st	Z, r24
	DDRD = CONC(PD_DDR7,PD_DDR6,PD_DDR5,PD_DDR4,PD_DDR3,PD_DDR2,PD_DDR1,PD_DDR0);
    2c88:	e1 e3       	ldi	r30, 0x31	; 49
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	8a e4       	ldi	r24, 0x4A	; 74
    2c8e:	80 83       	st	Z, r24
	
	/* initialize of PORT register of 4 ports */
	PORTA = CONC(PA_PORT7,PA_PORT6,PA_PORT5,PA_PORT4,PA_PORT3,PA_PORT2,PA_PORT1,PA_PORT0);
    2c90:	eb e3       	ldi	r30, 0x3B	; 59
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	80 83       	st	Z, r24
	PORTB = CONC(PB_PORT7,PB_PORT6,PB_PORT5,PB_PORT4,PB_PORT3,PB_PORT2,PB_PORT1,PB_DDR0);
    2c98:	e8 e3       	ldi	r30, 0x38	; 56
    2c9a:	f0 e0       	ldi	r31, 0x00	; 0
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	80 83       	st	Z, r24
	PORTC = CONC(PC_PORT7,PC_PORT6,PC_PORT5,PC_PORT4,PC_PORT3,PC_PORT2,PC_PORT1,PC_PORT0);
    2ca0:	e5 e3       	ldi	r30, 0x35	; 53
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	10 82       	st	Z, r1
	PORTD = CONC(PD_PORT7,PD_PORT6,PD_PORT5,PD_PORT4,PD_PORT3,PD_PORT2,PD_PORT1,PD_PORT0);
    2ca6:	e2 e3       	ldi	r30, 0x32	; 50
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	86 e7       	ldi	r24, 0x76	; 118
    2cac:	80 83       	st	Z, r24
	
	Local_enuErrorState = ES_OK;
    2cae:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cb2:	0f 90       	pop	r0
    2cb4:	cf 91       	pop	r28
    2cb6:	df 91       	pop	r29
    2cb8:	08 95       	ret

00002cba <DIO_enuSetPortDirection>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    2cba:	df 93       	push	r29
    2cbc:	cf 93       	push	r28
    2cbe:	00 d0       	rcall	.+0      	; 0x2cc0 <DIO_enuSetPortDirection+0x6>
    2cc0:	00 d0       	rcall	.+0      	; 0x2cc2 <DIO_enuSetPortDirection+0x8>
    2cc2:	0f 92       	push	r0
    2cc4:	cd b7       	in	r28, 0x3d	; 61
    2cc6:	de b7       	in	r29, 0x3e	; 62
    2cc8:	8a 83       	std	Y+2, r24	; 0x02
    2cca:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_u8PortID <= DIO_PORTD)
    2cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd2:	84 30       	cpi	r24, 0x04	; 4
    2cd4:	a0 f5       	brcc	.+104    	; 0x2d3e <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
    2cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd8:	28 2f       	mov	r18, r24
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	3d 83       	std	Y+5, r19	; 0x05
    2cde:	2c 83       	std	Y+4, r18	; 0x04
    2ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ce4:	81 30       	cpi	r24, 0x01	; 1
    2ce6:	91 05       	cpc	r25, r1
    2ce8:	d1 f0       	breq	.+52     	; 0x2d1e <DIO_enuSetPortDirection+0x64>
    2cea:	2c 81       	ldd	r18, Y+4	; 0x04
    2cec:	3d 81       	ldd	r19, Y+5	; 0x05
    2cee:	22 30       	cpi	r18, 0x02	; 2
    2cf0:	31 05       	cpc	r19, r1
    2cf2:	2c f4       	brge	.+10     	; 0x2cfe <DIO_enuSetPortDirection+0x44>
    2cf4:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf6:	9d 81       	ldd	r25, Y+5	; 0x05
    2cf8:	00 97       	sbiw	r24, 0x00	; 0
    2cfa:	61 f0       	breq	.+24     	; 0x2d14 <DIO_enuSetPortDirection+0x5a>
    2cfc:	1e c0       	rjmp	.+60     	; 0x2d3a <DIO_enuSetPortDirection+0x80>
    2cfe:	2c 81       	ldd	r18, Y+4	; 0x04
    2d00:	3d 81       	ldd	r19, Y+5	; 0x05
    2d02:	22 30       	cpi	r18, 0x02	; 2
    2d04:	31 05       	cpc	r19, r1
    2d06:	81 f0       	breq	.+32     	; 0x2d28 <DIO_enuSetPortDirection+0x6e>
    2d08:	8c 81       	ldd	r24, Y+4	; 0x04
    2d0a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d0c:	83 30       	cpi	r24, 0x03	; 3
    2d0e:	91 05       	cpc	r25, r1
    2d10:	81 f0       	breq	.+32     	; 0x2d32 <DIO_enuSetPortDirection+0x78>
    2d12:	13 c0       	rjmp	.+38     	; 0x2d3a <DIO_enuSetPortDirection+0x80>
		{
			case DIO_PORTA:
			DDRA = Copy_u8Value;
    2d14:	ea e3       	ldi	r30, 0x3A	; 58
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1a:	80 83       	st	Z, r24
    2d1c:	0e c0       	rjmp	.+28     	; 0x2d3a <DIO_enuSetPortDirection+0x80>
			break;
			
			case DIO_PORTB:
			DDRB = Copy_u8Value;
    2d1e:	e7 e3       	ldi	r30, 0x37	; 55
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	8b 81       	ldd	r24, Y+3	; 0x03
    2d24:	80 83       	st	Z, r24
    2d26:	09 c0       	rjmp	.+18     	; 0x2d3a <DIO_enuSetPortDirection+0x80>
			break;
			
			case DIO_PORTC:
			DDRC = Copy_u8Value;
    2d28:	e4 e3       	ldi	r30, 0x34	; 52
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2e:	80 83       	st	Z, r24
    2d30:	04 c0       	rjmp	.+8      	; 0x2d3a <DIO_enuSetPortDirection+0x80>
			break;
			
			case DIO_PORTD:
			DDRD = Copy_u8Value;
    2d32:	e1 e3       	ldi	r30, 0x31	; 49
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	8b 81       	ldd	r24, Y+3	; 0x03
    2d38:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    2d3a:	19 82       	std	Y+1, r1	; 0x01
    2d3c:	02 c0       	rjmp	.+4      	; 0x2d42 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2d3e:	83 e0       	ldi	r24, 0x03	; 3
    2d40:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    2d42:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d44:	0f 90       	pop	r0
    2d46:	0f 90       	pop	r0
    2d48:	0f 90       	pop	r0
    2d4a:	0f 90       	pop	r0
    2d4c:	0f 90       	pop	r0
    2d4e:	cf 91       	pop	r28
    2d50:	df 91       	pop	r29
    2d52:	08 95       	ret

00002d54 <DIO_enuSetPortVal>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t DIO_enuSetPortVal(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    2d54:	df 93       	push	r29
    2d56:	cf 93       	push	r28
    2d58:	00 d0       	rcall	.+0      	; 0x2d5a <DIO_enuSetPortVal+0x6>
    2d5a:	00 d0       	rcall	.+0      	; 0x2d5c <DIO_enuSetPortVal+0x8>
    2d5c:	0f 92       	push	r0
    2d5e:	cd b7       	in	r28, 0x3d	; 61
    2d60:	de b7       	in	r29, 0x3e	; 62
    2d62:	8a 83       	std	Y+2, r24	; 0x02
    2d64:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_u8PortID <= DIO_PORTD)
    2d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6c:	84 30       	cpi	r24, 0x04	; 4
    2d6e:	a0 f5       	brcc	.+104    	; 0x2dd8 <DIO_enuSetPortVal+0x84>
	{
		switch(Copy_u8PortID)
    2d70:	8a 81       	ldd	r24, Y+2	; 0x02
    2d72:	28 2f       	mov	r18, r24
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	3d 83       	std	Y+5, r19	; 0x05
    2d78:	2c 83       	std	Y+4, r18	; 0x04
    2d7a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d7c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d7e:	81 30       	cpi	r24, 0x01	; 1
    2d80:	91 05       	cpc	r25, r1
    2d82:	d1 f0       	breq	.+52     	; 0x2db8 <DIO_enuSetPortVal+0x64>
    2d84:	2c 81       	ldd	r18, Y+4	; 0x04
    2d86:	3d 81       	ldd	r19, Y+5	; 0x05
    2d88:	22 30       	cpi	r18, 0x02	; 2
    2d8a:	31 05       	cpc	r19, r1
    2d8c:	2c f4       	brge	.+10     	; 0x2d98 <DIO_enuSetPortVal+0x44>
    2d8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d90:	9d 81       	ldd	r25, Y+5	; 0x05
    2d92:	00 97       	sbiw	r24, 0x00	; 0
    2d94:	61 f0       	breq	.+24     	; 0x2dae <DIO_enuSetPortVal+0x5a>
    2d96:	1e c0       	rjmp	.+60     	; 0x2dd4 <DIO_enuSetPortVal+0x80>
    2d98:	2c 81       	ldd	r18, Y+4	; 0x04
    2d9a:	3d 81       	ldd	r19, Y+5	; 0x05
    2d9c:	22 30       	cpi	r18, 0x02	; 2
    2d9e:	31 05       	cpc	r19, r1
    2da0:	81 f0       	breq	.+32     	; 0x2dc2 <DIO_enuSetPortVal+0x6e>
    2da2:	8c 81       	ldd	r24, Y+4	; 0x04
    2da4:	9d 81       	ldd	r25, Y+5	; 0x05
    2da6:	83 30       	cpi	r24, 0x03	; 3
    2da8:	91 05       	cpc	r25, r1
    2daa:	81 f0       	breq	.+32     	; 0x2dcc <DIO_enuSetPortVal+0x78>
    2dac:	13 c0       	rjmp	.+38     	; 0x2dd4 <DIO_enuSetPortVal+0x80>
		{
			case DIO_PORTA:
			PORTA = Copy_u8Value;
    2dae:	eb e3       	ldi	r30, 0x3B	; 59
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	8b 81       	ldd	r24, Y+3	; 0x03
    2db4:	80 83       	st	Z, r24
    2db6:	0e c0       	rjmp	.+28     	; 0x2dd4 <DIO_enuSetPortVal+0x80>
			break;
			
			case DIO_PORTB:
			PORTB = Copy_u8Value;
    2db8:	e8 e3       	ldi	r30, 0x38	; 56
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbe:	80 83       	st	Z, r24
    2dc0:	09 c0       	rjmp	.+18     	; 0x2dd4 <DIO_enuSetPortVal+0x80>
			break;
			
			case DIO_PORTC:
			PORTC = Copy_u8Value;
    2dc2:	e5 e3       	ldi	r30, 0x35	; 53
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc8:	80 83       	st	Z, r24
    2dca:	04 c0       	rjmp	.+8      	; 0x2dd4 <DIO_enuSetPortVal+0x80>
			break;
			
			case DIO_PORTD:
			PORTD = Copy_u8Value;
    2dcc:	e2 e3       	ldi	r30, 0x32	; 50
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd2:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    2dd4:	19 82       	std	Y+1, r1	; 0x01
    2dd6:	02 c0       	rjmp	.+4      	; 0x2ddc <DIO_enuSetPortVal+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2dd8:	83 e0       	ldi	r24, 0x03	; 3
    2dda:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dde:	0f 90       	pop	r0
    2de0:	0f 90       	pop	r0
    2de2:	0f 90       	pop	r0
    2de4:	0f 90       	pop	r0
    2de6:	0f 90       	pop	r0
    2de8:	cf 91       	pop	r28
    2dea:	df 91       	pop	r29
    2dec:	08 95       	ret

00002dee <DIO_enuGetPortVal>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t DIO_enuGetPortVal(u8 Copy_u8PortID, u8 *Copy_pu8Value)
{
    2dee:	df 93       	push	r29
    2df0:	cf 93       	push	r28
    2df2:	00 d0       	rcall	.+0      	; 0x2df4 <DIO_enuGetPortVal+0x6>
    2df4:	00 d0       	rcall	.+0      	; 0x2df6 <DIO_enuGetPortVal+0x8>
    2df6:	00 d0       	rcall	.+0      	; 0x2df8 <DIO_enuGetPortVal+0xa>
    2df8:	cd b7       	in	r28, 0x3d	; 61
    2dfa:	de b7       	in	r29, 0x3e	; 62
    2dfc:	8a 83       	std	Y+2, r24	; 0x02
    2dfe:	7c 83       	std	Y+4, r23	; 0x04
    2e00:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_u8PortID <= DIO_PORTD)
    2e06:	8a 81       	ldd	r24, Y+2	; 0x02
    2e08:	84 30       	cpi	r24, 0x04	; 4
    2e0a:	08 f0       	brcs	.+2      	; 0x2e0e <DIO_enuGetPortVal+0x20>
    2e0c:	43 c0       	rjmp	.+134    	; 0x2e94 <DIO_enuGetPortVal+0xa6>
	{
		if(Copy_pu8Value != NULL)
    2e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e10:	9c 81       	ldd	r25, Y+4	; 0x04
    2e12:	00 97       	sbiw	r24, 0x00	; 0
    2e14:	e1 f1       	breq	.+120    	; 0x2e8e <DIO_enuGetPortVal+0xa0>
		{
			switch(Copy_u8PortID)
    2e16:	8a 81       	ldd	r24, Y+2	; 0x02
    2e18:	28 2f       	mov	r18, r24
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	3e 83       	std	Y+6, r19	; 0x06
    2e1e:	2d 83       	std	Y+5, r18	; 0x05
    2e20:	8d 81       	ldd	r24, Y+5	; 0x05
    2e22:	9e 81       	ldd	r25, Y+6	; 0x06
    2e24:	81 30       	cpi	r24, 0x01	; 1
    2e26:	91 05       	cpc	r25, r1
    2e28:	e1 f0       	breq	.+56     	; 0x2e62 <DIO_enuGetPortVal+0x74>
    2e2a:	2d 81       	ldd	r18, Y+5	; 0x05
    2e2c:	3e 81       	ldd	r19, Y+6	; 0x06
    2e2e:	22 30       	cpi	r18, 0x02	; 2
    2e30:	31 05       	cpc	r19, r1
    2e32:	2c f4       	brge	.+10     	; 0x2e3e <DIO_enuGetPortVal+0x50>
    2e34:	8d 81       	ldd	r24, Y+5	; 0x05
    2e36:	9e 81       	ldd	r25, Y+6	; 0x06
    2e38:	00 97       	sbiw	r24, 0x00	; 0
    2e3a:	61 f0       	breq	.+24     	; 0x2e54 <DIO_enuGetPortVal+0x66>
    2e3c:	26 c0       	rjmp	.+76     	; 0x2e8a <DIO_enuGetPortVal+0x9c>
    2e3e:	2d 81       	ldd	r18, Y+5	; 0x05
    2e40:	3e 81       	ldd	r19, Y+6	; 0x06
    2e42:	22 30       	cpi	r18, 0x02	; 2
    2e44:	31 05       	cpc	r19, r1
    2e46:	a1 f0       	breq	.+40     	; 0x2e70 <DIO_enuGetPortVal+0x82>
    2e48:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4c:	83 30       	cpi	r24, 0x03	; 3
    2e4e:	91 05       	cpc	r25, r1
    2e50:	b1 f0       	breq	.+44     	; 0x2e7e <DIO_enuGetPortVal+0x90>
    2e52:	1b c0       	rjmp	.+54     	; 0x2e8a <DIO_enuGetPortVal+0x9c>
			{
				case DIO_PORTA:
				*Copy_pu8Value = PINA;
    2e54:	e9 e3       	ldi	r30, 0x39	; 57
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	80 81       	ld	r24, Z
    2e5a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e5c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e5e:	80 83       	st	Z, r24
    2e60:	14 c0       	rjmp	.+40     	; 0x2e8a <DIO_enuGetPortVal+0x9c>
				break;
				
				case DIO_PORTB:
				*Copy_pu8Value = PINB;
    2e62:	e6 e3       	ldi	r30, 0x36	; 54
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	80 81       	ld	r24, Z
    2e68:	eb 81       	ldd	r30, Y+3	; 0x03
    2e6a:	fc 81       	ldd	r31, Y+4	; 0x04
    2e6c:	80 83       	st	Z, r24
    2e6e:	0d c0       	rjmp	.+26     	; 0x2e8a <DIO_enuGetPortVal+0x9c>
				break;
				
				case DIO_PORTC:
				*Copy_pu8Value = PINC;
    2e70:	e3 e3       	ldi	r30, 0x33	; 51
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	80 81       	ld	r24, Z
    2e76:	eb 81       	ldd	r30, Y+3	; 0x03
    2e78:	fc 81       	ldd	r31, Y+4	; 0x04
    2e7a:	80 83       	st	Z, r24
    2e7c:	06 c0       	rjmp	.+12     	; 0x2e8a <DIO_enuGetPortVal+0x9c>
				break;
				
				case DIO_PORTD:
				*Copy_pu8Value = PIND;
    2e7e:	e0 e3       	ldi	r30, 0x30	; 48
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	80 81       	ld	r24, Z
    2e84:	eb 81       	ldd	r30, Y+3	; 0x03
    2e86:	fc 81       	ldd	r31, Y+4	; 0x04
    2e88:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    2e8a:	19 82       	std	Y+1, r1	; 0x01
    2e8c:	05 c0       	rjmp	.+10     	; 0x2e98 <DIO_enuGetPortVal+0xaa>
		}
		else
		{
			Local_enuErrorState = ES_NULL_POINTER;
    2e8e:	82 e0       	ldi	r24, 0x02	; 2
    2e90:	89 83       	std	Y+1, r24	; 0x01
    2e92:	02 c0       	rjmp	.+4      	; 0x2e98 <DIO_enuGetPortVal+0xaa>
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2e94:	83 e0       	ldi	r24, 0x03	; 3
    2e96:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e9a:	26 96       	adiw	r28, 0x06	; 6
    2e9c:	0f b6       	in	r0, 0x3f	; 63
    2e9e:	f8 94       	cli
    2ea0:	de bf       	out	0x3e, r29	; 62
    2ea2:	0f be       	out	0x3f, r0	; 63
    2ea4:	cd bf       	out	0x3d, r28	; 61
    2ea6:	cf 91       	pop	r28
    2ea8:	df 91       	pop	r29
    2eaa:	08 95       	ret

00002eac <DIO_enuTogPortVal>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t DIO_enuTogPortVal(u8 Copy_u8PortID)
{
    2eac:	df 93       	push	r29
    2eae:	cf 93       	push	r28
    2eb0:	00 d0       	rcall	.+0      	; 0x2eb2 <DIO_enuTogPortVal+0x6>
    2eb2:	00 d0       	rcall	.+0      	; 0x2eb4 <DIO_enuTogPortVal+0x8>
    2eb4:	cd b7       	in	r28, 0x3d	; 61
    2eb6:	de b7       	in	r29, 0x3e	; 62
    2eb8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_u8PortID <= DIO_PORTD)
    2ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec0:	84 30       	cpi	r24, 0x04	; 4
    2ec2:	08 f0       	brcs	.+2      	; 0x2ec6 <DIO_enuTogPortVal+0x1a>
    2ec4:	40 c0       	rjmp	.+128    	; 0x2f46 <DIO_enuTogPortVal+0x9a>
	{
		switch(Copy_u8PortID)
    2ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec8:	28 2f       	mov	r18, r24
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	3c 83       	std	Y+4, r19	; 0x04
    2ece:	2b 83       	std	Y+3, r18	; 0x03
    2ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed4:	81 30       	cpi	r24, 0x01	; 1
    2ed6:	91 05       	cpc	r25, r1
    2ed8:	e9 f0       	breq	.+58     	; 0x2f14 <DIO_enuTogPortVal+0x68>
    2eda:	2b 81       	ldd	r18, Y+3	; 0x03
    2edc:	3c 81       	ldd	r19, Y+4	; 0x04
    2ede:	22 30       	cpi	r18, 0x02	; 2
    2ee0:	31 05       	cpc	r19, r1
    2ee2:	2c f4       	brge	.+10     	; 0x2eee <DIO_enuTogPortVal+0x42>
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee8:	00 97       	sbiw	r24, 0x00	; 0
    2eea:	61 f0       	breq	.+24     	; 0x2f04 <DIO_enuTogPortVal+0x58>
    2eec:	2a c0       	rjmp	.+84     	; 0x2f42 <DIO_enuTogPortVal+0x96>
    2eee:	2b 81       	ldd	r18, Y+3	; 0x03
    2ef0:	3c 81       	ldd	r19, Y+4	; 0x04
    2ef2:	22 30       	cpi	r18, 0x02	; 2
    2ef4:	31 05       	cpc	r19, r1
    2ef6:	b1 f0       	breq	.+44     	; 0x2f24 <DIO_enuTogPortVal+0x78>
    2ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    2efa:	9c 81       	ldd	r25, Y+4	; 0x04
    2efc:	83 30       	cpi	r24, 0x03	; 3
    2efe:	91 05       	cpc	r25, r1
    2f00:	c9 f0       	breq	.+50     	; 0x2f34 <DIO_enuTogPortVal+0x88>
    2f02:	1f c0       	rjmp	.+62     	; 0x2f42 <DIO_enuTogPortVal+0x96>
		{
			case DIO_PORTA:
			PORTA = ~PORTA;
    2f04:	ab e3       	ldi	r26, 0x3B	; 59
    2f06:	b0 e0       	ldi	r27, 0x00	; 0
    2f08:	eb e3       	ldi	r30, 0x3B	; 59
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	80 81       	ld	r24, Z
    2f0e:	80 95       	com	r24
    2f10:	8c 93       	st	X, r24
    2f12:	17 c0       	rjmp	.+46     	; 0x2f42 <DIO_enuTogPortVal+0x96>
			break;
			
			case DIO_PORTB:
			PORTB = ~PORTB;
    2f14:	a8 e3       	ldi	r26, 0x38	; 56
    2f16:	b0 e0       	ldi	r27, 0x00	; 0
    2f18:	e8 e3       	ldi	r30, 0x38	; 56
    2f1a:	f0 e0       	ldi	r31, 0x00	; 0
    2f1c:	80 81       	ld	r24, Z
    2f1e:	80 95       	com	r24
    2f20:	8c 93       	st	X, r24
    2f22:	0f c0       	rjmp	.+30     	; 0x2f42 <DIO_enuTogPortVal+0x96>
			break;
			
			case DIO_PORTC:
			PORTC = ~PORTC;
    2f24:	a5 e3       	ldi	r26, 0x35	; 53
    2f26:	b0 e0       	ldi	r27, 0x00	; 0
    2f28:	e5 e3       	ldi	r30, 0x35	; 53
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	80 81       	ld	r24, Z
    2f2e:	80 95       	com	r24
    2f30:	8c 93       	st	X, r24
    2f32:	07 c0       	rjmp	.+14     	; 0x2f42 <DIO_enuTogPortVal+0x96>
			break;
			
			case DIO_PORTD:
			PORTD = ~PORTD;
    2f34:	a2 e3       	ldi	r26, 0x32	; 50
    2f36:	b0 e0       	ldi	r27, 0x00	; 0
    2f38:	e2 e3       	ldi	r30, 0x32	; 50
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	80 81       	ld	r24, Z
    2f3e:	80 95       	com	r24
    2f40:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    2f42:	19 82       	std	Y+1, r1	; 0x01
    2f44:	02 c0       	rjmp	.+4      	; 0x2f4a <DIO_enuTogPortVal+0x9e>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2f46:	83 e0       	ldi	r24, 0x03	; 3
    2f48:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f4c:	0f 90       	pop	r0
    2f4e:	0f 90       	pop	r0
    2f50:	0f 90       	pop	r0
    2f52:	0f 90       	pop	r0
    2f54:	cf 91       	pop	r28
    2f56:	df 91       	pop	r29
    2f58:	08 95       	ret

00002f5a <DIO_enuSetPinDirection>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    2f5a:	df 93       	push	r29
    2f5c:	cf 93       	push	r28
    2f5e:	00 d0       	rcall	.+0      	; 0x2f60 <DIO_enuSetPinDirection+0x6>
    2f60:	00 d0       	rcall	.+0      	; 0x2f62 <DIO_enuSetPinDirection+0x8>
    2f62:	00 d0       	rcall	.+0      	; 0x2f64 <DIO_enuSetPinDirection+0xa>
    2f64:	cd b7       	in	r28, 0x3d	; 61
    2f66:	de b7       	in	r29, 0x3e	; 62
    2f68:	8a 83       	std	Y+2, r24	; 0x02
    2f6a:	6b 83       	std	Y+3, r22	; 0x03
    2f6c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
    2f72:	8a 81       	ldd	r24, Y+2	; 0x02
    2f74:	84 30       	cpi	r24, 0x04	; 4
    2f76:	08 f0       	brcs	.+2      	; 0x2f7a <DIO_enuSetPinDirection+0x20>
    2f78:	d0 c0       	rjmp	.+416    	; 0x311a <DIO_enuSetPinDirection+0x1c0>
    2f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7c:	88 30       	cpi	r24, 0x08	; 8
    2f7e:	08 f0       	brcs	.+2      	; 0x2f82 <DIO_enuSetPinDirection+0x28>
    2f80:	cc c0       	rjmp	.+408    	; 0x311a <DIO_enuSetPinDirection+0x1c0>
    2f82:	8c 81       	ldd	r24, Y+4	; 0x04
    2f84:	82 30       	cpi	r24, 0x02	; 2
    2f86:	08 f0       	brcs	.+2      	; 0x2f8a <DIO_enuSetPinDirection+0x30>
    2f88:	c8 c0       	rjmp	.+400    	; 0x311a <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
    2f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8c:	28 2f       	mov	r18, r24
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	3e 83       	std	Y+6, r19	; 0x06
    2f92:	2d 83       	std	Y+5, r18	; 0x05
    2f94:	6d 81       	ldd	r22, Y+5	; 0x05
    2f96:	7e 81       	ldd	r23, Y+6	; 0x06
    2f98:	61 30       	cpi	r22, 0x01	; 1
    2f9a:	71 05       	cpc	r23, r1
    2f9c:	09 f4       	brne	.+2      	; 0x2fa0 <DIO_enuSetPinDirection+0x46>
    2f9e:	41 c0       	rjmp	.+130    	; 0x3022 <DIO_enuSetPinDirection+0xc8>
    2fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa4:	82 30       	cpi	r24, 0x02	; 2
    2fa6:	91 05       	cpc	r25, r1
    2fa8:	34 f4       	brge	.+12     	; 0x2fb6 <DIO_enuSetPinDirection+0x5c>
    2faa:	2d 81       	ldd	r18, Y+5	; 0x05
    2fac:	3e 81       	ldd	r19, Y+6	; 0x06
    2fae:	21 15       	cp	r18, r1
    2fb0:	31 05       	cpc	r19, r1
    2fb2:	71 f0       	breq	.+28     	; 0x2fd0 <DIO_enuSetPinDirection+0x76>
    2fb4:	b0 c0       	rjmp	.+352    	; 0x3116 <DIO_enuSetPinDirection+0x1bc>
    2fb6:	6d 81       	ldd	r22, Y+5	; 0x05
    2fb8:	7e 81       	ldd	r23, Y+6	; 0x06
    2fba:	62 30       	cpi	r22, 0x02	; 2
    2fbc:	71 05       	cpc	r23, r1
    2fbe:	09 f4       	brne	.+2      	; 0x2fc2 <DIO_enuSetPinDirection+0x68>
    2fc0:	59 c0       	rjmp	.+178    	; 0x3074 <DIO_enuSetPinDirection+0x11a>
    2fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc6:	83 30       	cpi	r24, 0x03	; 3
    2fc8:	91 05       	cpc	r25, r1
    2fca:	09 f4       	brne	.+2      	; 0x2fce <DIO_enuSetPinDirection+0x74>
    2fcc:	7c c0       	rjmp	.+248    	; 0x30c6 <DIO_enuSetPinDirection+0x16c>
    2fce:	a3 c0       	rjmp	.+326    	; 0x3116 <DIO_enuSetPinDirection+0x1bc>
		{
			case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    2fd0:	aa e3       	ldi	r26, 0x3A	; 58
    2fd2:	b0 e0       	ldi	r27, 0x00	; 0
    2fd4:	ea e3       	ldi	r30, 0x3A	; 58
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	80 81       	ld	r24, Z
    2fda:	48 2f       	mov	r20, r24
    2fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fde:	28 2f       	mov	r18, r24
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	02 c0       	rjmp	.+4      	; 0x2fec <DIO_enuSetPinDirection+0x92>
    2fe8:	88 0f       	add	r24, r24
    2fea:	99 1f       	adc	r25, r25
    2fec:	2a 95       	dec	r18
    2fee:	e2 f7       	brpl	.-8      	; 0x2fe8 <DIO_enuSetPinDirection+0x8e>
    2ff0:	80 95       	com	r24
    2ff2:	84 23       	and	r24, r20
    2ff4:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
    2ff6:	aa e3       	ldi	r26, 0x3A	; 58
    2ff8:	b0 e0       	ldi	r27, 0x00	; 0
    2ffa:	ea e3       	ldi	r30, 0x3A	; 58
    2ffc:	f0 e0       	ldi	r31, 0x00	; 0
    2ffe:	80 81       	ld	r24, Z
    3000:	48 2f       	mov	r20, r24
    3002:	8c 81       	ldd	r24, Y+4	; 0x04
    3004:	28 2f       	mov	r18, r24
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	8b 81       	ldd	r24, Y+3	; 0x03
    300a:	88 2f       	mov	r24, r24
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	b9 01       	movw	r22, r18
    3010:	02 c0       	rjmp	.+4      	; 0x3016 <DIO_enuSetPinDirection+0xbc>
    3012:	66 0f       	add	r22, r22
    3014:	77 1f       	adc	r23, r23
    3016:	8a 95       	dec	r24
    3018:	e2 f7       	brpl	.-8      	; 0x3012 <DIO_enuSetPinDirection+0xb8>
    301a:	cb 01       	movw	r24, r22
    301c:	84 2b       	or	r24, r20
    301e:	8c 93       	st	X, r24
    3020:	7a c0       	rjmp	.+244    	; 0x3116 <DIO_enuSetPinDirection+0x1bc>
			break;
			
			case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    3022:	a7 e3       	ldi	r26, 0x37	; 55
    3024:	b0 e0       	ldi	r27, 0x00	; 0
    3026:	e7 e3       	ldi	r30, 0x37	; 55
    3028:	f0 e0       	ldi	r31, 0x00	; 0
    302a:	80 81       	ld	r24, Z
    302c:	48 2f       	mov	r20, r24
    302e:	8b 81       	ldd	r24, Y+3	; 0x03
    3030:	28 2f       	mov	r18, r24
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	02 c0       	rjmp	.+4      	; 0x303e <DIO_enuSetPinDirection+0xe4>
    303a:	88 0f       	add	r24, r24
    303c:	99 1f       	adc	r25, r25
    303e:	2a 95       	dec	r18
    3040:	e2 f7       	brpl	.-8      	; 0x303a <DIO_enuSetPinDirection+0xe0>
    3042:	80 95       	com	r24
    3044:	84 23       	and	r24, r20
    3046:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
    3048:	a7 e3       	ldi	r26, 0x37	; 55
    304a:	b0 e0       	ldi	r27, 0x00	; 0
    304c:	e7 e3       	ldi	r30, 0x37	; 55
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	80 81       	ld	r24, Z
    3052:	48 2f       	mov	r20, r24
    3054:	8c 81       	ldd	r24, Y+4	; 0x04
    3056:	28 2f       	mov	r18, r24
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	8b 81       	ldd	r24, Y+3	; 0x03
    305c:	88 2f       	mov	r24, r24
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	b9 01       	movw	r22, r18
    3062:	02 c0       	rjmp	.+4      	; 0x3068 <DIO_enuSetPinDirection+0x10e>
    3064:	66 0f       	add	r22, r22
    3066:	77 1f       	adc	r23, r23
    3068:	8a 95       	dec	r24
    306a:	e2 f7       	brpl	.-8      	; 0x3064 <DIO_enuSetPinDirection+0x10a>
    306c:	cb 01       	movw	r24, r22
    306e:	84 2b       	or	r24, r20
    3070:	8c 93       	st	X, r24
    3072:	51 c0       	rjmp	.+162    	; 0x3116 <DIO_enuSetPinDirection+0x1bc>
			break;
			
			case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    3074:	a4 e3       	ldi	r26, 0x34	; 52
    3076:	b0 e0       	ldi	r27, 0x00	; 0
    3078:	e4 e3       	ldi	r30, 0x34	; 52
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	80 81       	ld	r24, Z
    307e:	48 2f       	mov	r20, r24
    3080:	8b 81       	ldd	r24, Y+3	; 0x03
    3082:	28 2f       	mov	r18, r24
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	02 c0       	rjmp	.+4      	; 0x3090 <DIO_enuSetPinDirection+0x136>
    308c:	88 0f       	add	r24, r24
    308e:	99 1f       	adc	r25, r25
    3090:	2a 95       	dec	r18
    3092:	e2 f7       	brpl	.-8      	; 0x308c <DIO_enuSetPinDirection+0x132>
    3094:	80 95       	com	r24
    3096:	84 23       	and	r24, r20
    3098:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
    309a:	a4 e3       	ldi	r26, 0x34	; 52
    309c:	b0 e0       	ldi	r27, 0x00	; 0
    309e:	e4 e3       	ldi	r30, 0x34	; 52
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	80 81       	ld	r24, Z
    30a4:	48 2f       	mov	r20, r24
    30a6:	8c 81       	ldd	r24, Y+4	; 0x04
    30a8:	28 2f       	mov	r18, r24
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	8b 81       	ldd	r24, Y+3	; 0x03
    30ae:	88 2f       	mov	r24, r24
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	b9 01       	movw	r22, r18
    30b4:	02 c0       	rjmp	.+4      	; 0x30ba <DIO_enuSetPinDirection+0x160>
    30b6:	66 0f       	add	r22, r22
    30b8:	77 1f       	adc	r23, r23
    30ba:	8a 95       	dec	r24
    30bc:	e2 f7       	brpl	.-8      	; 0x30b6 <DIO_enuSetPinDirection+0x15c>
    30be:	cb 01       	movw	r24, r22
    30c0:	84 2b       	or	r24, r20
    30c2:	8c 93       	st	X, r24
    30c4:	28 c0       	rjmp	.+80     	; 0x3116 <DIO_enuSetPinDirection+0x1bc>
			break;
			
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    30c6:	a1 e3       	ldi	r26, 0x31	; 49
    30c8:	b0 e0       	ldi	r27, 0x00	; 0
    30ca:	e1 e3       	ldi	r30, 0x31	; 49
    30cc:	f0 e0       	ldi	r31, 0x00	; 0
    30ce:	80 81       	ld	r24, Z
    30d0:	48 2f       	mov	r20, r24
    30d2:	8b 81       	ldd	r24, Y+3	; 0x03
    30d4:	28 2f       	mov	r18, r24
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	81 e0       	ldi	r24, 0x01	; 1
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	02 c0       	rjmp	.+4      	; 0x30e2 <DIO_enuSetPinDirection+0x188>
    30de:	88 0f       	add	r24, r24
    30e0:	99 1f       	adc	r25, r25
    30e2:	2a 95       	dec	r18
    30e4:	e2 f7       	brpl	.-8      	; 0x30de <DIO_enuSetPinDirection+0x184>
    30e6:	80 95       	com	r24
    30e8:	84 23       	and	r24, r20
    30ea:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
    30ec:	a1 e3       	ldi	r26, 0x31	; 49
    30ee:	b0 e0       	ldi	r27, 0x00	; 0
    30f0:	e1 e3       	ldi	r30, 0x31	; 49
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	80 81       	ld	r24, Z
    30f6:	48 2f       	mov	r20, r24
    30f8:	8c 81       	ldd	r24, Y+4	; 0x04
    30fa:	28 2f       	mov	r18, r24
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3100:	88 2f       	mov	r24, r24
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	b9 01       	movw	r22, r18
    3106:	02 c0       	rjmp	.+4      	; 0x310c <DIO_enuSetPinDirection+0x1b2>
    3108:	66 0f       	add	r22, r22
    310a:	77 1f       	adc	r23, r23
    310c:	8a 95       	dec	r24
    310e:	e2 f7       	brpl	.-8      	; 0x3108 <DIO_enuSetPinDirection+0x1ae>
    3110:	cb 01       	movw	r24, r22
    3112:	84 2b       	or	r24, r20
    3114:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    3116:	19 82       	std	Y+1, r1	; 0x01
    3118:	02 c0       	rjmp	.+4      	; 0x311e <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    311a:	83 e0       	ldi	r24, 0x03	; 3
    311c:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    311e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3120:	26 96       	adiw	r28, 0x06	; 6
    3122:	0f b6       	in	r0, 0x3f	; 63
    3124:	f8 94       	cli
    3126:	de bf       	out	0x3e, r29	; 62
    3128:	0f be       	out	0x3f, r0	; 63
    312a:	cd bf       	out	0x3d, r28	; 61
    312c:	cf 91       	pop	r28
    312e:	df 91       	pop	r29
    3130:	08 95       	ret

00003132 <DIO_enuSetPinVal>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t DIO_enuSetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    3132:	df 93       	push	r29
    3134:	cf 93       	push	r28
    3136:	00 d0       	rcall	.+0      	; 0x3138 <DIO_enuSetPinVal+0x6>
    3138:	00 d0       	rcall	.+0      	; 0x313a <DIO_enuSetPinVal+0x8>
    313a:	00 d0       	rcall	.+0      	; 0x313c <DIO_enuSetPinVal+0xa>
    313c:	cd b7       	in	r28, 0x3d	; 61
    313e:	de b7       	in	r29, 0x3e	; 62
    3140:	8a 83       	std	Y+2, r24	; 0x02
    3142:	6b 83       	std	Y+3, r22	; 0x03
    3144:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
    314a:	8a 81       	ldd	r24, Y+2	; 0x02
    314c:	84 30       	cpi	r24, 0x04	; 4
    314e:	08 f0       	brcs	.+2      	; 0x3152 <DIO_enuSetPinVal+0x20>
    3150:	d0 c0       	rjmp	.+416    	; 0x32f2 <DIO_enuSetPinVal+0x1c0>
    3152:	8b 81       	ldd	r24, Y+3	; 0x03
    3154:	88 30       	cpi	r24, 0x08	; 8
    3156:	08 f0       	brcs	.+2      	; 0x315a <DIO_enuSetPinVal+0x28>
    3158:	cc c0       	rjmp	.+408    	; 0x32f2 <DIO_enuSetPinVal+0x1c0>
    315a:	8c 81       	ldd	r24, Y+4	; 0x04
    315c:	82 30       	cpi	r24, 0x02	; 2
    315e:	08 f0       	brcs	.+2      	; 0x3162 <DIO_enuSetPinVal+0x30>
    3160:	c8 c0       	rjmp	.+400    	; 0x32f2 <DIO_enuSetPinVal+0x1c0>
	{
		switch(Copy_u8PortID)
    3162:	8a 81       	ldd	r24, Y+2	; 0x02
    3164:	28 2f       	mov	r18, r24
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	3e 83       	std	Y+6, r19	; 0x06
    316a:	2d 83       	std	Y+5, r18	; 0x05
    316c:	6d 81       	ldd	r22, Y+5	; 0x05
    316e:	7e 81       	ldd	r23, Y+6	; 0x06
    3170:	61 30       	cpi	r22, 0x01	; 1
    3172:	71 05       	cpc	r23, r1
    3174:	09 f4       	brne	.+2      	; 0x3178 <DIO_enuSetPinVal+0x46>
    3176:	41 c0       	rjmp	.+130    	; 0x31fa <DIO_enuSetPinVal+0xc8>
    3178:	8d 81       	ldd	r24, Y+5	; 0x05
    317a:	9e 81       	ldd	r25, Y+6	; 0x06
    317c:	82 30       	cpi	r24, 0x02	; 2
    317e:	91 05       	cpc	r25, r1
    3180:	34 f4       	brge	.+12     	; 0x318e <DIO_enuSetPinVal+0x5c>
    3182:	2d 81       	ldd	r18, Y+5	; 0x05
    3184:	3e 81       	ldd	r19, Y+6	; 0x06
    3186:	21 15       	cp	r18, r1
    3188:	31 05       	cpc	r19, r1
    318a:	71 f0       	breq	.+28     	; 0x31a8 <DIO_enuSetPinVal+0x76>
    318c:	b0 c0       	rjmp	.+352    	; 0x32ee <DIO_enuSetPinVal+0x1bc>
    318e:	6d 81       	ldd	r22, Y+5	; 0x05
    3190:	7e 81       	ldd	r23, Y+6	; 0x06
    3192:	62 30       	cpi	r22, 0x02	; 2
    3194:	71 05       	cpc	r23, r1
    3196:	09 f4       	brne	.+2      	; 0x319a <DIO_enuSetPinVal+0x68>
    3198:	59 c0       	rjmp	.+178    	; 0x324c <DIO_enuSetPinVal+0x11a>
    319a:	8d 81       	ldd	r24, Y+5	; 0x05
    319c:	9e 81       	ldd	r25, Y+6	; 0x06
    319e:	83 30       	cpi	r24, 0x03	; 3
    31a0:	91 05       	cpc	r25, r1
    31a2:	09 f4       	brne	.+2      	; 0x31a6 <DIO_enuSetPinVal+0x74>
    31a4:	7c c0       	rjmp	.+248    	; 0x329e <DIO_enuSetPinVal+0x16c>
    31a6:	a3 c0       	rjmp	.+326    	; 0x32ee <DIO_enuSetPinVal+0x1bc>
		{
			case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    31a8:	ab e3       	ldi	r26, 0x3B	; 59
    31aa:	b0 e0       	ldi	r27, 0x00	; 0
    31ac:	eb e3       	ldi	r30, 0x3B	; 59
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	80 81       	ld	r24, Z
    31b2:	48 2f       	mov	r20, r24
    31b4:	8b 81       	ldd	r24, Y+3	; 0x03
    31b6:	28 2f       	mov	r18, r24
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	02 c0       	rjmp	.+4      	; 0x31c4 <DIO_enuSetPinVal+0x92>
    31c0:	88 0f       	add	r24, r24
    31c2:	99 1f       	adc	r25, r25
    31c4:	2a 95       	dec	r18
    31c6:	e2 f7       	brpl	.-8      	; 0x31c0 <DIO_enuSetPinVal+0x8e>
    31c8:	80 95       	com	r24
    31ca:	84 23       	and	r24, r20
    31cc:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
    31ce:	ab e3       	ldi	r26, 0x3B	; 59
    31d0:	b0 e0       	ldi	r27, 0x00	; 0
    31d2:	eb e3       	ldi	r30, 0x3B	; 59
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	80 81       	ld	r24, Z
    31d8:	48 2f       	mov	r20, r24
    31da:	8c 81       	ldd	r24, Y+4	; 0x04
    31dc:	28 2f       	mov	r18, r24
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	8b 81       	ldd	r24, Y+3	; 0x03
    31e2:	88 2f       	mov	r24, r24
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	b9 01       	movw	r22, r18
    31e8:	02 c0       	rjmp	.+4      	; 0x31ee <DIO_enuSetPinVal+0xbc>
    31ea:	66 0f       	add	r22, r22
    31ec:	77 1f       	adc	r23, r23
    31ee:	8a 95       	dec	r24
    31f0:	e2 f7       	brpl	.-8      	; 0x31ea <DIO_enuSetPinVal+0xb8>
    31f2:	cb 01       	movw	r24, r22
    31f4:	84 2b       	or	r24, r20
    31f6:	8c 93       	st	X, r24
    31f8:	7a c0       	rjmp	.+244    	; 0x32ee <DIO_enuSetPinVal+0x1bc>
			break;
			
			case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    31fa:	a8 e3       	ldi	r26, 0x38	; 56
    31fc:	b0 e0       	ldi	r27, 0x00	; 0
    31fe:	e8 e3       	ldi	r30, 0x38	; 56
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	80 81       	ld	r24, Z
    3204:	48 2f       	mov	r20, r24
    3206:	8b 81       	ldd	r24, Y+3	; 0x03
    3208:	28 2f       	mov	r18, r24
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	02 c0       	rjmp	.+4      	; 0x3216 <DIO_enuSetPinVal+0xe4>
    3212:	88 0f       	add	r24, r24
    3214:	99 1f       	adc	r25, r25
    3216:	2a 95       	dec	r18
    3218:	e2 f7       	brpl	.-8      	; 0x3212 <DIO_enuSetPinVal+0xe0>
    321a:	80 95       	com	r24
    321c:	84 23       	and	r24, r20
    321e:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
    3220:	a8 e3       	ldi	r26, 0x38	; 56
    3222:	b0 e0       	ldi	r27, 0x00	; 0
    3224:	e8 e3       	ldi	r30, 0x38	; 56
    3226:	f0 e0       	ldi	r31, 0x00	; 0
    3228:	80 81       	ld	r24, Z
    322a:	48 2f       	mov	r20, r24
    322c:	8c 81       	ldd	r24, Y+4	; 0x04
    322e:	28 2f       	mov	r18, r24
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	8b 81       	ldd	r24, Y+3	; 0x03
    3234:	88 2f       	mov	r24, r24
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	b9 01       	movw	r22, r18
    323a:	02 c0       	rjmp	.+4      	; 0x3240 <DIO_enuSetPinVal+0x10e>
    323c:	66 0f       	add	r22, r22
    323e:	77 1f       	adc	r23, r23
    3240:	8a 95       	dec	r24
    3242:	e2 f7       	brpl	.-8      	; 0x323c <DIO_enuSetPinVal+0x10a>
    3244:	cb 01       	movw	r24, r22
    3246:	84 2b       	or	r24, r20
    3248:	8c 93       	st	X, r24
    324a:	51 c0       	rjmp	.+162    	; 0x32ee <DIO_enuSetPinVal+0x1bc>
			break;
			
			case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    324c:	a5 e3       	ldi	r26, 0x35	; 53
    324e:	b0 e0       	ldi	r27, 0x00	; 0
    3250:	e5 e3       	ldi	r30, 0x35	; 53
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	80 81       	ld	r24, Z
    3256:	48 2f       	mov	r20, r24
    3258:	8b 81       	ldd	r24, Y+3	; 0x03
    325a:	28 2f       	mov	r18, r24
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	02 c0       	rjmp	.+4      	; 0x3268 <DIO_enuSetPinVal+0x136>
    3264:	88 0f       	add	r24, r24
    3266:	99 1f       	adc	r25, r25
    3268:	2a 95       	dec	r18
    326a:	e2 f7       	brpl	.-8      	; 0x3264 <DIO_enuSetPinVal+0x132>
    326c:	80 95       	com	r24
    326e:	84 23       	and	r24, r20
    3270:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
    3272:	a5 e3       	ldi	r26, 0x35	; 53
    3274:	b0 e0       	ldi	r27, 0x00	; 0
    3276:	e5 e3       	ldi	r30, 0x35	; 53
    3278:	f0 e0       	ldi	r31, 0x00	; 0
    327a:	80 81       	ld	r24, Z
    327c:	48 2f       	mov	r20, r24
    327e:	8c 81       	ldd	r24, Y+4	; 0x04
    3280:	28 2f       	mov	r18, r24
    3282:	30 e0       	ldi	r19, 0x00	; 0
    3284:	8b 81       	ldd	r24, Y+3	; 0x03
    3286:	88 2f       	mov	r24, r24
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	b9 01       	movw	r22, r18
    328c:	02 c0       	rjmp	.+4      	; 0x3292 <DIO_enuSetPinVal+0x160>
    328e:	66 0f       	add	r22, r22
    3290:	77 1f       	adc	r23, r23
    3292:	8a 95       	dec	r24
    3294:	e2 f7       	brpl	.-8      	; 0x328e <DIO_enuSetPinVal+0x15c>
    3296:	cb 01       	movw	r24, r22
    3298:	84 2b       	or	r24, r20
    329a:	8c 93       	st	X, r24
    329c:	28 c0       	rjmp	.+80     	; 0x32ee <DIO_enuSetPinVal+0x1bc>
			break;
			
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    329e:	a2 e3       	ldi	r26, 0x32	; 50
    32a0:	b0 e0       	ldi	r27, 0x00	; 0
    32a2:	e2 e3       	ldi	r30, 0x32	; 50
    32a4:	f0 e0       	ldi	r31, 0x00	; 0
    32a6:	80 81       	ld	r24, Z
    32a8:	48 2f       	mov	r20, r24
    32aa:	8b 81       	ldd	r24, Y+3	; 0x03
    32ac:	28 2f       	mov	r18, r24
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	02 c0       	rjmp	.+4      	; 0x32ba <DIO_enuSetPinVal+0x188>
    32b6:	88 0f       	add	r24, r24
    32b8:	99 1f       	adc	r25, r25
    32ba:	2a 95       	dec	r18
    32bc:	e2 f7       	brpl	.-8      	; 0x32b6 <DIO_enuSetPinVal+0x184>
    32be:	80 95       	com	r24
    32c0:	84 23       	and	r24, r20
    32c2:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
    32c4:	a2 e3       	ldi	r26, 0x32	; 50
    32c6:	b0 e0       	ldi	r27, 0x00	; 0
    32c8:	e2 e3       	ldi	r30, 0x32	; 50
    32ca:	f0 e0       	ldi	r31, 0x00	; 0
    32cc:	80 81       	ld	r24, Z
    32ce:	48 2f       	mov	r20, r24
    32d0:	8c 81       	ldd	r24, Y+4	; 0x04
    32d2:	28 2f       	mov	r18, r24
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	8b 81       	ldd	r24, Y+3	; 0x03
    32d8:	88 2f       	mov	r24, r24
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	b9 01       	movw	r22, r18
    32de:	02 c0       	rjmp	.+4      	; 0x32e4 <DIO_enuSetPinVal+0x1b2>
    32e0:	66 0f       	add	r22, r22
    32e2:	77 1f       	adc	r23, r23
    32e4:	8a 95       	dec	r24
    32e6:	e2 f7       	brpl	.-8      	; 0x32e0 <DIO_enuSetPinVal+0x1ae>
    32e8:	cb 01       	movw	r24, r22
    32ea:	84 2b       	or	r24, r20
    32ec:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    32ee:	19 82       	std	Y+1, r1	; 0x01
    32f0:	02 c0       	rjmp	.+4      	; 0x32f6 <DIO_enuSetPinVal+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    32f2:	83 e0       	ldi	r24, 0x03	; 3
    32f4:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    32f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    32f8:	26 96       	adiw	r28, 0x06	; 6
    32fa:	0f b6       	in	r0, 0x3f	; 63
    32fc:	f8 94       	cli
    32fe:	de bf       	out	0x3e, r29	; 62
    3300:	0f be       	out	0x3f, r0	; 63
    3302:	cd bf       	out	0x3d, r28	; 61
    3304:	cf 91       	pop	r28
    3306:	df 91       	pop	r29
    3308:	08 95       	ret

0000330a <DIO_enuGetPinVal>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t DIO_enuGetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 *Copy_pu8Value)
{
    330a:	df 93       	push	r29
    330c:	cf 93       	push	r28
    330e:	cd b7       	in	r28, 0x3d	; 61
    3310:	de b7       	in	r29, 0x3e	; 62
    3312:	27 97       	sbiw	r28, 0x07	; 7
    3314:	0f b6       	in	r0, 0x3f	; 63
    3316:	f8 94       	cli
    3318:	de bf       	out	0x3e, r29	; 62
    331a:	0f be       	out	0x3f, r0	; 63
    331c:	cd bf       	out	0x3d, r28	; 61
    331e:	8a 83       	std	Y+2, r24	; 0x02
    3320:	6b 83       	std	Y+3, r22	; 0x03
    3322:	5d 83       	std	Y+5, r21	; 0x05
    3324:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_pu8Value != NULL)
    332a:	8c 81       	ldd	r24, Y+4	; 0x04
    332c:	9d 81       	ldd	r25, Y+5	; 0x05
    332e:	00 97       	sbiw	r24, 0x00	; 0
    3330:	09 f4       	brne	.+2      	; 0x3334 <DIO_enuGetPinVal+0x2a>
    3332:	7d c0       	rjmp	.+250    	; 0x342e <DIO_enuGetPinVal+0x124>
	{
		if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7)
    3334:	8a 81       	ldd	r24, Y+2	; 0x02
    3336:	84 30       	cpi	r24, 0x04	; 4
    3338:	08 f0       	brcs	.+2      	; 0x333c <DIO_enuGetPinVal+0x32>
    333a:	75 c0       	rjmp	.+234    	; 0x3426 <DIO_enuGetPinVal+0x11c>
    333c:	8b 81       	ldd	r24, Y+3	; 0x03
    333e:	88 30       	cpi	r24, 0x08	; 8
    3340:	08 f0       	brcs	.+2      	; 0x3344 <DIO_enuGetPinVal+0x3a>
    3342:	71 c0       	rjmp	.+226    	; 0x3426 <DIO_enuGetPinVal+0x11c>
		{
			switch(Copy_u8PortID)
    3344:	8a 81       	ldd	r24, Y+2	; 0x02
    3346:	28 2f       	mov	r18, r24
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	3f 83       	std	Y+7, r19	; 0x07
    334c:	2e 83       	std	Y+6, r18	; 0x06
    334e:	4e 81       	ldd	r20, Y+6	; 0x06
    3350:	5f 81       	ldd	r21, Y+7	; 0x07
    3352:	41 30       	cpi	r20, 0x01	; 1
    3354:	51 05       	cpc	r21, r1
    3356:	59 f1       	breq	.+86     	; 0x33ae <DIO_enuGetPinVal+0xa4>
    3358:	8e 81       	ldd	r24, Y+6	; 0x06
    335a:	9f 81       	ldd	r25, Y+7	; 0x07
    335c:	82 30       	cpi	r24, 0x02	; 2
    335e:	91 05       	cpc	r25, r1
    3360:	34 f4       	brge	.+12     	; 0x336e <DIO_enuGetPinVal+0x64>
    3362:	2e 81       	ldd	r18, Y+6	; 0x06
    3364:	3f 81       	ldd	r19, Y+7	; 0x07
    3366:	21 15       	cp	r18, r1
    3368:	31 05       	cpc	r19, r1
    336a:	69 f0       	breq	.+26     	; 0x3386 <DIO_enuGetPinVal+0x7c>
    336c:	5e c0       	rjmp	.+188    	; 0x342a <DIO_enuGetPinVal+0x120>
    336e:	4e 81       	ldd	r20, Y+6	; 0x06
    3370:	5f 81       	ldd	r21, Y+7	; 0x07
    3372:	42 30       	cpi	r20, 0x02	; 2
    3374:	51 05       	cpc	r21, r1
    3376:	79 f1       	breq	.+94     	; 0x33d6 <DIO_enuGetPinVal+0xcc>
    3378:	8e 81       	ldd	r24, Y+6	; 0x06
    337a:	9f 81       	ldd	r25, Y+7	; 0x07
    337c:	83 30       	cpi	r24, 0x03	; 3
    337e:	91 05       	cpc	r25, r1
    3380:	09 f4       	brne	.+2      	; 0x3384 <DIO_enuGetPinVal+0x7a>
    3382:	3d c0       	rjmp	.+122    	; 0x33fe <DIO_enuGetPinVal+0xf4>
    3384:	52 c0       	rjmp	.+164    	; 0x342a <DIO_enuGetPinVal+0x120>
			{
				case DIO_PORTA:
				*Copy_pu8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
    3386:	e9 e3       	ldi	r30, 0x39	; 57
    3388:	f0 e0       	ldi	r31, 0x00	; 0
    338a:	80 81       	ld	r24, Z
    338c:	28 2f       	mov	r18, r24
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	8b 81       	ldd	r24, Y+3	; 0x03
    3392:	88 2f       	mov	r24, r24
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	a9 01       	movw	r20, r18
    3398:	02 c0       	rjmp	.+4      	; 0x339e <DIO_enuGetPinVal+0x94>
    339a:	55 95       	asr	r21
    339c:	47 95       	ror	r20
    339e:	8a 95       	dec	r24
    33a0:	e2 f7       	brpl	.-8      	; 0x339a <DIO_enuGetPinVal+0x90>
    33a2:	ca 01       	movw	r24, r20
    33a4:	81 70       	andi	r24, 0x01	; 1
    33a6:	ec 81       	ldd	r30, Y+4	; 0x04
    33a8:	fd 81       	ldd	r31, Y+5	; 0x05
    33aa:	80 83       	st	Z, r24
    33ac:	3e c0       	rjmp	.+124    	; 0x342a <DIO_enuGetPinVal+0x120>
				break;
				
				case DIO_PORTB:
				*Copy_pu8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
    33ae:	e6 e3       	ldi	r30, 0x36	; 54
    33b0:	f0 e0       	ldi	r31, 0x00	; 0
    33b2:	80 81       	ld	r24, Z
    33b4:	28 2f       	mov	r18, r24
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ba:	88 2f       	mov	r24, r24
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	a9 01       	movw	r20, r18
    33c0:	02 c0       	rjmp	.+4      	; 0x33c6 <DIO_enuGetPinVal+0xbc>
    33c2:	55 95       	asr	r21
    33c4:	47 95       	ror	r20
    33c6:	8a 95       	dec	r24
    33c8:	e2 f7       	brpl	.-8      	; 0x33c2 <DIO_enuGetPinVal+0xb8>
    33ca:	ca 01       	movw	r24, r20
    33cc:	81 70       	andi	r24, 0x01	; 1
    33ce:	ec 81       	ldd	r30, Y+4	; 0x04
    33d0:	fd 81       	ldd	r31, Y+5	; 0x05
    33d2:	80 83       	st	Z, r24
    33d4:	2a c0       	rjmp	.+84     	; 0x342a <DIO_enuGetPinVal+0x120>
				break;
				
				case DIO_PORTC:
				*Copy_pu8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
    33d6:	e3 e3       	ldi	r30, 0x33	; 51
    33d8:	f0 e0       	ldi	r31, 0x00	; 0
    33da:	80 81       	ld	r24, Z
    33dc:	28 2f       	mov	r18, r24
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	8b 81       	ldd	r24, Y+3	; 0x03
    33e2:	88 2f       	mov	r24, r24
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	a9 01       	movw	r20, r18
    33e8:	02 c0       	rjmp	.+4      	; 0x33ee <DIO_enuGetPinVal+0xe4>
    33ea:	55 95       	asr	r21
    33ec:	47 95       	ror	r20
    33ee:	8a 95       	dec	r24
    33f0:	e2 f7       	brpl	.-8      	; 0x33ea <DIO_enuGetPinVal+0xe0>
    33f2:	ca 01       	movw	r24, r20
    33f4:	81 70       	andi	r24, 0x01	; 1
    33f6:	ec 81       	ldd	r30, Y+4	; 0x04
    33f8:	fd 81       	ldd	r31, Y+5	; 0x05
    33fa:	80 83       	st	Z, r24
    33fc:	16 c0       	rjmp	.+44     	; 0x342a <DIO_enuGetPinVal+0x120>
				break;
				
				case DIO_PORTD:
				*Copy_pu8Value = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
    33fe:	e0 e3       	ldi	r30, 0x30	; 48
    3400:	f0 e0       	ldi	r31, 0x00	; 0
    3402:	80 81       	ld	r24, Z
    3404:	28 2f       	mov	r18, r24
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	8b 81       	ldd	r24, Y+3	; 0x03
    340a:	88 2f       	mov	r24, r24
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	a9 01       	movw	r20, r18
    3410:	02 c0       	rjmp	.+4      	; 0x3416 <DIO_enuGetPinVal+0x10c>
    3412:	55 95       	asr	r21
    3414:	47 95       	ror	r20
    3416:	8a 95       	dec	r24
    3418:	e2 f7       	brpl	.-8      	; 0x3412 <DIO_enuGetPinVal+0x108>
    341a:	ca 01       	movw	r24, r20
    341c:	81 70       	andi	r24, 0x01	; 1
    341e:	ec 81       	ldd	r30, Y+4	; 0x04
    3420:	fd 81       	ldd	r31, Y+5	; 0x05
    3422:	80 83       	st	Z, r24
    3424:	02 c0       	rjmp	.+4      	; 0x342a <DIO_enuGetPinVal+0x120>
				break;
			}
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    3426:	83 e0       	ldi	r24, 0x03	; 3
    3428:	89 83       	std	Y+1, r24	; 0x01
		}
		Local_enuErrorState = ES_OK;
    342a:	19 82       	std	Y+1, r1	; 0x01
    342c:	02 c0       	rjmp	.+4      	; 0x3432 <DIO_enuGetPinVal+0x128>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    342e:	82 e0       	ldi	r24, 0x02	; 2
    3430:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    3432:	89 81       	ldd	r24, Y+1	; 0x01
}
    3434:	27 96       	adiw	r28, 0x07	; 7
    3436:	0f b6       	in	r0, 0x3f	; 63
    3438:	f8 94       	cli
    343a:	de bf       	out	0x3e, r29	; 62
    343c:	0f be       	out	0x3f, r0	; 63
    343e:	cd bf       	out	0x3d, r28	; 61
    3440:	cf 91       	pop	r28
    3442:	df 91       	pop	r29
    3444:	08 95       	ret

00003446 <DIO_enuTogPinVal>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t DIO_enuTogPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID)
{
    3446:	df 93       	push	r29
    3448:	cf 93       	push	r28
    344a:	00 d0       	rcall	.+0      	; 0x344c <DIO_enuTogPinVal+0x6>
    344c:	00 d0       	rcall	.+0      	; 0x344e <DIO_enuTogPinVal+0x8>
    344e:	0f 92       	push	r0
    3450:	cd b7       	in	r28, 0x3d	; 61
    3452:	de b7       	in	r29, 0x3e	; 62
    3454:	8a 83       	std	Y+2, r24	; 0x02
    3456:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    3458:	81 e0       	ldi	r24, 0x01	; 1
    345a:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7)
    345c:	8a 81       	ldd	r24, Y+2	; 0x02
    345e:	84 30       	cpi	r24, 0x04	; 4
    3460:	08 f0       	brcs	.+2      	; 0x3464 <DIO_enuTogPinVal+0x1e>
    3462:	74 c0       	rjmp	.+232    	; 0x354c <DIO_enuTogPinVal+0x106>
    3464:	8b 81       	ldd	r24, Y+3	; 0x03
    3466:	88 30       	cpi	r24, 0x08	; 8
    3468:	08 f0       	brcs	.+2      	; 0x346c <DIO_enuTogPinVal+0x26>
    346a:	70 c0       	rjmp	.+224    	; 0x354c <DIO_enuTogPinVal+0x106>
	{
		switch(Copy_u8PortID)
    346c:	8a 81       	ldd	r24, Y+2	; 0x02
    346e:	28 2f       	mov	r18, r24
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	3d 83       	std	Y+5, r19	; 0x05
    3474:	2c 83       	std	Y+4, r18	; 0x04
    3476:	8c 81       	ldd	r24, Y+4	; 0x04
    3478:	9d 81       	ldd	r25, Y+5	; 0x05
    347a:	81 30       	cpi	r24, 0x01	; 1
    347c:	91 05       	cpc	r25, r1
    347e:	49 f1       	breq	.+82     	; 0x34d2 <DIO_enuTogPinVal+0x8c>
    3480:	2c 81       	ldd	r18, Y+4	; 0x04
    3482:	3d 81       	ldd	r19, Y+5	; 0x05
    3484:	22 30       	cpi	r18, 0x02	; 2
    3486:	31 05       	cpc	r19, r1
    3488:	2c f4       	brge	.+10     	; 0x3494 <DIO_enuTogPinVal+0x4e>
    348a:	8c 81       	ldd	r24, Y+4	; 0x04
    348c:	9d 81       	ldd	r25, Y+5	; 0x05
    348e:	00 97       	sbiw	r24, 0x00	; 0
    3490:	61 f0       	breq	.+24     	; 0x34aa <DIO_enuTogPinVal+0x64>
    3492:	5a c0       	rjmp	.+180    	; 0x3548 <DIO_enuTogPinVal+0x102>
    3494:	2c 81       	ldd	r18, Y+4	; 0x04
    3496:	3d 81       	ldd	r19, Y+5	; 0x05
    3498:	22 30       	cpi	r18, 0x02	; 2
    349a:	31 05       	cpc	r19, r1
    349c:	71 f1       	breq	.+92     	; 0x34fa <DIO_enuTogPinVal+0xb4>
    349e:	8c 81       	ldd	r24, Y+4	; 0x04
    34a0:	9d 81       	ldd	r25, Y+5	; 0x05
    34a2:	83 30       	cpi	r24, 0x03	; 3
    34a4:	91 05       	cpc	r25, r1
    34a6:	e9 f1       	breq	.+122    	; 0x3522 <DIO_enuTogPinVal+0xdc>
    34a8:	4f c0       	rjmp	.+158    	; 0x3548 <DIO_enuTogPinVal+0x102>
		{
			case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT << Copy_u8PinID);
    34aa:	ab e3       	ldi	r26, 0x3B	; 59
    34ac:	b0 e0       	ldi	r27, 0x00	; 0
    34ae:	eb e3       	ldi	r30, 0x3B	; 59
    34b0:	f0 e0       	ldi	r31, 0x00	; 0
    34b2:	80 81       	ld	r24, Z
    34b4:	48 2f       	mov	r20, r24
    34b6:	8b 81       	ldd	r24, Y+3	; 0x03
    34b8:	28 2f       	mov	r18, r24
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	02 2e       	mov	r0, r18
    34c2:	02 c0       	rjmp	.+4      	; 0x34c8 <DIO_enuTogPinVal+0x82>
    34c4:	88 0f       	add	r24, r24
    34c6:	99 1f       	adc	r25, r25
    34c8:	0a 94       	dec	r0
    34ca:	e2 f7       	brpl	.-8      	; 0x34c4 <DIO_enuTogPinVal+0x7e>
    34cc:	84 27       	eor	r24, r20
    34ce:	8c 93       	st	X, r24
    34d0:	3b c0       	rjmp	.+118    	; 0x3548 <DIO_enuTogPinVal+0x102>
			break;
			
			case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT << Copy_u8PinID);
    34d2:	a8 e3       	ldi	r26, 0x38	; 56
    34d4:	b0 e0       	ldi	r27, 0x00	; 0
    34d6:	e8 e3       	ldi	r30, 0x38	; 56
    34d8:	f0 e0       	ldi	r31, 0x00	; 0
    34da:	80 81       	ld	r24, Z
    34dc:	48 2f       	mov	r20, r24
    34de:	8b 81       	ldd	r24, Y+3	; 0x03
    34e0:	28 2f       	mov	r18, r24
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	81 e0       	ldi	r24, 0x01	; 1
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	02 2e       	mov	r0, r18
    34ea:	02 c0       	rjmp	.+4      	; 0x34f0 <DIO_enuTogPinVal+0xaa>
    34ec:	88 0f       	add	r24, r24
    34ee:	99 1f       	adc	r25, r25
    34f0:	0a 94       	dec	r0
    34f2:	e2 f7       	brpl	.-8      	; 0x34ec <DIO_enuTogPinVal+0xa6>
    34f4:	84 27       	eor	r24, r20
    34f6:	8c 93       	st	X, r24
    34f8:	27 c0       	rjmp	.+78     	; 0x3548 <DIO_enuTogPinVal+0x102>
			break;
			
			case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT << Copy_u8PinID);
    34fa:	a5 e3       	ldi	r26, 0x35	; 53
    34fc:	b0 e0       	ldi	r27, 0x00	; 0
    34fe:	e5 e3       	ldi	r30, 0x35	; 53
    3500:	f0 e0       	ldi	r31, 0x00	; 0
    3502:	80 81       	ld	r24, Z
    3504:	48 2f       	mov	r20, r24
    3506:	8b 81       	ldd	r24, Y+3	; 0x03
    3508:	28 2f       	mov	r18, r24
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	02 2e       	mov	r0, r18
    3512:	02 c0       	rjmp	.+4      	; 0x3518 <DIO_enuTogPinVal+0xd2>
    3514:	88 0f       	add	r24, r24
    3516:	99 1f       	adc	r25, r25
    3518:	0a 94       	dec	r0
    351a:	e2 f7       	brpl	.-8      	; 0x3514 <DIO_enuTogPinVal+0xce>
    351c:	84 27       	eor	r24, r20
    351e:	8c 93       	st	X, r24
    3520:	13 c0       	rjmp	.+38     	; 0x3548 <DIO_enuTogPinVal+0x102>
			break;
			
			case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT << Copy_u8PinID);
    3522:	a2 e3       	ldi	r26, 0x32	; 50
    3524:	b0 e0       	ldi	r27, 0x00	; 0
    3526:	e2 e3       	ldi	r30, 0x32	; 50
    3528:	f0 e0       	ldi	r31, 0x00	; 0
    352a:	80 81       	ld	r24, Z
    352c:	48 2f       	mov	r20, r24
    352e:	8b 81       	ldd	r24, Y+3	; 0x03
    3530:	28 2f       	mov	r18, r24
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	02 2e       	mov	r0, r18
    353a:	02 c0       	rjmp	.+4      	; 0x3540 <DIO_enuTogPinVal+0xfa>
    353c:	88 0f       	add	r24, r24
    353e:	99 1f       	adc	r25, r25
    3540:	0a 94       	dec	r0
    3542:	e2 f7       	brpl	.-8      	; 0x353c <DIO_enuTogPinVal+0xf6>
    3544:	84 27       	eor	r24, r20
    3546:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    3548:	19 82       	std	Y+1, r1	; 0x01
    354a:	02 c0       	rjmp	.+4      	; 0x3550 <DIO_enuTogPinVal+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    354c:	83 e0       	ldi	r24, 0x03	; 3
    354e:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    3550:	89 81       	ldd	r24, Y+1	; 0x01
    3552:	0f 90       	pop	r0
    3554:	0f 90       	pop	r0
    3556:	0f 90       	pop	r0
    3558:	0f 90       	pop	r0
    355a:	0f 90       	pop	r0
    355c:	cf 91       	pop	r28
    355e:	df 91       	pop	r29
    3560:	08 95       	ret

00003562 <ADC_enuInit>:

static volatile void (*ADC_PFuncISRFunc)(void *) = NULL;
static volatile void *ADC_PvidISRParameter = NULL;

ES_t ADC_enuInit(void)
{
    3562:	df 93       	push	r29
    3564:	cf 93       	push	r28
    3566:	0f 92       	push	r0
    3568:	cd b7       	in	r28, 0x3d	; 61
    356a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    356c:	81 e0       	ldi	r24, 0x01	; 1
    356e:	89 83       	std	Y+1, r24	; 0x01
	
	/* Configure Voltage Reference */
	/* Mask the two bits of voltage reference */
	ADMUX &= VOLT_REF_MASK;
    3570:	a7 e2       	ldi	r26, 0x27	; 39
    3572:	b0 e0       	ldi	r27, 0x00	; 0
    3574:	e7 e2       	ldi	r30, 0x27	; 39
    3576:	f0 e0       	ldi	r31, 0x00	; 0
    3578:	80 81       	ld	r24, Z
    357a:	8f 73       	andi	r24, 0x3F	; 63
    357c:	8c 93       	st	X, r24
	#if ADC_VOLT_REF == AREF_REF
	ADMUX &= ~(MASK_BIT << REFS0);
    357e:	a7 e2       	ldi	r26, 0x27	; 39
    3580:	b0 e0       	ldi	r27, 0x00	; 0
    3582:	e7 e2       	ldi	r30, 0x27	; 39
    3584:	f0 e0       	ldi	r31, 0x00	; 0
    3586:	80 81       	ld	r24, Z
    3588:	8f 7b       	andi	r24, 0xBF	; 191
    358a:	8c 93       	st	X, r24
	ADMUX &= ~(MASK_BIT << REFS1);
    358c:	a7 e2       	ldi	r26, 0x27	; 39
    358e:	b0 e0       	ldi	r27, 0x00	; 0
    3590:	e7 e2       	ldi	r30, 0x27	; 39
    3592:	f0 e0       	ldi	r31, 0x00	; 0
    3594:	80 81       	ld	r24, Z
    3596:	8f 77       	andi	r24, 0x7F	; 127
    3598:	8c 93       	st	X, r24
	#error "ADC Voltage Referance has a wrong configuration"
	#endif
	
	/* Configure Adjustment */
	/* Mask the bit of adjustment */
	ADMUX &= ~(MASK_BIT << ADLAR);
    359a:	a7 e2       	ldi	r26, 0x27	; 39
    359c:	b0 e0       	ldi	r27, 0x00	; 0
    359e:	e7 e2       	ldi	r30, 0x27	; 39
    35a0:	f0 e0       	ldi	r31, 0x00	; 0
    35a2:	80 81       	ld	r24, Z
    35a4:	8f 7d       	andi	r24, 0xDF	; 223
    35a6:	8c 93       	st	X, r24
	#if ADC_ADJUST == RIGHT_ADJUST
	ADMUX &= ~(MASK_BIT << ADLAR);
    35a8:	a7 e2       	ldi	r26, 0x27	; 39
    35aa:	b0 e0       	ldi	r27, 0x00	; 0
    35ac:	e7 e2       	ldi	r30, 0x27	; 39
    35ae:	f0 e0       	ldi	r31, 0x00	; 0
    35b0:	80 81       	ld	r24, Z
    35b2:	8f 7d       	andi	r24, 0xDF	; 223
    35b4:	8c 93       	st	X, r24
	#error "ADC Adjustment has a wrong configuration"
	#endif
	
	/* Configure ADC Prescaler */
	/* Mask the three bits of Prescaler */
	ADCSRA &= PRESCALER_MASK;
    35b6:	a6 e2       	ldi	r26, 0x26	; 38
    35b8:	b0 e0       	ldi	r27, 0x00	; 0
    35ba:	e6 e2       	ldi	r30, 0x26	; 38
    35bc:	f0 e0       	ldi	r31, 0x00	; 0
    35be:	80 81       	ld	r24, Z
    35c0:	88 7f       	andi	r24, 0xF8	; 248
    35c2:	8c 93       	st	X, r24
	#elif ADC_PRESCALER == DIVISION_FACTOR_4
	ADCSRA &= ~(MASK_BIT << ADPS0);
	ADCSRA |=  (MASK_BIT << ADPS1);
	ADCSRA &= ~(MASK_BIT << ADPS2);
	#elif ADC_PRESCALER == DIVISION_FACTOR_8
	ADCSRA |=  (MASK_BIT << ADPS0);
    35c4:	a6 e2       	ldi	r26, 0x26	; 38
    35c6:	b0 e0       	ldi	r27, 0x00	; 0
    35c8:	e6 e2       	ldi	r30, 0x26	; 38
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	80 81       	ld	r24, Z
    35ce:	81 60       	ori	r24, 0x01	; 1
    35d0:	8c 93       	st	X, r24
	ADCSRA |=  (MASK_BIT << ADPS1);
    35d2:	a6 e2       	ldi	r26, 0x26	; 38
    35d4:	b0 e0       	ldi	r27, 0x00	; 0
    35d6:	e6 e2       	ldi	r30, 0x26	; 38
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	80 81       	ld	r24, Z
    35dc:	82 60       	ori	r24, 0x02	; 2
    35de:	8c 93       	st	X, r24
	ADCSRA &= ~(MASK_BIT << ADPS2);
    35e0:	a6 e2       	ldi	r26, 0x26	; 38
    35e2:	b0 e0       	ldi	r27, 0x00	; 0
    35e4:	e6 e2       	ldi	r30, 0x26	; 38
    35e6:	f0 e0       	ldi	r31, 0x00	; 0
    35e8:	80 81       	ld	r24, Z
    35ea:	8b 7f       	andi	r24, 0xFB	; 251
    35ec:	8c 93       	st	X, r24
	ADCSRA |=  (MASK_BIT << ADPS2);
	#else
	#error "ADC PreScaler has a wrong configuration"
	#endif
	
	return Local_enuErrorState;
    35ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    35f0:	0f 90       	pop	r0
    35f2:	cf 91       	pop	r28
    35f4:	df 91       	pop	r29
    35f6:	08 95       	ret

000035f8 <ADC_enuEnable>:

ES_t ADC_enuEnable(void)
{
    35f8:	df 93       	push	r29
    35fa:	cf 93       	push	r28
    35fc:	0f 92       	push	r0
    35fe:	cd b7       	in	r28, 0x3d	; 61
    3600:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    3602:	81 e0       	ldi	r24, 0x01	; 1
    3604:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA |= (MASK_BIT << ADEN);
    3606:	a6 e2       	ldi	r26, 0x26	; 38
    3608:	b0 e0       	ldi	r27, 0x00	; 0
    360a:	e6 e2       	ldi	r30, 0x26	; 38
    360c:	f0 e0       	ldi	r31, 0x00	; 0
    360e:	80 81       	ld	r24, Z
    3610:	80 68       	ori	r24, 0x80	; 128
    3612:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    3614:	89 81       	ldd	r24, Y+1	; 0x01
}
    3616:	0f 90       	pop	r0
    3618:	cf 91       	pop	r28
    361a:	df 91       	pop	r29
    361c:	08 95       	ret

0000361e <ADC_enuDisable>:

ES_t ADC_enuDisable(void)
{
    361e:	df 93       	push	r29
    3620:	cf 93       	push	r28
    3622:	0f 92       	push	r0
    3624:	cd b7       	in	r28, 0x3d	; 61
    3626:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA &= ~(MASK_BIT << ADEN);
    362c:	a6 e2       	ldi	r26, 0x26	; 38
    362e:	b0 e0       	ldi	r27, 0x00	; 0
    3630:	e6 e2       	ldi	r30, 0x26	; 38
    3632:	f0 e0       	ldi	r31, 0x00	; 0
    3634:	80 81       	ld	r24, Z
    3636:	8f 77       	andi	r24, 0x7F	; 127
    3638:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    363a:	89 81       	ldd	r24, Y+1	; 0x01
}
    363c:	0f 90       	pop	r0
    363e:	cf 91       	pop	r28
    3640:	df 91       	pop	r29
    3642:	08 95       	ret

00003644 <ADC_enuStartConversion>:

ES_t ADC_enuStartConversion(void)
{
    3644:	df 93       	push	r29
    3646:	cf 93       	push	r28
    3648:	0f 92       	push	r0
    364a:	cd b7       	in	r28, 0x3d	; 61
    364c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA |= (MASK_BIT << ADSC);
    3652:	a6 e2       	ldi	r26, 0x26	; 38
    3654:	b0 e0       	ldi	r27, 0x00	; 0
    3656:	e6 e2       	ldi	r30, 0x26	; 38
    3658:	f0 e0       	ldi	r31, 0x00	; 0
    365a:	80 81       	ld	r24, Z
    365c:	80 64       	ori	r24, 0x40	; 64
    365e:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    3660:	89 81       	ldd	r24, Y+1	; 0x01
}
    3662:	0f 90       	pop	r0
    3664:	cf 91       	pop	r28
    3666:	df 91       	pop	r29
    3668:	08 95       	ret

0000366a <ADC_enuSelectChannel>:

ES_t ADC_enuSelectChannel(u8 Copy_u8ChannelID)
{
    366a:	df 93       	push	r29
    366c:	cf 93       	push	r28
    366e:	00 d0       	rcall	.+0      	; 0x3670 <ADC_enuSelectChannel+0x6>
    3670:	cd b7       	in	r28, 0x3d	; 61
    3672:	de b7       	in	r29, 0x3e	; 62
    3674:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3676:	81 e0       	ldi	r24, 0x01	; 1
    3678:	89 83       	std	Y+1, r24	; 0x01
	
	/* Mask the five bits of channels */
	ADMUX &= CHANNALS_MASK;
    367a:	a7 e2       	ldi	r26, 0x27	; 39
    367c:	b0 e0       	ldi	r27, 0x00	; 0
    367e:	e7 e2       	ldi	r30, 0x27	; 39
    3680:	f0 e0       	ldi	r31, 0x00	; 0
    3682:	80 81       	ld	r24, Z
    3684:	80 7e       	andi	r24, 0xE0	; 224
    3686:	8c 93       	st	X, r24
	
	ADMUX |= Copy_u8ChannelID;
    3688:	a7 e2       	ldi	r26, 0x27	; 39
    368a:	b0 e0       	ldi	r27, 0x00	; 0
    368c:	e7 e2       	ldi	r30, 0x27	; 39
    368e:	f0 e0       	ldi	r31, 0x00	; 0
    3690:	90 81       	ld	r25, Z
    3692:	8a 81       	ldd	r24, Y+2	; 0x02
    3694:	89 2b       	or	r24, r25
    3696:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    3698:	89 81       	ldd	r24, Y+1	; 0x01
}
    369a:	0f 90       	pop	r0
    369c:	0f 90       	pop	r0
    369e:	cf 91       	pop	r28
    36a0:	df 91       	pop	r29
    36a2:	08 95       	ret

000036a4 <ADC_enuPollingSystem>:

ES_t ADC_enuPollingSystem(void)
{
    36a4:	df 93       	push	r29
    36a6:	cf 93       	push	r28
    36a8:	0f 92       	push	r0
    36aa:	cd b7       	in	r28, 0x3d	; 61
    36ac:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    36ae:	81 e0       	ldi	r24, 0x01	; 1
    36b0:	89 83       	std	Y+1, r24	; 0x01
	
	/* Busy Wait until flag is set */
	while(!((ADCSRA >> ADIF) & MASK_BIT));
    36b2:	e6 e2       	ldi	r30, 0x26	; 38
    36b4:	f0 e0       	ldi	r31, 0x00	; 0
    36b6:	80 81       	ld	r24, Z
    36b8:	82 95       	swap	r24
    36ba:	8f 70       	andi	r24, 0x0F	; 15
    36bc:	88 2f       	mov	r24, r24
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	81 70       	andi	r24, 0x01	; 1
    36c2:	90 70       	andi	r25, 0x00	; 0
    36c4:	00 97       	sbiw	r24, 0x00	; 0
    36c6:	a9 f3       	breq	.-22     	; 0x36b2 <ADC_enuPollingSystem+0xe>
	
	/* Write one to clear the flag */
	ADCSRA |= (MASK_BIT << ADIF);
    36c8:	a6 e2       	ldi	r26, 0x26	; 38
    36ca:	b0 e0       	ldi	r27, 0x00	; 0
    36cc:	e6 e2       	ldi	r30, 0x26	; 38
    36ce:	f0 e0       	ldi	r31, 0x00	; 0
    36d0:	80 81       	ld	r24, Z
    36d2:	80 61       	ori	r24, 0x10	; 16
    36d4:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    36d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    36d8:	0f 90       	pop	r0
    36da:	cf 91       	pop	r28
    36dc:	df 91       	pop	r29
    36de:	08 95       	ret

000036e0 <ADC_enuEnableInterrupt>:

ES_t ADC_enuEnableInterrupt(void)
{
    36e0:	df 93       	push	r29
    36e2:	cf 93       	push	r28
    36e4:	0f 92       	push	r0
    36e6:	cd b7       	in	r28, 0x3d	; 61
    36e8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    36ea:	81 e0       	ldi	r24, 0x01	; 1
    36ec:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA |= (MASK_BIT << ADIE);
    36ee:	a6 e2       	ldi	r26, 0x26	; 38
    36f0:	b0 e0       	ldi	r27, 0x00	; 0
    36f2:	e6 e2       	ldi	r30, 0x26	; 38
    36f4:	f0 e0       	ldi	r31, 0x00	; 0
    36f6:	80 81       	ld	r24, Z
    36f8:	88 60       	ori	r24, 0x08	; 8
    36fa:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    36fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    36fe:	0f 90       	pop	r0
    3700:	cf 91       	pop	r28
    3702:	df 91       	pop	r29
    3704:	08 95       	ret

00003706 <ADC_enuDisableInterrupt>:

ES_t ADC_enuDisableInterrupt(void)
{
    3706:	df 93       	push	r29
    3708:	cf 93       	push	r28
    370a:	0f 92       	push	r0
    370c:	cd b7       	in	r28, 0x3d	; 61
    370e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    3710:	81 e0       	ldi	r24, 0x01	; 1
    3712:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA &= ~(MASK_BIT << ADIE);
    3714:	a6 e2       	ldi	r26, 0x26	; 38
    3716:	b0 e0       	ldi	r27, 0x00	; 0
    3718:	e6 e2       	ldi	r30, 0x26	; 38
    371a:	f0 e0       	ldi	r31, 0x00	; 0
    371c:	80 81       	ld	r24, Z
    371e:	87 7f       	andi	r24, 0xF7	; 247
    3720:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    3722:	89 81       	ldd	r24, Y+1	; 0x01
}
    3724:	0f 90       	pop	r0
    3726:	cf 91       	pop	r28
    3728:	df 91       	pop	r29
    372a:	08 95       	ret

0000372c <ADC_enuReadHighValue>:

ES_t ADC_enuReadHighValue(u8 *Copy_pu8ReadHighValue)
{
    372c:	df 93       	push	r29
    372e:	cf 93       	push	r28
    3730:	00 d0       	rcall	.+0      	; 0x3732 <ADC_enuReadHighValue+0x6>
    3732:	0f 92       	push	r0
    3734:	cd b7       	in	r28, 0x3d	; 61
    3736:	de b7       	in	r29, 0x3e	; 62
    3738:	9b 83       	std	Y+3, r25	; 0x03
    373a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    373c:	81 e0       	ldi	r24, 0x01	; 1
    373e:	89 83       	std	Y+1, r24	; 0x01
	
	#if ADC_ADJUST == RIGHT_ADJUST
	*Copy_pu8ReadHighValue  = (ADCL >> 2);
    3740:	e4 e2       	ldi	r30, 0x24	; 36
    3742:	f0 e0       	ldi	r31, 0x00	; 0
    3744:	80 81       	ld	r24, Z
    3746:	86 95       	lsr	r24
    3748:	86 95       	lsr	r24
    374a:	ea 81       	ldd	r30, Y+2	; 0x02
    374c:	fb 81       	ldd	r31, Y+3	; 0x03
    374e:	80 83       	st	Z, r24
	*Copy_pu8ReadHighValue |= (ADCH << 6);
    3750:	ea 81       	ldd	r30, Y+2	; 0x02
    3752:	fb 81       	ldd	r31, Y+3	; 0x03
    3754:	80 81       	ld	r24, Z
    3756:	28 2f       	mov	r18, r24
    3758:	e5 e2       	ldi	r30, 0x25	; 37
    375a:	f0 e0       	ldi	r31, 0x00	; 0
    375c:	80 81       	ld	r24, Z
    375e:	88 2f       	mov	r24, r24
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	00 24       	eor	r0, r0
    3764:	96 95       	lsr	r25
    3766:	87 95       	ror	r24
    3768:	07 94       	ror	r0
    376a:	96 95       	lsr	r25
    376c:	87 95       	ror	r24
    376e:	07 94       	ror	r0
    3770:	98 2f       	mov	r25, r24
    3772:	80 2d       	mov	r24, r0
    3774:	82 2b       	or	r24, r18
    3776:	ea 81       	ldd	r30, Y+2	; 0x02
    3778:	fb 81       	ldd	r31, Y+3	; 0x03
    377a:	80 83       	st	Z, r24
	*Copy_pu8ReadHighValue = ADCH;
	#else
	#error "ADC Adjustment has a wrong configuration"
	#endif
	
	return Local_enuErrorState;
    377c:	89 81       	ldd	r24, Y+1	; 0x01
}
    377e:	0f 90       	pop	r0
    3780:	0f 90       	pop	r0
    3782:	0f 90       	pop	r0
    3784:	cf 91       	pop	r28
    3786:	df 91       	pop	r29
    3788:	08 95       	ret

0000378a <ADC_enuReadADCValue>:

ES_t ADC_enuReadADCValue(u16 *Copy_pu16ReadValue)
{
    378a:	df 93       	push	r29
    378c:	cf 93       	push	r28
    378e:	00 d0       	rcall	.+0      	; 0x3790 <ADC_enuReadADCValue+0x6>
    3790:	0f 92       	push	r0
    3792:	cd b7       	in	r28, 0x3d	; 61
    3794:	de b7       	in	r29, 0x3e	; 62
    3796:	9b 83       	std	Y+3, r25	; 0x03
    3798:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    379a:	81 e0       	ldi	r24, 0x01	; 1
    379c:	89 83       	std	Y+1, r24	; 0x01
	
	#if ADC_ADJUST == RIGHT_ADJUST
	*Copy_pu16ReadValue  = ((u16)ADCL);
    379e:	e4 e2       	ldi	r30, 0x24	; 36
    37a0:	f0 e0       	ldi	r31, 0x00	; 0
    37a2:	80 81       	ld	r24, Z
    37a4:	88 2f       	mov	r24, r24
    37a6:	90 e0       	ldi	r25, 0x00	; 0
    37a8:	ea 81       	ldd	r30, Y+2	; 0x02
    37aa:	fb 81       	ldd	r31, Y+3	; 0x03
    37ac:	91 83       	std	Z+1, r25	; 0x01
    37ae:	80 83       	st	Z, r24
	*Copy_pu16ReadValue |= ((u16)ADCH << 8);
    37b0:	ea 81       	ldd	r30, Y+2	; 0x02
    37b2:	fb 81       	ldd	r31, Y+3	; 0x03
    37b4:	20 81       	ld	r18, Z
    37b6:	31 81       	ldd	r19, Z+1	; 0x01
    37b8:	e5 e2       	ldi	r30, 0x25	; 37
    37ba:	f0 e0       	ldi	r31, 0x00	; 0
    37bc:	80 81       	ld	r24, Z
    37be:	88 2f       	mov	r24, r24
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	98 2f       	mov	r25, r24
    37c4:	88 27       	eor	r24, r24
    37c6:	82 2b       	or	r24, r18
    37c8:	93 2b       	or	r25, r19
    37ca:	ea 81       	ldd	r30, Y+2	; 0x02
    37cc:	fb 81       	ldd	r31, Y+3	; 0x03
    37ce:	91 83       	std	Z+1, r25	; 0x01
    37d0:	80 83       	st	Z, r24
	*Copy_pu16ReadValue |= ((u16)ADCH << 2);
	#else
	#error "ADC Adjustment has a wrong configuration"
	#endif
	
	return Local_enuErrorState;
    37d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    37d4:	0f 90       	pop	r0
    37d6:	0f 90       	pop	r0
    37d8:	0f 90       	pop	r0
    37da:	cf 91       	pop	r28
    37dc:	df 91       	pop	r29
    37de:	08 95       	ret

000037e0 <ADC_enuEnableTrigger>:

ES_t ADC_enuEnableTrigger(u8 Copy_u8TriggerSource)
{
    37e0:	df 93       	push	r29
    37e2:	cf 93       	push	r28
    37e4:	00 d0       	rcall	.+0      	; 0x37e6 <ADC_enuEnableTrigger+0x6>
    37e6:	00 d0       	rcall	.+0      	; 0x37e8 <ADC_enuEnableTrigger+0x8>
    37e8:	cd b7       	in	r28, 0x3d	; 61
    37ea:	de b7       	in	r29, 0x3e	; 62
    37ec:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA &= ~(MASK_BIT << ADATE);
    37f2:	a6 e2       	ldi	r26, 0x26	; 38
    37f4:	b0 e0       	ldi	r27, 0x00	; 0
    37f6:	e6 e2       	ldi	r30, 0x26	; 38
    37f8:	f0 e0       	ldi	r31, 0x00	; 0
    37fa:	80 81       	ld	r24, Z
    37fc:	8f 7d       	andi	r24, 0xDF	; 223
    37fe:	8c 93       	st	X, r24
	
	/* Mask the three bits of Auto Trigger Source */
	SFIOR &= AUTO_TRIGGER_MASK;
    3800:	a0 e5       	ldi	r26, 0x50	; 80
    3802:	b0 e0       	ldi	r27, 0x00	; 0
    3804:	e0 e5       	ldi	r30, 0x50	; 80
    3806:	f0 e0       	ldi	r31, 0x00	; 0
    3808:	80 81       	ld	r24, Z
    380a:	8f 71       	andi	r24, 0x1F	; 31
    380c:	8c 93       	st	X, r24
	switch(Copy_u8TriggerSource)
    380e:	8a 81       	ldd	r24, Y+2	; 0x02
    3810:	28 2f       	mov	r18, r24
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	3c 83       	std	Y+4, r19	; 0x04
    3816:	2b 83       	std	Y+3, r18	; 0x03
    3818:	8b 81       	ldd	r24, Y+3	; 0x03
    381a:	9c 81       	ldd	r25, Y+4	; 0x04
    381c:	83 30       	cpi	r24, 0x03	; 3
    381e:	91 05       	cpc	r25, r1
    3820:	09 f4       	brne	.+2      	; 0x3824 <ADC_enuEnableTrigger+0x44>
    3822:	70 c0       	rjmp	.+224    	; 0x3904 <ADC_enuEnableTrigger+0x124>
    3824:	2b 81       	ldd	r18, Y+3	; 0x03
    3826:	3c 81       	ldd	r19, Y+4	; 0x04
    3828:	24 30       	cpi	r18, 0x04	; 4
    382a:	31 05       	cpc	r19, r1
    382c:	84 f4       	brge	.+32     	; 0x384e <ADC_enuEnableTrigger+0x6e>
    382e:	8b 81       	ldd	r24, Y+3	; 0x03
    3830:	9c 81       	ldd	r25, Y+4	; 0x04
    3832:	81 30       	cpi	r24, 0x01	; 1
    3834:	91 05       	cpc	r25, r1
    3836:	d1 f1       	breq	.+116    	; 0x38ac <ADC_enuEnableTrigger+0xcc>
    3838:	2b 81       	ldd	r18, Y+3	; 0x03
    383a:	3c 81       	ldd	r19, Y+4	; 0x04
    383c:	22 30       	cpi	r18, 0x02	; 2
    383e:	31 05       	cpc	r19, r1
    3840:	0c f0       	brlt	.+2      	; 0x3844 <ADC_enuEnableTrigger+0x64>
    3842:	4a c0       	rjmp	.+148    	; 0x38d8 <ADC_enuEnableTrigger+0xf8>
    3844:	8b 81       	ldd	r24, Y+3	; 0x03
    3846:	9c 81       	ldd	r25, Y+4	; 0x04
    3848:	00 97       	sbiw	r24, 0x00	; 0
    384a:	d1 f0       	breq	.+52     	; 0x3880 <ADC_enuEnableTrigger+0xa0>
    384c:	c9 c0       	rjmp	.+402    	; 0x39e0 <ADC_enuEnableTrigger+0x200>
    384e:	2b 81       	ldd	r18, Y+3	; 0x03
    3850:	3c 81       	ldd	r19, Y+4	; 0x04
    3852:	25 30       	cpi	r18, 0x05	; 5
    3854:	31 05       	cpc	r19, r1
    3856:	09 f4       	brne	.+2      	; 0x385a <ADC_enuEnableTrigger+0x7a>
    3858:	81 c0       	rjmp	.+258    	; 0x395c <ADC_enuEnableTrigger+0x17c>
    385a:	8b 81       	ldd	r24, Y+3	; 0x03
    385c:	9c 81       	ldd	r25, Y+4	; 0x04
    385e:	85 30       	cpi	r24, 0x05	; 5
    3860:	91 05       	cpc	r25, r1
    3862:	0c f4       	brge	.+2      	; 0x3866 <ADC_enuEnableTrigger+0x86>
    3864:	65 c0       	rjmp	.+202    	; 0x3930 <ADC_enuEnableTrigger+0x150>
    3866:	2b 81       	ldd	r18, Y+3	; 0x03
    3868:	3c 81       	ldd	r19, Y+4	; 0x04
    386a:	26 30       	cpi	r18, 0x06	; 6
    386c:	31 05       	cpc	r19, r1
    386e:	09 f4       	brne	.+2      	; 0x3872 <ADC_enuEnableTrigger+0x92>
    3870:	8b c0       	rjmp	.+278    	; 0x3988 <ADC_enuEnableTrigger+0x1a8>
    3872:	8b 81       	ldd	r24, Y+3	; 0x03
    3874:	9c 81       	ldd	r25, Y+4	; 0x04
    3876:	87 30       	cpi	r24, 0x07	; 7
    3878:	91 05       	cpc	r25, r1
    387a:	09 f4       	brne	.+2      	; 0x387e <ADC_enuEnableTrigger+0x9e>
    387c:	9b c0       	rjmp	.+310    	; 0x39b4 <ADC_enuEnableTrigger+0x1d4>
    387e:	b0 c0       	rjmp	.+352    	; 0x39e0 <ADC_enuEnableTrigger+0x200>
	{
		case FREE_RUNNING:
		SFIOR &= ~(MASK_BIT << ADTS0);
    3880:	a0 e5       	ldi	r26, 0x50	; 80
    3882:	b0 e0       	ldi	r27, 0x00	; 0
    3884:	e0 e5       	ldi	r30, 0x50	; 80
    3886:	f0 e0       	ldi	r31, 0x00	; 0
    3888:	80 81       	ld	r24, Z
    388a:	8f 7d       	andi	r24, 0xDF	; 223
    388c:	8c 93       	st	X, r24
		SFIOR &= ~(MASK_BIT << ADTS1);
    388e:	a0 e5       	ldi	r26, 0x50	; 80
    3890:	b0 e0       	ldi	r27, 0x00	; 0
    3892:	e0 e5       	ldi	r30, 0x50	; 80
    3894:	f0 e0       	ldi	r31, 0x00	; 0
    3896:	80 81       	ld	r24, Z
    3898:	8f 7b       	andi	r24, 0xBF	; 191
    389a:	8c 93       	st	X, r24
		SFIOR &= ~(MASK_BIT << ADTS2);
    389c:	a0 e5       	ldi	r26, 0x50	; 80
    389e:	b0 e0       	ldi	r27, 0x00	; 0
    38a0:	e0 e5       	ldi	r30, 0x50	; 80
    38a2:	f0 e0       	ldi	r31, 0x00	; 0
    38a4:	80 81       	ld	r24, Z
    38a6:	8f 77       	andi	r24, 0x7F	; 127
    38a8:	8c 93       	st	X, r24
    38aa:	9c c0       	rjmp	.+312    	; 0x39e4 <ADC_enuEnableTrigger+0x204>
		break;
		
		case ANALOG_COMPARATOR:
		SFIOR |=  (MASK_BIT << ADTS0);
    38ac:	a0 e5       	ldi	r26, 0x50	; 80
    38ae:	b0 e0       	ldi	r27, 0x00	; 0
    38b0:	e0 e5       	ldi	r30, 0x50	; 80
    38b2:	f0 e0       	ldi	r31, 0x00	; 0
    38b4:	80 81       	ld	r24, Z
    38b6:	80 62       	ori	r24, 0x20	; 32
    38b8:	8c 93       	st	X, r24
		SFIOR &= ~(MASK_BIT << ADTS1);
    38ba:	a0 e5       	ldi	r26, 0x50	; 80
    38bc:	b0 e0       	ldi	r27, 0x00	; 0
    38be:	e0 e5       	ldi	r30, 0x50	; 80
    38c0:	f0 e0       	ldi	r31, 0x00	; 0
    38c2:	80 81       	ld	r24, Z
    38c4:	8f 7b       	andi	r24, 0xBF	; 191
    38c6:	8c 93       	st	X, r24
		SFIOR &= ~(MASK_BIT << ADTS2);
    38c8:	a0 e5       	ldi	r26, 0x50	; 80
    38ca:	b0 e0       	ldi	r27, 0x00	; 0
    38cc:	e0 e5       	ldi	r30, 0x50	; 80
    38ce:	f0 e0       	ldi	r31, 0x00	; 0
    38d0:	80 81       	ld	r24, Z
    38d2:	8f 77       	andi	r24, 0x7F	; 127
    38d4:	8c 93       	st	X, r24
    38d6:	86 c0       	rjmp	.+268    	; 0x39e4 <ADC_enuEnableTrigger+0x204>
		break;
		
		case EXTI0_TRIG:
		SFIOR &= ~(MASK_BIT << ADTS0);
    38d8:	a0 e5       	ldi	r26, 0x50	; 80
    38da:	b0 e0       	ldi	r27, 0x00	; 0
    38dc:	e0 e5       	ldi	r30, 0x50	; 80
    38de:	f0 e0       	ldi	r31, 0x00	; 0
    38e0:	80 81       	ld	r24, Z
    38e2:	8f 7d       	andi	r24, 0xDF	; 223
    38e4:	8c 93       	st	X, r24
		SFIOR |=  (MASK_BIT << ADTS1);
    38e6:	a0 e5       	ldi	r26, 0x50	; 80
    38e8:	b0 e0       	ldi	r27, 0x00	; 0
    38ea:	e0 e5       	ldi	r30, 0x50	; 80
    38ec:	f0 e0       	ldi	r31, 0x00	; 0
    38ee:	80 81       	ld	r24, Z
    38f0:	80 64       	ori	r24, 0x40	; 64
    38f2:	8c 93       	st	X, r24
		SFIOR &= ~(MASK_BIT << ADTS2);
    38f4:	a0 e5       	ldi	r26, 0x50	; 80
    38f6:	b0 e0       	ldi	r27, 0x00	; 0
    38f8:	e0 e5       	ldi	r30, 0x50	; 80
    38fa:	f0 e0       	ldi	r31, 0x00	; 0
    38fc:	80 81       	ld	r24, Z
    38fe:	8f 77       	andi	r24, 0x7F	; 127
    3900:	8c 93       	st	X, r24
    3902:	70 c0       	rjmp	.+224    	; 0x39e4 <ADC_enuEnableTrigger+0x204>
		break;
		
		case TIMER0_COMPARE_MATCH_TRIG:
		SFIOR |=  (MASK_BIT << ADTS0);
    3904:	a0 e5       	ldi	r26, 0x50	; 80
    3906:	b0 e0       	ldi	r27, 0x00	; 0
    3908:	e0 e5       	ldi	r30, 0x50	; 80
    390a:	f0 e0       	ldi	r31, 0x00	; 0
    390c:	80 81       	ld	r24, Z
    390e:	80 62       	ori	r24, 0x20	; 32
    3910:	8c 93       	st	X, r24
		SFIOR |=  (MASK_BIT << ADTS1);
    3912:	a0 e5       	ldi	r26, 0x50	; 80
    3914:	b0 e0       	ldi	r27, 0x00	; 0
    3916:	e0 e5       	ldi	r30, 0x50	; 80
    3918:	f0 e0       	ldi	r31, 0x00	; 0
    391a:	80 81       	ld	r24, Z
    391c:	80 64       	ori	r24, 0x40	; 64
    391e:	8c 93       	st	X, r24
		SFIOR &= ~(MASK_BIT << ADTS2);
    3920:	a0 e5       	ldi	r26, 0x50	; 80
    3922:	b0 e0       	ldi	r27, 0x00	; 0
    3924:	e0 e5       	ldi	r30, 0x50	; 80
    3926:	f0 e0       	ldi	r31, 0x00	; 0
    3928:	80 81       	ld	r24, Z
    392a:	8f 77       	andi	r24, 0x7F	; 127
    392c:	8c 93       	st	X, r24
    392e:	5a c0       	rjmp	.+180    	; 0x39e4 <ADC_enuEnableTrigger+0x204>
		break;
		
		case TIMER0_OVERFLOW_TRIG:
		SFIOR &= ~(MASK_BIT << ADTS0);
    3930:	a0 e5       	ldi	r26, 0x50	; 80
    3932:	b0 e0       	ldi	r27, 0x00	; 0
    3934:	e0 e5       	ldi	r30, 0x50	; 80
    3936:	f0 e0       	ldi	r31, 0x00	; 0
    3938:	80 81       	ld	r24, Z
    393a:	8f 7d       	andi	r24, 0xDF	; 223
    393c:	8c 93       	st	X, r24
		SFIOR &= ~(MASK_BIT << ADTS1);
    393e:	a0 e5       	ldi	r26, 0x50	; 80
    3940:	b0 e0       	ldi	r27, 0x00	; 0
    3942:	e0 e5       	ldi	r30, 0x50	; 80
    3944:	f0 e0       	ldi	r31, 0x00	; 0
    3946:	80 81       	ld	r24, Z
    3948:	8f 7b       	andi	r24, 0xBF	; 191
    394a:	8c 93       	st	X, r24
		SFIOR |=  (MASK_BIT << ADTS2);
    394c:	a0 e5       	ldi	r26, 0x50	; 80
    394e:	b0 e0       	ldi	r27, 0x00	; 0
    3950:	e0 e5       	ldi	r30, 0x50	; 80
    3952:	f0 e0       	ldi	r31, 0x00	; 0
    3954:	80 81       	ld	r24, Z
    3956:	80 68       	ori	r24, 0x80	; 128
    3958:	8c 93       	st	X, r24
    395a:	44 c0       	rjmp	.+136    	; 0x39e4 <ADC_enuEnableTrigger+0x204>
		break;
		
		case TIMER1_COMPARE_MATCH_TRIG:
		SFIOR |=  (MASK_BIT << ADTS0);
    395c:	a0 e5       	ldi	r26, 0x50	; 80
    395e:	b0 e0       	ldi	r27, 0x00	; 0
    3960:	e0 e5       	ldi	r30, 0x50	; 80
    3962:	f0 e0       	ldi	r31, 0x00	; 0
    3964:	80 81       	ld	r24, Z
    3966:	80 62       	ori	r24, 0x20	; 32
    3968:	8c 93       	st	X, r24
		SFIOR &= ~(MASK_BIT << ADTS1);
    396a:	a0 e5       	ldi	r26, 0x50	; 80
    396c:	b0 e0       	ldi	r27, 0x00	; 0
    396e:	e0 e5       	ldi	r30, 0x50	; 80
    3970:	f0 e0       	ldi	r31, 0x00	; 0
    3972:	80 81       	ld	r24, Z
    3974:	8f 7b       	andi	r24, 0xBF	; 191
    3976:	8c 93       	st	X, r24
		SFIOR |=  (MASK_BIT << ADTS2);
    3978:	a0 e5       	ldi	r26, 0x50	; 80
    397a:	b0 e0       	ldi	r27, 0x00	; 0
    397c:	e0 e5       	ldi	r30, 0x50	; 80
    397e:	f0 e0       	ldi	r31, 0x00	; 0
    3980:	80 81       	ld	r24, Z
    3982:	80 68       	ori	r24, 0x80	; 128
    3984:	8c 93       	st	X, r24
    3986:	2e c0       	rjmp	.+92     	; 0x39e4 <ADC_enuEnableTrigger+0x204>
		break;
		
		case TIMER1_OVERFLOW_TRIG:
		SFIOR &= ~(MASK_BIT << ADTS0);
    3988:	a0 e5       	ldi	r26, 0x50	; 80
    398a:	b0 e0       	ldi	r27, 0x00	; 0
    398c:	e0 e5       	ldi	r30, 0x50	; 80
    398e:	f0 e0       	ldi	r31, 0x00	; 0
    3990:	80 81       	ld	r24, Z
    3992:	8f 7d       	andi	r24, 0xDF	; 223
    3994:	8c 93       	st	X, r24
		SFIOR |=  (MASK_BIT << ADTS1);
    3996:	a0 e5       	ldi	r26, 0x50	; 80
    3998:	b0 e0       	ldi	r27, 0x00	; 0
    399a:	e0 e5       	ldi	r30, 0x50	; 80
    399c:	f0 e0       	ldi	r31, 0x00	; 0
    399e:	80 81       	ld	r24, Z
    39a0:	80 64       	ori	r24, 0x40	; 64
    39a2:	8c 93       	st	X, r24
		SFIOR |=  (MASK_BIT << ADTS2);
    39a4:	a0 e5       	ldi	r26, 0x50	; 80
    39a6:	b0 e0       	ldi	r27, 0x00	; 0
    39a8:	e0 e5       	ldi	r30, 0x50	; 80
    39aa:	f0 e0       	ldi	r31, 0x00	; 0
    39ac:	80 81       	ld	r24, Z
    39ae:	80 68       	ori	r24, 0x80	; 128
    39b0:	8c 93       	st	X, r24
    39b2:	18 c0       	rjmp	.+48     	; 0x39e4 <ADC_enuEnableTrigger+0x204>
		break;
		
		case TIMER1_CAPUTRE_TRIG:
		SFIOR |=  (MASK_BIT << ADTS0);
    39b4:	a0 e5       	ldi	r26, 0x50	; 80
    39b6:	b0 e0       	ldi	r27, 0x00	; 0
    39b8:	e0 e5       	ldi	r30, 0x50	; 80
    39ba:	f0 e0       	ldi	r31, 0x00	; 0
    39bc:	80 81       	ld	r24, Z
    39be:	80 62       	ori	r24, 0x20	; 32
    39c0:	8c 93       	st	X, r24
		SFIOR |=  (MASK_BIT << ADTS1);
    39c2:	a0 e5       	ldi	r26, 0x50	; 80
    39c4:	b0 e0       	ldi	r27, 0x00	; 0
    39c6:	e0 e5       	ldi	r30, 0x50	; 80
    39c8:	f0 e0       	ldi	r31, 0x00	; 0
    39ca:	80 81       	ld	r24, Z
    39cc:	80 64       	ori	r24, 0x40	; 64
    39ce:	8c 93       	st	X, r24
		SFIOR |=  (MASK_BIT << ADTS2);
    39d0:	a0 e5       	ldi	r26, 0x50	; 80
    39d2:	b0 e0       	ldi	r27, 0x00	; 0
    39d4:	e0 e5       	ldi	r30, 0x50	; 80
    39d6:	f0 e0       	ldi	r31, 0x00	; 0
    39d8:	80 81       	ld	r24, Z
    39da:	80 68       	ori	r24, 0x80	; 128
    39dc:	8c 93       	st	X, r24
    39de:	02 c0       	rjmp	.+4      	; 0x39e4 <ADC_enuEnableTrigger+0x204>
		break;
		
		default:
		Local_enuErrorState = ES_OUT_OF_RANGE;
    39e0:	83 e0       	ldi	r24, 0x03	; 3
    39e2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	
	ADCSRA |= (MASK_BIT << ADATE);
    39e4:	a6 e2       	ldi	r26, 0x26	; 38
    39e6:	b0 e0       	ldi	r27, 0x00	; 0
    39e8:	e6 e2       	ldi	r30, 0x26	; 38
    39ea:	f0 e0       	ldi	r31, 0x00	; 0
    39ec:	80 81       	ld	r24, Z
    39ee:	80 62       	ori	r24, 0x20	; 32
    39f0:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    39f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    39f4:	0f 90       	pop	r0
    39f6:	0f 90       	pop	r0
    39f8:	0f 90       	pop	r0
    39fa:	0f 90       	pop	r0
    39fc:	cf 91       	pop	r28
    39fe:	df 91       	pop	r29
    3a00:	08 95       	ret

00003a02 <ADC_enuDisableTrigger>:

ES_t ADC_enuDisableTrigger(void)
{
    3a02:	df 93       	push	r29
    3a04:	cf 93       	push	r28
    3a06:	0f 92       	push	r0
    3a08:	cd b7       	in	r28, 0x3d	; 61
    3a0a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA &= ~(MASK_BIT << ADATE);
    3a10:	a6 e2       	ldi	r26, 0x26	; 38
    3a12:	b0 e0       	ldi	r27, 0x00	; 0
    3a14:	e6 e2       	ldi	r30, 0x26	; 38
    3a16:	f0 e0       	ldi	r31, 0x00	; 0
    3a18:	80 81       	ld	r24, Z
    3a1a:	8f 7d       	andi	r24, 0xDF	; 223
    3a1c:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    3a1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a20:	0f 90       	pop	r0
    3a22:	cf 91       	pop	r28
    3a24:	df 91       	pop	r29
    3a26:	08 95       	ret

00003a28 <ADC_enuCallBack>:

ES_t ADC_enuCallBack(volatile void (*Copy_PFunc)(void*), volatile void *Copy_PvidAppParameter)
{
    3a28:	df 93       	push	r29
    3a2a:	cf 93       	push	r28
    3a2c:	00 d0       	rcall	.+0      	; 0x3a2e <ADC_enuCallBack+0x6>
    3a2e:	00 d0       	rcall	.+0      	; 0x3a30 <ADC_enuCallBack+0x8>
    3a30:	0f 92       	push	r0
    3a32:	cd b7       	in	r28, 0x3d	; 61
    3a34:	de b7       	in	r29, 0x3e	; 62
    3a36:	9b 83       	std	Y+3, r25	; 0x03
    3a38:	8a 83       	std	Y+2, r24	; 0x02
    3a3a:	7d 83       	std	Y+5, r23	; 0x05
    3a3c:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_PFunc != NULL)
    3a42:	8a 81       	ldd	r24, Y+2	; 0x02
    3a44:	9b 81       	ldd	r25, Y+3	; 0x03
    3a46:	00 97       	sbiw	r24, 0x00	; 0
    3a48:	69 f0       	breq	.+26     	; 0x3a64 <ADC_enuCallBack+0x3c>
	{
		ADC_PFuncISRFunc = Copy_PFunc;
    3a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a4c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a4e:	90 93 2a 02 	sts	0x022A, r25
    3a52:	80 93 29 02 	sts	0x0229, r24
		ADC_PvidISRParameter = Copy_PvidAppParameter;
    3a56:	8c 81       	ldd	r24, Y+4	; 0x04
    3a58:	9d 81       	ldd	r25, Y+5	; 0x05
    3a5a:	90 93 2c 02 	sts	0x022C, r25
    3a5e:	80 93 2b 02 	sts	0x022B, r24
    3a62:	02 c0       	rjmp	.+4      	; 0x3a68 <ADC_enuCallBack+0x40>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    3a64:	82 e0       	ldi	r24, 0x02	; 2
    3a66:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    3a68:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a6a:	0f 90       	pop	r0
    3a6c:	0f 90       	pop	r0
    3a6e:	0f 90       	pop	r0
    3a70:	0f 90       	pop	r0
    3a72:	0f 90       	pop	r0
    3a74:	cf 91       	pop	r28
    3a76:	df 91       	pop	r29
    3a78:	08 95       	ret

00003a7a <ADC_Read_From_Ch>:

ES_t ADC_Read_From_Ch(u16 *Copy_pu16ReadValue, u8 Copy_u8ChannelID)
{
    3a7a:	df 93       	push	r29
    3a7c:	cf 93       	push	r28
    3a7e:	00 d0       	rcall	.+0      	; 0x3a80 <ADC_Read_From_Ch+0x6>
    3a80:	00 d0       	rcall	.+0      	; 0x3a82 <ADC_Read_From_Ch+0x8>
    3a82:	cd b7       	in	r28, 0x3d	; 61
    3a84:	de b7       	in	r29, 0x3e	; 62
    3a86:	9b 83       	std	Y+3, r25	; 0x03
    3a88:	8a 83       	std	Y+2, r24	; 0x02
    3a8a:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    3a8c:	81 e0       	ldi	r24, 0x01	; 1
    3a8e:	89 83       	std	Y+1, r24	; 0x01

	ADC_enuEnable();
    3a90:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <ADC_enuEnable>
	ADC_enuDisableTrigger();
    3a94:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <ADC_enuDisableTrigger>
	ADC_enuSelectChannel(Copy_u8ChannelID);
    3a98:	8c 81       	ldd	r24, Y+4	; 0x04
    3a9a:	0e 94 35 1b 	call	0x366a	; 0x366a <ADC_enuSelectChannel>
	ADC_enuStartConversion();
    3a9e:	0e 94 22 1b 	call	0x3644	; 0x3644 <ADC_enuStartConversion>
	ADC_enuDisableInterrupt();
    3aa2:	0e 94 83 1b 	call	0x3706	; 0x3706 <ADC_enuDisableInterrupt>
	ADC_enuPollingSystem();
    3aa6:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <ADC_enuPollingSystem>
	ADC_enuReadADCValue(Copy_pu16ReadValue);
    3aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    3aac:	9b 81       	ldd	r25, Y+3	; 0x03
    3aae:	0e 94 c5 1b 	call	0x378a	; 0x378a <ADC_enuReadADCValue>
	ADC_enuDisable();
    3ab2:	0e 94 0f 1b 	call	0x361e	; 0x361e <ADC_enuDisable>

	return Local_enuErrorState;
    3ab6:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ab8:	0f 90       	pop	r0
    3aba:	0f 90       	pop	r0
    3abc:	0f 90       	pop	r0
    3abe:	0f 90       	pop	r0
    3ac0:	cf 91       	pop	r28
    3ac2:	df 91       	pop	r29
    3ac4:	08 95       	ret

00003ac6 <__vector_16>:

ISR(VECT_ADC)
{
    3ac6:	1f 92       	push	r1
    3ac8:	0f 92       	push	r0
    3aca:	0f b6       	in	r0, 0x3f	; 63
    3acc:	0f 92       	push	r0
    3ace:	11 24       	eor	r1, r1
    3ad0:	2f 93       	push	r18
    3ad2:	3f 93       	push	r19
    3ad4:	4f 93       	push	r20
    3ad6:	5f 93       	push	r21
    3ad8:	6f 93       	push	r22
    3ada:	7f 93       	push	r23
    3adc:	8f 93       	push	r24
    3ade:	9f 93       	push	r25
    3ae0:	af 93       	push	r26
    3ae2:	bf 93       	push	r27
    3ae4:	ef 93       	push	r30
    3ae6:	ff 93       	push	r31
    3ae8:	df 93       	push	r29
    3aea:	cf 93       	push	r28
    3aec:	cd b7       	in	r28, 0x3d	; 61
    3aee:	de b7       	in	r29, 0x3e	; 62
	if(ADC_PFuncISRFunc != NULL)
    3af0:	80 91 29 02 	lds	r24, 0x0229
    3af4:	90 91 2a 02 	lds	r25, 0x022A
    3af8:	00 97       	sbiw	r24, 0x00	; 0
    3afa:	49 f0       	breq	.+18     	; 0x3b0e <__vector_16+0x48>
	{
		ADC_PFuncISRFunc(ADC_PvidISRParameter);
    3afc:	e0 91 29 02 	lds	r30, 0x0229
    3b00:	f0 91 2a 02 	lds	r31, 0x022A
    3b04:	80 91 2b 02 	lds	r24, 0x022B
    3b08:	90 91 2c 02 	lds	r25, 0x022C
    3b0c:	09 95       	icall
	}
}
    3b0e:	cf 91       	pop	r28
    3b10:	df 91       	pop	r29
    3b12:	ff 91       	pop	r31
    3b14:	ef 91       	pop	r30
    3b16:	bf 91       	pop	r27
    3b18:	af 91       	pop	r26
    3b1a:	9f 91       	pop	r25
    3b1c:	8f 91       	pop	r24
    3b1e:	7f 91       	pop	r23
    3b20:	6f 91       	pop	r22
    3b22:	5f 91       	pop	r21
    3b24:	4f 91       	pop	r20
    3b26:	3f 91       	pop	r19
    3b28:	2f 91       	pop	r18
    3b2a:	0f 90       	pop	r0
    3b2c:	0f be       	out	0x3f, r0	; 63
    3b2e:	0f 90       	pop	r0
    3b30:	1f 90       	pop	r1
    3b32:	18 95       	reti

00003b34 <interpolation>:


#include "stdTypes.h"

s16 interpolation (s16 y1,s16 y2,s16 x1,s16 x2,s16 x)
{
    3b34:	ef 92       	push	r14
    3b36:	ff 92       	push	r15
    3b38:	0f 93       	push	r16
    3b3a:	1f 93       	push	r17
    3b3c:	df 93       	push	r29
    3b3e:	cf 93       	push	r28
    3b40:	cd b7       	in	r28, 0x3d	; 61
    3b42:	de b7       	in	r29, 0x3e	; 62
    3b44:	2c 97       	sbiw	r28, 0x0c	; 12
    3b46:	0f b6       	in	r0, 0x3f	; 63
    3b48:	f8 94       	cli
    3b4a:	de bf       	out	0x3e, r29	; 62
    3b4c:	0f be       	out	0x3f, r0	; 63
    3b4e:	cd bf       	out	0x3d, r28	; 61
    3b50:	9c 83       	std	Y+4, r25	; 0x04
    3b52:	8b 83       	std	Y+3, r24	; 0x03
    3b54:	7e 83       	std	Y+6, r23	; 0x06
    3b56:	6d 83       	std	Y+5, r22	; 0x05
    3b58:	58 87       	std	Y+8, r21	; 0x08
    3b5a:	4f 83       	std	Y+7, r20	; 0x07
    3b5c:	3a 87       	std	Y+10, r19	; 0x0a
    3b5e:	29 87       	std	Y+9, r18	; 0x09
    3b60:	1c 87       	std	Y+12, r17	; 0x0c
    3b62:	0b 87       	std	Y+11, r16	; 0x0b
	s16 y;
	y = ( ((s32)(y2-y1)*(x-x1))/(x2-x1) ) + y1;
    3b64:	2d 81       	ldd	r18, Y+5	; 0x05
    3b66:	3e 81       	ldd	r19, Y+6	; 0x06
    3b68:	8b 81       	ldd	r24, Y+3	; 0x03
    3b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b6c:	a9 01       	movw	r20, r18
    3b6e:	48 1b       	sub	r20, r24
    3b70:	59 0b       	sbc	r21, r25
    3b72:	ca 01       	movw	r24, r20
    3b74:	7c 01       	movw	r14, r24
    3b76:	00 27       	eor	r16, r16
    3b78:	f7 fc       	sbrc	r15, 7
    3b7a:	00 95       	com	r16
    3b7c:	10 2f       	mov	r17, r16
    3b7e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3b80:	3c 85       	ldd	r19, Y+12	; 0x0c
    3b82:	8f 81       	ldd	r24, Y+7	; 0x07
    3b84:	98 85       	ldd	r25, Y+8	; 0x08
    3b86:	a9 01       	movw	r20, r18
    3b88:	48 1b       	sub	r20, r24
    3b8a:	59 0b       	sbc	r21, r25
    3b8c:	ca 01       	movw	r24, r20
    3b8e:	9c 01       	movw	r18, r24
    3b90:	44 27       	eor	r20, r20
    3b92:	37 fd       	sbrc	r19, 7
    3b94:	40 95       	com	r20
    3b96:	54 2f       	mov	r21, r20
    3b98:	c8 01       	movw	r24, r16
    3b9a:	b7 01       	movw	r22, r14
    3b9c:	0e 94 6b 43 	call	0x86d6	; 0x86d6 <__mulsi3>
    3ba0:	7b 01       	movw	r14, r22
    3ba2:	8c 01       	movw	r16, r24
    3ba4:	29 85       	ldd	r18, Y+9	; 0x09
    3ba6:	3a 85       	ldd	r19, Y+10	; 0x0a
    3ba8:	8f 81       	ldd	r24, Y+7	; 0x07
    3baa:	98 85       	ldd	r25, Y+8	; 0x08
    3bac:	a9 01       	movw	r20, r18
    3bae:	48 1b       	sub	r20, r24
    3bb0:	59 0b       	sbc	r21, r25
    3bb2:	ca 01       	movw	r24, r20
    3bb4:	9c 01       	movw	r18, r24
    3bb6:	44 27       	eor	r20, r20
    3bb8:	37 fd       	sbrc	r19, 7
    3bba:	40 95       	com	r20
    3bbc:	54 2f       	mov	r21, r20
    3bbe:	c8 01       	movw	r24, r16
    3bc0:	b7 01       	movw	r22, r14
    3bc2:	0e 94 8a 43 	call	0x8714	; 0x8714 <__divmodsi4>
    3bc6:	da 01       	movw	r26, r20
    3bc8:	c9 01       	movw	r24, r18
    3bca:	9c 01       	movw	r18, r24
    3bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    3bce:	9c 81       	ldd	r25, Y+4	; 0x04
    3bd0:	82 0f       	add	r24, r18
    3bd2:	93 1f       	adc	r25, r19
    3bd4:	9a 83       	std	Y+2, r25	; 0x02
    3bd6:	89 83       	std	Y+1, r24	; 0x01

	return y;
    3bd8:	89 81       	ldd	r24, Y+1	; 0x01
    3bda:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3bdc:	2c 96       	adiw	r28, 0x0c	; 12
    3bde:	0f b6       	in	r0, 0x3f	; 63
    3be0:	f8 94       	cli
    3be2:	de bf       	out	0x3e, r29	; 62
    3be4:	0f be       	out	0x3f, r0	; 63
    3be6:	cd bf       	out	0x3d, r28	; 61
    3be8:	cf 91       	pop	r28
    3bea:	df 91       	pop	r29
    3bec:	1f 91       	pop	r17
    3bee:	0f 91       	pop	r16
    3bf0:	ff 90       	pop	r15
    3bf2:	ef 90       	pop	r14
    3bf4:	08 95       	ret

00003bf6 <Soil_Moisture_enuInit>:
#include "Soil_Moisture_priv.h"

extern Soil_Moisture_Configuration_t Soil_Moisture_AstrSoilMoistureConfig[Soil_Moisture_NUM];

ES_t Soil_Moisture_enuInit(Soil_Moisture_Configuration_t *Copy_PstrSoilMoistureConfig)
{
    3bf6:	df 93       	push	r29
    3bf8:	cf 93       	push	r28
    3bfa:	00 d0       	rcall	.+0      	; 0x3bfc <Soil_Moisture_enuInit+0x6>
    3bfc:	00 d0       	rcall	.+0      	; 0x3bfe <Soil_Moisture_enuInit+0x8>
    3bfe:	cd b7       	in	r28, 0x3d	; 61
    3c00:	de b7       	in	r29, 0x3e	; 62
    3c02:	9c 83       	std	Y+4, r25	; 0x04
    3c04:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    3c06:	81 e0       	ldi	r24, 0x01	; 1
    3c08:	8a 83       	std	Y+2, r24	; 0x02

	ADC_enuInit();
    3c0a:	0e 94 b1 1a 	call	0x3562	; 0x3562 <ADC_enuInit>

	u8 Local_u8Iterrator = 0;
    3c0e:	19 82       	std	Y+1, r1	; 0x01
	for(Local_u8Iterrator = 0; Local_u8Iterrator < Soil_Moisture_NUM; Local_u8Iterrator++)
    3c10:	19 82       	std	Y+1, r1	; 0x01
    3c12:	1c c0       	rjmp	.+56     	; 0x3c4c <Soil_Moisture_enuInit+0x56>
	{
		DIO_enuSetPinDirection(DIO_u8PORTA, Copy_PstrSoilMoistureConfig[Local_u8Iterrator].Soil_Moisture_CHANNEL, DIO_u8INPUT);
    3c14:	89 81       	ldd	r24, Y+1	; 0x01
    3c16:	28 2f       	mov	r18, r24
    3c18:	30 e0       	ldi	r19, 0x00	; 0
    3c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c1e:	fc 01       	movw	r30, r24
    3c20:	e2 0f       	add	r30, r18
    3c22:	f3 1f       	adc	r31, r19
    3c24:	90 81       	ld	r25, Z
    3c26:	80 e0       	ldi	r24, 0x00	; 0
    3c28:	69 2f       	mov	r22, r25
    3c2a:	40 e0       	ldi	r20, 0x00	; 0
    3c2c:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
		ADC_enuSelectChannel(Copy_PstrSoilMoistureConfig[Local_u8Iterrator].Soil_Moisture_CHANNEL);
    3c30:	89 81       	ldd	r24, Y+1	; 0x01
    3c32:	28 2f       	mov	r18, r24
    3c34:	30 e0       	ldi	r19, 0x00	; 0
    3c36:	8b 81       	ldd	r24, Y+3	; 0x03
    3c38:	9c 81       	ldd	r25, Y+4	; 0x04
    3c3a:	fc 01       	movw	r30, r24
    3c3c:	e2 0f       	add	r30, r18
    3c3e:	f3 1f       	adc	r31, r19
    3c40:	80 81       	ld	r24, Z
    3c42:	0e 94 35 1b 	call	0x366a	; 0x366a <ADC_enuSelectChannel>
	ES_t Local_enuErrorState = ES_NOK;

	ADC_enuInit();

	u8 Local_u8Iterrator = 0;
	for(Local_u8Iterrator = 0; Local_u8Iterrator < Soil_Moisture_NUM; Local_u8Iterrator++)
    3c46:	89 81       	ldd	r24, Y+1	; 0x01
    3c48:	8f 5f       	subi	r24, 0xFF	; 255
    3c4a:	89 83       	std	Y+1, r24	; 0x01
    3c4c:	89 81       	ldd	r24, Y+1	; 0x01
    3c4e:	88 23       	and	r24, r24
    3c50:	09 f3       	breq	.-62     	; 0x3c14 <Soil_Moisture_enuInit+0x1e>
	{
		DIO_enuSetPinDirection(DIO_u8PORTA, Copy_PstrSoilMoistureConfig[Local_u8Iterrator].Soil_Moisture_CHANNEL, DIO_u8INPUT);
		ADC_enuSelectChannel(Copy_PstrSoilMoistureConfig[Local_u8Iterrator].Soil_Moisture_CHANNEL);
	}

	ADC_enuEnable();
    3c52:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <ADC_enuEnable>

	Local_enuErrorState = ES_OK;
    3c56:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState;
    3c58:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3c5a:	0f 90       	pop	r0
    3c5c:	0f 90       	pop	r0
    3c5e:	0f 90       	pop	r0
    3c60:	0f 90       	pop	r0
    3c62:	cf 91       	pop	r28
    3c64:	df 91       	pop	r29
    3c66:	08 95       	ret

00003c68 <Soil_Moisture_enuGetMoisureVal>:

ES_t Soil_Moisture_enuGetMoisureVal(u8 Copy_u8Soil_Moisture_ID, u16 *Copy_Pu16MoistureValue)
{
    3c68:	df 93       	push	r29
    3c6a:	cf 93       	push	r28
    3c6c:	00 d0       	rcall	.+0      	; 0x3c6e <Soil_Moisture_enuGetMoisureVal+0x6>
    3c6e:	00 d0       	rcall	.+0      	; 0x3c70 <Soil_Moisture_enuGetMoisureVal+0x8>
    3c70:	cd b7       	in	r28, 0x3d	; 61
    3c72:	de b7       	in	r29, 0x3e	; 62
    3c74:	8a 83       	std	Y+2, r24	; 0x02
    3c76:	7c 83       	std	Y+4, r23	; 0x04
    3c78:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    3c7a:	81 e0       	ldi	r24, 0x01	; 1
    3c7c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_Pu16MoistureValue != NULL)
    3c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c80:	9c 81       	ldd	r25, Y+4	; 0x04
    3c82:	00 97       	sbiw	r24, 0x00	; 0
    3c84:	01 f1       	breq	.+64     	; 0x3cc6 <Soil_Moisture_enuGetMoisureVal+0x5e>
	{
		if(Copy_u8Soil_Moisture_ID < Soil_Moisture_NUM)
    3c86:	8a 81       	ldd	r24, Y+2	; 0x02
    3c88:	88 23       	and	r24, r24
    3c8a:	d1 f4       	brne	.+52     	; 0x3cc0 <Soil_Moisture_enuGetMoisureVal+0x58>
		{
			ADC_enuEnable();
    3c8c:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <ADC_enuEnable>
			ADC_enuDisableTrigger();
    3c90:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <ADC_enuDisableTrigger>
			ADC_enuSelectChannel(Soil_Moisture_AstrSoilMoistureConfig[Copy_u8Soil_Moisture_ID].Soil_Moisture_CHANNEL);
    3c94:	8a 81       	ldd	r24, Y+2	; 0x02
    3c96:	88 2f       	mov	r24, r24
    3c98:	90 e0       	ldi	r25, 0x00	; 0
    3c9a:	fc 01       	movw	r30, r24
    3c9c:	e3 5d       	subi	r30, 0xD3	; 211
    3c9e:	fd 4f       	sbci	r31, 0xFD	; 253
    3ca0:	80 81       	ld	r24, Z
    3ca2:	0e 94 35 1b 	call	0x366a	; 0x366a <ADC_enuSelectChannel>
			ADC_enuStartConversion();
    3ca6:	0e 94 22 1b 	call	0x3644	; 0x3644 <ADC_enuStartConversion>
			ADC_enuDisableInterrupt();
    3caa:	0e 94 83 1b 	call	0x3706	; 0x3706 <ADC_enuDisableInterrupt>
			ADC_enuPollingSystem();
    3cae:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <ADC_enuPollingSystem>
			ADC_enuReadADCValue(Copy_Pu16MoistureValue);
    3cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb4:	9c 81       	ldd	r25, Y+4	; 0x04
    3cb6:	0e 94 c5 1b 	call	0x378a	; 0x378a <ADC_enuReadADCValue>
			ADC_enuDisable();
    3cba:	0e 94 0f 1b 	call	0x361e	; 0x361e <ADC_enuDisable>
    3cbe:	05 c0       	rjmp	.+10     	; 0x3cca <Soil_Moisture_enuGetMoisureVal+0x62>

			//ADC_Read_From_Ch(Copy_Pu16MoistureValue, Soil_Moisture_AstrSoilMoistureConfig[Copy_u8Soil_Moisture_ID].Soil_Moisture_CHANNEL);
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    3cc0:	83 e0       	ldi	r24, 0x03	; 3
    3cc2:	89 83       	std	Y+1, r24	; 0x01
    3cc4:	02 c0       	rjmp	.+4      	; 0x3cca <Soil_Moisture_enuGetMoisureVal+0x62>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    3cc6:	82 e0       	ldi	r24, 0x02	; 2
    3cc8:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    3cca:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ccc:	0f 90       	pop	r0
    3cce:	0f 90       	pop	r0
    3cd0:	0f 90       	pop	r0
    3cd2:	0f 90       	pop	r0
    3cd4:	cf 91       	pop	r28
    3cd6:	df 91       	pop	r29
    3cd8:	08 95       	ret

00003cda <Switch_enuINIT>:
#include "Switch_priv.h"
#include "Switch_config.h"


ES_t Switch_enuINIT(SW_t * Copy_pAstrSwConfig)
{
    3cda:	df 93       	push	r29
    3cdc:	cf 93       	push	r28
    3cde:	00 d0       	rcall	.+0      	; 0x3ce0 <Switch_enuINIT+0x6>
    3ce0:	00 d0       	rcall	.+0      	; 0x3ce2 <Switch_enuINIT+0x8>
    3ce2:	cd b7       	in	r28, 0x3d	; 61
    3ce4:	de b7       	in	r29, 0x3e	; 62
    3ce6:	9c 83       	std	Y+4, r25	; 0x04
    3ce8:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    3cea:	81 e0       	ldi	r24, 0x01	; 1
    3cec:	8a 83       	std	Y+2, r24	; 0x02
	
	if(Copy_pAstrSwConfig != NULL)
    3cee:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    3cf2:	00 97       	sbiw	r24, 0x00	; 0
    3cf4:	09 f4       	brne	.+2      	; 0x3cf8 <Switch_enuINIT+0x1e>
    3cf6:	5c c0       	rjmp	.+184    	; 0x3db0 <Switch_enuINIT+0xd6>
	{
		u8 Local_u8Iterator;
		
		for(Local_u8Iterator = 0; Local_u8Iterator < SW_NUM; Local_u8Iterator++)
    3cf8:	19 82       	std	Y+1, r1	; 0x01
    3cfa:	55 c0       	rjmp	.+170    	; 0x3da6 <Switch_enuINIT+0xcc>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_pAstrSwConfig[Local_u8Iterator].SW_u8PortID, Copy_pAstrSwConfig[Local_u8Iterator].SW_u8PinID, DIO_u8INPUT);
    3cfc:	89 81       	ldd	r24, Y+1	; 0x01
    3cfe:	28 2f       	mov	r18, r24
    3d00:	30 e0       	ldi	r19, 0x00	; 0
    3d02:	c9 01       	movw	r24, r18
    3d04:	88 0f       	add	r24, r24
    3d06:	99 1f       	adc	r25, r25
    3d08:	28 0f       	add	r18, r24
    3d0a:	39 1f       	adc	r19, r25
    3d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d10:	fc 01       	movw	r30, r24
    3d12:	e2 0f       	add	r30, r18
    3d14:	f3 1f       	adc	r31, r19
    3d16:	40 81       	ld	r20, Z
    3d18:	89 81       	ldd	r24, Y+1	; 0x01
    3d1a:	28 2f       	mov	r18, r24
    3d1c:	30 e0       	ldi	r19, 0x00	; 0
    3d1e:	c9 01       	movw	r24, r18
    3d20:	88 0f       	add	r24, r24
    3d22:	99 1f       	adc	r25, r25
    3d24:	28 0f       	add	r18, r24
    3d26:	39 1f       	adc	r19, r25
    3d28:	8b 81       	ldd	r24, Y+3	; 0x03
    3d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d2c:	fc 01       	movw	r30, r24
    3d2e:	e2 0f       	add	r30, r18
    3d30:	f3 1f       	adc	r31, r19
    3d32:	91 81       	ldd	r25, Z+1	; 0x01
    3d34:	84 2f       	mov	r24, r20
    3d36:	69 2f       	mov	r22, r25
    3d38:	40 e0       	ldi	r20, 0x00	; 0
    3d3a:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    3d3e:	8a 83       	std	Y+2, r24	; 0x02
			Local_enuErrorState = DIO_enuSetPinVal(Copy_pAstrSwConfig[Local_u8Iterator].SW_u8PortID, Copy_pAstrSwConfig[Local_u8Iterator].SW_u8PinID, Copy_pAstrSwConfig[Local_u8Iterator].SW_u8Status);	
    3d40:	89 81       	ldd	r24, Y+1	; 0x01
    3d42:	28 2f       	mov	r18, r24
    3d44:	30 e0       	ldi	r19, 0x00	; 0
    3d46:	c9 01       	movw	r24, r18
    3d48:	88 0f       	add	r24, r24
    3d4a:	99 1f       	adc	r25, r25
    3d4c:	28 0f       	add	r18, r24
    3d4e:	39 1f       	adc	r19, r25
    3d50:	8b 81       	ldd	r24, Y+3	; 0x03
    3d52:	9c 81       	ldd	r25, Y+4	; 0x04
    3d54:	fc 01       	movw	r30, r24
    3d56:	e2 0f       	add	r30, r18
    3d58:	f3 1f       	adc	r31, r19
    3d5a:	50 81       	ld	r21, Z
    3d5c:	89 81       	ldd	r24, Y+1	; 0x01
    3d5e:	28 2f       	mov	r18, r24
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	c9 01       	movw	r24, r18
    3d64:	88 0f       	add	r24, r24
    3d66:	99 1f       	adc	r25, r25
    3d68:	28 0f       	add	r18, r24
    3d6a:	39 1f       	adc	r19, r25
    3d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d70:	fc 01       	movw	r30, r24
    3d72:	e2 0f       	add	r30, r18
    3d74:	f3 1f       	adc	r31, r19
    3d76:	41 81       	ldd	r20, Z+1	; 0x01
    3d78:	89 81       	ldd	r24, Y+1	; 0x01
    3d7a:	28 2f       	mov	r18, r24
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	c9 01       	movw	r24, r18
    3d80:	88 0f       	add	r24, r24
    3d82:	99 1f       	adc	r25, r25
    3d84:	28 0f       	add	r18, r24
    3d86:	39 1f       	adc	r19, r25
    3d88:	8b 81       	ldd	r24, Y+3	; 0x03
    3d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d8c:	fc 01       	movw	r30, r24
    3d8e:	e2 0f       	add	r30, r18
    3d90:	f3 1f       	adc	r31, r19
    3d92:	92 81       	ldd	r25, Z+2	; 0x02
    3d94:	85 2f       	mov	r24, r21
    3d96:	64 2f       	mov	r22, r20
    3d98:	49 2f       	mov	r20, r25
    3d9a:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    3d9e:	8a 83       	std	Y+2, r24	; 0x02
	
	if(Copy_pAstrSwConfig != NULL)
	{
		u8 Local_u8Iterator;
		
		for(Local_u8Iterator = 0; Local_u8Iterator < SW_NUM; Local_u8Iterator++)
    3da0:	89 81       	ldd	r24, Y+1	; 0x01
    3da2:	8f 5f       	subi	r24, 0xFF	; 255
    3da4:	89 83       	std	Y+1, r24	; 0x01
    3da6:	89 81       	ldd	r24, Y+1	; 0x01
    3da8:	82 30       	cpi	r24, 0x02	; 2
    3daa:	08 f4       	brcc	.+2      	; 0x3dae <Switch_enuINIT+0xd4>
    3dac:	a7 cf       	rjmp	.-178    	; 0x3cfc <Switch_enuINIT+0x22>
    3dae:	02 c0       	rjmp	.+4      	; 0x3db4 <Switch_enuINIT+0xda>
			Local_enuErrorState = DIO_enuSetPinVal(Copy_pAstrSwConfig[Local_u8Iterator].SW_u8PortID, Copy_pAstrSwConfig[Local_u8Iterator].SW_u8PinID, Copy_pAstrSwConfig[Local_u8Iterator].SW_u8Status);	
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    3db0:	82 e0       	ldi	r24, 0x02	; 2
    3db2:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	return Local_enuErrorState;
    3db4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3db6:	0f 90       	pop	r0
    3db8:	0f 90       	pop	r0
    3dba:	0f 90       	pop	r0
    3dbc:	0f 90       	pop	r0
    3dbe:	cf 91       	pop	r28
    3dc0:	df 91       	pop	r29
    3dc2:	08 95       	ret

00003dc4 <Switch_enuGetState>:

ES_t Switch_enuGetState(SW_t * Copy_pstrSwConfigID, u8 * Copy_pu8SwitchState)
{
    3dc4:	df 93       	push	r29
    3dc6:	cf 93       	push	r28
    3dc8:	00 d0       	rcall	.+0      	; 0x3dca <Switch_enuGetState+0x6>
    3dca:	00 d0       	rcall	.+0      	; 0x3dcc <Switch_enuGetState+0x8>
    3dcc:	0f 92       	push	r0
    3dce:	cd b7       	in	r28, 0x3d	; 61
    3dd0:	de b7       	in	r29, 0x3e	; 62
    3dd2:	9b 83       	std	Y+3, r25	; 0x03
    3dd4:	8a 83       	std	Y+2, r24	; 0x02
    3dd6:	7d 83       	std	Y+5, r23	; 0x05
    3dd8:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    3dda:	81 e0       	ldi	r24, 0x01	; 1
    3ddc:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_pstrSwConfigID != NULL && Copy_pu8SwitchState != NULL)
    3dde:	8a 81       	ldd	r24, Y+2	; 0x02
    3de0:	9b 81       	ldd	r25, Y+3	; 0x03
    3de2:	00 97       	sbiw	r24, 0x00	; 0
    3de4:	91 f0       	breq	.+36     	; 0x3e0a <Switch_enuGetState+0x46>
    3de6:	8c 81       	ldd	r24, Y+4	; 0x04
    3de8:	9d 81       	ldd	r25, Y+5	; 0x05
    3dea:	00 97       	sbiw	r24, 0x00	; 0
    3dec:	71 f0       	breq	.+28     	; 0x3e0a <Switch_enuGetState+0x46>
	{
		Local_enuErrorState = DIO_enuGetPinVal(Copy_pstrSwConfigID->SW_u8PortID, Copy_pstrSwConfigID->SW_u8PinID, Copy_pu8SwitchState);
    3dee:	ea 81       	ldd	r30, Y+2	; 0x02
    3df0:	fb 81       	ldd	r31, Y+3	; 0x03
    3df2:	80 81       	ld	r24, Z
    3df4:	ea 81       	ldd	r30, Y+2	; 0x02
    3df6:	fb 81       	ldd	r31, Y+3	; 0x03
    3df8:	91 81       	ldd	r25, Z+1	; 0x01
    3dfa:	2c 81       	ldd	r18, Y+4	; 0x04
    3dfc:	3d 81       	ldd	r19, Y+5	; 0x05
    3dfe:	69 2f       	mov	r22, r25
    3e00:	a9 01       	movw	r20, r18
    3e02:	0e 94 85 19 	call	0x330a	; 0x330a <DIO_enuGetPinVal>
    3e06:	89 83       	std	Y+1, r24	; 0x01
    3e08:	02 c0       	rjmp	.+4      	; 0x3e0e <Switch_enuGetState+0x4a>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    3e0a:	82 e0       	ldi	r24, 0x02	; 2
    3e0c:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    3e0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e10:	0f 90       	pop	r0
    3e12:	0f 90       	pop	r0
    3e14:	0f 90       	pop	r0
    3e16:	0f 90       	pop	r0
    3e18:	0f 90       	pop	r0
    3e1a:	cf 91       	pop	r28
    3e1c:	df 91       	pop	r29
    3e1e:	08 95       	ret

00003e20 <Switch_enuChangeMode>:

ES_t Switch_enuChangeMode(SW_t * Copy_pstrSwConfigID, u8 Copy_u8SwitchStatus)
{
    3e20:	df 93       	push	r29
    3e22:	cf 93       	push	r28
    3e24:	00 d0       	rcall	.+0      	; 0x3e26 <Switch_enuChangeMode+0x6>
    3e26:	00 d0       	rcall	.+0      	; 0x3e28 <Switch_enuChangeMode+0x8>
    3e28:	cd b7       	in	r28, 0x3d	; 61
    3e2a:	de b7       	in	r29, 0x3e	; 62
    3e2c:	9b 83       	std	Y+3, r25	; 0x03
    3e2e:	8a 83       	std	Y+2, r24	; 0x02
    3e30:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    3e32:	81 e0       	ldi	r24, 0x01	; 1
    3e34:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_pstrSwConfigID != NULL)
    3e36:	8a 81       	ldd	r24, Y+2	; 0x02
    3e38:	9b 81       	ldd	r25, Y+3	; 0x03
    3e3a:	00 97       	sbiw	r24, 0x00	; 0
    3e3c:	b9 f0       	breq	.+46     	; 0x3e6c <Switch_enuChangeMode+0x4c>
	{
		Local_enuErrorState = DIO_enuSetPinDirection(Copy_pstrSwConfigID->SW_u8PortID, Copy_pstrSwConfigID->SW_u8PinID, DIO_u8INPUT);
    3e3e:	ea 81       	ldd	r30, Y+2	; 0x02
    3e40:	fb 81       	ldd	r31, Y+3	; 0x03
    3e42:	80 81       	ld	r24, Z
    3e44:	ea 81       	ldd	r30, Y+2	; 0x02
    3e46:	fb 81       	ldd	r31, Y+3	; 0x03
    3e48:	91 81       	ldd	r25, Z+1	; 0x01
    3e4a:	69 2f       	mov	r22, r25
    3e4c:	40 e0       	ldi	r20, 0x00	; 0
    3e4e:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    3e52:	89 83       	std	Y+1, r24	; 0x01
		Local_enuErrorState = DIO_enuSetPinVal(Copy_pstrSwConfigID->SW_u8PortID, Copy_pstrSwConfigID->SW_u8PinID, Copy_u8SwitchStatus);
    3e54:	ea 81       	ldd	r30, Y+2	; 0x02
    3e56:	fb 81       	ldd	r31, Y+3	; 0x03
    3e58:	80 81       	ld	r24, Z
    3e5a:	ea 81       	ldd	r30, Y+2	; 0x02
    3e5c:	fb 81       	ldd	r31, Y+3	; 0x03
    3e5e:	91 81       	ldd	r25, Z+1	; 0x01
    3e60:	69 2f       	mov	r22, r25
    3e62:	4c 81       	ldd	r20, Y+4	; 0x04
    3e64:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    3e68:	89 83       	std	Y+1, r24	; 0x01
    3e6a:	02 c0       	rjmp	.+4      	; 0x3e70 <Switch_enuChangeMode+0x50>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    3e6c:	82 e0       	ldi	r24, 0x02	; 2
    3e6e:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    3e70:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e72:	0f 90       	pop	r0
    3e74:	0f 90       	pop	r0
    3e76:	0f 90       	pop	r0
    3e78:	0f 90       	pop	r0
    3e7a:	cf 91       	pop	r28
    3e7c:	df 91       	pop	r29
    3e7e:	08 95       	ret

00003e80 <Seven_Segment_enuInit>:
#include "Seven_Segment_priv.h"

extern SEG_t SEV_SEG_AstrSEGConfig[SEG_NUM];

ES_t Seven_Segment_enuInit(SEG_t *Copy_pAstrSEG_Config)
{
    3e80:	df 93       	push	r29
    3e82:	cf 93       	push	r28
    3e84:	cd b7       	in	r28, 0x3d	; 61
    3e86:	de b7       	in	r29, 0x3e	; 62
    3e88:	2a 97       	sbiw	r28, 0x0a	; 10
    3e8a:	0f b6       	in	r0, 0x3f	; 63
    3e8c:	f8 94       	cli
    3e8e:	de bf       	out	0x3e, r29	; 62
    3e90:	0f be       	out	0x3f, r0	; 63
    3e92:	cd bf       	out	0x3d, r28	; 61
    3e94:	99 87       	std	Y+9, r25	; 0x09
    3e96:	88 87       	std	Y+8, r24	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    3e98:	81 e0       	ldi	r24, 0x01	; 1
    3e9a:	8f 83       	std	Y+7, r24	; 0x07
	
	u8 Local_u8Iterator = 0;
    3e9c:	1e 82       	std	Y+6, r1	; 0x06
	
	u8 Local_u8Iterator_Error = 0;
    3e9e:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32CheckError = 0;
    3ea0:	19 82       	std	Y+1, r1	; 0x01
    3ea2:	1a 82       	std	Y+2, r1	; 0x02
    3ea4:	1b 82       	std	Y+3, r1	; 0x03
    3ea6:	1c 82       	std	Y+4, r1	; 0x04
	
	if(Copy_pAstrSEG_Config != NULL)
    3ea8:	88 85       	ldd	r24, Y+8	; 0x08
    3eaa:	99 85       	ldd	r25, Y+9	; 0x09
    3eac:	00 97       	sbiw	r24, 0x00	; 0
    3eae:	09 f4       	brne	.+2      	; 0x3eb2 <Seven_Segment_enuInit+0x32>
    3eb0:	9c c3       	rjmp	.+1848   	; 0x45ea <Seven_Segment_enuInit+0x76a>
	{
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
    3eb2:	1e 82       	std	Y+6, r1	; 0x06
    3eb4:	6a c3       	rjmp	.+1748   	; 0x458a <Seven_Segment_enuInit+0x70a>
		{
			Local_u8Iterator_Error = 0;
    3eb6:	1d 82       	std	Y+5, r1	; 0x05
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_APORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_APIN, DIO_u8OUTPUT) << Local_u8Iterator_Error);
    3eb8:	8e 81       	ldd	r24, Y+6	; 0x06
    3eba:	48 2f       	mov	r20, r24
    3ebc:	50 e0       	ldi	r21, 0x00	; 0
    3ebe:	ca 01       	movw	r24, r20
    3ec0:	88 0f       	add	r24, r24
    3ec2:	99 1f       	adc	r25, r25
    3ec4:	9c 01       	movw	r18, r24
    3ec6:	22 0f       	add	r18, r18
    3ec8:	33 1f       	adc	r19, r19
    3eca:	22 0f       	add	r18, r18
    3ecc:	33 1f       	adc	r19, r19
    3ece:	22 0f       	add	r18, r18
    3ed0:	33 1f       	adc	r19, r19
    3ed2:	82 0f       	add	r24, r18
    3ed4:	93 1f       	adc	r25, r19
    3ed6:	9c 01       	movw	r18, r24
    3ed8:	24 0f       	add	r18, r20
    3eda:	35 1f       	adc	r19, r21
    3edc:	88 85       	ldd	r24, Y+8	; 0x08
    3ede:	99 85       	ldd	r25, Y+9	; 0x09
    3ee0:	fc 01       	movw	r30, r24
    3ee2:	e2 0f       	add	r30, r18
    3ee4:	f3 1f       	adc	r31, r19
    3ee6:	60 81       	ld	r22, Z
    3ee8:	8e 81       	ldd	r24, Y+6	; 0x06
    3eea:	48 2f       	mov	r20, r24
    3eec:	50 e0       	ldi	r21, 0x00	; 0
    3eee:	ca 01       	movw	r24, r20
    3ef0:	88 0f       	add	r24, r24
    3ef2:	99 1f       	adc	r25, r25
    3ef4:	9c 01       	movw	r18, r24
    3ef6:	22 0f       	add	r18, r18
    3ef8:	33 1f       	adc	r19, r19
    3efa:	22 0f       	add	r18, r18
    3efc:	33 1f       	adc	r19, r19
    3efe:	22 0f       	add	r18, r18
    3f00:	33 1f       	adc	r19, r19
    3f02:	82 0f       	add	r24, r18
    3f04:	93 1f       	adc	r25, r19
    3f06:	9c 01       	movw	r18, r24
    3f08:	24 0f       	add	r18, r20
    3f0a:	35 1f       	adc	r19, r21
    3f0c:	88 85       	ldd	r24, Y+8	; 0x08
    3f0e:	99 85       	ldd	r25, Y+9	; 0x09
    3f10:	fc 01       	movw	r30, r24
    3f12:	e2 0f       	add	r30, r18
    3f14:	f3 1f       	adc	r31, r19
    3f16:	91 81       	ldd	r25, Z+1	; 0x01
    3f18:	86 2f       	mov	r24, r22
    3f1a:	69 2f       	mov	r22, r25
    3f1c:	41 e0       	ldi	r20, 0x01	; 1
    3f1e:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    3f22:	28 2f       	mov	r18, r24
    3f24:	30 e0       	ldi	r19, 0x00	; 0
    3f26:	8d 81       	ldd	r24, Y+5	; 0x05
    3f28:	88 2f       	mov	r24, r24
    3f2a:	90 e0       	ldi	r25, 0x00	; 0
    3f2c:	a9 01       	movw	r20, r18
    3f2e:	02 c0       	rjmp	.+4      	; 0x3f34 <Seven_Segment_enuInit+0xb4>
    3f30:	44 0f       	add	r20, r20
    3f32:	55 1f       	adc	r21, r21
    3f34:	8a 95       	dec	r24
    3f36:	e2 f7       	brpl	.-8      	; 0x3f30 <Seven_Segment_enuInit+0xb0>
    3f38:	ca 01       	movw	r24, r20
    3f3a:	9c 01       	movw	r18, r24
    3f3c:	44 27       	eor	r20, r20
    3f3e:	37 fd       	sbrc	r19, 7
    3f40:	40 95       	com	r20
    3f42:	54 2f       	mov	r21, r20
    3f44:	89 81       	ldd	r24, Y+1	; 0x01
    3f46:	9a 81       	ldd	r25, Y+2	; 0x02
    3f48:	ab 81       	ldd	r26, Y+3	; 0x03
    3f4a:	bc 81       	ldd	r27, Y+4	; 0x04
    3f4c:	82 2b       	or	r24, r18
    3f4e:	93 2b       	or	r25, r19
    3f50:	a4 2b       	or	r26, r20
    3f52:	b5 2b       	or	r27, r21
    3f54:	89 83       	std	Y+1, r24	; 0x01
    3f56:	9a 83       	std	Y+2, r25	; 0x02
    3f58:	ab 83       	std	Y+3, r26	; 0x03
    3f5a:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_BPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_BPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    3f5c:	8e 81       	ldd	r24, Y+6	; 0x06
    3f5e:	48 2f       	mov	r20, r24
    3f60:	50 e0       	ldi	r21, 0x00	; 0
    3f62:	ca 01       	movw	r24, r20
    3f64:	88 0f       	add	r24, r24
    3f66:	99 1f       	adc	r25, r25
    3f68:	9c 01       	movw	r18, r24
    3f6a:	22 0f       	add	r18, r18
    3f6c:	33 1f       	adc	r19, r19
    3f6e:	22 0f       	add	r18, r18
    3f70:	33 1f       	adc	r19, r19
    3f72:	22 0f       	add	r18, r18
    3f74:	33 1f       	adc	r19, r19
    3f76:	82 0f       	add	r24, r18
    3f78:	93 1f       	adc	r25, r19
    3f7a:	9c 01       	movw	r18, r24
    3f7c:	24 0f       	add	r18, r20
    3f7e:	35 1f       	adc	r19, r21
    3f80:	88 85       	ldd	r24, Y+8	; 0x08
    3f82:	99 85       	ldd	r25, Y+9	; 0x09
    3f84:	fc 01       	movw	r30, r24
    3f86:	e2 0f       	add	r30, r18
    3f88:	f3 1f       	adc	r31, r19
    3f8a:	62 81       	ldd	r22, Z+2	; 0x02
    3f8c:	8e 81       	ldd	r24, Y+6	; 0x06
    3f8e:	48 2f       	mov	r20, r24
    3f90:	50 e0       	ldi	r21, 0x00	; 0
    3f92:	ca 01       	movw	r24, r20
    3f94:	88 0f       	add	r24, r24
    3f96:	99 1f       	adc	r25, r25
    3f98:	9c 01       	movw	r18, r24
    3f9a:	22 0f       	add	r18, r18
    3f9c:	33 1f       	adc	r19, r19
    3f9e:	22 0f       	add	r18, r18
    3fa0:	33 1f       	adc	r19, r19
    3fa2:	22 0f       	add	r18, r18
    3fa4:	33 1f       	adc	r19, r19
    3fa6:	82 0f       	add	r24, r18
    3fa8:	93 1f       	adc	r25, r19
    3faa:	9c 01       	movw	r18, r24
    3fac:	24 0f       	add	r18, r20
    3fae:	35 1f       	adc	r19, r21
    3fb0:	88 85       	ldd	r24, Y+8	; 0x08
    3fb2:	99 85       	ldd	r25, Y+9	; 0x09
    3fb4:	fc 01       	movw	r30, r24
    3fb6:	e2 0f       	add	r30, r18
    3fb8:	f3 1f       	adc	r31, r19
    3fba:	93 81       	ldd	r25, Z+3	; 0x03
    3fbc:	86 2f       	mov	r24, r22
    3fbe:	69 2f       	mov	r22, r25
    3fc0:	41 e0       	ldi	r20, 0x01	; 1
    3fc2:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    3fc6:	28 2f       	mov	r18, r24
    3fc8:	30 e0       	ldi	r19, 0x00	; 0
    3fca:	8d 81       	ldd	r24, Y+5	; 0x05
    3fcc:	8d 5f       	subi	r24, 0xFD	; 253
    3fce:	8d 83       	std	Y+5, r24	; 0x05
    3fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd2:	88 2f       	mov	r24, r24
    3fd4:	90 e0       	ldi	r25, 0x00	; 0
    3fd6:	a9 01       	movw	r20, r18
    3fd8:	02 c0       	rjmp	.+4      	; 0x3fde <Seven_Segment_enuInit+0x15e>
    3fda:	44 0f       	add	r20, r20
    3fdc:	55 1f       	adc	r21, r21
    3fde:	8a 95       	dec	r24
    3fe0:	e2 f7       	brpl	.-8      	; 0x3fda <Seven_Segment_enuInit+0x15a>
    3fe2:	ca 01       	movw	r24, r20
    3fe4:	9c 01       	movw	r18, r24
    3fe6:	44 27       	eor	r20, r20
    3fe8:	37 fd       	sbrc	r19, 7
    3fea:	40 95       	com	r20
    3fec:	54 2f       	mov	r21, r20
    3fee:	89 81       	ldd	r24, Y+1	; 0x01
    3ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ff2:	ab 81       	ldd	r26, Y+3	; 0x03
    3ff4:	bc 81       	ldd	r27, Y+4	; 0x04
    3ff6:	82 2b       	or	r24, r18
    3ff8:	93 2b       	or	r25, r19
    3ffa:	a4 2b       	or	r26, r20
    3ffc:	b5 2b       	or	r27, r21
    3ffe:	89 83       	std	Y+1, r24	; 0x01
    4000:	9a 83       	std	Y+2, r25	; 0x02
    4002:	ab 83       	std	Y+3, r26	; 0x03
    4004:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    4006:	8e 81       	ldd	r24, Y+6	; 0x06
    4008:	48 2f       	mov	r20, r24
    400a:	50 e0       	ldi	r21, 0x00	; 0
    400c:	ca 01       	movw	r24, r20
    400e:	88 0f       	add	r24, r24
    4010:	99 1f       	adc	r25, r25
    4012:	9c 01       	movw	r18, r24
    4014:	22 0f       	add	r18, r18
    4016:	33 1f       	adc	r19, r19
    4018:	22 0f       	add	r18, r18
    401a:	33 1f       	adc	r19, r19
    401c:	22 0f       	add	r18, r18
    401e:	33 1f       	adc	r19, r19
    4020:	82 0f       	add	r24, r18
    4022:	93 1f       	adc	r25, r19
    4024:	9c 01       	movw	r18, r24
    4026:	24 0f       	add	r18, r20
    4028:	35 1f       	adc	r19, r21
    402a:	88 85       	ldd	r24, Y+8	; 0x08
    402c:	99 85       	ldd	r25, Y+9	; 0x09
    402e:	fc 01       	movw	r30, r24
    4030:	e2 0f       	add	r30, r18
    4032:	f3 1f       	adc	r31, r19
    4034:	64 81       	ldd	r22, Z+4	; 0x04
    4036:	8e 81       	ldd	r24, Y+6	; 0x06
    4038:	48 2f       	mov	r20, r24
    403a:	50 e0       	ldi	r21, 0x00	; 0
    403c:	ca 01       	movw	r24, r20
    403e:	88 0f       	add	r24, r24
    4040:	99 1f       	adc	r25, r25
    4042:	9c 01       	movw	r18, r24
    4044:	22 0f       	add	r18, r18
    4046:	33 1f       	adc	r19, r19
    4048:	22 0f       	add	r18, r18
    404a:	33 1f       	adc	r19, r19
    404c:	22 0f       	add	r18, r18
    404e:	33 1f       	adc	r19, r19
    4050:	82 0f       	add	r24, r18
    4052:	93 1f       	adc	r25, r19
    4054:	9c 01       	movw	r18, r24
    4056:	24 0f       	add	r18, r20
    4058:	35 1f       	adc	r19, r21
    405a:	88 85       	ldd	r24, Y+8	; 0x08
    405c:	99 85       	ldd	r25, Y+9	; 0x09
    405e:	fc 01       	movw	r30, r24
    4060:	e2 0f       	add	r30, r18
    4062:	f3 1f       	adc	r31, r19
    4064:	95 81       	ldd	r25, Z+5	; 0x05
    4066:	86 2f       	mov	r24, r22
    4068:	69 2f       	mov	r22, r25
    406a:	41 e0       	ldi	r20, 0x01	; 1
    406c:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    4070:	28 2f       	mov	r18, r24
    4072:	30 e0       	ldi	r19, 0x00	; 0
    4074:	8d 81       	ldd	r24, Y+5	; 0x05
    4076:	8d 5f       	subi	r24, 0xFD	; 253
    4078:	8d 83       	std	Y+5, r24	; 0x05
    407a:	8d 81       	ldd	r24, Y+5	; 0x05
    407c:	88 2f       	mov	r24, r24
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	a9 01       	movw	r20, r18
    4082:	02 c0       	rjmp	.+4      	; 0x4088 <Seven_Segment_enuInit+0x208>
    4084:	44 0f       	add	r20, r20
    4086:	55 1f       	adc	r21, r21
    4088:	8a 95       	dec	r24
    408a:	e2 f7       	brpl	.-8      	; 0x4084 <Seven_Segment_enuInit+0x204>
    408c:	ca 01       	movw	r24, r20
    408e:	9c 01       	movw	r18, r24
    4090:	44 27       	eor	r20, r20
    4092:	37 fd       	sbrc	r19, 7
    4094:	40 95       	com	r20
    4096:	54 2f       	mov	r21, r20
    4098:	89 81       	ldd	r24, Y+1	; 0x01
    409a:	9a 81       	ldd	r25, Y+2	; 0x02
    409c:	ab 81       	ldd	r26, Y+3	; 0x03
    409e:	bc 81       	ldd	r27, Y+4	; 0x04
    40a0:	82 2b       	or	r24, r18
    40a2:	93 2b       	or	r25, r19
    40a4:	a4 2b       	or	r26, r20
    40a6:	b5 2b       	or	r27, r21
    40a8:	89 83       	std	Y+1, r24	; 0x01
    40aa:	9a 83       	std	Y+2, r25	; 0x02
    40ac:	ab 83       	std	Y+3, r26	; 0x03
    40ae:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    40b0:	8e 81       	ldd	r24, Y+6	; 0x06
    40b2:	48 2f       	mov	r20, r24
    40b4:	50 e0       	ldi	r21, 0x00	; 0
    40b6:	ca 01       	movw	r24, r20
    40b8:	88 0f       	add	r24, r24
    40ba:	99 1f       	adc	r25, r25
    40bc:	9c 01       	movw	r18, r24
    40be:	22 0f       	add	r18, r18
    40c0:	33 1f       	adc	r19, r19
    40c2:	22 0f       	add	r18, r18
    40c4:	33 1f       	adc	r19, r19
    40c6:	22 0f       	add	r18, r18
    40c8:	33 1f       	adc	r19, r19
    40ca:	82 0f       	add	r24, r18
    40cc:	93 1f       	adc	r25, r19
    40ce:	9c 01       	movw	r18, r24
    40d0:	24 0f       	add	r18, r20
    40d2:	35 1f       	adc	r19, r21
    40d4:	88 85       	ldd	r24, Y+8	; 0x08
    40d6:	99 85       	ldd	r25, Y+9	; 0x09
    40d8:	fc 01       	movw	r30, r24
    40da:	e2 0f       	add	r30, r18
    40dc:	f3 1f       	adc	r31, r19
    40de:	66 81       	ldd	r22, Z+6	; 0x06
    40e0:	8e 81       	ldd	r24, Y+6	; 0x06
    40e2:	48 2f       	mov	r20, r24
    40e4:	50 e0       	ldi	r21, 0x00	; 0
    40e6:	ca 01       	movw	r24, r20
    40e8:	88 0f       	add	r24, r24
    40ea:	99 1f       	adc	r25, r25
    40ec:	9c 01       	movw	r18, r24
    40ee:	22 0f       	add	r18, r18
    40f0:	33 1f       	adc	r19, r19
    40f2:	22 0f       	add	r18, r18
    40f4:	33 1f       	adc	r19, r19
    40f6:	22 0f       	add	r18, r18
    40f8:	33 1f       	adc	r19, r19
    40fa:	82 0f       	add	r24, r18
    40fc:	93 1f       	adc	r25, r19
    40fe:	9c 01       	movw	r18, r24
    4100:	24 0f       	add	r18, r20
    4102:	35 1f       	adc	r19, r21
    4104:	88 85       	ldd	r24, Y+8	; 0x08
    4106:	99 85       	ldd	r25, Y+9	; 0x09
    4108:	fc 01       	movw	r30, r24
    410a:	e2 0f       	add	r30, r18
    410c:	f3 1f       	adc	r31, r19
    410e:	97 81       	ldd	r25, Z+7	; 0x07
    4110:	86 2f       	mov	r24, r22
    4112:	69 2f       	mov	r22, r25
    4114:	41 e0       	ldi	r20, 0x01	; 1
    4116:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    411a:	28 2f       	mov	r18, r24
    411c:	30 e0       	ldi	r19, 0x00	; 0
    411e:	8d 81       	ldd	r24, Y+5	; 0x05
    4120:	8d 5f       	subi	r24, 0xFD	; 253
    4122:	8d 83       	std	Y+5, r24	; 0x05
    4124:	8d 81       	ldd	r24, Y+5	; 0x05
    4126:	88 2f       	mov	r24, r24
    4128:	90 e0       	ldi	r25, 0x00	; 0
    412a:	a9 01       	movw	r20, r18
    412c:	02 c0       	rjmp	.+4      	; 0x4132 <Seven_Segment_enuInit+0x2b2>
    412e:	44 0f       	add	r20, r20
    4130:	55 1f       	adc	r21, r21
    4132:	8a 95       	dec	r24
    4134:	e2 f7       	brpl	.-8      	; 0x412e <Seven_Segment_enuInit+0x2ae>
    4136:	ca 01       	movw	r24, r20
    4138:	9c 01       	movw	r18, r24
    413a:	44 27       	eor	r20, r20
    413c:	37 fd       	sbrc	r19, 7
    413e:	40 95       	com	r20
    4140:	54 2f       	mov	r21, r20
    4142:	89 81       	ldd	r24, Y+1	; 0x01
    4144:	9a 81       	ldd	r25, Y+2	; 0x02
    4146:	ab 81       	ldd	r26, Y+3	; 0x03
    4148:	bc 81       	ldd	r27, Y+4	; 0x04
    414a:	82 2b       	or	r24, r18
    414c:	93 2b       	or	r25, r19
    414e:	a4 2b       	or	r26, r20
    4150:	b5 2b       	or	r27, r21
    4152:	89 83       	std	Y+1, r24	; 0x01
    4154:	9a 83       	std	Y+2, r25	; 0x02
    4156:	ab 83       	std	Y+3, r26	; 0x03
    4158:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_EPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_EPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    415a:	8e 81       	ldd	r24, Y+6	; 0x06
    415c:	48 2f       	mov	r20, r24
    415e:	50 e0       	ldi	r21, 0x00	; 0
    4160:	ca 01       	movw	r24, r20
    4162:	88 0f       	add	r24, r24
    4164:	99 1f       	adc	r25, r25
    4166:	9c 01       	movw	r18, r24
    4168:	22 0f       	add	r18, r18
    416a:	33 1f       	adc	r19, r19
    416c:	22 0f       	add	r18, r18
    416e:	33 1f       	adc	r19, r19
    4170:	22 0f       	add	r18, r18
    4172:	33 1f       	adc	r19, r19
    4174:	82 0f       	add	r24, r18
    4176:	93 1f       	adc	r25, r19
    4178:	9c 01       	movw	r18, r24
    417a:	24 0f       	add	r18, r20
    417c:	35 1f       	adc	r19, r21
    417e:	88 85       	ldd	r24, Y+8	; 0x08
    4180:	99 85       	ldd	r25, Y+9	; 0x09
    4182:	fc 01       	movw	r30, r24
    4184:	e2 0f       	add	r30, r18
    4186:	f3 1f       	adc	r31, r19
    4188:	60 85       	ldd	r22, Z+8	; 0x08
    418a:	8e 81       	ldd	r24, Y+6	; 0x06
    418c:	48 2f       	mov	r20, r24
    418e:	50 e0       	ldi	r21, 0x00	; 0
    4190:	ca 01       	movw	r24, r20
    4192:	88 0f       	add	r24, r24
    4194:	99 1f       	adc	r25, r25
    4196:	9c 01       	movw	r18, r24
    4198:	22 0f       	add	r18, r18
    419a:	33 1f       	adc	r19, r19
    419c:	22 0f       	add	r18, r18
    419e:	33 1f       	adc	r19, r19
    41a0:	22 0f       	add	r18, r18
    41a2:	33 1f       	adc	r19, r19
    41a4:	82 0f       	add	r24, r18
    41a6:	93 1f       	adc	r25, r19
    41a8:	9c 01       	movw	r18, r24
    41aa:	24 0f       	add	r18, r20
    41ac:	35 1f       	adc	r19, r21
    41ae:	88 85       	ldd	r24, Y+8	; 0x08
    41b0:	99 85       	ldd	r25, Y+9	; 0x09
    41b2:	fc 01       	movw	r30, r24
    41b4:	e2 0f       	add	r30, r18
    41b6:	f3 1f       	adc	r31, r19
    41b8:	91 85       	ldd	r25, Z+9	; 0x09
    41ba:	86 2f       	mov	r24, r22
    41bc:	69 2f       	mov	r22, r25
    41be:	41 e0       	ldi	r20, 0x01	; 1
    41c0:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    41c4:	28 2f       	mov	r18, r24
    41c6:	30 e0       	ldi	r19, 0x00	; 0
    41c8:	8d 81       	ldd	r24, Y+5	; 0x05
    41ca:	8d 5f       	subi	r24, 0xFD	; 253
    41cc:	8d 83       	std	Y+5, r24	; 0x05
    41ce:	8d 81       	ldd	r24, Y+5	; 0x05
    41d0:	88 2f       	mov	r24, r24
    41d2:	90 e0       	ldi	r25, 0x00	; 0
    41d4:	a9 01       	movw	r20, r18
    41d6:	02 c0       	rjmp	.+4      	; 0x41dc <Seven_Segment_enuInit+0x35c>
    41d8:	44 0f       	add	r20, r20
    41da:	55 1f       	adc	r21, r21
    41dc:	8a 95       	dec	r24
    41de:	e2 f7       	brpl	.-8      	; 0x41d8 <Seven_Segment_enuInit+0x358>
    41e0:	ca 01       	movw	r24, r20
    41e2:	9c 01       	movw	r18, r24
    41e4:	44 27       	eor	r20, r20
    41e6:	37 fd       	sbrc	r19, 7
    41e8:	40 95       	com	r20
    41ea:	54 2f       	mov	r21, r20
    41ec:	89 81       	ldd	r24, Y+1	; 0x01
    41ee:	9a 81       	ldd	r25, Y+2	; 0x02
    41f0:	ab 81       	ldd	r26, Y+3	; 0x03
    41f2:	bc 81       	ldd	r27, Y+4	; 0x04
    41f4:	82 2b       	or	r24, r18
    41f6:	93 2b       	or	r25, r19
    41f8:	a4 2b       	or	r26, r20
    41fa:	b5 2b       	or	r27, r21
    41fc:	89 83       	std	Y+1, r24	; 0x01
    41fe:	9a 83       	std	Y+2, r25	; 0x02
    4200:	ab 83       	std	Y+3, r26	; 0x03
    4202:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_FPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_FPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    4204:	8e 81       	ldd	r24, Y+6	; 0x06
    4206:	48 2f       	mov	r20, r24
    4208:	50 e0       	ldi	r21, 0x00	; 0
    420a:	ca 01       	movw	r24, r20
    420c:	88 0f       	add	r24, r24
    420e:	99 1f       	adc	r25, r25
    4210:	9c 01       	movw	r18, r24
    4212:	22 0f       	add	r18, r18
    4214:	33 1f       	adc	r19, r19
    4216:	22 0f       	add	r18, r18
    4218:	33 1f       	adc	r19, r19
    421a:	22 0f       	add	r18, r18
    421c:	33 1f       	adc	r19, r19
    421e:	82 0f       	add	r24, r18
    4220:	93 1f       	adc	r25, r19
    4222:	9c 01       	movw	r18, r24
    4224:	24 0f       	add	r18, r20
    4226:	35 1f       	adc	r19, r21
    4228:	88 85       	ldd	r24, Y+8	; 0x08
    422a:	99 85       	ldd	r25, Y+9	; 0x09
    422c:	fc 01       	movw	r30, r24
    422e:	e2 0f       	add	r30, r18
    4230:	f3 1f       	adc	r31, r19
    4232:	62 85       	ldd	r22, Z+10	; 0x0a
    4234:	8e 81       	ldd	r24, Y+6	; 0x06
    4236:	48 2f       	mov	r20, r24
    4238:	50 e0       	ldi	r21, 0x00	; 0
    423a:	ca 01       	movw	r24, r20
    423c:	88 0f       	add	r24, r24
    423e:	99 1f       	adc	r25, r25
    4240:	9c 01       	movw	r18, r24
    4242:	22 0f       	add	r18, r18
    4244:	33 1f       	adc	r19, r19
    4246:	22 0f       	add	r18, r18
    4248:	33 1f       	adc	r19, r19
    424a:	22 0f       	add	r18, r18
    424c:	33 1f       	adc	r19, r19
    424e:	82 0f       	add	r24, r18
    4250:	93 1f       	adc	r25, r19
    4252:	9c 01       	movw	r18, r24
    4254:	24 0f       	add	r18, r20
    4256:	35 1f       	adc	r19, r21
    4258:	88 85       	ldd	r24, Y+8	; 0x08
    425a:	99 85       	ldd	r25, Y+9	; 0x09
    425c:	fc 01       	movw	r30, r24
    425e:	e2 0f       	add	r30, r18
    4260:	f3 1f       	adc	r31, r19
    4262:	93 85       	ldd	r25, Z+11	; 0x0b
    4264:	86 2f       	mov	r24, r22
    4266:	69 2f       	mov	r22, r25
    4268:	41 e0       	ldi	r20, 0x01	; 1
    426a:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    426e:	28 2f       	mov	r18, r24
    4270:	30 e0       	ldi	r19, 0x00	; 0
    4272:	8d 81       	ldd	r24, Y+5	; 0x05
    4274:	8d 5f       	subi	r24, 0xFD	; 253
    4276:	8d 83       	std	Y+5, r24	; 0x05
    4278:	8d 81       	ldd	r24, Y+5	; 0x05
    427a:	88 2f       	mov	r24, r24
    427c:	90 e0       	ldi	r25, 0x00	; 0
    427e:	a9 01       	movw	r20, r18
    4280:	02 c0       	rjmp	.+4      	; 0x4286 <Seven_Segment_enuInit+0x406>
    4282:	44 0f       	add	r20, r20
    4284:	55 1f       	adc	r21, r21
    4286:	8a 95       	dec	r24
    4288:	e2 f7       	brpl	.-8      	; 0x4282 <Seven_Segment_enuInit+0x402>
    428a:	ca 01       	movw	r24, r20
    428c:	9c 01       	movw	r18, r24
    428e:	44 27       	eor	r20, r20
    4290:	37 fd       	sbrc	r19, 7
    4292:	40 95       	com	r20
    4294:	54 2f       	mov	r21, r20
    4296:	89 81       	ldd	r24, Y+1	; 0x01
    4298:	9a 81       	ldd	r25, Y+2	; 0x02
    429a:	ab 81       	ldd	r26, Y+3	; 0x03
    429c:	bc 81       	ldd	r27, Y+4	; 0x04
    429e:	82 2b       	or	r24, r18
    42a0:	93 2b       	or	r25, r19
    42a2:	a4 2b       	or	r26, r20
    42a4:	b5 2b       	or	r27, r21
    42a6:	89 83       	std	Y+1, r24	; 0x01
    42a8:	9a 83       	std	Y+2, r25	; 0x02
    42aa:	ab 83       	std	Y+3, r26	; 0x03
    42ac:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_GPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_GPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    42ae:	8e 81       	ldd	r24, Y+6	; 0x06
    42b0:	48 2f       	mov	r20, r24
    42b2:	50 e0       	ldi	r21, 0x00	; 0
    42b4:	ca 01       	movw	r24, r20
    42b6:	88 0f       	add	r24, r24
    42b8:	99 1f       	adc	r25, r25
    42ba:	9c 01       	movw	r18, r24
    42bc:	22 0f       	add	r18, r18
    42be:	33 1f       	adc	r19, r19
    42c0:	22 0f       	add	r18, r18
    42c2:	33 1f       	adc	r19, r19
    42c4:	22 0f       	add	r18, r18
    42c6:	33 1f       	adc	r19, r19
    42c8:	82 0f       	add	r24, r18
    42ca:	93 1f       	adc	r25, r19
    42cc:	9c 01       	movw	r18, r24
    42ce:	24 0f       	add	r18, r20
    42d0:	35 1f       	adc	r19, r21
    42d2:	88 85       	ldd	r24, Y+8	; 0x08
    42d4:	99 85       	ldd	r25, Y+9	; 0x09
    42d6:	fc 01       	movw	r30, r24
    42d8:	e2 0f       	add	r30, r18
    42da:	f3 1f       	adc	r31, r19
    42dc:	64 85       	ldd	r22, Z+12	; 0x0c
    42de:	8e 81       	ldd	r24, Y+6	; 0x06
    42e0:	48 2f       	mov	r20, r24
    42e2:	50 e0       	ldi	r21, 0x00	; 0
    42e4:	ca 01       	movw	r24, r20
    42e6:	88 0f       	add	r24, r24
    42e8:	99 1f       	adc	r25, r25
    42ea:	9c 01       	movw	r18, r24
    42ec:	22 0f       	add	r18, r18
    42ee:	33 1f       	adc	r19, r19
    42f0:	22 0f       	add	r18, r18
    42f2:	33 1f       	adc	r19, r19
    42f4:	22 0f       	add	r18, r18
    42f6:	33 1f       	adc	r19, r19
    42f8:	82 0f       	add	r24, r18
    42fa:	93 1f       	adc	r25, r19
    42fc:	9c 01       	movw	r18, r24
    42fe:	24 0f       	add	r18, r20
    4300:	35 1f       	adc	r19, r21
    4302:	88 85       	ldd	r24, Y+8	; 0x08
    4304:	99 85       	ldd	r25, Y+9	; 0x09
    4306:	fc 01       	movw	r30, r24
    4308:	e2 0f       	add	r30, r18
    430a:	f3 1f       	adc	r31, r19
    430c:	95 85       	ldd	r25, Z+13	; 0x0d
    430e:	86 2f       	mov	r24, r22
    4310:	69 2f       	mov	r22, r25
    4312:	41 e0       	ldi	r20, 0x01	; 1
    4314:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    4318:	28 2f       	mov	r18, r24
    431a:	30 e0       	ldi	r19, 0x00	; 0
    431c:	8d 81       	ldd	r24, Y+5	; 0x05
    431e:	8d 5f       	subi	r24, 0xFD	; 253
    4320:	8d 83       	std	Y+5, r24	; 0x05
    4322:	8d 81       	ldd	r24, Y+5	; 0x05
    4324:	88 2f       	mov	r24, r24
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	a9 01       	movw	r20, r18
    432a:	02 c0       	rjmp	.+4      	; 0x4330 <Seven_Segment_enuInit+0x4b0>
    432c:	44 0f       	add	r20, r20
    432e:	55 1f       	adc	r21, r21
    4330:	8a 95       	dec	r24
    4332:	e2 f7       	brpl	.-8      	; 0x432c <Seven_Segment_enuInit+0x4ac>
    4334:	ca 01       	movw	r24, r20
    4336:	9c 01       	movw	r18, r24
    4338:	44 27       	eor	r20, r20
    433a:	37 fd       	sbrc	r19, 7
    433c:	40 95       	com	r20
    433e:	54 2f       	mov	r21, r20
    4340:	89 81       	ldd	r24, Y+1	; 0x01
    4342:	9a 81       	ldd	r25, Y+2	; 0x02
    4344:	ab 81       	ldd	r26, Y+3	; 0x03
    4346:	bc 81       	ldd	r27, Y+4	; 0x04
    4348:	82 2b       	or	r24, r18
    434a:	93 2b       	or	r25, r19
    434c:	a4 2b       	or	r26, r20
    434e:	b5 2b       	or	r27, r21
    4350:	89 83       	std	Y+1, r24	; 0x01
    4352:	9a 83       	std	Y+2, r25	; 0x02
    4354:	ab 83       	std	Y+3, r26	; 0x03
    4356:	bc 83       	std	Y+4, r27	; 0x04
			
			if(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CMN_PORT != NOT_CONNECTED && Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CMN_PIN != NOT_CONNECTED)
    4358:	8e 81       	ldd	r24, Y+6	; 0x06
    435a:	48 2f       	mov	r20, r24
    435c:	50 e0       	ldi	r21, 0x00	; 0
    435e:	ca 01       	movw	r24, r20
    4360:	88 0f       	add	r24, r24
    4362:	99 1f       	adc	r25, r25
    4364:	9c 01       	movw	r18, r24
    4366:	22 0f       	add	r18, r18
    4368:	33 1f       	adc	r19, r19
    436a:	22 0f       	add	r18, r18
    436c:	33 1f       	adc	r19, r19
    436e:	22 0f       	add	r18, r18
    4370:	33 1f       	adc	r19, r19
    4372:	82 0f       	add	r24, r18
    4374:	93 1f       	adc	r25, r19
    4376:	9c 01       	movw	r18, r24
    4378:	24 0f       	add	r18, r20
    437a:	35 1f       	adc	r19, r21
    437c:	88 85       	ldd	r24, Y+8	; 0x08
    437e:	99 85       	ldd	r25, Y+9	; 0x09
    4380:	fc 01       	movw	r30, r24
    4382:	e2 0f       	add	r30, r18
    4384:	f3 1f       	adc	r31, r19
    4386:	86 85       	ldd	r24, Z+14	; 0x0e
    4388:	8a 30       	cpi	r24, 0x0A	; 10
    438a:	09 f4       	brne	.+2      	; 0x438e <Seven_Segment_enuInit+0x50e>
    438c:	70 c0       	rjmp	.+224    	; 0x446e <Seven_Segment_enuInit+0x5ee>
    438e:	8e 81       	ldd	r24, Y+6	; 0x06
    4390:	48 2f       	mov	r20, r24
    4392:	50 e0       	ldi	r21, 0x00	; 0
    4394:	ca 01       	movw	r24, r20
    4396:	88 0f       	add	r24, r24
    4398:	99 1f       	adc	r25, r25
    439a:	9c 01       	movw	r18, r24
    439c:	22 0f       	add	r18, r18
    439e:	33 1f       	adc	r19, r19
    43a0:	22 0f       	add	r18, r18
    43a2:	33 1f       	adc	r19, r19
    43a4:	22 0f       	add	r18, r18
    43a6:	33 1f       	adc	r19, r19
    43a8:	82 0f       	add	r24, r18
    43aa:	93 1f       	adc	r25, r19
    43ac:	9c 01       	movw	r18, r24
    43ae:	24 0f       	add	r18, r20
    43b0:	35 1f       	adc	r19, r21
    43b2:	88 85       	ldd	r24, Y+8	; 0x08
    43b4:	99 85       	ldd	r25, Y+9	; 0x09
    43b6:	fc 01       	movw	r30, r24
    43b8:	e2 0f       	add	r30, r18
    43ba:	f3 1f       	adc	r31, r19
    43bc:	87 85       	ldd	r24, Z+15	; 0x0f
    43be:	8a 30       	cpi	r24, 0x0A	; 10
    43c0:	09 f4       	brne	.+2      	; 0x43c4 <Seven_Segment_enuInit+0x544>
    43c2:	55 c0       	rjmp	.+170    	; 0x446e <Seven_Segment_enuInit+0x5ee>
			{
				Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CMN_PORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CMN_PIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    43c4:	8e 81       	ldd	r24, Y+6	; 0x06
    43c6:	48 2f       	mov	r20, r24
    43c8:	50 e0       	ldi	r21, 0x00	; 0
    43ca:	ca 01       	movw	r24, r20
    43cc:	88 0f       	add	r24, r24
    43ce:	99 1f       	adc	r25, r25
    43d0:	9c 01       	movw	r18, r24
    43d2:	22 0f       	add	r18, r18
    43d4:	33 1f       	adc	r19, r19
    43d6:	22 0f       	add	r18, r18
    43d8:	33 1f       	adc	r19, r19
    43da:	22 0f       	add	r18, r18
    43dc:	33 1f       	adc	r19, r19
    43de:	82 0f       	add	r24, r18
    43e0:	93 1f       	adc	r25, r19
    43e2:	9c 01       	movw	r18, r24
    43e4:	24 0f       	add	r18, r20
    43e6:	35 1f       	adc	r19, r21
    43e8:	88 85       	ldd	r24, Y+8	; 0x08
    43ea:	99 85       	ldd	r25, Y+9	; 0x09
    43ec:	fc 01       	movw	r30, r24
    43ee:	e2 0f       	add	r30, r18
    43f0:	f3 1f       	adc	r31, r19
    43f2:	66 85       	ldd	r22, Z+14	; 0x0e
    43f4:	8e 81       	ldd	r24, Y+6	; 0x06
    43f6:	48 2f       	mov	r20, r24
    43f8:	50 e0       	ldi	r21, 0x00	; 0
    43fa:	ca 01       	movw	r24, r20
    43fc:	88 0f       	add	r24, r24
    43fe:	99 1f       	adc	r25, r25
    4400:	9c 01       	movw	r18, r24
    4402:	22 0f       	add	r18, r18
    4404:	33 1f       	adc	r19, r19
    4406:	22 0f       	add	r18, r18
    4408:	33 1f       	adc	r19, r19
    440a:	22 0f       	add	r18, r18
    440c:	33 1f       	adc	r19, r19
    440e:	82 0f       	add	r24, r18
    4410:	93 1f       	adc	r25, r19
    4412:	9c 01       	movw	r18, r24
    4414:	24 0f       	add	r18, r20
    4416:	35 1f       	adc	r19, r21
    4418:	88 85       	ldd	r24, Y+8	; 0x08
    441a:	99 85       	ldd	r25, Y+9	; 0x09
    441c:	fc 01       	movw	r30, r24
    441e:	e2 0f       	add	r30, r18
    4420:	f3 1f       	adc	r31, r19
    4422:	97 85       	ldd	r25, Z+15	; 0x0f
    4424:	86 2f       	mov	r24, r22
    4426:	69 2f       	mov	r22, r25
    4428:	41 e0       	ldi	r20, 0x01	; 1
    442a:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    442e:	28 2f       	mov	r18, r24
    4430:	30 e0       	ldi	r19, 0x00	; 0
    4432:	8d 81       	ldd	r24, Y+5	; 0x05
    4434:	8d 5f       	subi	r24, 0xFD	; 253
    4436:	8d 83       	std	Y+5, r24	; 0x05
    4438:	8d 81       	ldd	r24, Y+5	; 0x05
    443a:	88 2f       	mov	r24, r24
    443c:	90 e0       	ldi	r25, 0x00	; 0
    443e:	a9 01       	movw	r20, r18
    4440:	02 c0       	rjmp	.+4      	; 0x4446 <Seven_Segment_enuInit+0x5c6>
    4442:	44 0f       	add	r20, r20
    4444:	55 1f       	adc	r21, r21
    4446:	8a 95       	dec	r24
    4448:	e2 f7       	brpl	.-8      	; 0x4442 <Seven_Segment_enuInit+0x5c2>
    444a:	ca 01       	movw	r24, r20
    444c:	9c 01       	movw	r18, r24
    444e:	44 27       	eor	r20, r20
    4450:	37 fd       	sbrc	r19, 7
    4452:	40 95       	com	r20
    4454:	54 2f       	mov	r21, r20
    4456:	89 81       	ldd	r24, Y+1	; 0x01
    4458:	9a 81       	ldd	r25, Y+2	; 0x02
    445a:	ab 81       	ldd	r26, Y+3	; 0x03
    445c:	bc 81       	ldd	r27, Y+4	; 0x04
    445e:	82 2b       	or	r24, r18
    4460:	93 2b       	or	r25, r19
    4462:	a4 2b       	or	r26, r20
    4464:	b5 2b       	or	r27, r21
    4466:	89 83       	std	Y+1, r24	; 0x01
    4468:	9a 83       	std	Y+2, r25	; 0x02
    446a:	ab 83       	std	Y+3, r26	; 0x03
    446c:	bc 83       	std	Y+4, r27	; 0x04
			}
			
			if(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PORT != NOT_CONNECTED && Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PIN != NOT_CONNECTED)
    446e:	8e 81       	ldd	r24, Y+6	; 0x06
    4470:	48 2f       	mov	r20, r24
    4472:	50 e0       	ldi	r21, 0x00	; 0
    4474:	ca 01       	movw	r24, r20
    4476:	88 0f       	add	r24, r24
    4478:	99 1f       	adc	r25, r25
    447a:	9c 01       	movw	r18, r24
    447c:	22 0f       	add	r18, r18
    447e:	33 1f       	adc	r19, r19
    4480:	22 0f       	add	r18, r18
    4482:	33 1f       	adc	r19, r19
    4484:	22 0f       	add	r18, r18
    4486:	33 1f       	adc	r19, r19
    4488:	82 0f       	add	r24, r18
    448a:	93 1f       	adc	r25, r19
    448c:	9c 01       	movw	r18, r24
    448e:	24 0f       	add	r18, r20
    4490:	35 1f       	adc	r19, r21
    4492:	88 85       	ldd	r24, Y+8	; 0x08
    4494:	99 85       	ldd	r25, Y+9	; 0x09
    4496:	fc 01       	movw	r30, r24
    4498:	e2 0f       	add	r30, r18
    449a:	f3 1f       	adc	r31, r19
    449c:	80 89       	ldd	r24, Z+16	; 0x10
    449e:	8a 30       	cpi	r24, 0x0A	; 10
    44a0:	09 f4       	brne	.+2      	; 0x44a4 <Seven_Segment_enuInit+0x624>
    44a2:	70 c0       	rjmp	.+224    	; 0x4584 <Seven_Segment_enuInit+0x704>
    44a4:	8e 81       	ldd	r24, Y+6	; 0x06
    44a6:	48 2f       	mov	r20, r24
    44a8:	50 e0       	ldi	r21, 0x00	; 0
    44aa:	ca 01       	movw	r24, r20
    44ac:	88 0f       	add	r24, r24
    44ae:	99 1f       	adc	r25, r25
    44b0:	9c 01       	movw	r18, r24
    44b2:	22 0f       	add	r18, r18
    44b4:	33 1f       	adc	r19, r19
    44b6:	22 0f       	add	r18, r18
    44b8:	33 1f       	adc	r19, r19
    44ba:	22 0f       	add	r18, r18
    44bc:	33 1f       	adc	r19, r19
    44be:	82 0f       	add	r24, r18
    44c0:	93 1f       	adc	r25, r19
    44c2:	9c 01       	movw	r18, r24
    44c4:	24 0f       	add	r18, r20
    44c6:	35 1f       	adc	r19, r21
    44c8:	88 85       	ldd	r24, Y+8	; 0x08
    44ca:	99 85       	ldd	r25, Y+9	; 0x09
    44cc:	fc 01       	movw	r30, r24
    44ce:	e2 0f       	add	r30, r18
    44d0:	f3 1f       	adc	r31, r19
    44d2:	81 89       	ldd	r24, Z+17	; 0x11
    44d4:	8a 30       	cpi	r24, 0x0A	; 10
    44d6:	09 f4       	brne	.+2      	; 0x44da <Seven_Segment_enuInit+0x65a>
    44d8:	55 c0       	rjmp	.+170    	; 0x4584 <Seven_Segment_enuInit+0x704>
			{
				Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    44da:	8e 81       	ldd	r24, Y+6	; 0x06
    44dc:	48 2f       	mov	r20, r24
    44de:	50 e0       	ldi	r21, 0x00	; 0
    44e0:	ca 01       	movw	r24, r20
    44e2:	88 0f       	add	r24, r24
    44e4:	99 1f       	adc	r25, r25
    44e6:	9c 01       	movw	r18, r24
    44e8:	22 0f       	add	r18, r18
    44ea:	33 1f       	adc	r19, r19
    44ec:	22 0f       	add	r18, r18
    44ee:	33 1f       	adc	r19, r19
    44f0:	22 0f       	add	r18, r18
    44f2:	33 1f       	adc	r19, r19
    44f4:	82 0f       	add	r24, r18
    44f6:	93 1f       	adc	r25, r19
    44f8:	9c 01       	movw	r18, r24
    44fa:	24 0f       	add	r18, r20
    44fc:	35 1f       	adc	r19, r21
    44fe:	88 85       	ldd	r24, Y+8	; 0x08
    4500:	99 85       	ldd	r25, Y+9	; 0x09
    4502:	fc 01       	movw	r30, r24
    4504:	e2 0f       	add	r30, r18
    4506:	f3 1f       	adc	r31, r19
    4508:	60 89       	ldd	r22, Z+16	; 0x10
    450a:	8e 81       	ldd	r24, Y+6	; 0x06
    450c:	48 2f       	mov	r20, r24
    450e:	50 e0       	ldi	r21, 0x00	; 0
    4510:	ca 01       	movw	r24, r20
    4512:	88 0f       	add	r24, r24
    4514:	99 1f       	adc	r25, r25
    4516:	9c 01       	movw	r18, r24
    4518:	22 0f       	add	r18, r18
    451a:	33 1f       	adc	r19, r19
    451c:	22 0f       	add	r18, r18
    451e:	33 1f       	adc	r19, r19
    4520:	22 0f       	add	r18, r18
    4522:	33 1f       	adc	r19, r19
    4524:	82 0f       	add	r24, r18
    4526:	93 1f       	adc	r25, r19
    4528:	9c 01       	movw	r18, r24
    452a:	24 0f       	add	r18, r20
    452c:	35 1f       	adc	r19, r21
    452e:	88 85       	ldd	r24, Y+8	; 0x08
    4530:	99 85       	ldd	r25, Y+9	; 0x09
    4532:	fc 01       	movw	r30, r24
    4534:	e2 0f       	add	r30, r18
    4536:	f3 1f       	adc	r31, r19
    4538:	91 89       	ldd	r25, Z+17	; 0x11
    453a:	86 2f       	mov	r24, r22
    453c:	69 2f       	mov	r22, r25
    453e:	41 e0       	ldi	r20, 0x01	; 1
    4540:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    4544:	28 2f       	mov	r18, r24
    4546:	30 e0       	ldi	r19, 0x00	; 0
    4548:	8d 81       	ldd	r24, Y+5	; 0x05
    454a:	8d 5f       	subi	r24, 0xFD	; 253
    454c:	8d 83       	std	Y+5, r24	; 0x05
    454e:	8d 81       	ldd	r24, Y+5	; 0x05
    4550:	88 2f       	mov	r24, r24
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	a9 01       	movw	r20, r18
    4556:	02 c0       	rjmp	.+4      	; 0x455c <Seven_Segment_enuInit+0x6dc>
    4558:	44 0f       	add	r20, r20
    455a:	55 1f       	adc	r21, r21
    455c:	8a 95       	dec	r24
    455e:	e2 f7       	brpl	.-8      	; 0x4558 <Seven_Segment_enuInit+0x6d8>
    4560:	ca 01       	movw	r24, r20
    4562:	9c 01       	movw	r18, r24
    4564:	44 27       	eor	r20, r20
    4566:	37 fd       	sbrc	r19, 7
    4568:	40 95       	com	r20
    456a:	54 2f       	mov	r21, r20
    456c:	89 81       	ldd	r24, Y+1	; 0x01
    456e:	9a 81       	ldd	r25, Y+2	; 0x02
    4570:	ab 81       	ldd	r26, Y+3	; 0x03
    4572:	bc 81       	ldd	r27, Y+4	; 0x04
    4574:	82 2b       	or	r24, r18
    4576:	93 2b       	or	r25, r19
    4578:	a4 2b       	or	r26, r20
    457a:	b5 2b       	or	r27, r21
    457c:	89 83       	std	Y+1, r24	; 0x01
    457e:	9a 83       	std	Y+2, r25	; 0x02
    4580:	ab 83       	std	Y+3, r26	; 0x03
    4582:	bc 83       	std	Y+4, r27	; 0x04
	u8 Local_u8Iterator_Error = 0;
	u32 Local_u32CheckError = 0;
	
	if(Copy_pAstrSEG_Config != NULL)
	{
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
    4584:	8e 81       	ldd	r24, Y+6	; 0x06
    4586:	8f 5f       	subi	r24, 0xFF	; 255
    4588:	8e 83       	std	Y+6, r24	; 0x06
    458a:	8e 81       	ldd	r24, Y+6	; 0x06
    458c:	82 30       	cpi	r24, 0x02	; 2
    458e:	08 f4       	brcc	.+2      	; 0x4592 <Seven_Segment_enuInit+0x712>
    4590:	92 cc       	rjmp	.-1756   	; 0x3eb6 <Seven_Segment_enuInit+0x36>
			{
				Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			}
		}
		
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
    4592:	1e 82       	std	Y+6, r1	; 0x06
    4594:	26 c0       	rjmp	.+76     	; 0x45e2 <Seven_Segment_enuInit+0x762>
		{
			for(Local_u8Iterator_Error = 0; Local_u8Iterator_Error < sizeof(Local_u32CheckError)*8; Local_u8Iterator_Error += ERROR_STATE_SIZE)
    4596:	1d 82       	std	Y+5, r1	; 0x05
    4598:	1d c0       	rjmp	.+58     	; 0x45d4 <Seven_Segment_enuInit+0x754>
			{
				if(((Local_u32CheckError >> Local_u8Iterator_Error) & ERROR_STATE_MASK) != ES_OK)
    459a:	8d 81       	ldd	r24, Y+5	; 0x05
    459c:	28 2f       	mov	r18, r24
    459e:	30 e0       	ldi	r19, 0x00	; 0
    45a0:	89 81       	ldd	r24, Y+1	; 0x01
    45a2:	9a 81       	ldd	r25, Y+2	; 0x02
    45a4:	ab 81       	ldd	r26, Y+3	; 0x03
    45a6:	bc 81       	ldd	r27, Y+4	; 0x04
    45a8:	02 2e       	mov	r0, r18
    45aa:	04 c0       	rjmp	.+8      	; 0x45b4 <Seven_Segment_enuInit+0x734>
    45ac:	b6 95       	lsr	r27
    45ae:	a7 95       	ror	r26
    45b0:	97 95       	ror	r25
    45b2:	87 95       	ror	r24
    45b4:	0a 94       	dec	r0
    45b6:	d2 f7       	brpl	.-12     	; 0x45ac <Seven_Segment_enuInit+0x72c>
    45b8:	87 70       	andi	r24, 0x07	; 7
    45ba:	90 70       	andi	r25, 0x00	; 0
    45bc:	a0 70       	andi	r26, 0x00	; 0
    45be:	b0 70       	andi	r27, 0x00	; 0
    45c0:	00 97       	sbiw	r24, 0x00	; 0
    45c2:	a1 05       	cpc	r26, r1
    45c4:	b1 05       	cpc	r27, r1
    45c6:	19 f0       	breq	.+6      	; 0x45ce <Seven_Segment_enuInit+0x74e>
				{
					return ES_NOK;
    45c8:	51 e0       	ldi	r21, 0x01	; 1
    45ca:	5a 87       	std	Y+10, r21	; 0x0a
    45cc:	12 c0       	rjmp	.+36     	; 0x45f2 <Seven_Segment_enuInit+0x772>
			}
		}
		
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
		{
			for(Local_u8Iterator_Error = 0; Local_u8Iterator_Error < sizeof(Local_u32CheckError)*8; Local_u8Iterator_Error += ERROR_STATE_SIZE)
    45ce:	8d 81       	ldd	r24, Y+5	; 0x05
    45d0:	8d 5f       	subi	r24, 0xFD	; 253
    45d2:	8d 83       	std	Y+5, r24	; 0x05
    45d4:	8d 81       	ldd	r24, Y+5	; 0x05
    45d6:	80 32       	cpi	r24, 0x20	; 32
    45d8:	00 f3       	brcs	.-64     	; 0x459a <Seven_Segment_enuInit+0x71a>
				if(((Local_u32CheckError >> Local_u8Iterator_Error) & ERROR_STATE_MASK) != ES_OK)
				{
					return ES_NOK;
				}
			}
			Local_enuErrorState = ES_OK;
    45da:	1f 82       	std	Y+7, r1	; 0x07
			{
				Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			}
		}
		
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
    45dc:	8e 81       	ldd	r24, Y+6	; 0x06
    45de:	8f 5f       	subi	r24, 0xFF	; 255
    45e0:	8e 83       	std	Y+6, r24	; 0x06
    45e2:	8e 81       	ldd	r24, Y+6	; 0x06
    45e4:	82 30       	cpi	r24, 0x02	; 2
    45e6:	b8 f2       	brcs	.-82     	; 0x4596 <Seven_Segment_enuInit+0x716>
    45e8:	02 c0       	rjmp	.+4      	; 0x45ee <Seven_Segment_enuInit+0x76e>
			Local_enuErrorState = ES_OK;
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    45ea:	82 e0       	ldi	r24, 0x02	; 2
    45ec:	8f 83       	std	Y+7, r24	; 0x07
	}
	
	return Local_enuErrorState;
    45ee:	8f 81       	ldd	r24, Y+7	; 0x07
    45f0:	8a 87       	std	Y+10, r24	; 0x0a
    45f2:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    45f4:	2a 96       	adiw	r28, 0x0a	; 10
    45f6:	0f b6       	in	r0, 0x3f	; 63
    45f8:	f8 94       	cli
    45fa:	de bf       	out	0x3e, r29	; 62
    45fc:	0f be       	out	0x3f, r0	; 63
    45fe:	cd bf       	out	0x3d, r28	; 61
    4600:	cf 91       	pop	r28
    4602:	df 91       	pop	r29
    4604:	08 95       	ret

00004606 <Seven_Segment_enuDisplayNumber>:

ES_t Seven_Segment_enuDisplayNumber(u8 Copy_SEG_ID, u8 Copy_u8Number)
{
    4606:	df 93       	push	r29
    4608:	cf 93       	push	r28
    460a:	cd b7       	in	r28, 0x3d	; 61
    460c:	de b7       	in	r29, 0x3e	; 62
    460e:	6e 97       	sbiw	r28, 0x1e	; 30
    4610:	0f b6       	in	r0, 0x3f	; 63
    4612:	f8 94       	cli
    4614:	de bf       	out	0x3e, r29	; 62
    4616:	0f be       	out	0x3f, r0	; 63
    4618:	cd bf       	out	0x3d, r28	; 61
    461a:	8f 83       	std	Y+7, r24	; 0x07
    461c:	68 87       	std	Y+8, r22	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    461e:	81 e0       	ldi	r24, 0x01	; 1
    4620:	8e 83       	std	Y+6, r24	; 0x06
	
	u8 Local_u8Iterator_Error = 0;
    4622:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32CheckError = 0;
    4624:	19 82       	std	Y+1, r1	; 0x01
    4626:	1a 82       	std	Y+2, r1	; 0x02
    4628:	1b 82       	std	Y+3, r1	; 0x03
    462a:	1c 82       	std	Y+4, r1	; 0x04
	 
	if(Copy_SEG_ID < SEG_NUM && Copy_u8Number < 10)
    462c:	8f 81       	ldd	r24, Y+7	; 0x07
    462e:	82 30       	cpi	r24, 0x02	; 2
    4630:	08 f0       	brcs	.+2      	; 0x4634 <Seven_Segment_enuDisplayNumber+0x2e>
    4632:	80 c5       	rjmp	.+2816   	; 0x5134 <Seven_Segment_enuDisplayNumber+0xb2e>
    4634:	88 85       	ldd	r24, Y+8	; 0x08
    4636:	8a 30       	cpi	r24, 0x0A	; 10
    4638:	08 f0       	brcs	.+2      	; 0x463c <Seven_Segment_enuDisplayNumber+0x36>
    463a:	7c c5       	rjmp	.+2808   	; 0x5134 <Seven_Segment_enuDisplayNumber+0xb2e>
	{
		if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_ANODE)
    463c:	8f 81       	ldd	r24, Y+7	; 0x07
    463e:	48 2f       	mov	r20, r24
    4640:	50 e0       	ldi	r21, 0x00	; 0
    4642:	ca 01       	movw	r24, r20
    4644:	88 0f       	add	r24, r24
    4646:	99 1f       	adc	r25, r25
    4648:	9c 01       	movw	r18, r24
    464a:	22 0f       	add	r18, r18
    464c:	33 1f       	adc	r19, r19
    464e:	22 0f       	add	r18, r18
    4650:	33 1f       	adc	r19, r19
    4652:	22 0f       	add	r18, r18
    4654:	33 1f       	adc	r19, r19
    4656:	82 0f       	add	r24, r18
    4658:	93 1f       	adc	r25, r19
    465a:	84 0f       	add	r24, r20
    465c:	95 1f       	adc	r25, r21
    465e:	fc 01       	movw	r30, r24
    4660:	ea 56       	subi	r30, 0x6A	; 106
    4662:	fe 4f       	sbci	r31, 0xFE	; 254
    4664:	80 81       	ld	r24, Z
    4666:	85 30       	cpi	r24, 0x05	; 5
    4668:	09 f0       	breq	.+2      	; 0x466c <Seven_Segment_enuDisplayNumber+0x66>
    466a:	b4 c2       	rjmp	.+1384   	; 0x4bd4 <Seven_Segment_enuDisplayNumber+0x5ce>
		{
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_APORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_APIN, !((SEGCth_Numbers[Copy_u8Number] >> APIN_POS) & MASK_BIT)) << Local_u8Iterator_Error);
    466c:	8f 81       	ldd	r24, Y+7	; 0x07
    466e:	48 2f       	mov	r20, r24
    4670:	50 e0       	ldi	r21, 0x00	; 0
    4672:	ca 01       	movw	r24, r20
    4674:	88 0f       	add	r24, r24
    4676:	99 1f       	adc	r25, r25
    4678:	9c 01       	movw	r18, r24
    467a:	22 0f       	add	r18, r18
    467c:	33 1f       	adc	r19, r19
    467e:	22 0f       	add	r18, r18
    4680:	33 1f       	adc	r19, r19
    4682:	22 0f       	add	r18, r18
    4684:	33 1f       	adc	r19, r19
    4686:	82 0f       	add	r24, r18
    4688:	93 1f       	adc	r25, r19
    468a:	84 0f       	add	r24, r20
    468c:	95 1f       	adc	r25, r21
    468e:	fc 01       	movw	r30, r24
    4690:	ec 57       	subi	r30, 0x7C	; 124
    4692:	fe 4f       	sbci	r31, 0xFE	; 254
    4694:	40 81       	ld	r20, Z
    4696:	4e 8f       	std	Y+30, r20	; 0x1e
    4698:	8f 81       	ldd	r24, Y+7	; 0x07
    469a:	48 2f       	mov	r20, r24
    469c:	50 e0       	ldi	r21, 0x00	; 0
    469e:	ca 01       	movw	r24, r20
    46a0:	88 0f       	add	r24, r24
    46a2:	99 1f       	adc	r25, r25
    46a4:	9c 01       	movw	r18, r24
    46a6:	22 0f       	add	r18, r18
    46a8:	33 1f       	adc	r19, r19
    46aa:	22 0f       	add	r18, r18
    46ac:	33 1f       	adc	r19, r19
    46ae:	22 0f       	add	r18, r18
    46b0:	33 1f       	adc	r19, r19
    46b2:	82 0f       	add	r24, r18
    46b4:	93 1f       	adc	r25, r19
    46b6:	84 0f       	add	r24, r20
    46b8:	95 1f       	adc	r25, r21
    46ba:	fc 01       	movw	r30, r24
    46bc:	eb 57       	subi	r30, 0x7B	; 123
    46be:	fe 4f       	sbci	r31, 0xFE	; 254
    46c0:	50 81       	ld	r21, Z
    46c2:	5d 8f       	std	Y+29, r21	; 0x1d
    46c4:	88 85       	ldd	r24, Y+8	; 0x08
    46c6:	88 2f       	mov	r24, r24
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	fc 01       	movw	r30, r24
    46cc:	e6 55       	subi	r30, 0x56	; 86
    46ce:	fe 4f       	sbci	r31, 0xFE	; 254
    46d0:	80 81       	ld	r24, Z
    46d2:	88 2f       	mov	r24, r24
    46d4:	90 e0       	ldi	r25, 0x00	; 0
    46d6:	81 70       	andi	r24, 0x01	; 1
    46d8:	90 70       	andi	r25, 0x00	; 0
    46da:	1c 8e       	std	Y+28, r1	; 0x1c
    46dc:	00 97       	sbiw	r24, 0x00	; 0
    46de:	11 f4       	brne	.+4      	; 0x46e4 <Seven_Segment_enuDisplayNumber+0xde>
    46e0:	81 e0       	ldi	r24, 0x01	; 1
    46e2:	8c 8f       	std	Y+28, r24	; 0x1c
    46e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    46e6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    46e8:	4c 8d       	ldd	r20, Y+28	; 0x1c
    46ea:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    46ee:	28 2f       	mov	r18, r24
    46f0:	30 e0       	ldi	r19, 0x00	; 0
    46f2:	8d 81       	ldd	r24, Y+5	; 0x05
    46f4:	88 2f       	mov	r24, r24
    46f6:	90 e0       	ldi	r25, 0x00	; 0
    46f8:	a9 01       	movw	r20, r18
    46fa:	02 c0       	rjmp	.+4      	; 0x4700 <Seven_Segment_enuDisplayNumber+0xfa>
    46fc:	44 0f       	add	r20, r20
    46fe:	55 1f       	adc	r21, r21
    4700:	8a 95       	dec	r24
    4702:	e2 f7       	brpl	.-8      	; 0x46fc <Seven_Segment_enuDisplayNumber+0xf6>
    4704:	ca 01       	movw	r24, r20
    4706:	9c 01       	movw	r18, r24
    4708:	44 27       	eor	r20, r20
    470a:	37 fd       	sbrc	r19, 7
    470c:	40 95       	com	r20
    470e:	54 2f       	mov	r21, r20
    4710:	89 81       	ldd	r24, Y+1	; 0x01
    4712:	9a 81       	ldd	r25, Y+2	; 0x02
    4714:	ab 81       	ldd	r26, Y+3	; 0x03
    4716:	bc 81       	ldd	r27, Y+4	; 0x04
    4718:	82 2b       	or	r24, r18
    471a:	93 2b       	or	r25, r19
    471c:	a4 2b       	or	r26, r20
    471e:	b5 2b       	or	r27, r21
    4720:	89 83       	std	Y+1, r24	; 0x01
    4722:	9a 83       	std	Y+2, r25	; 0x02
    4724:	ab 83       	std	Y+3, r26	; 0x03
    4726:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_BPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_BPIN, !((SEGCth_Numbers[Copy_u8Number] >> BPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    4728:	8f 81       	ldd	r24, Y+7	; 0x07
    472a:	48 2f       	mov	r20, r24
    472c:	50 e0       	ldi	r21, 0x00	; 0
    472e:	ca 01       	movw	r24, r20
    4730:	88 0f       	add	r24, r24
    4732:	99 1f       	adc	r25, r25
    4734:	9c 01       	movw	r18, r24
    4736:	22 0f       	add	r18, r18
    4738:	33 1f       	adc	r19, r19
    473a:	22 0f       	add	r18, r18
    473c:	33 1f       	adc	r19, r19
    473e:	22 0f       	add	r18, r18
    4740:	33 1f       	adc	r19, r19
    4742:	82 0f       	add	r24, r18
    4744:	93 1f       	adc	r25, r19
    4746:	84 0f       	add	r24, r20
    4748:	95 1f       	adc	r25, r21
    474a:	fc 01       	movw	r30, r24
    474c:	ea 57       	subi	r30, 0x7A	; 122
    474e:	fe 4f       	sbci	r31, 0xFE	; 254
    4750:	50 81       	ld	r21, Z
    4752:	5b 8f       	std	Y+27, r21	; 0x1b
    4754:	8f 81       	ldd	r24, Y+7	; 0x07
    4756:	48 2f       	mov	r20, r24
    4758:	50 e0       	ldi	r21, 0x00	; 0
    475a:	ca 01       	movw	r24, r20
    475c:	88 0f       	add	r24, r24
    475e:	99 1f       	adc	r25, r25
    4760:	9c 01       	movw	r18, r24
    4762:	22 0f       	add	r18, r18
    4764:	33 1f       	adc	r19, r19
    4766:	22 0f       	add	r18, r18
    4768:	33 1f       	adc	r19, r19
    476a:	22 0f       	add	r18, r18
    476c:	33 1f       	adc	r19, r19
    476e:	82 0f       	add	r24, r18
    4770:	93 1f       	adc	r25, r19
    4772:	84 0f       	add	r24, r20
    4774:	95 1f       	adc	r25, r21
    4776:	fc 01       	movw	r30, r24
    4778:	e9 57       	subi	r30, 0x79	; 121
    477a:	fe 4f       	sbci	r31, 0xFE	; 254
    477c:	80 81       	ld	r24, Z
    477e:	8a 8f       	std	Y+26, r24	; 0x1a
    4780:	88 85       	ldd	r24, Y+8	; 0x08
    4782:	88 2f       	mov	r24, r24
    4784:	90 e0       	ldi	r25, 0x00	; 0
    4786:	fc 01       	movw	r30, r24
    4788:	e6 55       	subi	r30, 0x56	; 86
    478a:	fe 4f       	sbci	r31, 0xFE	; 254
    478c:	80 81       	ld	r24, Z
    478e:	86 95       	lsr	r24
    4790:	88 2f       	mov	r24, r24
    4792:	90 e0       	ldi	r25, 0x00	; 0
    4794:	81 70       	andi	r24, 0x01	; 1
    4796:	90 70       	andi	r25, 0x00	; 0
    4798:	19 8e       	std	Y+25, r1	; 0x19
    479a:	00 97       	sbiw	r24, 0x00	; 0
    479c:	11 f4       	brne	.+4      	; 0x47a2 <Seven_Segment_enuDisplayNumber+0x19c>
    479e:	41 e0       	ldi	r20, 0x01	; 1
    47a0:	49 8f       	std	Y+25, r20	; 0x19
    47a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47a4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    47a6:	49 8d       	ldd	r20, Y+25	; 0x19
    47a8:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    47ac:	28 2f       	mov	r18, r24
    47ae:	30 e0       	ldi	r19, 0x00	; 0
    47b0:	8d 81       	ldd	r24, Y+5	; 0x05
    47b2:	8d 5f       	subi	r24, 0xFD	; 253
    47b4:	8d 83       	std	Y+5, r24	; 0x05
    47b6:	8d 81       	ldd	r24, Y+5	; 0x05
    47b8:	88 2f       	mov	r24, r24
    47ba:	90 e0       	ldi	r25, 0x00	; 0
    47bc:	a9 01       	movw	r20, r18
    47be:	02 c0       	rjmp	.+4      	; 0x47c4 <Seven_Segment_enuDisplayNumber+0x1be>
    47c0:	44 0f       	add	r20, r20
    47c2:	55 1f       	adc	r21, r21
    47c4:	8a 95       	dec	r24
    47c6:	e2 f7       	brpl	.-8      	; 0x47c0 <Seven_Segment_enuDisplayNumber+0x1ba>
    47c8:	ca 01       	movw	r24, r20
    47ca:	9c 01       	movw	r18, r24
    47cc:	44 27       	eor	r20, r20
    47ce:	37 fd       	sbrc	r19, 7
    47d0:	40 95       	com	r20
    47d2:	54 2f       	mov	r21, r20
    47d4:	89 81       	ldd	r24, Y+1	; 0x01
    47d6:	9a 81       	ldd	r25, Y+2	; 0x02
    47d8:	ab 81       	ldd	r26, Y+3	; 0x03
    47da:	bc 81       	ldd	r27, Y+4	; 0x04
    47dc:	82 2b       	or	r24, r18
    47de:	93 2b       	or	r25, r19
    47e0:	a4 2b       	or	r26, r20
    47e2:	b5 2b       	or	r27, r21
    47e4:	89 83       	std	Y+1, r24	; 0x01
    47e6:	9a 83       	std	Y+2, r25	; 0x02
    47e8:	ab 83       	std	Y+3, r26	; 0x03
    47ea:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CPIN, !((SEGCth_Numbers[Copy_u8Number] >> CPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    47ec:	8f 81       	ldd	r24, Y+7	; 0x07
    47ee:	48 2f       	mov	r20, r24
    47f0:	50 e0       	ldi	r21, 0x00	; 0
    47f2:	ca 01       	movw	r24, r20
    47f4:	88 0f       	add	r24, r24
    47f6:	99 1f       	adc	r25, r25
    47f8:	9c 01       	movw	r18, r24
    47fa:	22 0f       	add	r18, r18
    47fc:	33 1f       	adc	r19, r19
    47fe:	22 0f       	add	r18, r18
    4800:	33 1f       	adc	r19, r19
    4802:	22 0f       	add	r18, r18
    4804:	33 1f       	adc	r19, r19
    4806:	82 0f       	add	r24, r18
    4808:	93 1f       	adc	r25, r19
    480a:	84 0f       	add	r24, r20
    480c:	95 1f       	adc	r25, r21
    480e:	fc 01       	movw	r30, r24
    4810:	e8 57       	subi	r30, 0x78	; 120
    4812:	fe 4f       	sbci	r31, 0xFE	; 254
    4814:	50 81       	ld	r21, Z
    4816:	58 8f       	std	Y+24, r21	; 0x18
    4818:	8f 81       	ldd	r24, Y+7	; 0x07
    481a:	48 2f       	mov	r20, r24
    481c:	50 e0       	ldi	r21, 0x00	; 0
    481e:	ca 01       	movw	r24, r20
    4820:	88 0f       	add	r24, r24
    4822:	99 1f       	adc	r25, r25
    4824:	9c 01       	movw	r18, r24
    4826:	22 0f       	add	r18, r18
    4828:	33 1f       	adc	r19, r19
    482a:	22 0f       	add	r18, r18
    482c:	33 1f       	adc	r19, r19
    482e:	22 0f       	add	r18, r18
    4830:	33 1f       	adc	r19, r19
    4832:	82 0f       	add	r24, r18
    4834:	93 1f       	adc	r25, r19
    4836:	84 0f       	add	r24, r20
    4838:	95 1f       	adc	r25, r21
    483a:	fc 01       	movw	r30, r24
    483c:	e7 57       	subi	r30, 0x77	; 119
    483e:	fe 4f       	sbci	r31, 0xFE	; 254
    4840:	80 81       	ld	r24, Z
    4842:	8f 8b       	std	Y+23, r24	; 0x17
    4844:	88 85       	ldd	r24, Y+8	; 0x08
    4846:	88 2f       	mov	r24, r24
    4848:	90 e0       	ldi	r25, 0x00	; 0
    484a:	fc 01       	movw	r30, r24
    484c:	e6 55       	subi	r30, 0x56	; 86
    484e:	fe 4f       	sbci	r31, 0xFE	; 254
    4850:	80 81       	ld	r24, Z
    4852:	86 95       	lsr	r24
    4854:	86 95       	lsr	r24
    4856:	88 2f       	mov	r24, r24
    4858:	90 e0       	ldi	r25, 0x00	; 0
    485a:	81 70       	andi	r24, 0x01	; 1
    485c:	90 70       	andi	r25, 0x00	; 0
    485e:	1e 8a       	std	Y+22, r1	; 0x16
    4860:	00 97       	sbiw	r24, 0x00	; 0
    4862:	11 f4       	brne	.+4      	; 0x4868 <Seven_Segment_enuDisplayNumber+0x262>
    4864:	41 e0       	ldi	r20, 0x01	; 1
    4866:	4e 8b       	std	Y+22, r20	; 0x16
    4868:	88 8d       	ldd	r24, Y+24	; 0x18
    486a:	6f 89       	ldd	r22, Y+23	; 0x17
    486c:	4e 89       	ldd	r20, Y+22	; 0x16
    486e:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    4872:	28 2f       	mov	r18, r24
    4874:	30 e0       	ldi	r19, 0x00	; 0
    4876:	8d 81       	ldd	r24, Y+5	; 0x05
    4878:	8d 5f       	subi	r24, 0xFD	; 253
    487a:	8d 83       	std	Y+5, r24	; 0x05
    487c:	8d 81       	ldd	r24, Y+5	; 0x05
    487e:	88 2f       	mov	r24, r24
    4880:	90 e0       	ldi	r25, 0x00	; 0
    4882:	a9 01       	movw	r20, r18
    4884:	02 c0       	rjmp	.+4      	; 0x488a <Seven_Segment_enuDisplayNumber+0x284>
    4886:	44 0f       	add	r20, r20
    4888:	55 1f       	adc	r21, r21
    488a:	8a 95       	dec	r24
    488c:	e2 f7       	brpl	.-8      	; 0x4886 <Seven_Segment_enuDisplayNumber+0x280>
    488e:	ca 01       	movw	r24, r20
    4890:	9c 01       	movw	r18, r24
    4892:	44 27       	eor	r20, r20
    4894:	37 fd       	sbrc	r19, 7
    4896:	40 95       	com	r20
    4898:	54 2f       	mov	r21, r20
    489a:	89 81       	ldd	r24, Y+1	; 0x01
    489c:	9a 81       	ldd	r25, Y+2	; 0x02
    489e:	ab 81       	ldd	r26, Y+3	; 0x03
    48a0:	bc 81       	ldd	r27, Y+4	; 0x04
    48a2:	82 2b       	or	r24, r18
    48a4:	93 2b       	or	r25, r19
    48a6:	a4 2b       	or	r26, r20
    48a8:	b5 2b       	or	r27, r21
    48aa:	89 83       	std	Y+1, r24	; 0x01
    48ac:	9a 83       	std	Y+2, r25	; 0x02
    48ae:	ab 83       	std	Y+3, r26	; 0x03
    48b0:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DPIN, !((SEGCth_Numbers[Copy_u8Number] >> DPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    48b2:	8f 81       	ldd	r24, Y+7	; 0x07
    48b4:	48 2f       	mov	r20, r24
    48b6:	50 e0       	ldi	r21, 0x00	; 0
    48b8:	ca 01       	movw	r24, r20
    48ba:	88 0f       	add	r24, r24
    48bc:	99 1f       	adc	r25, r25
    48be:	9c 01       	movw	r18, r24
    48c0:	22 0f       	add	r18, r18
    48c2:	33 1f       	adc	r19, r19
    48c4:	22 0f       	add	r18, r18
    48c6:	33 1f       	adc	r19, r19
    48c8:	22 0f       	add	r18, r18
    48ca:	33 1f       	adc	r19, r19
    48cc:	82 0f       	add	r24, r18
    48ce:	93 1f       	adc	r25, r19
    48d0:	84 0f       	add	r24, r20
    48d2:	95 1f       	adc	r25, r21
    48d4:	fc 01       	movw	r30, r24
    48d6:	e6 57       	subi	r30, 0x76	; 118
    48d8:	fe 4f       	sbci	r31, 0xFE	; 254
    48da:	50 81       	ld	r21, Z
    48dc:	5d 8b       	std	Y+21, r21	; 0x15
    48de:	8f 81       	ldd	r24, Y+7	; 0x07
    48e0:	48 2f       	mov	r20, r24
    48e2:	50 e0       	ldi	r21, 0x00	; 0
    48e4:	ca 01       	movw	r24, r20
    48e6:	88 0f       	add	r24, r24
    48e8:	99 1f       	adc	r25, r25
    48ea:	9c 01       	movw	r18, r24
    48ec:	22 0f       	add	r18, r18
    48ee:	33 1f       	adc	r19, r19
    48f0:	22 0f       	add	r18, r18
    48f2:	33 1f       	adc	r19, r19
    48f4:	22 0f       	add	r18, r18
    48f6:	33 1f       	adc	r19, r19
    48f8:	82 0f       	add	r24, r18
    48fa:	93 1f       	adc	r25, r19
    48fc:	84 0f       	add	r24, r20
    48fe:	95 1f       	adc	r25, r21
    4900:	fc 01       	movw	r30, r24
    4902:	e5 57       	subi	r30, 0x75	; 117
    4904:	fe 4f       	sbci	r31, 0xFE	; 254
    4906:	80 81       	ld	r24, Z
    4908:	8c 8b       	std	Y+20, r24	; 0x14
    490a:	88 85       	ldd	r24, Y+8	; 0x08
    490c:	88 2f       	mov	r24, r24
    490e:	90 e0       	ldi	r25, 0x00	; 0
    4910:	fc 01       	movw	r30, r24
    4912:	e6 55       	subi	r30, 0x56	; 86
    4914:	fe 4f       	sbci	r31, 0xFE	; 254
    4916:	80 81       	ld	r24, Z
    4918:	86 95       	lsr	r24
    491a:	86 95       	lsr	r24
    491c:	86 95       	lsr	r24
    491e:	88 2f       	mov	r24, r24
    4920:	90 e0       	ldi	r25, 0x00	; 0
    4922:	81 70       	andi	r24, 0x01	; 1
    4924:	90 70       	andi	r25, 0x00	; 0
    4926:	1b 8a       	std	Y+19, r1	; 0x13
    4928:	00 97       	sbiw	r24, 0x00	; 0
    492a:	11 f4       	brne	.+4      	; 0x4930 <Seven_Segment_enuDisplayNumber+0x32a>
    492c:	41 e0       	ldi	r20, 0x01	; 1
    492e:	4b 8b       	std	Y+19, r20	; 0x13
    4930:	8d 89       	ldd	r24, Y+21	; 0x15
    4932:	6c 89       	ldd	r22, Y+20	; 0x14
    4934:	4b 89       	ldd	r20, Y+19	; 0x13
    4936:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    493a:	28 2f       	mov	r18, r24
    493c:	30 e0       	ldi	r19, 0x00	; 0
    493e:	8d 81       	ldd	r24, Y+5	; 0x05
    4940:	8d 5f       	subi	r24, 0xFD	; 253
    4942:	8d 83       	std	Y+5, r24	; 0x05
    4944:	8d 81       	ldd	r24, Y+5	; 0x05
    4946:	88 2f       	mov	r24, r24
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	a9 01       	movw	r20, r18
    494c:	02 c0       	rjmp	.+4      	; 0x4952 <Seven_Segment_enuDisplayNumber+0x34c>
    494e:	44 0f       	add	r20, r20
    4950:	55 1f       	adc	r21, r21
    4952:	8a 95       	dec	r24
    4954:	e2 f7       	brpl	.-8      	; 0x494e <Seven_Segment_enuDisplayNumber+0x348>
    4956:	ca 01       	movw	r24, r20
    4958:	9c 01       	movw	r18, r24
    495a:	44 27       	eor	r20, r20
    495c:	37 fd       	sbrc	r19, 7
    495e:	40 95       	com	r20
    4960:	54 2f       	mov	r21, r20
    4962:	89 81       	ldd	r24, Y+1	; 0x01
    4964:	9a 81       	ldd	r25, Y+2	; 0x02
    4966:	ab 81       	ldd	r26, Y+3	; 0x03
    4968:	bc 81       	ldd	r27, Y+4	; 0x04
    496a:	82 2b       	or	r24, r18
    496c:	93 2b       	or	r25, r19
    496e:	a4 2b       	or	r26, r20
    4970:	b5 2b       	or	r27, r21
    4972:	89 83       	std	Y+1, r24	; 0x01
    4974:	9a 83       	std	Y+2, r25	; 0x02
    4976:	ab 83       	std	Y+3, r26	; 0x03
    4978:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPIN, !((SEGCth_Numbers[Copy_u8Number] >> EPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    497a:	8f 81       	ldd	r24, Y+7	; 0x07
    497c:	48 2f       	mov	r20, r24
    497e:	50 e0       	ldi	r21, 0x00	; 0
    4980:	ca 01       	movw	r24, r20
    4982:	88 0f       	add	r24, r24
    4984:	99 1f       	adc	r25, r25
    4986:	9c 01       	movw	r18, r24
    4988:	22 0f       	add	r18, r18
    498a:	33 1f       	adc	r19, r19
    498c:	22 0f       	add	r18, r18
    498e:	33 1f       	adc	r19, r19
    4990:	22 0f       	add	r18, r18
    4992:	33 1f       	adc	r19, r19
    4994:	82 0f       	add	r24, r18
    4996:	93 1f       	adc	r25, r19
    4998:	84 0f       	add	r24, r20
    499a:	95 1f       	adc	r25, r21
    499c:	fc 01       	movw	r30, r24
    499e:	e4 57       	subi	r30, 0x74	; 116
    49a0:	fe 4f       	sbci	r31, 0xFE	; 254
    49a2:	50 81       	ld	r21, Z
    49a4:	5a 8b       	std	Y+18, r21	; 0x12
    49a6:	8f 81       	ldd	r24, Y+7	; 0x07
    49a8:	48 2f       	mov	r20, r24
    49aa:	50 e0       	ldi	r21, 0x00	; 0
    49ac:	ca 01       	movw	r24, r20
    49ae:	88 0f       	add	r24, r24
    49b0:	99 1f       	adc	r25, r25
    49b2:	9c 01       	movw	r18, r24
    49b4:	22 0f       	add	r18, r18
    49b6:	33 1f       	adc	r19, r19
    49b8:	22 0f       	add	r18, r18
    49ba:	33 1f       	adc	r19, r19
    49bc:	22 0f       	add	r18, r18
    49be:	33 1f       	adc	r19, r19
    49c0:	82 0f       	add	r24, r18
    49c2:	93 1f       	adc	r25, r19
    49c4:	84 0f       	add	r24, r20
    49c6:	95 1f       	adc	r25, r21
    49c8:	fc 01       	movw	r30, r24
    49ca:	e3 57       	subi	r30, 0x73	; 115
    49cc:	fe 4f       	sbci	r31, 0xFE	; 254
    49ce:	80 81       	ld	r24, Z
    49d0:	89 8b       	std	Y+17, r24	; 0x11
    49d2:	88 85       	ldd	r24, Y+8	; 0x08
    49d4:	88 2f       	mov	r24, r24
    49d6:	90 e0       	ldi	r25, 0x00	; 0
    49d8:	fc 01       	movw	r30, r24
    49da:	e6 55       	subi	r30, 0x56	; 86
    49dc:	fe 4f       	sbci	r31, 0xFE	; 254
    49de:	80 81       	ld	r24, Z
    49e0:	82 95       	swap	r24
    49e2:	8f 70       	andi	r24, 0x0F	; 15
    49e4:	88 2f       	mov	r24, r24
    49e6:	90 e0       	ldi	r25, 0x00	; 0
    49e8:	81 70       	andi	r24, 0x01	; 1
    49ea:	90 70       	andi	r25, 0x00	; 0
    49ec:	18 8a       	std	Y+16, r1	; 0x10
    49ee:	00 97       	sbiw	r24, 0x00	; 0
    49f0:	11 f4       	brne	.+4      	; 0x49f6 <Seven_Segment_enuDisplayNumber+0x3f0>
    49f2:	41 e0       	ldi	r20, 0x01	; 1
    49f4:	48 8b       	std	Y+16, r20	; 0x10
    49f6:	8a 89       	ldd	r24, Y+18	; 0x12
    49f8:	69 89       	ldd	r22, Y+17	; 0x11
    49fa:	48 89       	ldd	r20, Y+16	; 0x10
    49fc:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    4a00:	28 2f       	mov	r18, r24
    4a02:	30 e0       	ldi	r19, 0x00	; 0
    4a04:	8d 81       	ldd	r24, Y+5	; 0x05
    4a06:	8d 5f       	subi	r24, 0xFD	; 253
    4a08:	8d 83       	std	Y+5, r24	; 0x05
    4a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    4a0c:	88 2f       	mov	r24, r24
    4a0e:	90 e0       	ldi	r25, 0x00	; 0
    4a10:	a9 01       	movw	r20, r18
    4a12:	02 c0       	rjmp	.+4      	; 0x4a18 <Seven_Segment_enuDisplayNumber+0x412>
    4a14:	44 0f       	add	r20, r20
    4a16:	55 1f       	adc	r21, r21
    4a18:	8a 95       	dec	r24
    4a1a:	e2 f7       	brpl	.-8      	; 0x4a14 <Seven_Segment_enuDisplayNumber+0x40e>
    4a1c:	ca 01       	movw	r24, r20
    4a1e:	9c 01       	movw	r18, r24
    4a20:	44 27       	eor	r20, r20
    4a22:	37 fd       	sbrc	r19, 7
    4a24:	40 95       	com	r20
    4a26:	54 2f       	mov	r21, r20
    4a28:	89 81       	ldd	r24, Y+1	; 0x01
    4a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a2c:	ab 81       	ldd	r26, Y+3	; 0x03
    4a2e:	bc 81       	ldd	r27, Y+4	; 0x04
    4a30:	82 2b       	or	r24, r18
    4a32:	93 2b       	or	r25, r19
    4a34:	a4 2b       	or	r26, r20
    4a36:	b5 2b       	or	r27, r21
    4a38:	89 83       	std	Y+1, r24	; 0x01
    4a3a:	9a 83       	std	Y+2, r25	; 0x02
    4a3c:	ab 83       	std	Y+3, r26	; 0x03
    4a3e:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPIN, !((SEGCth_Numbers[Copy_u8Number] >> FPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    4a40:	8f 81       	ldd	r24, Y+7	; 0x07
    4a42:	48 2f       	mov	r20, r24
    4a44:	50 e0       	ldi	r21, 0x00	; 0
    4a46:	ca 01       	movw	r24, r20
    4a48:	88 0f       	add	r24, r24
    4a4a:	99 1f       	adc	r25, r25
    4a4c:	9c 01       	movw	r18, r24
    4a4e:	22 0f       	add	r18, r18
    4a50:	33 1f       	adc	r19, r19
    4a52:	22 0f       	add	r18, r18
    4a54:	33 1f       	adc	r19, r19
    4a56:	22 0f       	add	r18, r18
    4a58:	33 1f       	adc	r19, r19
    4a5a:	82 0f       	add	r24, r18
    4a5c:	93 1f       	adc	r25, r19
    4a5e:	84 0f       	add	r24, r20
    4a60:	95 1f       	adc	r25, r21
    4a62:	fc 01       	movw	r30, r24
    4a64:	e2 57       	subi	r30, 0x72	; 114
    4a66:	fe 4f       	sbci	r31, 0xFE	; 254
    4a68:	50 81       	ld	r21, Z
    4a6a:	5f 87       	std	Y+15, r21	; 0x0f
    4a6c:	8f 81       	ldd	r24, Y+7	; 0x07
    4a6e:	48 2f       	mov	r20, r24
    4a70:	50 e0       	ldi	r21, 0x00	; 0
    4a72:	ca 01       	movw	r24, r20
    4a74:	88 0f       	add	r24, r24
    4a76:	99 1f       	adc	r25, r25
    4a78:	9c 01       	movw	r18, r24
    4a7a:	22 0f       	add	r18, r18
    4a7c:	33 1f       	adc	r19, r19
    4a7e:	22 0f       	add	r18, r18
    4a80:	33 1f       	adc	r19, r19
    4a82:	22 0f       	add	r18, r18
    4a84:	33 1f       	adc	r19, r19
    4a86:	82 0f       	add	r24, r18
    4a88:	93 1f       	adc	r25, r19
    4a8a:	84 0f       	add	r24, r20
    4a8c:	95 1f       	adc	r25, r21
    4a8e:	fc 01       	movw	r30, r24
    4a90:	e1 57       	subi	r30, 0x71	; 113
    4a92:	fe 4f       	sbci	r31, 0xFE	; 254
    4a94:	80 81       	ld	r24, Z
    4a96:	8e 87       	std	Y+14, r24	; 0x0e
    4a98:	88 85       	ldd	r24, Y+8	; 0x08
    4a9a:	88 2f       	mov	r24, r24
    4a9c:	90 e0       	ldi	r25, 0x00	; 0
    4a9e:	fc 01       	movw	r30, r24
    4aa0:	e6 55       	subi	r30, 0x56	; 86
    4aa2:	fe 4f       	sbci	r31, 0xFE	; 254
    4aa4:	80 81       	ld	r24, Z
    4aa6:	82 95       	swap	r24
    4aa8:	86 95       	lsr	r24
    4aaa:	87 70       	andi	r24, 0x07	; 7
    4aac:	88 2f       	mov	r24, r24
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	81 70       	andi	r24, 0x01	; 1
    4ab2:	90 70       	andi	r25, 0x00	; 0
    4ab4:	1d 86       	std	Y+13, r1	; 0x0d
    4ab6:	00 97       	sbiw	r24, 0x00	; 0
    4ab8:	11 f4       	brne	.+4      	; 0x4abe <Seven_Segment_enuDisplayNumber+0x4b8>
    4aba:	41 e0       	ldi	r20, 0x01	; 1
    4abc:	4d 87       	std	Y+13, r20	; 0x0d
    4abe:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ac0:	6e 85       	ldd	r22, Y+14	; 0x0e
    4ac2:	4d 85       	ldd	r20, Y+13	; 0x0d
    4ac4:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    4ac8:	28 2f       	mov	r18, r24
    4aca:	30 e0       	ldi	r19, 0x00	; 0
    4acc:	8d 81       	ldd	r24, Y+5	; 0x05
    4ace:	8d 5f       	subi	r24, 0xFD	; 253
    4ad0:	8d 83       	std	Y+5, r24	; 0x05
    4ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ad4:	88 2f       	mov	r24, r24
    4ad6:	90 e0       	ldi	r25, 0x00	; 0
    4ad8:	a9 01       	movw	r20, r18
    4ada:	02 c0       	rjmp	.+4      	; 0x4ae0 <Seven_Segment_enuDisplayNumber+0x4da>
    4adc:	44 0f       	add	r20, r20
    4ade:	55 1f       	adc	r21, r21
    4ae0:	8a 95       	dec	r24
    4ae2:	e2 f7       	brpl	.-8      	; 0x4adc <Seven_Segment_enuDisplayNumber+0x4d6>
    4ae4:	ca 01       	movw	r24, r20
    4ae6:	9c 01       	movw	r18, r24
    4ae8:	44 27       	eor	r20, r20
    4aea:	37 fd       	sbrc	r19, 7
    4aec:	40 95       	com	r20
    4aee:	54 2f       	mov	r21, r20
    4af0:	89 81       	ldd	r24, Y+1	; 0x01
    4af2:	9a 81       	ldd	r25, Y+2	; 0x02
    4af4:	ab 81       	ldd	r26, Y+3	; 0x03
    4af6:	bc 81       	ldd	r27, Y+4	; 0x04
    4af8:	82 2b       	or	r24, r18
    4afa:	93 2b       	or	r25, r19
    4afc:	a4 2b       	or	r26, r20
    4afe:	b5 2b       	or	r27, r21
    4b00:	89 83       	std	Y+1, r24	; 0x01
    4b02:	9a 83       	std	Y+2, r25	; 0x02
    4b04:	ab 83       	std	Y+3, r26	; 0x03
    4b06:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPIN, !((SEGCth_Numbers[Copy_u8Number] >> GPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    4b08:	8f 81       	ldd	r24, Y+7	; 0x07
    4b0a:	48 2f       	mov	r20, r24
    4b0c:	50 e0       	ldi	r21, 0x00	; 0
    4b0e:	ca 01       	movw	r24, r20
    4b10:	88 0f       	add	r24, r24
    4b12:	99 1f       	adc	r25, r25
    4b14:	9c 01       	movw	r18, r24
    4b16:	22 0f       	add	r18, r18
    4b18:	33 1f       	adc	r19, r19
    4b1a:	22 0f       	add	r18, r18
    4b1c:	33 1f       	adc	r19, r19
    4b1e:	22 0f       	add	r18, r18
    4b20:	33 1f       	adc	r19, r19
    4b22:	82 0f       	add	r24, r18
    4b24:	93 1f       	adc	r25, r19
    4b26:	84 0f       	add	r24, r20
    4b28:	95 1f       	adc	r25, r21
    4b2a:	fc 01       	movw	r30, r24
    4b2c:	e0 57       	subi	r30, 0x70	; 112
    4b2e:	fe 4f       	sbci	r31, 0xFE	; 254
    4b30:	50 81       	ld	r21, Z
    4b32:	5c 87       	std	Y+12, r21	; 0x0c
    4b34:	8f 81       	ldd	r24, Y+7	; 0x07
    4b36:	48 2f       	mov	r20, r24
    4b38:	50 e0       	ldi	r21, 0x00	; 0
    4b3a:	ca 01       	movw	r24, r20
    4b3c:	88 0f       	add	r24, r24
    4b3e:	99 1f       	adc	r25, r25
    4b40:	9c 01       	movw	r18, r24
    4b42:	22 0f       	add	r18, r18
    4b44:	33 1f       	adc	r19, r19
    4b46:	22 0f       	add	r18, r18
    4b48:	33 1f       	adc	r19, r19
    4b4a:	22 0f       	add	r18, r18
    4b4c:	33 1f       	adc	r19, r19
    4b4e:	82 0f       	add	r24, r18
    4b50:	93 1f       	adc	r25, r19
    4b52:	84 0f       	add	r24, r20
    4b54:	95 1f       	adc	r25, r21
    4b56:	fc 01       	movw	r30, r24
    4b58:	ef 56       	subi	r30, 0x6F	; 111
    4b5a:	fe 4f       	sbci	r31, 0xFE	; 254
    4b5c:	80 81       	ld	r24, Z
    4b5e:	8b 87       	std	Y+11, r24	; 0x0b
    4b60:	88 85       	ldd	r24, Y+8	; 0x08
    4b62:	88 2f       	mov	r24, r24
    4b64:	90 e0       	ldi	r25, 0x00	; 0
    4b66:	fc 01       	movw	r30, r24
    4b68:	e6 55       	subi	r30, 0x56	; 86
    4b6a:	fe 4f       	sbci	r31, 0xFE	; 254
    4b6c:	80 81       	ld	r24, Z
    4b6e:	82 95       	swap	r24
    4b70:	86 95       	lsr	r24
    4b72:	86 95       	lsr	r24
    4b74:	83 70       	andi	r24, 0x03	; 3
    4b76:	88 2f       	mov	r24, r24
    4b78:	90 e0       	ldi	r25, 0x00	; 0
    4b7a:	81 70       	andi	r24, 0x01	; 1
    4b7c:	90 70       	andi	r25, 0x00	; 0
    4b7e:	1a 86       	std	Y+10, r1	; 0x0a
    4b80:	00 97       	sbiw	r24, 0x00	; 0
    4b82:	11 f4       	brne	.+4      	; 0x4b88 <Seven_Segment_enuDisplayNumber+0x582>
    4b84:	41 e0       	ldi	r20, 0x01	; 1
    4b86:	4a 87       	std	Y+10, r20	; 0x0a
    4b88:	8c 85       	ldd	r24, Y+12	; 0x0c
    4b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b8c:	4a 85       	ldd	r20, Y+10	; 0x0a
    4b8e:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    4b92:	28 2f       	mov	r18, r24
    4b94:	30 e0       	ldi	r19, 0x00	; 0
    4b96:	8d 81       	ldd	r24, Y+5	; 0x05
    4b98:	8d 5f       	subi	r24, 0xFD	; 253
    4b9a:	8d 83       	std	Y+5, r24	; 0x05
    4b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    4b9e:	88 2f       	mov	r24, r24
    4ba0:	90 e0       	ldi	r25, 0x00	; 0
    4ba2:	a9 01       	movw	r20, r18
    4ba4:	02 c0       	rjmp	.+4      	; 0x4baa <Seven_Segment_enuDisplayNumber+0x5a4>
    4ba6:	44 0f       	add	r20, r20
    4ba8:	55 1f       	adc	r21, r21
    4baa:	8a 95       	dec	r24
    4bac:	e2 f7       	brpl	.-8      	; 0x4ba6 <Seven_Segment_enuDisplayNumber+0x5a0>
    4bae:	ca 01       	movw	r24, r20
    4bb0:	9c 01       	movw	r18, r24
    4bb2:	44 27       	eor	r20, r20
    4bb4:	37 fd       	sbrc	r19, 7
    4bb6:	40 95       	com	r20
    4bb8:	54 2f       	mov	r21, r20
    4bba:	89 81       	ldd	r24, Y+1	; 0x01
    4bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    4bbe:	ab 81       	ldd	r26, Y+3	; 0x03
    4bc0:	bc 81       	ldd	r27, Y+4	; 0x04
    4bc2:	82 2b       	or	r24, r18
    4bc4:	93 2b       	or	r25, r19
    4bc6:	a4 2b       	or	r26, r20
    4bc8:	b5 2b       	or	r27, r21
    4bca:	89 83       	std	Y+1, r24	; 0x01
    4bcc:	9a 83       	std	Y+2, r25	; 0x02
    4bce:	ab 83       	std	Y+3, r26	; 0x03
    4bd0:	bc 83       	std	Y+4, r27	; 0x04
    4bd2:	8c c2       	rjmp	.+1304   	; 0x50ec <Seven_Segment_enuDisplayNumber+0xae6>
		}
		else if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_CATHODE)
    4bd4:	8f 81       	ldd	r24, Y+7	; 0x07
    4bd6:	48 2f       	mov	r20, r24
    4bd8:	50 e0       	ldi	r21, 0x00	; 0
    4bda:	ca 01       	movw	r24, r20
    4bdc:	88 0f       	add	r24, r24
    4bde:	99 1f       	adc	r25, r25
    4be0:	9c 01       	movw	r18, r24
    4be2:	22 0f       	add	r18, r18
    4be4:	33 1f       	adc	r19, r19
    4be6:	22 0f       	add	r18, r18
    4be8:	33 1f       	adc	r19, r19
    4bea:	22 0f       	add	r18, r18
    4bec:	33 1f       	adc	r19, r19
    4bee:	82 0f       	add	r24, r18
    4bf0:	93 1f       	adc	r25, r19
    4bf2:	84 0f       	add	r24, r20
    4bf4:	95 1f       	adc	r25, r21
    4bf6:	fc 01       	movw	r30, r24
    4bf8:	ea 56       	subi	r30, 0x6A	; 106
    4bfa:	fe 4f       	sbci	r31, 0xFE	; 254
    4bfc:	80 81       	ld	r24, Z
    4bfe:	86 30       	cpi	r24, 0x06	; 6
    4c00:	09 f0       	breq	.+2      	; 0x4c04 <Seven_Segment_enuDisplayNumber+0x5fe>
    4c02:	74 c2       	rjmp	.+1256   	; 0x50ec <Seven_Segment_enuDisplayNumber+0xae6>
		{
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_APORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_APIN, ((SEGCth_Numbers[Copy_u8Number] >> APIN_POS) & MASK_BIT)) << Local_u8Iterator_Error);
    4c04:	8f 81       	ldd	r24, Y+7	; 0x07
    4c06:	48 2f       	mov	r20, r24
    4c08:	50 e0       	ldi	r21, 0x00	; 0
    4c0a:	ca 01       	movw	r24, r20
    4c0c:	88 0f       	add	r24, r24
    4c0e:	99 1f       	adc	r25, r25
    4c10:	9c 01       	movw	r18, r24
    4c12:	22 0f       	add	r18, r18
    4c14:	33 1f       	adc	r19, r19
    4c16:	22 0f       	add	r18, r18
    4c18:	33 1f       	adc	r19, r19
    4c1a:	22 0f       	add	r18, r18
    4c1c:	33 1f       	adc	r19, r19
    4c1e:	82 0f       	add	r24, r18
    4c20:	93 1f       	adc	r25, r19
    4c22:	84 0f       	add	r24, r20
    4c24:	95 1f       	adc	r25, r21
    4c26:	fc 01       	movw	r30, r24
    4c28:	ec 57       	subi	r30, 0x7C	; 124
    4c2a:	fe 4f       	sbci	r31, 0xFE	; 254
    4c2c:	60 81       	ld	r22, Z
    4c2e:	8f 81       	ldd	r24, Y+7	; 0x07
    4c30:	48 2f       	mov	r20, r24
    4c32:	50 e0       	ldi	r21, 0x00	; 0
    4c34:	ca 01       	movw	r24, r20
    4c36:	88 0f       	add	r24, r24
    4c38:	99 1f       	adc	r25, r25
    4c3a:	9c 01       	movw	r18, r24
    4c3c:	22 0f       	add	r18, r18
    4c3e:	33 1f       	adc	r19, r19
    4c40:	22 0f       	add	r18, r18
    4c42:	33 1f       	adc	r19, r19
    4c44:	22 0f       	add	r18, r18
    4c46:	33 1f       	adc	r19, r19
    4c48:	82 0f       	add	r24, r18
    4c4a:	93 1f       	adc	r25, r19
    4c4c:	84 0f       	add	r24, r20
    4c4e:	95 1f       	adc	r25, r21
    4c50:	fc 01       	movw	r30, r24
    4c52:	eb 57       	subi	r30, 0x7B	; 123
    4c54:	fe 4f       	sbci	r31, 0xFE	; 254
    4c56:	20 81       	ld	r18, Z
    4c58:	88 85       	ldd	r24, Y+8	; 0x08
    4c5a:	88 2f       	mov	r24, r24
    4c5c:	90 e0       	ldi	r25, 0x00	; 0
    4c5e:	fc 01       	movw	r30, r24
    4c60:	e6 55       	subi	r30, 0x56	; 86
    4c62:	fe 4f       	sbci	r31, 0xFE	; 254
    4c64:	80 81       	ld	r24, Z
    4c66:	98 2f       	mov	r25, r24
    4c68:	91 70       	andi	r25, 0x01	; 1
    4c6a:	86 2f       	mov	r24, r22
    4c6c:	62 2f       	mov	r22, r18
    4c6e:	49 2f       	mov	r20, r25
    4c70:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    4c74:	28 2f       	mov	r18, r24
    4c76:	30 e0       	ldi	r19, 0x00	; 0
    4c78:	8d 81       	ldd	r24, Y+5	; 0x05
    4c7a:	88 2f       	mov	r24, r24
    4c7c:	90 e0       	ldi	r25, 0x00	; 0
    4c7e:	a9 01       	movw	r20, r18
    4c80:	02 c0       	rjmp	.+4      	; 0x4c86 <Seven_Segment_enuDisplayNumber+0x680>
    4c82:	44 0f       	add	r20, r20
    4c84:	55 1f       	adc	r21, r21
    4c86:	8a 95       	dec	r24
    4c88:	e2 f7       	brpl	.-8      	; 0x4c82 <Seven_Segment_enuDisplayNumber+0x67c>
    4c8a:	ca 01       	movw	r24, r20
    4c8c:	9c 01       	movw	r18, r24
    4c8e:	44 27       	eor	r20, r20
    4c90:	37 fd       	sbrc	r19, 7
    4c92:	40 95       	com	r20
    4c94:	54 2f       	mov	r21, r20
    4c96:	89 81       	ldd	r24, Y+1	; 0x01
    4c98:	9a 81       	ldd	r25, Y+2	; 0x02
    4c9a:	ab 81       	ldd	r26, Y+3	; 0x03
    4c9c:	bc 81       	ldd	r27, Y+4	; 0x04
    4c9e:	82 2b       	or	r24, r18
    4ca0:	93 2b       	or	r25, r19
    4ca2:	a4 2b       	or	r26, r20
    4ca4:	b5 2b       	or	r27, r21
    4ca6:	89 83       	std	Y+1, r24	; 0x01
    4ca8:	9a 83       	std	Y+2, r25	; 0x02
    4caa:	ab 83       	std	Y+3, r26	; 0x03
    4cac:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_BPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_BPIN, ((SEGCth_Numbers[Copy_u8Number] >> BPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    4cae:	8f 81       	ldd	r24, Y+7	; 0x07
    4cb0:	48 2f       	mov	r20, r24
    4cb2:	50 e0       	ldi	r21, 0x00	; 0
    4cb4:	ca 01       	movw	r24, r20
    4cb6:	88 0f       	add	r24, r24
    4cb8:	99 1f       	adc	r25, r25
    4cba:	9c 01       	movw	r18, r24
    4cbc:	22 0f       	add	r18, r18
    4cbe:	33 1f       	adc	r19, r19
    4cc0:	22 0f       	add	r18, r18
    4cc2:	33 1f       	adc	r19, r19
    4cc4:	22 0f       	add	r18, r18
    4cc6:	33 1f       	adc	r19, r19
    4cc8:	82 0f       	add	r24, r18
    4cca:	93 1f       	adc	r25, r19
    4ccc:	84 0f       	add	r24, r20
    4cce:	95 1f       	adc	r25, r21
    4cd0:	fc 01       	movw	r30, r24
    4cd2:	ea 57       	subi	r30, 0x7A	; 122
    4cd4:	fe 4f       	sbci	r31, 0xFE	; 254
    4cd6:	60 81       	ld	r22, Z
    4cd8:	8f 81       	ldd	r24, Y+7	; 0x07
    4cda:	48 2f       	mov	r20, r24
    4cdc:	50 e0       	ldi	r21, 0x00	; 0
    4cde:	ca 01       	movw	r24, r20
    4ce0:	88 0f       	add	r24, r24
    4ce2:	99 1f       	adc	r25, r25
    4ce4:	9c 01       	movw	r18, r24
    4ce6:	22 0f       	add	r18, r18
    4ce8:	33 1f       	adc	r19, r19
    4cea:	22 0f       	add	r18, r18
    4cec:	33 1f       	adc	r19, r19
    4cee:	22 0f       	add	r18, r18
    4cf0:	33 1f       	adc	r19, r19
    4cf2:	82 0f       	add	r24, r18
    4cf4:	93 1f       	adc	r25, r19
    4cf6:	84 0f       	add	r24, r20
    4cf8:	95 1f       	adc	r25, r21
    4cfa:	fc 01       	movw	r30, r24
    4cfc:	e9 57       	subi	r30, 0x79	; 121
    4cfe:	fe 4f       	sbci	r31, 0xFE	; 254
    4d00:	20 81       	ld	r18, Z
    4d02:	88 85       	ldd	r24, Y+8	; 0x08
    4d04:	88 2f       	mov	r24, r24
    4d06:	90 e0       	ldi	r25, 0x00	; 0
    4d08:	fc 01       	movw	r30, r24
    4d0a:	e6 55       	subi	r30, 0x56	; 86
    4d0c:	fe 4f       	sbci	r31, 0xFE	; 254
    4d0e:	80 81       	ld	r24, Z
    4d10:	86 95       	lsr	r24
    4d12:	98 2f       	mov	r25, r24
    4d14:	91 70       	andi	r25, 0x01	; 1
    4d16:	86 2f       	mov	r24, r22
    4d18:	62 2f       	mov	r22, r18
    4d1a:	49 2f       	mov	r20, r25
    4d1c:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    4d20:	28 2f       	mov	r18, r24
    4d22:	30 e0       	ldi	r19, 0x00	; 0
    4d24:	8d 81       	ldd	r24, Y+5	; 0x05
    4d26:	8d 5f       	subi	r24, 0xFD	; 253
    4d28:	8d 83       	std	Y+5, r24	; 0x05
    4d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    4d2c:	88 2f       	mov	r24, r24
    4d2e:	90 e0       	ldi	r25, 0x00	; 0
    4d30:	a9 01       	movw	r20, r18
    4d32:	02 c0       	rjmp	.+4      	; 0x4d38 <Seven_Segment_enuDisplayNumber+0x732>
    4d34:	44 0f       	add	r20, r20
    4d36:	55 1f       	adc	r21, r21
    4d38:	8a 95       	dec	r24
    4d3a:	e2 f7       	brpl	.-8      	; 0x4d34 <Seven_Segment_enuDisplayNumber+0x72e>
    4d3c:	ca 01       	movw	r24, r20
    4d3e:	9c 01       	movw	r18, r24
    4d40:	44 27       	eor	r20, r20
    4d42:	37 fd       	sbrc	r19, 7
    4d44:	40 95       	com	r20
    4d46:	54 2f       	mov	r21, r20
    4d48:	89 81       	ldd	r24, Y+1	; 0x01
    4d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    4d4c:	ab 81       	ldd	r26, Y+3	; 0x03
    4d4e:	bc 81       	ldd	r27, Y+4	; 0x04
    4d50:	82 2b       	or	r24, r18
    4d52:	93 2b       	or	r25, r19
    4d54:	a4 2b       	or	r26, r20
    4d56:	b5 2b       	or	r27, r21
    4d58:	89 83       	std	Y+1, r24	; 0x01
    4d5a:	9a 83       	std	Y+2, r25	; 0x02
    4d5c:	ab 83       	std	Y+3, r26	; 0x03
    4d5e:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CPIN, ((SEGCth_Numbers[Copy_u8Number] >> CPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    4d60:	8f 81       	ldd	r24, Y+7	; 0x07
    4d62:	48 2f       	mov	r20, r24
    4d64:	50 e0       	ldi	r21, 0x00	; 0
    4d66:	ca 01       	movw	r24, r20
    4d68:	88 0f       	add	r24, r24
    4d6a:	99 1f       	adc	r25, r25
    4d6c:	9c 01       	movw	r18, r24
    4d6e:	22 0f       	add	r18, r18
    4d70:	33 1f       	adc	r19, r19
    4d72:	22 0f       	add	r18, r18
    4d74:	33 1f       	adc	r19, r19
    4d76:	22 0f       	add	r18, r18
    4d78:	33 1f       	adc	r19, r19
    4d7a:	82 0f       	add	r24, r18
    4d7c:	93 1f       	adc	r25, r19
    4d7e:	84 0f       	add	r24, r20
    4d80:	95 1f       	adc	r25, r21
    4d82:	fc 01       	movw	r30, r24
    4d84:	e8 57       	subi	r30, 0x78	; 120
    4d86:	fe 4f       	sbci	r31, 0xFE	; 254
    4d88:	60 81       	ld	r22, Z
    4d8a:	8f 81       	ldd	r24, Y+7	; 0x07
    4d8c:	48 2f       	mov	r20, r24
    4d8e:	50 e0       	ldi	r21, 0x00	; 0
    4d90:	ca 01       	movw	r24, r20
    4d92:	88 0f       	add	r24, r24
    4d94:	99 1f       	adc	r25, r25
    4d96:	9c 01       	movw	r18, r24
    4d98:	22 0f       	add	r18, r18
    4d9a:	33 1f       	adc	r19, r19
    4d9c:	22 0f       	add	r18, r18
    4d9e:	33 1f       	adc	r19, r19
    4da0:	22 0f       	add	r18, r18
    4da2:	33 1f       	adc	r19, r19
    4da4:	82 0f       	add	r24, r18
    4da6:	93 1f       	adc	r25, r19
    4da8:	84 0f       	add	r24, r20
    4daa:	95 1f       	adc	r25, r21
    4dac:	fc 01       	movw	r30, r24
    4dae:	e7 57       	subi	r30, 0x77	; 119
    4db0:	fe 4f       	sbci	r31, 0xFE	; 254
    4db2:	20 81       	ld	r18, Z
    4db4:	88 85       	ldd	r24, Y+8	; 0x08
    4db6:	88 2f       	mov	r24, r24
    4db8:	90 e0       	ldi	r25, 0x00	; 0
    4dba:	fc 01       	movw	r30, r24
    4dbc:	e6 55       	subi	r30, 0x56	; 86
    4dbe:	fe 4f       	sbci	r31, 0xFE	; 254
    4dc0:	80 81       	ld	r24, Z
    4dc2:	86 95       	lsr	r24
    4dc4:	86 95       	lsr	r24
    4dc6:	98 2f       	mov	r25, r24
    4dc8:	91 70       	andi	r25, 0x01	; 1
    4dca:	86 2f       	mov	r24, r22
    4dcc:	62 2f       	mov	r22, r18
    4dce:	49 2f       	mov	r20, r25
    4dd0:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    4dd4:	28 2f       	mov	r18, r24
    4dd6:	30 e0       	ldi	r19, 0x00	; 0
    4dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    4dda:	8d 5f       	subi	r24, 0xFD	; 253
    4ddc:	8d 83       	std	Y+5, r24	; 0x05
    4dde:	8d 81       	ldd	r24, Y+5	; 0x05
    4de0:	88 2f       	mov	r24, r24
    4de2:	90 e0       	ldi	r25, 0x00	; 0
    4de4:	a9 01       	movw	r20, r18
    4de6:	02 c0       	rjmp	.+4      	; 0x4dec <Seven_Segment_enuDisplayNumber+0x7e6>
    4de8:	44 0f       	add	r20, r20
    4dea:	55 1f       	adc	r21, r21
    4dec:	8a 95       	dec	r24
    4dee:	e2 f7       	brpl	.-8      	; 0x4de8 <Seven_Segment_enuDisplayNumber+0x7e2>
    4df0:	ca 01       	movw	r24, r20
    4df2:	9c 01       	movw	r18, r24
    4df4:	44 27       	eor	r20, r20
    4df6:	37 fd       	sbrc	r19, 7
    4df8:	40 95       	com	r20
    4dfa:	54 2f       	mov	r21, r20
    4dfc:	89 81       	ldd	r24, Y+1	; 0x01
    4dfe:	9a 81       	ldd	r25, Y+2	; 0x02
    4e00:	ab 81       	ldd	r26, Y+3	; 0x03
    4e02:	bc 81       	ldd	r27, Y+4	; 0x04
    4e04:	82 2b       	or	r24, r18
    4e06:	93 2b       	or	r25, r19
    4e08:	a4 2b       	or	r26, r20
    4e0a:	b5 2b       	or	r27, r21
    4e0c:	89 83       	std	Y+1, r24	; 0x01
    4e0e:	9a 83       	std	Y+2, r25	; 0x02
    4e10:	ab 83       	std	Y+3, r26	; 0x03
    4e12:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DPIN, ((SEGCth_Numbers[Copy_u8Number] >> DPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    4e14:	8f 81       	ldd	r24, Y+7	; 0x07
    4e16:	48 2f       	mov	r20, r24
    4e18:	50 e0       	ldi	r21, 0x00	; 0
    4e1a:	ca 01       	movw	r24, r20
    4e1c:	88 0f       	add	r24, r24
    4e1e:	99 1f       	adc	r25, r25
    4e20:	9c 01       	movw	r18, r24
    4e22:	22 0f       	add	r18, r18
    4e24:	33 1f       	adc	r19, r19
    4e26:	22 0f       	add	r18, r18
    4e28:	33 1f       	adc	r19, r19
    4e2a:	22 0f       	add	r18, r18
    4e2c:	33 1f       	adc	r19, r19
    4e2e:	82 0f       	add	r24, r18
    4e30:	93 1f       	adc	r25, r19
    4e32:	84 0f       	add	r24, r20
    4e34:	95 1f       	adc	r25, r21
    4e36:	fc 01       	movw	r30, r24
    4e38:	e6 57       	subi	r30, 0x76	; 118
    4e3a:	fe 4f       	sbci	r31, 0xFE	; 254
    4e3c:	60 81       	ld	r22, Z
    4e3e:	8f 81       	ldd	r24, Y+7	; 0x07
    4e40:	48 2f       	mov	r20, r24
    4e42:	50 e0       	ldi	r21, 0x00	; 0
    4e44:	ca 01       	movw	r24, r20
    4e46:	88 0f       	add	r24, r24
    4e48:	99 1f       	adc	r25, r25
    4e4a:	9c 01       	movw	r18, r24
    4e4c:	22 0f       	add	r18, r18
    4e4e:	33 1f       	adc	r19, r19
    4e50:	22 0f       	add	r18, r18
    4e52:	33 1f       	adc	r19, r19
    4e54:	22 0f       	add	r18, r18
    4e56:	33 1f       	adc	r19, r19
    4e58:	82 0f       	add	r24, r18
    4e5a:	93 1f       	adc	r25, r19
    4e5c:	84 0f       	add	r24, r20
    4e5e:	95 1f       	adc	r25, r21
    4e60:	fc 01       	movw	r30, r24
    4e62:	e5 57       	subi	r30, 0x75	; 117
    4e64:	fe 4f       	sbci	r31, 0xFE	; 254
    4e66:	20 81       	ld	r18, Z
    4e68:	88 85       	ldd	r24, Y+8	; 0x08
    4e6a:	88 2f       	mov	r24, r24
    4e6c:	90 e0       	ldi	r25, 0x00	; 0
    4e6e:	fc 01       	movw	r30, r24
    4e70:	e6 55       	subi	r30, 0x56	; 86
    4e72:	fe 4f       	sbci	r31, 0xFE	; 254
    4e74:	80 81       	ld	r24, Z
    4e76:	86 95       	lsr	r24
    4e78:	86 95       	lsr	r24
    4e7a:	86 95       	lsr	r24
    4e7c:	98 2f       	mov	r25, r24
    4e7e:	91 70       	andi	r25, 0x01	; 1
    4e80:	86 2f       	mov	r24, r22
    4e82:	62 2f       	mov	r22, r18
    4e84:	49 2f       	mov	r20, r25
    4e86:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    4e8a:	28 2f       	mov	r18, r24
    4e8c:	30 e0       	ldi	r19, 0x00	; 0
    4e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    4e90:	8d 5f       	subi	r24, 0xFD	; 253
    4e92:	8d 83       	std	Y+5, r24	; 0x05
    4e94:	8d 81       	ldd	r24, Y+5	; 0x05
    4e96:	88 2f       	mov	r24, r24
    4e98:	90 e0       	ldi	r25, 0x00	; 0
    4e9a:	a9 01       	movw	r20, r18
    4e9c:	02 c0       	rjmp	.+4      	; 0x4ea2 <Seven_Segment_enuDisplayNumber+0x89c>
    4e9e:	44 0f       	add	r20, r20
    4ea0:	55 1f       	adc	r21, r21
    4ea2:	8a 95       	dec	r24
    4ea4:	e2 f7       	brpl	.-8      	; 0x4e9e <Seven_Segment_enuDisplayNumber+0x898>
    4ea6:	ca 01       	movw	r24, r20
    4ea8:	9c 01       	movw	r18, r24
    4eaa:	44 27       	eor	r20, r20
    4eac:	37 fd       	sbrc	r19, 7
    4eae:	40 95       	com	r20
    4eb0:	54 2f       	mov	r21, r20
    4eb2:	89 81       	ldd	r24, Y+1	; 0x01
    4eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    4eb6:	ab 81       	ldd	r26, Y+3	; 0x03
    4eb8:	bc 81       	ldd	r27, Y+4	; 0x04
    4eba:	82 2b       	or	r24, r18
    4ebc:	93 2b       	or	r25, r19
    4ebe:	a4 2b       	or	r26, r20
    4ec0:	b5 2b       	or	r27, r21
    4ec2:	89 83       	std	Y+1, r24	; 0x01
    4ec4:	9a 83       	std	Y+2, r25	; 0x02
    4ec6:	ab 83       	std	Y+3, r26	; 0x03
    4ec8:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPIN, ((SEGCth_Numbers[Copy_u8Number] >> EPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    4eca:	8f 81       	ldd	r24, Y+7	; 0x07
    4ecc:	48 2f       	mov	r20, r24
    4ece:	50 e0       	ldi	r21, 0x00	; 0
    4ed0:	ca 01       	movw	r24, r20
    4ed2:	88 0f       	add	r24, r24
    4ed4:	99 1f       	adc	r25, r25
    4ed6:	9c 01       	movw	r18, r24
    4ed8:	22 0f       	add	r18, r18
    4eda:	33 1f       	adc	r19, r19
    4edc:	22 0f       	add	r18, r18
    4ede:	33 1f       	adc	r19, r19
    4ee0:	22 0f       	add	r18, r18
    4ee2:	33 1f       	adc	r19, r19
    4ee4:	82 0f       	add	r24, r18
    4ee6:	93 1f       	adc	r25, r19
    4ee8:	84 0f       	add	r24, r20
    4eea:	95 1f       	adc	r25, r21
    4eec:	fc 01       	movw	r30, r24
    4eee:	e4 57       	subi	r30, 0x74	; 116
    4ef0:	fe 4f       	sbci	r31, 0xFE	; 254
    4ef2:	60 81       	ld	r22, Z
    4ef4:	8f 81       	ldd	r24, Y+7	; 0x07
    4ef6:	48 2f       	mov	r20, r24
    4ef8:	50 e0       	ldi	r21, 0x00	; 0
    4efa:	ca 01       	movw	r24, r20
    4efc:	88 0f       	add	r24, r24
    4efe:	99 1f       	adc	r25, r25
    4f00:	9c 01       	movw	r18, r24
    4f02:	22 0f       	add	r18, r18
    4f04:	33 1f       	adc	r19, r19
    4f06:	22 0f       	add	r18, r18
    4f08:	33 1f       	adc	r19, r19
    4f0a:	22 0f       	add	r18, r18
    4f0c:	33 1f       	adc	r19, r19
    4f0e:	82 0f       	add	r24, r18
    4f10:	93 1f       	adc	r25, r19
    4f12:	84 0f       	add	r24, r20
    4f14:	95 1f       	adc	r25, r21
    4f16:	fc 01       	movw	r30, r24
    4f18:	e3 57       	subi	r30, 0x73	; 115
    4f1a:	fe 4f       	sbci	r31, 0xFE	; 254
    4f1c:	20 81       	ld	r18, Z
    4f1e:	88 85       	ldd	r24, Y+8	; 0x08
    4f20:	88 2f       	mov	r24, r24
    4f22:	90 e0       	ldi	r25, 0x00	; 0
    4f24:	fc 01       	movw	r30, r24
    4f26:	e6 55       	subi	r30, 0x56	; 86
    4f28:	fe 4f       	sbci	r31, 0xFE	; 254
    4f2a:	80 81       	ld	r24, Z
    4f2c:	82 95       	swap	r24
    4f2e:	8f 70       	andi	r24, 0x0F	; 15
    4f30:	98 2f       	mov	r25, r24
    4f32:	91 70       	andi	r25, 0x01	; 1
    4f34:	86 2f       	mov	r24, r22
    4f36:	62 2f       	mov	r22, r18
    4f38:	49 2f       	mov	r20, r25
    4f3a:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    4f3e:	28 2f       	mov	r18, r24
    4f40:	30 e0       	ldi	r19, 0x00	; 0
    4f42:	8d 81       	ldd	r24, Y+5	; 0x05
    4f44:	8d 5f       	subi	r24, 0xFD	; 253
    4f46:	8d 83       	std	Y+5, r24	; 0x05
    4f48:	8d 81       	ldd	r24, Y+5	; 0x05
    4f4a:	88 2f       	mov	r24, r24
    4f4c:	90 e0       	ldi	r25, 0x00	; 0
    4f4e:	a9 01       	movw	r20, r18
    4f50:	02 c0       	rjmp	.+4      	; 0x4f56 <Seven_Segment_enuDisplayNumber+0x950>
    4f52:	44 0f       	add	r20, r20
    4f54:	55 1f       	adc	r21, r21
    4f56:	8a 95       	dec	r24
    4f58:	e2 f7       	brpl	.-8      	; 0x4f52 <Seven_Segment_enuDisplayNumber+0x94c>
    4f5a:	ca 01       	movw	r24, r20
    4f5c:	9c 01       	movw	r18, r24
    4f5e:	44 27       	eor	r20, r20
    4f60:	37 fd       	sbrc	r19, 7
    4f62:	40 95       	com	r20
    4f64:	54 2f       	mov	r21, r20
    4f66:	89 81       	ldd	r24, Y+1	; 0x01
    4f68:	9a 81       	ldd	r25, Y+2	; 0x02
    4f6a:	ab 81       	ldd	r26, Y+3	; 0x03
    4f6c:	bc 81       	ldd	r27, Y+4	; 0x04
    4f6e:	82 2b       	or	r24, r18
    4f70:	93 2b       	or	r25, r19
    4f72:	a4 2b       	or	r26, r20
    4f74:	b5 2b       	or	r27, r21
    4f76:	89 83       	std	Y+1, r24	; 0x01
    4f78:	9a 83       	std	Y+2, r25	; 0x02
    4f7a:	ab 83       	std	Y+3, r26	; 0x03
    4f7c:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPIN, ((SEGCth_Numbers[Copy_u8Number] >> FPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    4f7e:	8f 81       	ldd	r24, Y+7	; 0x07
    4f80:	48 2f       	mov	r20, r24
    4f82:	50 e0       	ldi	r21, 0x00	; 0
    4f84:	ca 01       	movw	r24, r20
    4f86:	88 0f       	add	r24, r24
    4f88:	99 1f       	adc	r25, r25
    4f8a:	9c 01       	movw	r18, r24
    4f8c:	22 0f       	add	r18, r18
    4f8e:	33 1f       	adc	r19, r19
    4f90:	22 0f       	add	r18, r18
    4f92:	33 1f       	adc	r19, r19
    4f94:	22 0f       	add	r18, r18
    4f96:	33 1f       	adc	r19, r19
    4f98:	82 0f       	add	r24, r18
    4f9a:	93 1f       	adc	r25, r19
    4f9c:	84 0f       	add	r24, r20
    4f9e:	95 1f       	adc	r25, r21
    4fa0:	fc 01       	movw	r30, r24
    4fa2:	e2 57       	subi	r30, 0x72	; 114
    4fa4:	fe 4f       	sbci	r31, 0xFE	; 254
    4fa6:	60 81       	ld	r22, Z
    4fa8:	8f 81       	ldd	r24, Y+7	; 0x07
    4faa:	48 2f       	mov	r20, r24
    4fac:	50 e0       	ldi	r21, 0x00	; 0
    4fae:	ca 01       	movw	r24, r20
    4fb0:	88 0f       	add	r24, r24
    4fb2:	99 1f       	adc	r25, r25
    4fb4:	9c 01       	movw	r18, r24
    4fb6:	22 0f       	add	r18, r18
    4fb8:	33 1f       	adc	r19, r19
    4fba:	22 0f       	add	r18, r18
    4fbc:	33 1f       	adc	r19, r19
    4fbe:	22 0f       	add	r18, r18
    4fc0:	33 1f       	adc	r19, r19
    4fc2:	82 0f       	add	r24, r18
    4fc4:	93 1f       	adc	r25, r19
    4fc6:	84 0f       	add	r24, r20
    4fc8:	95 1f       	adc	r25, r21
    4fca:	fc 01       	movw	r30, r24
    4fcc:	e1 57       	subi	r30, 0x71	; 113
    4fce:	fe 4f       	sbci	r31, 0xFE	; 254
    4fd0:	20 81       	ld	r18, Z
    4fd2:	88 85       	ldd	r24, Y+8	; 0x08
    4fd4:	88 2f       	mov	r24, r24
    4fd6:	90 e0       	ldi	r25, 0x00	; 0
    4fd8:	fc 01       	movw	r30, r24
    4fda:	e6 55       	subi	r30, 0x56	; 86
    4fdc:	fe 4f       	sbci	r31, 0xFE	; 254
    4fde:	80 81       	ld	r24, Z
    4fe0:	82 95       	swap	r24
    4fe2:	86 95       	lsr	r24
    4fe4:	87 70       	andi	r24, 0x07	; 7
    4fe6:	98 2f       	mov	r25, r24
    4fe8:	91 70       	andi	r25, 0x01	; 1
    4fea:	86 2f       	mov	r24, r22
    4fec:	62 2f       	mov	r22, r18
    4fee:	49 2f       	mov	r20, r25
    4ff0:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    4ff4:	28 2f       	mov	r18, r24
    4ff6:	30 e0       	ldi	r19, 0x00	; 0
    4ff8:	8d 81       	ldd	r24, Y+5	; 0x05
    4ffa:	8d 5f       	subi	r24, 0xFD	; 253
    4ffc:	8d 83       	std	Y+5, r24	; 0x05
    4ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    5000:	88 2f       	mov	r24, r24
    5002:	90 e0       	ldi	r25, 0x00	; 0
    5004:	a9 01       	movw	r20, r18
    5006:	02 c0       	rjmp	.+4      	; 0x500c <Seven_Segment_enuDisplayNumber+0xa06>
    5008:	44 0f       	add	r20, r20
    500a:	55 1f       	adc	r21, r21
    500c:	8a 95       	dec	r24
    500e:	e2 f7       	brpl	.-8      	; 0x5008 <Seven_Segment_enuDisplayNumber+0xa02>
    5010:	ca 01       	movw	r24, r20
    5012:	9c 01       	movw	r18, r24
    5014:	44 27       	eor	r20, r20
    5016:	37 fd       	sbrc	r19, 7
    5018:	40 95       	com	r20
    501a:	54 2f       	mov	r21, r20
    501c:	89 81       	ldd	r24, Y+1	; 0x01
    501e:	9a 81       	ldd	r25, Y+2	; 0x02
    5020:	ab 81       	ldd	r26, Y+3	; 0x03
    5022:	bc 81       	ldd	r27, Y+4	; 0x04
    5024:	82 2b       	or	r24, r18
    5026:	93 2b       	or	r25, r19
    5028:	a4 2b       	or	r26, r20
    502a:	b5 2b       	or	r27, r21
    502c:	89 83       	std	Y+1, r24	; 0x01
    502e:	9a 83       	std	Y+2, r25	; 0x02
    5030:	ab 83       	std	Y+3, r26	; 0x03
    5032:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPIN, ((SEGCth_Numbers[Copy_u8Number] >> GPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    5034:	8f 81       	ldd	r24, Y+7	; 0x07
    5036:	48 2f       	mov	r20, r24
    5038:	50 e0       	ldi	r21, 0x00	; 0
    503a:	ca 01       	movw	r24, r20
    503c:	88 0f       	add	r24, r24
    503e:	99 1f       	adc	r25, r25
    5040:	9c 01       	movw	r18, r24
    5042:	22 0f       	add	r18, r18
    5044:	33 1f       	adc	r19, r19
    5046:	22 0f       	add	r18, r18
    5048:	33 1f       	adc	r19, r19
    504a:	22 0f       	add	r18, r18
    504c:	33 1f       	adc	r19, r19
    504e:	82 0f       	add	r24, r18
    5050:	93 1f       	adc	r25, r19
    5052:	84 0f       	add	r24, r20
    5054:	95 1f       	adc	r25, r21
    5056:	fc 01       	movw	r30, r24
    5058:	e0 57       	subi	r30, 0x70	; 112
    505a:	fe 4f       	sbci	r31, 0xFE	; 254
    505c:	60 81       	ld	r22, Z
    505e:	8f 81       	ldd	r24, Y+7	; 0x07
    5060:	48 2f       	mov	r20, r24
    5062:	50 e0       	ldi	r21, 0x00	; 0
    5064:	ca 01       	movw	r24, r20
    5066:	88 0f       	add	r24, r24
    5068:	99 1f       	adc	r25, r25
    506a:	9c 01       	movw	r18, r24
    506c:	22 0f       	add	r18, r18
    506e:	33 1f       	adc	r19, r19
    5070:	22 0f       	add	r18, r18
    5072:	33 1f       	adc	r19, r19
    5074:	22 0f       	add	r18, r18
    5076:	33 1f       	adc	r19, r19
    5078:	82 0f       	add	r24, r18
    507a:	93 1f       	adc	r25, r19
    507c:	84 0f       	add	r24, r20
    507e:	95 1f       	adc	r25, r21
    5080:	fc 01       	movw	r30, r24
    5082:	ef 56       	subi	r30, 0x6F	; 111
    5084:	fe 4f       	sbci	r31, 0xFE	; 254
    5086:	20 81       	ld	r18, Z
    5088:	88 85       	ldd	r24, Y+8	; 0x08
    508a:	88 2f       	mov	r24, r24
    508c:	90 e0       	ldi	r25, 0x00	; 0
    508e:	fc 01       	movw	r30, r24
    5090:	e6 55       	subi	r30, 0x56	; 86
    5092:	fe 4f       	sbci	r31, 0xFE	; 254
    5094:	80 81       	ld	r24, Z
    5096:	82 95       	swap	r24
    5098:	86 95       	lsr	r24
    509a:	86 95       	lsr	r24
    509c:	83 70       	andi	r24, 0x03	; 3
    509e:	98 2f       	mov	r25, r24
    50a0:	91 70       	andi	r25, 0x01	; 1
    50a2:	86 2f       	mov	r24, r22
    50a4:	62 2f       	mov	r22, r18
    50a6:	49 2f       	mov	r20, r25
    50a8:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    50ac:	28 2f       	mov	r18, r24
    50ae:	30 e0       	ldi	r19, 0x00	; 0
    50b0:	8d 81       	ldd	r24, Y+5	; 0x05
    50b2:	8d 5f       	subi	r24, 0xFD	; 253
    50b4:	8d 83       	std	Y+5, r24	; 0x05
    50b6:	8d 81       	ldd	r24, Y+5	; 0x05
    50b8:	88 2f       	mov	r24, r24
    50ba:	90 e0       	ldi	r25, 0x00	; 0
    50bc:	a9 01       	movw	r20, r18
    50be:	02 c0       	rjmp	.+4      	; 0x50c4 <Seven_Segment_enuDisplayNumber+0xabe>
    50c0:	44 0f       	add	r20, r20
    50c2:	55 1f       	adc	r21, r21
    50c4:	8a 95       	dec	r24
    50c6:	e2 f7       	brpl	.-8      	; 0x50c0 <Seven_Segment_enuDisplayNumber+0xaba>
    50c8:	ca 01       	movw	r24, r20
    50ca:	9c 01       	movw	r18, r24
    50cc:	44 27       	eor	r20, r20
    50ce:	37 fd       	sbrc	r19, 7
    50d0:	40 95       	com	r20
    50d2:	54 2f       	mov	r21, r20
    50d4:	89 81       	ldd	r24, Y+1	; 0x01
    50d6:	9a 81       	ldd	r25, Y+2	; 0x02
    50d8:	ab 81       	ldd	r26, Y+3	; 0x03
    50da:	bc 81       	ldd	r27, Y+4	; 0x04
    50dc:	82 2b       	or	r24, r18
    50de:	93 2b       	or	r25, r19
    50e0:	a4 2b       	or	r26, r20
    50e2:	b5 2b       	or	r27, r21
    50e4:	89 83       	std	Y+1, r24	; 0x01
    50e6:	9a 83       	std	Y+2, r25	; 0x02
    50e8:	ab 83       	std	Y+3, r26	; 0x03
    50ea:	bc 83       	std	Y+4, r27	; 0x04
		}
		
		for(Local_u8Iterator_Error = 0; Local_u8Iterator_Error < sizeof(Local_u32CheckError)*8; Local_u8Iterator_Error += ERROR_STATE_SIZE)
    50ec:	1d 82       	std	Y+5, r1	; 0x05
    50ee:	1d c0       	rjmp	.+58     	; 0x512a <Seven_Segment_enuDisplayNumber+0xb24>
		{
			if(((Local_u32CheckError >> Local_u8Iterator_Error) & ERROR_STATE_MASK) != ES_OK)
    50f0:	8d 81       	ldd	r24, Y+5	; 0x05
    50f2:	28 2f       	mov	r18, r24
    50f4:	30 e0       	ldi	r19, 0x00	; 0
    50f6:	89 81       	ldd	r24, Y+1	; 0x01
    50f8:	9a 81       	ldd	r25, Y+2	; 0x02
    50fa:	ab 81       	ldd	r26, Y+3	; 0x03
    50fc:	bc 81       	ldd	r27, Y+4	; 0x04
    50fe:	02 2e       	mov	r0, r18
    5100:	04 c0       	rjmp	.+8      	; 0x510a <Seven_Segment_enuDisplayNumber+0xb04>
    5102:	b6 95       	lsr	r27
    5104:	a7 95       	ror	r26
    5106:	97 95       	ror	r25
    5108:	87 95       	ror	r24
    510a:	0a 94       	dec	r0
    510c:	d2 f7       	brpl	.-12     	; 0x5102 <Seven_Segment_enuDisplayNumber+0xafc>
    510e:	87 70       	andi	r24, 0x07	; 7
    5110:	90 70       	andi	r25, 0x00	; 0
    5112:	a0 70       	andi	r26, 0x00	; 0
    5114:	b0 70       	andi	r27, 0x00	; 0
    5116:	00 97       	sbiw	r24, 0x00	; 0
    5118:	a1 05       	cpc	r26, r1
    511a:	b1 05       	cpc	r27, r1
    511c:	19 f0       	breq	.+6      	; 0x5124 <Seven_Segment_enuDisplayNumber+0xb1e>
			{
				return ES_NOK;
    511e:	51 e0       	ldi	r21, 0x01	; 1
    5120:	59 87       	std	Y+9, r21	; 0x09
    5122:	0c c0       	rjmp	.+24     	; 0x513c <Seven_Segment_enuDisplayNumber+0xb36>
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPIN, ((SEGCth_Numbers[Copy_u8Number] >> EPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPIN, ((SEGCth_Numbers[Copy_u8Number] >> FPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPIN, ((SEGCth_Numbers[Copy_u8Number] >> GPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
		}
		
		for(Local_u8Iterator_Error = 0; Local_u8Iterator_Error < sizeof(Local_u32CheckError)*8; Local_u8Iterator_Error += ERROR_STATE_SIZE)
    5124:	8d 81       	ldd	r24, Y+5	; 0x05
    5126:	8d 5f       	subi	r24, 0xFD	; 253
    5128:	8d 83       	std	Y+5, r24	; 0x05
    512a:	8d 81       	ldd	r24, Y+5	; 0x05
    512c:	80 32       	cpi	r24, 0x20	; 32
    512e:	00 f3       	brcs	.-64     	; 0x50f0 <Seven_Segment_enuDisplayNumber+0xaea>
			if(((Local_u32CheckError >> Local_u8Iterator_Error) & ERROR_STATE_MASK) != ES_OK)
			{
				return ES_NOK;
			}
		}
		Local_enuErrorState = ES_OK;
    5130:	1e 82       	std	Y+6, r1	; 0x06
    5132:	02 c0       	rjmp	.+4      	; 0x5138 <Seven_Segment_enuDisplayNumber+0xb32>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    5134:	83 e0       	ldi	r24, 0x03	; 3
    5136:	8e 83       	std	Y+6, r24	; 0x06
	}
	
	return Local_enuErrorState;
    5138:	8e 81       	ldd	r24, Y+6	; 0x06
    513a:	89 87       	std	Y+9, r24	; 0x09
    513c:	89 85       	ldd	r24, Y+9	; 0x09
}
    513e:	6e 96       	adiw	r28, 0x1e	; 30
    5140:	0f b6       	in	r0, 0x3f	; 63
    5142:	f8 94       	cli
    5144:	de bf       	out	0x3e, r29	; 62
    5146:	0f be       	out	0x3f, r0	; 63
    5148:	cd bf       	out	0x3d, r28	; 61
    514a:	cf 91       	pop	r28
    514c:	df 91       	pop	r29
    514e:	08 95       	ret

00005150 <Seven_Segment_enuEnableCommon>:

ES_t Seven_Segment_enuEnableCommon(u8 Copy_SEG_ID)
{
    5150:	df 93       	push	r29
    5152:	cf 93       	push	r28
    5154:	00 d0       	rcall	.+0      	; 0x5156 <Seven_Segment_enuEnableCommon+0x6>
    5156:	cd b7       	in	r28, 0x3d	; 61
    5158:	de b7       	in	r29, 0x3e	; 62
    515a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    515c:	81 e0       	ldi	r24, 0x01	; 1
    515e:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_SEG_ID < SEG_NUM)
    5160:	8a 81       	ldd	r24, Y+2	; 0x02
    5162:	82 30       	cpi	r24, 0x02	; 2
    5164:	08 f0       	brcs	.+2      	; 0x5168 <Seven_Segment_enuEnableCommon+0x18>
    5166:	90 c0       	rjmp	.+288    	; 0x5288 <Seven_Segment_enuEnableCommon+0x138>
	{
		if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_ANODE)
    5168:	8a 81       	ldd	r24, Y+2	; 0x02
    516a:	48 2f       	mov	r20, r24
    516c:	50 e0       	ldi	r21, 0x00	; 0
    516e:	ca 01       	movw	r24, r20
    5170:	88 0f       	add	r24, r24
    5172:	99 1f       	adc	r25, r25
    5174:	9c 01       	movw	r18, r24
    5176:	22 0f       	add	r18, r18
    5178:	33 1f       	adc	r19, r19
    517a:	22 0f       	add	r18, r18
    517c:	33 1f       	adc	r19, r19
    517e:	22 0f       	add	r18, r18
    5180:	33 1f       	adc	r19, r19
    5182:	82 0f       	add	r24, r18
    5184:	93 1f       	adc	r25, r19
    5186:	84 0f       	add	r24, r20
    5188:	95 1f       	adc	r25, r21
    518a:	fc 01       	movw	r30, r24
    518c:	ea 56       	subi	r30, 0x6A	; 106
    518e:	fe 4f       	sbci	r31, 0xFE	; 254
    5190:	80 81       	ld	r24, Z
    5192:	85 30       	cpi	r24, 0x05	; 5
    5194:	89 f5       	brne	.+98     	; 0x51f8 <Seven_Segment_enuEnableCommon+0xa8>
		{
			Local_enuErrorState = DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CMN_PORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CMN_PIN, DIO_u8HIGH);
    5196:	8a 81       	ldd	r24, Y+2	; 0x02
    5198:	48 2f       	mov	r20, r24
    519a:	50 e0       	ldi	r21, 0x00	; 0
    519c:	ca 01       	movw	r24, r20
    519e:	88 0f       	add	r24, r24
    51a0:	99 1f       	adc	r25, r25
    51a2:	9c 01       	movw	r18, r24
    51a4:	22 0f       	add	r18, r18
    51a6:	33 1f       	adc	r19, r19
    51a8:	22 0f       	add	r18, r18
    51aa:	33 1f       	adc	r19, r19
    51ac:	22 0f       	add	r18, r18
    51ae:	33 1f       	adc	r19, r19
    51b0:	82 0f       	add	r24, r18
    51b2:	93 1f       	adc	r25, r19
    51b4:	84 0f       	add	r24, r20
    51b6:	95 1f       	adc	r25, r21
    51b8:	fc 01       	movw	r30, r24
    51ba:	ee 56       	subi	r30, 0x6E	; 110
    51bc:	fe 4f       	sbci	r31, 0xFE	; 254
    51be:	60 81       	ld	r22, Z
    51c0:	8a 81       	ldd	r24, Y+2	; 0x02
    51c2:	48 2f       	mov	r20, r24
    51c4:	50 e0       	ldi	r21, 0x00	; 0
    51c6:	ca 01       	movw	r24, r20
    51c8:	88 0f       	add	r24, r24
    51ca:	99 1f       	adc	r25, r25
    51cc:	9c 01       	movw	r18, r24
    51ce:	22 0f       	add	r18, r18
    51d0:	33 1f       	adc	r19, r19
    51d2:	22 0f       	add	r18, r18
    51d4:	33 1f       	adc	r19, r19
    51d6:	22 0f       	add	r18, r18
    51d8:	33 1f       	adc	r19, r19
    51da:	82 0f       	add	r24, r18
    51dc:	93 1f       	adc	r25, r19
    51de:	84 0f       	add	r24, r20
    51e0:	95 1f       	adc	r25, r21
    51e2:	fc 01       	movw	r30, r24
    51e4:	ed 56       	subi	r30, 0x6D	; 109
    51e6:	fe 4f       	sbci	r31, 0xFE	; 254
    51e8:	90 81       	ld	r25, Z
    51ea:	86 2f       	mov	r24, r22
    51ec:	69 2f       	mov	r22, r25
    51ee:	41 e0       	ldi	r20, 0x01	; 1
    51f0:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    51f4:	89 83       	std	Y+1, r24	; 0x01
    51f6:	4a c0       	rjmp	.+148    	; 0x528c <Seven_Segment_enuEnableCommon+0x13c>
		}
		else if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_CATHODE)
    51f8:	8a 81       	ldd	r24, Y+2	; 0x02
    51fa:	48 2f       	mov	r20, r24
    51fc:	50 e0       	ldi	r21, 0x00	; 0
    51fe:	ca 01       	movw	r24, r20
    5200:	88 0f       	add	r24, r24
    5202:	99 1f       	adc	r25, r25
    5204:	9c 01       	movw	r18, r24
    5206:	22 0f       	add	r18, r18
    5208:	33 1f       	adc	r19, r19
    520a:	22 0f       	add	r18, r18
    520c:	33 1f       	adc	r19, r19
    520e:	22 0f       	add	r18, r18
    5210:	33 1f       	adc	r19, r19
    5212:	82 0f       	add	r24, r18
    5214:	93 1f       	adc	r25, r19
    5216:	84 0f       	add	r24, r20
    5218:	95 1f       	adc	r25, r21
    521a:	fc 01       	movw	r30, r24
    521c:	ea 56       	subi	r30, 0x6A	; 106
    521e:	fe 4f       	sbci	r31, 0xFE	; 254
    5220:	80 81       	ld	r24, Z
    5222:	86 30       	cpi	r24, 0x06	; 6
    5224:	99 f5       	brne	.+102    	; 0x528c <Seven_Segment_enuEnableCommon+0x13c>
		{
			Local_enuErrorState = DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CMN_PORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CMN_PIN, DIO_u8LOW);
    5226:	8a 81       	ldd	r24, Y+2	; 0x02
    5228:	48 2f       	mov	r20, r24
    522a:	50 e0       	ldi	r21, 0x00	; 0
    522c:	ca 01       	movw	r24, r20
    522e:	88 0f       	add	r24, r24
    5230:	99 1f       	adc	r25, r25
    5232:	9c 01       	movw	r18, r24
    5234:	22 0f       	add	r18, r18
    5236:	33 1f       	adc	r19, r19
    5238:	22 0f       	add	r18, r18
    523a:	33 1f       	adc	r19, r19
    523c:	22 0f       	add	r18, r18
    523e:	33 1f       	adc	r19, r19
    5240:	82 0f       	add	r24, r18
    5242:	93 1f       	adc	r25, r19
    5244:	84 0f       	add	r24, r20
    5246:	95 1f       	adc	r25, r21
    5248:	fc 01       	movw	r30, r24
    524a:	ee 56       	subi	r30, 0x6E	; 110
    524c:	fe 4f       	sbci	r31, 0xFE	; 254
    524e:	60 81       	ld	r22, Z
    5250:	8a 81       	ldd	r24, Y+2	; 0x02
    5252:	48 2f       	mov	r20, r24
    5254:	50 e0       	ldi	r21, 0x00	; 0
    5256:	ca 01       	movw	r24, r20
    5258:	88 0f       	add	r24, r24
    525a:	99 1f       	adc	r25, r25
    525c:	9c 01       	movw	r18, r24
    525e:	22 0f       	add	r18, r18
    5260:	33 1f       	adc	r19, r19
    5262:	22 0f       	add	r18, r18
    5264:	33 1f       	adc	r19, r19
    5266:	22 0f       	add	r18, r18
    5268:	33 1f       	adc	r19, r19
    526a:	82 0f       	add	r24, r18
    526c:	93 1f       	adc	r25, r19
    526e:	84 0f       	add	r24, r20
    5270:	95 1f       	adc	r25, r21
    5272:	fc 01       	movw	r30, r24
    5274:	ed 56       	subi	r30, 0x6D	; 109
    5276:	fe 4f       	sbci	r31, 0xFE	; 254
    5278:	90 81       	ld	r25, Z
    527a:	86 2f       	mov	r24, r22
    527c:	69 2f       	mov	r22, r25
    527e:	40 e0       	ldi	r20, 0x00	; 0
    5280:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5284:	89 83       	std	Y+1, r24	; 0x01
    5286:	02 c0       	rjmp	.+4      	; 0x528c <Seven_Segment_enuEnableCommon+0x13c>
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    5288:	83 e0       	ldi	r24, 0x03	; 3
    528a:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    528c:	89 81       	ldd	r24, Y+1	; 0x01
}
    528e:	0f 90       	pop	r0
    5290:	0f 90       	pop	r0
    5292:	cf 91       	pop	r28
    5294:	df 91       	pop	r29
    5296:	08 95       	ret

00005298 <Seven_Segment_enuDisableCommon>:

ES_t Seven_Segment_enuDisableCommon(u8 Copy_SEG_ID)
{
    5298:	df 93       	push	r29
    529a:	cf 93       	push	r28
    529c:	00 d0       	rcall	.+0      	; 0x529e <Seven_Segment_enuDisableCommon+0x6>
    529e:	cd b7       	in	r28, 0x3d	; 61
    52a0:	de b7       	in	r29, 0x3e	; 62
    52a2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    52a4:	81 e0       	ldi	r24, 0x01	; 1
    52a6:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_SEG_ID < SEG_NUM)
    52a8:	8a 81       	ldd	r24, Y+2	; 0x02
    52aa:	82 30       	cpi	r24, 0x02	; 2
    52ac:	08 f0       	brcs	.+2      	; 0x52b0 <Seven_Segment_enuDisableCommon+0x18>
    52ae:	90 c0       	rjmp	.+288    	; 0x53d0 <Seven_Segment_enuDisableCommon+0x138>
	{
		if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_ANODE)
    52b0:	8a 81       	ldd	r24, Y+2	; 0x02
    52b2:	48 2f       	mov	r20, r24
    52b4:	50 e0       	ldi	r21, 0x00	; 0
    52b6:	ca 01       	movw	r24, r20
    52b8:	88 0f       	add	r24, r24
    52ba:	99 1f       	adc	r25, r25
    52bc:	9c 01       	movw	r18, r24
    52be:	22 0f       	add	r18, r18
    52c0:	33 1f       	adc	r19, r19
    52c2:	22 0f       	add	r18, r18
    52c4:	33 1f       	adc	r19, r19
    52c6:	22 0f       	add	r18, r18
    52c8:	33 1f       	adc	r19, r19
    52ca:	82 0f       	add	r24, r18
    52cc:	93 1f       	adc	r25, r19
    52ce:	84 0f       	add	r24, r20
    52d0:	95 1f       	adc	r25, r21
    52d2:	fc 01       	movw	r30, r24
    52d4:	ea 56       	subi	r30, 0x6A	; 106
    52d6:	fe 4f       	sbci	r31, 0xFE	; 254
    52d8:	80 81       	ld	r24, Z
    52da:	85 30       	cpi	r24, 0x05	; 5
    52dc:	89 f5       	brne	.+98     	; 0x5340 <Seven_Segment_enuDisableCommon+0xa8>
		{
			Local_enuErrorState = DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CMN_PORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CMN_PIN, DIO_u8LOW);
    52de:	8a 81       	ldd	r24, Y+2	; 0x02
    52e0:	48 2f       	mov	r20, r24
    52e2:	50 e0       	ldi	r21, 0x00	; 0
    52e4:	ca 01       	movw	r24, r20
    52e6:	88 0f       	add	r24, r24
    52e8:	99 1f       	adc	r25, r25
    52ea:	9c 01       	movw	r18, r24
    52ec:	22 0f       	add	r18, r18
    52ee:	33 1f       	adc	r19, r19
    52f0:	22 0f       	add	r18, r18
    52f2:	33 1f       	adc	r19, r19
    52f4:	22 0f       	add	r18, r18
    52f6:	33 1f       	adc	r19, r19
    52f8:	82 0f       	add	r24, r18
    52fa:	93 1f       	adc	r25, r19
    52fc:	84 0f       	add	r24, r20
    52fe:	95 1f       	adc	r25, r21
    5300:	fc 01       	movw	r30, r24
    5302:	ee 56       	subi	r30, 0x6E	; 110
    5304:	fe 4f       	sbci	r31, 0xFE	; 254
    5306:	60 81       	ld	r22, Z
    5308:	8a 81       	ldd	r24, Y+2	; 0x02
    530a:	48 2f       	mov	r20, r24
    530c:	50 e0       	ldi	r21, 0x00	; 0
    530e:	ca 01       	movw	r24, r20
    5310:	88 0f       	add	r24, r24
    5312:	99 1f       	adc	r25, r25
    5314:	9c 01       	movw	r18, r24
    5316:	22 0f       	add	r18, r18
    5318:	33 1f       	adc	r19, r19
    531a:	22 0f       	add	r18, r18
    531c:	33 1f       	adc	r19, r19
    531e:	22 0f       	add	r18, r18
    5320:	33 1f       	adc	r19, r19
    5322:	82 0f       	add	r24, r18
    5324:	93 1f       	adc	r25, r19
    5326:	84 0f       	add	r24, r20
    5328:	95 1f       	adc	r25, r21
    532a:	fc 01       	movw	r30, r24
    532c:	ed 56       	subi	r30, 0x6D	; 109
    532e:	fe 4f       	sbci	r31, 0xFE	; 254
    5330:	90 81       	ld	r25, Z
    5332:	86 2f       	mov	r24, r22
    5334:	69 2f       	mov	r22, r25
    5336:	40 e0       	ldi	r20, 0x00	; 0
    5338:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    533c:	89 83       	std	Y+1, r24	; 0x01
    533e:	4a c0       	rjmp	.+148    	; 0x53d4 <Seven_Segment_enuDisableCommon+0x13c>
		}
		else if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_CATHODE)
    5340:	8a 81       	ldd	r24, Y+2	; 0x02
    5342:	48 2f       	mov	r20, r24
    5344:	50 e0       	ldi	r21, 0x00	; 0
    5346:	ca 01       	movw	r24, r20
    5348:	88 0f       	add	r24, r24
    534a:	99 1f       	adc	r25, r25
    534c:	9c 01       	movw	r18, r24
    534e:	22 0f       	add	r18, r18
    5350:	33 1f       	adc	r19, r19
    5352:	22 0f       	add	r18, r18
    5354:	33 1f       	adc	r19, r19
    5356:	22 0f       	add	r18, r18
    5358:	33 1f       	adc	r19, r19
    535a:	82 0f       	add	r24, r18
    535c:	93 1f       	adc	r25, r19
    535e:	84 0f       	add	r24, r20
    5360:	95 1f       	adc	r25, r21
    5362:	fc 01       	movw	r30, r24
    5364:	ea 56       	subi	r30, 0x6A	; 106
    5366:	fe 4f       	sbci	r31, 0xFE	; 254
    5368:	80 81       	ld	r24, Z
    536a:	86 30       	cpi	r24, 0x06	; 6
    536c:	99 f5       	brne	.+102    	; 0x53d4 <Seven_Segment_enuDisableCommon+0x13c>
		{
			Local_enuErrorState = DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CMN_PORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CMN_PIN, DIO_u8HIGH);
    536e:	8a 81       	ldd	r24, Y+2	; 0x02
    5370:	48 2f       	mov	r20, r24
    5372:	50 e0       	ldi	r21, 0x00	; 0
    5374:	ca 01       	movw	r24, r20
    5376:	88 0f       	add	r24, r24
    5378:	99 1f       	adc	r25, r25
    537a:	9c 01       	movw	r18, r24
    537c:	22 0f       	add	r18, r18
    537e:	33 1f       	adc	r19, r19
    5380:	22 0f       	add	r18, r18
    5382:	33 1f       	adc	r19, r19
    5384:	22 0f       	add	r18, r18
    5386:	33 1f       	adc	r19, r19
    5388:	82 0f       	add	r24, r18
    538a:	93 1f       	adc	r25, r19
    538c:	84 0f       	add	r24, r20
    538e:	95 1f       	adc	r25, r21
    5390:	fc 01       	movw	r30, r24
    5392:	ee 56       	subi	r30, 0x6E	; 110
    5394:	fe 4f       	sbci	r31, 0xFE	; 254
    5396:	60 81       	ld	r22, Z
    5398:	8a 81       	ldd	r24, Y+2	; 0x02
    539a:	48 2f       	mov	r20, r24
    539c:	50 e0       	ldi	r21, 0x00	; 0
    539e:	ca 01       	movw	r24, r20
    53a0:	88 0f       	add	r24, r24
    53a2:	99 1f       	adc	r25, r25
    53a4:	9c 01       	movw	r18, r24
    53a6:	22 0f       	add	r18, r18
    53a8:	33 1f       	adc	r19, r19
    53aa:	22 0f       	add	r18, r18
    53ac:	33 1f       	adc	r19, r19
    53ae:	22 0f       	add	r18, r18
    53b0:	33 1f       	adc	r19, r19
    53b2:	82 0f       	add	r24, r18
    53b4:	93 1f       	adc	r25, r19
    53b6:	84 0f       	add	r24, r20
    53b8:	95 1f       	adc	r25, r21
    53ba:	fc 01       	movw	r30, r24
    53bc:	ed 56       	subi	r30, 0x6D	; 109
    53be:	fe 4f       	sbci	r31, 0xFE	; 254
    53c0:	90 81       	ld	r25, Z
    53c2:	86 2f       	mov	r24, r22
    53c4:	69 2f       	mov	r22, r25
    53c6:	41 e0       	ldi	r20, 0x01	; 1
    53c8:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    53cc:	89 83       	std	Y+1, r24	; 0x01
    53ce:	02 c0       	rjmp	.+4      	; 0x53d4 <Seven_Segment_enuDisableCommon+0x13c>
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    53d0:	83 e0       	ldi	r24, 0x03	; 3
    53d2:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    53d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    53d6:	0f 90       	pop	r0
    53d8:	0f 90       	pop	r0
    53da:	cf 91       	pop	r28
    53dc:	df 91       	pop	r29
    53de:	08 95       	ret

000053e0 <Seven_Segment_enuEnableDot>:

ES_t Seven_Segment_enuEnableDot(u8 Copy_SEG_ID)
{
    53e0:	df 93       	push	r29
    53e2:	cf 93       	push	r28
    53e4:	00 d0       	rcall	.+0      	; 0x53e6 <Seven_Segment_enuEnableDot+0x6>
    53e6:	cd b7       	in	r28, 0x3d	; 61
    53e8:	de b7       	in	r29, 0x3e	; 62
    53ea:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    53ec:	81 e0       	ldi	r24, 0x01	; 1
    53ee:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_SEG_ID < SEG_NUM)
    53f0:	8a 81       	ldd	r24, Y+2	; 0x02
    53f2:	82 30       	cpi	r24, 0x02	; 2
    53f4:	08 f0       	brcs	.+2      	; 0x53f8 <Seven_Segment_enuEnableDot+0x18>
    53f6:	90 c0       	rjmp	.+288    	; 0x5518 <Seven_Segment_enuEnableDot+0x138>
	{
		if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_ANODE)
    53f8:	8a 81       	ldd	r24, Y+2	; 0x02
    53fa:	48 2f       	mov	r20, r24
    53fc:	50 e0       	ldi	r21, 0x00	; 0
    53fe:	ca 01       	movw	r24, r20
    5400:	88 0f       	add	r24, r24
    5402:	99 1f       	adc	r25, r25
    5404:	9c 01       	movw	r18, r24
    5406:	22 0f       	add	r18, r18
    5408:	33 1f       	adc	r19, r19
    540a:	22 0f       	add	r18, r18
    540c:	33 1f       	adc	r19, r19
    540e:	22 0f       	add	r18, r18
    5410:	33 1f       	adc	r19, r19
    5412:	82 0f       	add	r24, r18
    5414:	93 1f       	adc	r25, r19
    5416:	84 0f       	add	r24, r20
    5418:	95 1f       	adc	r25, r21
    541a:	fc 01       	movw	r30, r24
    541c:	ea 56       	subi	r30, 0x6A	; 106
    541e:	fe 4f       	sbci	r31, 0xFE	; 254
    5420:	80 81       	ld	r24, Z
    5422:	85 30       	cpi	r24, 0x05	; 5
    5424:	89 f5       	brne	.+98     	; 0x5488 <Seven_Segment_enuEnableDot+0xa8>
		{
			Local_enuErrorState = DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PIN, DIO_u8LOW);
    5426:	8a 81       	ldd	r24, Y+2	; 0x02
    5428:	48 2f       	mov	r20, r24
    542a:	50 e0       	ldi	r21, 0x00	; 0
    542c:	ca 01       	movw	r24, r20
    542e:	88 0f       	add	r24, r24
    5430:	99 1f       	adc	r25, r25
    5432:	9c 01       	movw	r18, r24
    5434:	22 0f       	add	r18, r18
    5436:	33 1f       	adc	r19, r19
    5438:	22 0f       	add	r18, r18
    543a:	33 1f       	adc	r19, r19
    543c:	22 0f       	add	r18, r18
    543e:	33 1f       	adc	r19, r19
    5440:	82 0f       	add	r24, r18
    5442:	93 1f       	adc	r25, r19
    5444:	84 0f       	add	r24, r20
    5446:	95 1f       	adc	r25, r21
    5448:	fc 01       	movw	r30, r24
    544a:	ec 56       	subi	r30, 0x6C	; 108
    544c:	fe 4f       	sbci	r31, 0xFE	; 254
    544e:	60 81       	ld	r22, Z
    5450:	8a 81       	ldd	r24, Y+2	; 0x02
    5452:	48 2f       	mov	r20, r24
    5454:	50 e0       	ldi	r21, 0x00	; 0
    5456:	ca 01       	movw	r24, r20
    5458:	88 0f       	add	r24, r24
    545a:	99 1f       	adc	r25, r25
    545c:	9c 01       	movw	r18, r24
    545e:	22 0f       	add	r18, r18
    5460:	33 1f       	adc	r19, r19
    5462:	22 0f       	add	r18, r18
    5464:	33 1f       	adc	r19, r19
    5466:	22 0f       	add	r18, r18
    5468:	33 1f       	adc	r19, r19
    546a:	82 0f       	add	r24, r18
    546c:	93 1f       	adc	r25, r19
    546e:	84 0f       	add	r24, r20
    5470:	95 1f       	adc	r25, r21
    5472:	fc 01       	movw	r30, r24
    5474:	eb 56       	subi	r30, 0x6B	; 107
    5476:	fe 4f       	sbci	r31, 0xFE	; 254
    5478:	90 81       	ld	r25, Z
    547a:	86 2f       	mov	r24, r22
    547c:	69 2f       	mov	r22, r25
    547e:	40 e0       	ldi	r20, 0x00	; 0
    5480:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5484:	89 83       	std	Y+1, r24	; 0x01
    5486:	4a c0       	rjmp	.+148    	; 0x551c <Seven_Segment_enuEnableDot+0x13c>
		}
		else if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_CATHODE)
    5488:	8a 81       	ldd	r24, Y+2	; 0x02
    548a:	48 2f       	mov	r20, r24
    548c:	50 e0       	ldi	r21, 0x00	; 0
    548e:	ca 01       	movw	r24, r20
    5490:	88 0f       	add	r24, r24
    5492:	99 1f       	adc	r25, r25
    5494:	9c 01       	movw	r18, r24
    5496:	22 0f       	add	r18, r18
    5498:	33 1f       	adc	r19, r19
    549a:	22 0f       	add	r18, r18
    549c:	33 1f       	adc	r19, r19
    549e:	22 0f       	add	r18, r18
    54a0:	33 1f       	adc	r19, r19
    54a2:	82 0f       	add	r24, r18
    54a4:	93 1f       	adc	r25, r19
    54a6:	84 0f       	add	r24, r20
    54a8:	95 1f       	adc	r25, r21
    54aa:	fc 01       	movw	r30, r24
    54ac:	ea 56       	subi	r30, 0x6A	; 106
    54ae:	fe 4f       	sbci	r31, 0xFE	; 254
    54b0:	80 81       	ld	r24, Z
    54b2:	86 30       	cpi	r24, 0x06	; 6
    54b4:	99 f5       	brne	.+102    	; 0x551c <Seven_Segment_enuEnableDot+0x13c>
		{
			Local_enuErrorState = DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PIN, DIO_u8HIGH);
    54b6:	8a 81       	ldd	r24, Y+2	; 0x02
    54b8:	48 2f       	mov	r20, r24
    54ba:	50 e0       	ldi	r21, 0x00	; 0
    54bc:	ca 01       	movw	r24, r20
    54be:	88 0f       	add	r24, r24
    54c0:	99 1f       	adc	r25, r25
    54c2:	9c 01       	movw	r18, r24
    54c4:	22 0f       	add	r18, r18
    54c6:	33 1f       	adc	r19, r19
    54c8:	22 0f       	add	r18, r18
    54ca:	33 1f       	adc	r19, r19
    54cc:	22 0f       	add	r18, r18
    54ce:	33 1f       	adc	r19, r19
    54d0:	82 0f       	add	r24, r18
    54d2:	93 1f       	adc	r25, r19
    54d4:	84 0f       	add	r24, r20
    54d6:	95 1f       	adc	r25, r21
    54d8:	fc 01       	movw	r30, r24
    54da:	ec 56       	subi	r30, 0x6C	; 108
    54dc:	fe 4f       	sbci	r31, 0xFE	; 254
    54de:	60 81       	ld	r22, Z
    54e0:	8a 81       	ldd	r24, Y+2	; 0x02
    54e2:	48 2f       	mov	r20, r24
    54e4:	50 e0       	ldi	r21, 0x00	; 0
    54e6:	ca 01       	movw	r24, r20
    54e8:	88 0f       	add	r24, r24
    54ea:	99 1f       	adc	r25, r25
    54ec:	9c 01       	movw	r18, r24
    54ee:	22 0f       	add	r18, r18
    54f0:	33 1f       	adc	r19, r19
    54f2:	22 0f       	add	r18, r18
    54f4:	33 1f       	adc	r19, r19
    54f6:	22 0f       	add	r18, r18
    54f8:	33 1f       	adc	r19, r19
    54fa:	82 0f       	add	r24, r18
    54fc:	93 1f       	adc	r25, r19
    54fe:	84 0f       	add	r24, r20
    5500:	95 1f       	adc	r25, r21
    5502:	fc 01       	movw	r30, r24
    5504:	eb 56       	subi	r30, 0x6B	; 107
    5506:	fe 4f       	sbci	r31, 0xFE	; 254
    5508:	90 81       	ld	r25, Z
    550a:	86 2f       	mov	r24, r22
    550c:	69 2f       	mov	r22, r25
    550e:	41 e0       	ldi	r20, 0x01	; 1
    5510:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5514:	89 83       	std	Y+1, r24	; 0x01
    5516:	02 c0       	rjmp	.+4      	; 0x551c <Seven_Segment_enuEnableDot+0x13c>
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    5518:	83 e0       	ldi	r24, 0x03	; 3
    551a:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    551c:	89 81       	ldd	r24, Y+1	; 0x01
}
    551e:	0f 90       	pop	r0
    5520:	0f 90       	pop	r0
    5522:	cf 91       	pop	r28
    5524:	df 91       	pop	r29
    5526:	08 95       	ret

00005528 <Seven_Segment_enuDisableDot>:

ES_t Seven_Segment_enuDisableDot(u8 Copy_SEG_ID)
{
    5528:	df 93       	push	r29
    552a:	cf 93       	push	r28
    552c:	00 d0       	rcall	.+0      	; 0x552e <Seven_Segment_enuDisableDot+0x6>
    552e:	cd b7       	in	r28, 0x3d	; 61
    5530:	de b7       	in	r29, 0x3e	; 62
    5532:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    5534:	81 e0       	ldi	r24, 0x01	; 1
    5536:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_SEG_ID < SEG_NUM)
    5538:	8a 81       	ldd	r24, Y+2	; 0x02
    553a:	82 30       	cpi	r24, 0x02	; 2
    553c:	08 f0       	brcs	.+2      	; 0x5540 <Seven_Segment_enuDisableDot+0x18>
    553e:	90 c0       	rjmp	.+288    	; 0x5660 <Seven_Segment_enuDisableDot+0x138>
	{
		if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_ANODE)
    5540:	8a 81       	ldd	r24, Y+2	; 0x02
    5542:	48 2f       	mov	r20, r24
    5544:	50 e0       	ldi	r21, 0x00	; 0
    5546:	ca 01       	movw	r24, r20
    5548:	88 0f       	add	r24, r24
    554a:	99 1f       	adc	r25, r25
    554c:	9c 01       	movw	r18, r24
    554e:	22 0f       	add	r18, r18
    5550:	33 1f       	adc	r19, r19
    5552:	22 0f       	add	r18, r18
    5554:	33 1f       	adc	r19, r19
    5556:	22 0f       	add	r18, r18
    5558:	33 1f       	adc	r19, r19
    555a:	82 0f       	add	r24, r18
    555c:	93 1f       	adc	r25, r19
    555e:	84 0f       	add	r24, r20
    5560:	95 1f       	adc	r25, r21
    5562:	fc 01       	movw	r30, r24
    5564:	ea 56       	subi	r30, 0x6A	; 106
    5566:	fe 4f       	sbci	r31, 0xFE	; 254
    5568:	80 81       	ld	r24, Z
    556a:	85 30       	cpi	r24, 0x05	; 5
    556c:	89 f5       	brne	.+98     	; 0x55d0 <Seven_Segment_enuDisableDot+0xa8>
		{
			Local_enuErrorState = DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PIN, DIO_u8HIGH);
    556e:	8a 81       	ldd	r24, Y+2	; 0x02
    5570:	48 2f       	mov	r20, r24
    5572:	50 e0       	ldi	r21, 0x00	; 0
    5574:	ca 01       	movw	r24, r20
    5576:	88 0f       	add	r24, r24
    5578:	99 1f       	adc	r25, r25
    557a:	9c 01       	movw	r18, r24
    557c:	22 0f       	add	r18, r18
    557e:	33 1f       	adc	r19, r19
    5580:	22 0f       	add	r18, r18
    5582:	33 1f       	adc	r19, r19
    5584:	22 0f       	add	r18, r18
    5586:	33 1f       	adc	r19, r19
    5588:	82 0f       	add	r24, r18
    558a:	93 1f       	adc	r25, r19
    558c:	84 0f       	add	r24, r20
    558e:	95 1f       	adc	r25, r21
    5590:	fc 01       	movw	r30, r24
    5592:	ec 56       	subi	r30, 0x6C	; 108
    5594:	fe 4f       	sbci	r31, 0xFE	; 254
    5596:	60 81       	ld	r22, Z
    5598:	8a 81       	ldd	r24, Y+2	; 0x02
    559a:	48 2f       	mov	r20, r24
    559c:	50 e0       	ldi	r21, 0x00	; 0
    559e:	ca 01       	movw	r24, r20
    55a0:	88 0f       	add	r24, r24
    55a2:	99 1f       	adc	r25, r25
    55a4:	9c 01       	movw	r18, r24
    55a6:	22 0f       	add	r18, r18
    55a8:	33 1f       	adc	r19, r19
    55aa:	22 0f       	add	r18, r18
    55ac:	33 1f       	adc	r19, r19
    55ae:	22 0f       	add	r18, r18
    55b0:	33 1f       	adc	r19, r19
    55b2:	82 0f       	add	r24, r18
    55b4:	93 1f       	adc	r25, r19
    55b6:	84 0f       	add	r24, r20
    55b8:	95 1f       	adc	r25, r21
    55ba:	fc 01       	movw	r30, r24
    55bc:	eb 56       	subi	r30, 0x6B	; 107
    55be:	fe 4f       	sbci	r31, 0xFE	; 254
    55c0:	90 81       	ld	r25, Z
    55c2:	86 2f       	mov	r24, r22
    55c4:	69 2f       	mov	r22, r25
    55c6:	41 e0       	ldi	r20, 0x01	; 1
    55c8:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    55cc:	89 83       	std	Y+1, r24	; 0x01
    55ce:	4a c0       	rjmp	.+148    	; 0x5664 <Seven_Segment_enuDisableDot+0x13c>
		}
		else if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_CATHODE)
    55d0:	8a 81       	ldd	r24, Y+2	; 0x02
    55d2:	48 2f       	mov	r20, r24
    55d4:	50 e0       	ldi	r21, 0x00	; 0
    55d6:	ca 01       	movw	r24, r20
    55d8:	88 0f       	add	r24, r24
    55da:	99 1f       	adc	r25, r25
    55dc:	9c 01       	movw	r18, r24
    55de:	22 0f       	add	r18, r18
    55e0:	33 1f       	adc	r19, r19
    55e2:	22 0f       	add	r18, r18
    55e4:	33 1f       	adc	r19, r19
    55e6:	22 0f       	add	r18, r18
    55e8:	33 1f       	adc	r19, r19
    55ea:	82 0f       	add	r24, r18
    55ec:	93 1f       	adc	r25, r19
    55ee:	84 0f       	add	r24, r20
    55f0:	95 1f       	adc	r25, r21
    55f2:	fc 01       	movw	r30, r24
    55f4:	ea 56       	subi	r30, 0x6A	; 106
    55f6:	fe 4f       	sbci	r31, 0xFE	; 254
    55f8:	80 81       	ld	r24, Z
    55fa:	86 30       	cpi	r24, 0x06	; 6
    55fc:	99 f5       	brne	.+102    	; 0x5664 <Seven_Segment_enuDisableDot+0x13c>
		{
			Local_enuErrorState = DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PIN, DIO_u8LOW);
    55fe:	8a 81       	ldd	r24, Y+2	; 0x02
    5600:	48 2f       	mov	r20, r24
    5602:	50 e0       	ldi	r21, 0x00	; 0
    5604:	ca 01       	movw	r24, r20
    5606:	88 0f       	add	r24, r24
    5608:	99 1f       	adc	r25, r25
    560a:	9c 01       	movw	r18, r24
    560c:	22 0f       	add	r18, r18
    560e:	33 1f       	adc	r19, r19
    5610:	22 0f       	add	r18, r18
    5612:	33 1f       	adc	r19, r19
    5614:	22 0f       	add	r18, r18
    5616:	33 1f       	adc	r19, r19
    5618:	82 0f       	add	r24, r18
    561a:	93 1f       	adc	r25, r19
    561c:	84 0f       	add	r24, r20
    561e:	95 1f       	adc	r25, r21
    5620:	fc 01       	movw	r30, r24
    5622:	ec 56       	subi	r30, 0x6C	; 108
    5624:	fe 4f       	sbci	r31, 0xFE	; 254
    5626:	60 81       	ld	r22, Z
    5628:	8a 81       	ldd	r24, Y+2	; 0x02
    562a:	48 2f       	mov	r20, r24
    562c:	50 e0       	ldi	r21, 0x00	; 0
    562e:	ca 01       	movw	r24, r20
    5630:	88 0f       	add	r24, r24
    5632:	99 1f       	adc	r25, r25
    5634:	9c 01       	movw	r18, r24
    5636:	22 0f       	add	r18, r18
    5638:	33 1f       	adc	r19, r19
    563a:	22 0f       	add	r18, r18
    563c:	33 1f       	adc	r19, r19
    563e:	22 0f       	add	r18, r18
    5640:	33 1f       	adc	r19, r19
    5642:	82 0f       	add	r24, r18
    5644:	93 1f       	adc	r25, r19
    5646:	84 0f       	add	r24, r20
    5648:	95 1f       	adc	r25, r21
    564a:	fc 01       	movw	r30, r24
    564c:	eb 56       	subi	r30, 0x6B	; 107
    564e:	fe 4f       	sbci	r31, 0xFE	; 254
    5650:	90 81       	ld	r25, Z
    5652:	86 2f       	mov	r24, r22
    5654:	69 2f       	mov	r22, r25
    5656:	40 e0       	ldi	r20, 0x00	; 0
    5658:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    565c:	89 83       	std	Y+1, r24	; 0x01
    565e:	02 c0       	rjmp	.+4      	; 0x5664 <Seven_Segment_enuDisableDot+0x13c>
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    5660:	83 e0       	ldi	r24, 0x03	; 3
    5662:	89 83       	std	Y+1, r24	; 0x01
	}
		
	return Local_enuErrorState;
    5664:	89 81       	ldd	r24, Y+1	; 0x01
}
    5666:	0f 90       	pop	r0
    5668:	0f 90       	pop	r0
    566a:	cf 91       	pop	r28
    566c:	df 91       	pop	r29
    566e:	08 95       	ret

00005670 <Seven_Sement_enuTurnOFF>:

ES_t Seven_Sement_enuTurnOFF(u8 Copy_SEG_ID)
{
    5670:	df 93       	push	r29
    5672:	cf 93       	push	r28
    5674:	cd b7       	in	r28, 0x3d	; 61
    5676:	de b7       	in	r29, 0x3e	; 62
    5678:	28 97       	sbiw	r28, 0x08	; 8
    567a:	0f b6       	in	r0, 0x3f	; 63
    567c:	f8 94       	cli
    567e:	de bf       	out	0x3e, r29	; 62
    5680:	0f be       	out	0x3f, r0	; 63
    5682:	cd bf       	out	0x3d, r28	; 61
    5684:	8f 83       	std	Y+7, r24	; 0x07
	ES_t Local_enuErrorState = ES_NOK;
    5686:	81 e0       	ldi	r24, 0x01	; 1
    5688:	8e 83       	std	Y+6, r24	; 0x06
	
	u8 Local_u8Iterator_Error = 0;
    568a:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32CheckError = 0;
    568c:	19 82       	std	Y+1, r1	; 0x01
    568e:	1a 82       	std	Y+2, r1	; 0x02
    5690:	1b 82       	std	Y+3, r1	; 0x03
    5692:	1c 82       	std	Y+4, r1	; 0x04
	
	if(Copy_SEG_ID < SEG_NUM)
    5694:	8f 81       	ldd	r24, Y+7	; 0x07
    5696:	82 30       	cpi	r24, 0x02	; 2
    5698:	08 f0       	brcs	.+2      	; 0x569c <Seven_Sement_enuTurnOFF+0x2c>
    569a:	9f c5       	rjmp	.+2878   	; 0x61da <Seven_Sement_enuTurnOFF+0xb6a>
	{
		if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_ANODE)
    569c:	8f 81       	ldd	r24, Y+7	; 0x07
    569e:	48 2f       	mov	r20, r24
    56a0:	50 e0       	ldi	r21, 0x00	; 0
    56a2:	ca 01       	movw	r24, r20
    56a4:	88 0f       	add	r24, r24
    56a6:	99 1f       	adc	r25, r25
    56a8:	9c 01       	movw	r18, r24
    56aa:	22 0f       	add	r18, r18
    56ac:	33 1f       	adc	r19, r19
    56ae:	22 0f       	add	r18, r18
    56b0:	33 1f       	adc	r19, r19
    56b2:	22 0f       	add	r18, r18
    56b4:	33 1f       	adc	r19, r19
    56b6:	82 0f       	add	r24, r18
    56b8:	93 1f       	adc	r25, r19
    56ba:	84 0f       	add	r24, r20
    56bc:	95 1f       	adc	r25, r21
    56be:	fc 01       	movw	r30, r24
    56c0:	ea 56       	subi	r30, 0x6A	; 106
    56c2:	fe 4f       	sbci	r31, 0xFE	; 254
    56c4:	80 81       	ld	r24, Z
    56c6:	85 30       	cpi	r24, 0x05	; 5
    56c8:	09 f0       	breq	.+2      	; 0x56cc <Seven_Sement_enuTurnOFF+0x5c>
    56ca:	a6 c2       	rjmp	.+1356   	; 0x5c18 <Seven_Sement_enuTurnOFF+0x5a8>
		{
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_APORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_APIN, DIO_u8HIGH) << Local_u8Iterator_Error);
    56cc:	8f 81       	ldd	r24, Y+7	; 0x07
    56ce:	48 2f       	mov	r20, r24
    56d0:	50 e0       	ldi	r21, 0x00	; 0
    56d2:	ca 01       	movw	r24, r20
    56d4:	88 0f       	add	r24, r24
    56d6:	99 1f       	adc	r25, r25
    56d8:	9c 01       	movw	r18, r24
    56da:	22 0f       	add	r18, r18
    56dc:	33 1f       	adc	r19, r19
    56de:	22 0f       	add	r18, r18
    56e0:	33 1f       	adc	r19, r19
    56e2:	22 0f       	add	r18, r18
    56e4:	33 1f       	adc	r19, r19
    56e6:	82 0f       	add	r24, r18
    56e8:	93 1f       	adc	r25, r19
    56ea:	84 0f       	add	r24, r20
    56ec:	95 1f       	adc	r25, r21
    56ee:	fc 01       	movw	r30, r24
    56f0:	ec 57       	subi	r30, 0x7C	; 124
    56f2:	fe 4f       	sbci	r31, 0xFE	; 254
    56f4:	60 81       	ld	r22, Z
    56f6:	8f 81       	ldd	r24, Y+7	; 0x07
    56f8:	48 2f       	mov	r20, r24
    56fa:	50 e0       	ldi	r21, 0x00	; 0
    56fc:	ca 01       	movw	r24, r20
    56fe:	88 0f       	add	r24, r24
    5700:	99 1f       	adc	r25, r25
    5702:	9c 01       	movw	r18, r24
    5704:	22 0f       	add	r18, r18
    5706:	33 1f       	adc	r19, r19
    5708:	22 0f       	add	r18, r18
    570a:	33 1f       	adc	r19, r19
    570c:	22 0f       	add	r18, r18
    570e:	33 1f       	adc	r19, r19
    5710:	82 0f       	add	r24, r18
    5712:	93 1f       	adc	r25, r19
    5714:	84 0f       	add	r24, r20
    5716:	95 1f       	adc	r25, r21
    5718:	fc 01       	movw	r30, r24
    571a:	eb 57       	subi	r30, 0x7B	; 123
    571c:	fe 4f       	sbci	r31, 0xFE	; 254
    571e:	90 81       	ld	r25, Z
    5720:	86 2f       	mov	r24, r22
    5722:	69 2f       	mov	r22, r25
    5724:	41 e0       	ldi	r20, 0x01	; 1
    5726:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    572a:	28 2f       	mov	r18, r24
    572c:	30 e0       	ldi	r19, 0x00	; 0
    572e:	8d 81       	ldd	r24, Y+5	; 0x05
    5730:	88 2f       	mov	r24, r24
    5732:	90 e0       	ldi	r25, 0x00	; 0
    5734:	a9 01       	movw	r20, r18
    5736:	02 c0       	rjmp	.+4      	; 0x573c <Seven_Sement_enuTurnOFF+0xcc>
    5738:	44 0f       	add	r20, r20
    573a:	55 1f       	adc	r21, r21
    573c:	8a 95       	dec	r24
    573e:	e2 f7       	brpl	.-8      	; 0x5738 <Seven_Sement_enuTurnOFF+0xc8>
    5740:	ca 01       	movw	r24, r20
    5742:	9c 01       	movw	r18, r24
    5744:	44 27       	eor	r20, r20
    5746:	37 fd       	sbrc	r19, 7
    5748:	40 95       	com	r20
    574a:	54 2f       	mov	r21, r20
    574c:	89 81       	ldd	r24, Y+1	; 0x01
    574e:	9a 81       	ldd	r25, Y+2	; 0x02
    5750:	ab 81       	ldd	r26, Y+3	; 0x03
    5752:	bc 81       	ldd	r27, Y+4	; 0x04
    5754:	82 2b       	or	r24, r18
    5756:	93 2b       	or	r25, r19
    5758:	a4 2b       	or	r26, r20
    575a:	b5 2b       	or	r27, r21
    575c:	89 83       	std	Y+1, r24	; 0x01
    575e:	9a 83       	std	Y+2, r25	; 0x02
    5760:	ab 83       	std	Y+3, r26	; 0x03
    5762:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_BPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_BPIN, DIO_u8HIGH) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    5764:	8f 81       	ldd	r24, Y+7	; 0x07
    5766:	48 2f       	mov	r20, r24
    5768:	50 e0       	ldi	r21, 0x00	; 0
    576a:	ca 01       	movw	r24, r20
    576c:	88 0f       	add	r24, r24
    576e:	99 1f       	adc	r25, r25
    5770:	9c 01       	movw	r18, r24
    5772:	22 0f       	add	r18, r18
    5774:	33 1f       	adc	r19, r19
    5776:	22 0f       	add	r18, r18
    5778:	33 1f       	adc	r19, r19
    577a:	22 0f       	add	r18, r18
    577c:	33 1f       	adc	r19, r19
    577e:	82 0f       	add	r24, r18
    5780:	93 1f       	adc	r25, r19
    5782:	84 0f       	add	r24, r20
    5784:	95 1f       	adc	r25, r21
    5786:	fc 01       	movw	r30, r24
    5788:	ea 57       	subi	r30, 0x7A	; 122
    578a:	fe 4f       	sbci	r31, 0xFE	; 254
    578c:	60 81       	ld	r22, Z
    578e:	8f 81       	ldd	r24, Y+7	; 0x07
    5790:	48 2f       	mov	r20, r24
    5792:	50 e0       	ldi	r21, 0x00	; 0
    5794:	ca 01       	movw	r24, r20
    5796:	88 0f       	add	r24, r24
    5798:	99 1f       	adc	r25, r25
    579a:	9c 01       	movw	r18, r24
    579c:	22 0f       	add	r18, r18
    579e:	33 1f       	adc	r19, r19
    57a0:	22 0f       	add	r18, r18
    57a2:	33 1f       	adc	r19, r19
    57a4:	22 0f       	add	r18, r18
    57a6:	33 1f       	adc	r19, r19
    57a8:	82 0f       	add	r24, r18
    57aa:	93 1f       	adc	r25, r19
    57ac:	84 0f       	add	r24, r20
    57ae:	95 1f       	adc	r25, r21
    57b0:	fc 01       	movw	r30, r24
    57b2:	e9 57       	subi	r30, 0x79	; 121
    57b4:	fe 4f       	sbci	r31, 0xFE	; 254
    57b6:	90 81       	ld	r25, Z
    57b8:	86 2f       	mov	r24, r22
    57ba:	69 2f       	mov	r22, r25
    57bc:	41 e0       	ldi	r20, 0x01	; 1
    57be:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    57c2:	28 2f       	mov	r18, r24
    57c4:	30 e0       	ldi	r19, 0x00	; 0
    57c6:	8d 81       	ldd	r24, Y+5	; 0x05
    57c8:	8d 5f       	subi	r24, 0xFD	; 253
    57ca:	8d 83       	std	Y+5, r24	; 0x05
    57cc:	8d 81       	ldd	r24, Y+5	; 0x05
    57ce:	88 2f       	mov	r24, r24
    57d0:	90 e0       	ldi	r25, 0x00	; 0
    57d2:	a9 01       	movw	r20, r18
    57d4:	02 c0       	rjmp	.+4      	; 0x57da <Seven_Sement_enuTurnOFF+0x16a>
    57d6:	44 0f       	add	r20, r20
    57d8:	55 1f       	adc	r21, r21
    57da:	8a 95       	dec	r24
    57dc:	e2 f7       	brpl	.-8      	; 0x57d6 <Seven_Sement_enuTurnOFF+0x166>
    57de:	ca 01       	movw	r24, r20
    57e0:	9c 01       	movw	r18, r24
    57e2:	44 27       	eor	r20, r20
    57e4:	37 fd       	sbrc	r19, 7
    57e6:	40 95       	com	r20
    57e8:	54 2f       	mov	r21, r20
    57ea:	89 81       	ldd	r24, Y+1	; 0x01
    57ec:	9a 81       	ldd	r25, Y+2	; 0x02
    57ee:	ab 81       	ldd	r26, Y+3	; 0x03
    57f0:	bc 81       	ldd	r27, Y+4	; 0x04
    57f2:	82 2b       	or	r24, r18
    57f4:	93 2b       	or	r25, r19
    57f6:	a4 2b       	or	r26, r20
    57f8:	b5 2b       	or	r27, r21
    57fa:	89 83       	std	Y+1, r24	; 0x01
    57fc:	9a 83       	std	Y+2, r25	; 0x02
    57fe:	ab 83       	std	Y+3, r26	; 0x03
    5800:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CPIN, DIO_u8HIGH) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    5802:	8f 81       	ldd	r24, Y+7	; 0x07
    5804:	48 2f       	mov	r20, r24
    5806:	50 e0       	ldi	r21, 0x00	; 0
    5808:	ca 01       	movw	r24, r20
    580a:	88 0f       	add	r24, r24
    580c:	99 1f       	adc	r25, r25
    580e:	9c 01       	movw	r18, r24
    5810:	22 0f       	add	r18, r18
    5812:	33 1f       	adc	r19, r19
    5814:	22 0f       	add	r18, r18
    5816:	33 1f       	adc	r19, r19
    5818:	22 0f       	add	r18, r18
    581a:	33 1f       	adc	r19, r19
    581c:	82 0f       	add	r24, r18
    581e:	93 1f       	adc	r25, r19
    5820:	84 0f       	add	r24, r20
    5822:	95 1f       	adc	r25, r21
    5824:	fc 01       	movw	r30, r24
    5826:	e8 57       	subi	r30, 0x78	; 120
    5828:	fe 4f       	sbci	r31, 0xFE	; 254
    582a:	60 81       	ld	r22, Z
    582c:	8f 81       	ldd	r24, Y+7	; 0x07
    582e:	48 2f       	mov	r20, r24
    5830:	50 e0       	ldi	r21, 0x00	; 0
    5832:	ca 01       	movw	r24, r20
    5834:	88 0f       	add	r24, r24
    5836:	99 1f       	adc	r25, r25
    5838:	9c 01       	movw	r18, r24
    583a:	22 0f       	add	r18, r18
    583c:	33 1f       	adc	r19, r19
    583e:	22 0f       	add	r18, r18
    5840:	33 1f       	adc	r19, r19
    5842:	22 0f       	add	r18, r18
    5844:	33 1f       	adc	r19, r19
    5846:	82 0f       	add	r24, r18
    5848:	93 1f       	adc	r25, r19
    584a:	84 0f       	add	r24, r20
    584c:	95 1f       	adc	r25, r21
    584e:	fc 01       	movw	r30, r24
    5850:	e7 57       	subi	r30, 0x77	; 119
    5852:	fe 4f       	sbci	r31, 0xFE	; 254
    5854:	90 81       	ld	r25, Z
    5856:	86 2f       	mov	r24, r22
    5858:	69 2f       	mov	r22, r25
    585a:	41 e0       	ldi	r20, 0x01	; 1
    585c:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5860:	28 2f       	mov	r18, r24
    5862:	30 e0       	ldi	r19, 0x00	; 0
    5864:	8d 81       	ldd	r24, Y+5	; 0x05
    5866:	8d 5f       	subi	r24, 0xFD	; 253
    5868:	8d 83       	std	Y+5, r24	; 0x05
    586a:	8d 81       	ldd	r24, Y+5	; 0x05
    586c:	88 2f       	mov	r24, r24
    586e:	90 e0       	ldi	r25, 0x00	; 0
    5870:	a9 01       	movw	r20, r18
    5872:	02 c0       	rjmp	.+4      	; 0x5878 <Seven_Sement_enuTurnOFF+0x208>
    5874:	44 0f       	add	r20, r20
    5876:	55 1f       	adc	r21, r21
    5878:	8a 95       	dec	r24
    587a:	e2 f7       	brpl	.-8      	; 0x5874 <Seven_Sement_enuTurnOFF+0x204>
    587c:	ca 01       	movw	r24, r20
    587e:	9c 01       	movw	r18, r24
    5880:	44 27       	eor	r20, r20
    5882:	37 fd       	sbrc	r19, 7
    5884:	40 95       	com	r20
    5886:	54 2f       	mov	r21, r20
    5888:	89 81       	ldd	r24, Y+1	; 0x01
    588a:	9a 81       	ldd	r25, Y+2	; 0x02
    588c:	ab 81       	ldd	r26, Y+3	; 0x03
    588e:	bc 81       	ldd	r27, Y+4	; 0x04
    5890:	82 2b       	or	r24, r18
    5892:	93 2b       	or	r25, r19
    5894:	a4 2b       	or	r26, r20
    5896:	b5 2b       	or	r27, r21
    5898:	89 83       	std	Y+1, r24	; 0x01
    589a:	9a 83       	std	Y+2, r25	; 0x02
    589c:	ab 83       	std	Y+3, r26	; 0x03
    589e:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DPIN, DIO_u8HIGH) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    58a0:	8f 81       	ldd	r24, Y+7	; 0x07
    58a2:	48 2f       	mov	r20, r24
    58a4:	50 e0       	ldi	r21, 0x00	; 0
    58a6:	ca 01       	movw	r24, r20
    58a8:	88 0f       	add	r24, r24
    58aa:	99 1f       	adc	r25, r25
    58ac:	9c 01       	movw	r18, r24
    58ae:	22 0f       	add	r18, r18
    58b0:	33 1f       	adc	r19, r19
    58b2:	22 0f       	add	r18, r18
    58b4:	33 1f       	adc	r19, r19
    58b6:	22 0f       	add	r18, r18
    58b8:	33 1f       	adc	r19, r19
    58ba:	82 0f       	add	r24, r18
    58bc:	93 1f       	adc	r25, r19
    58be:	84 0f       	add	r24, r20
    58c0:	95 1f       	adc	r25, r21
    58c2:	fc 01       	movw	r30, r24
    58c4:	e6 57       	subi	r30, 0x76	; 118
    58c6:	fe 4f       	sbci	r31, 0xFE	; 254
    58c8:	60 81       	ld	r22, Z
    58ca:	8f 81       	ldd	r24, Y+7	; 0x07
    58cc:	48 2f       	mov	r20, r24
    58ce:	50 e0       	ldi	r21, 0x00	; 0
    58d0:	ca 01       	movw	r24, r20
    58d2:	88 0f       	add	r24, r24
    58d4:	99 1f       	adc	r25, r25
    58d6:	9c 01       	movw	r18, r24
    58d8:	22 0f       	add	r18, r18
    58da:	33 1f       	adc	r19, r19
    58dc:	22 0f       	add	r18, r18
    58de:	33 1f       	adc	r19, r19
    58e0:	22 0f       	add	r18, r18
    58e2:	33 1f       	adc	r19, r19
    58e4:	82 0f       	add	r24, r18
    58e6:	93 1f       	adc	r25, r19
    58e8:	84 0f       	add	r24, r20
    58ea:	95 1f       	adc	r25, r21
    58ec:	fc 01       	movw	r30, r24
    58ee:	e5 57       	subi	r30, 0x75	; 117
    58f0:	fe 4f       	sbci	r31, 0xFE	; 254
    58f2:	90 81       	ld	r25, Z
    58f4:	86 2f       	mov	r24, r22
    58f6:	69 2f       	mov	r22, r25
    58f8:	41 e0       	ldi	r20, 0x01	; 1
    58fa:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    58fe:	28 2f       	mov	r18, r24
    5900:	30 e0       	ldi	r19, 0x00	; 0
    5902:	8d 81       	ldd	r24, Y+5	; 0x05
    5904:	8d 5f       	subi	r24, 0xFD	; 253
    5906:	8d 83       	std	Y+5, r24	; 0x05
    5908:	8d 81       	ldd	r24, Y+5	; 0x05
    590a:	88 2f       	mov	r24, r24
    590c:	90 e0       	ldi	r25, 0x00	; 0
    590e:	a9 01       	movw	r20, r18
    5910:	02 c0       	rjmp	.+4      	; 0x5916 <Seven_Sement_enuTurnOFF+0x2a6>
    5912:	44 0f       	add	r20, r20
    5914:	55 1f       	adc	r21, r21
    5916:	8a 95       	dec	r24
    5918:	e2 f7       	brpl	.-8      	; 0x5912 <Seven_Sement_enuTurnOFF+0x2a2>
    591a:	ca 01       	movw	r24, r20
    591c:	9c 01       	movw	r18, r24
    591e:	44 27       	eor	r20, r20
    5920:	37 fd       	sbrc	r19, 7
    5922:	40 95       	com	r20
    5924:	54 2f       	mov	r21, r20
    5926:	89 81       	ldd	r24, Y+1	; 0x01
    5928:	9a 81       	ldd	r25, Y+2	; 0x02
    592a:	ab 81       	ldd	r26, Y+3	; 0x03
    592c:	bc 81       	ldd	r27, Y+4	; 0x04
    592e:	82 2b       	or	r24, r18
    5930:	93 2b       	or	r25, r19
    5932:	a4 2b       	or	r26, r20
    5934:	b5 2b       	or	r27, r21
    5936:	89 83       	std	Y+1, r24	; 0x01
    5938:	9a 83       	std	Y+2, r25	; 0x02
    593a:	ab 83       	std	Y+3, r26	; 0x03
    593c:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPIN, DIO_u8HIGH) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    593e:	8f 81       	ldd	r24, Y+7	; 0x07
    5940:	48 2f       	mov	r20, r24
    5942:	50 e0       	ldi	r21, 0x00	; 0
    5944:	ca 01       	movw	r24, r20
    5946:	88 0f       	add	r24, r24
    5948:	99 1f       	adc	r25, r25
    594a:	9c 01       	movw	r18, r24
    594c:	22 0f       	add	r18, r18
    594e:	33 1f       	adc	r19, r19
    5950:	22 0f       	add	r18, r18
    5952:	33 1f       	adc	r19, r19
    5954:	22 0f       	add	r18, r18
    5956:	33 1f       	adc	r19, r19
    5958:	82 0f       	add	r24, r18
    595a:	93 1f       	adc	r25, r19
    595c:	84 0f       	add	r24, r20
    595e:	95 1f       	adc	r25, r21
    5960:	fc 01       	movw	r30, r24
    5962:	e4 57       	subi	r30, 0x74	; 116
    5964:	fe 4f       	sbci	r31, 0xFE	; 254
    5966:	60 81       	ld	r22, Z
    5968:	8f 81       	ldd	r24, Y+7	; 0x07
    596a:	48 2f       	mov	r20, r24
    596c:	50 e0       	ldi	r21, 0x00	; 0
    596e:	ca 01       	movw	r24, r20
    5970:	88 0f       	add	r24, r24
    5972:	99 1f       	adc	r25, r25
    5974:	9c 01       	movw	r18, r24
    5976:	22 0f       	add	r18, r18
    5978:	33 1f       	adc	r19, r19
    597a:	22 0f       	add	r18, r18
    597c:	33 1f       	adc	r19, r19
    597e:	22 0f       	add	r18, r18
    5980:	33 1f       	adc	r19, r19
    5982:	82 0f       	add	r24, r18
    5984:	93 1f       	adc	r25, r19
    5986:	84 0f       	add	r24, r20
    5988:	95 1f       	adc	r25, r21
    598a:	fc 01       	movw	r30, r24
    598c:	e3 57       	subi	r30, 0x73	; 115
    598e:	fe 4f       	sbci	r31, 0xFE	; 254
    5990:	90 81       	ld	r25, Z
    5992:	86 2f       	mov	r24, r22
    5994:	69 2f       	mov	r22, r25
    5996:	41 e0       	ldi	r20, 0x01	; 1
    5998:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    599c:	28 2f       	mov	r18, r24
    599e:	30 e0       	ldi	r19, 0x00	; 0
    59a0:	8d 81       	ldd	r24, Y+5	; 0x05
    59a2:	8d 5f       	subi	r24, 0xFD	; 253
    59a4:	8d 83       	std	Y+5, r24	; 0x05
    59a6:	8d 81       	ldd	r24, Y+5	; 0x05
    59a8:	88 2f       	mov	r24, r24
    59aa:	90 e0       	ldi	r25, 0x00	; 0
    59ac:	a9 01       	movw	r20, r18
    59ae:	02 c0       	rjmp	.+4      	; 0x59b4 <Seven_Sement_enuTurnOFF+0x344>
    59b0:	44 0f       	add	r20, r20
    59b2:	55 1f       	adc	r21, r21
    59b4:	8a 95       	dec	r24
    59b6:	e2 f7       	brpl	.-8      	; 0x59b0 <Seven_Sement_enuTurnOFF+0x340>
    59b8:	ca 01       	movw	r24, r20
    59ba:	9c 01       	movw	r18, r24
    59bc:	44 27       	eor	r20, r20
    59be:	37 fd       	sbrc	r19, 7
    59c0:	40 95       	com	r20
    59c2:	54 2f       	mov	r21, r20
    59c4:	89 81       	ldd	r24, Y+1	; 0x01
    59c6:	9a 81       	ldd	r25, Y+2	; 0x02
    59c8:	ab 81       	ldd	r26, Y+3	; 0x03
    59ca:	bc 81       	ldd	r27, Y+4	; 0x04
    59cc:	82 2b       	or	r24, r18
    59ce:	93 2b       	or	r25, r19
    59d0:	a4 2b       	or	r26, r20
    59d2:	b5 2b       	or	r27, r21
    59d4:	89 83       	std	Y+1, r24	; 0x01
    59d6:	9a 83       	std	Y+2, r25	; 0x02
    59d8:	ab 83       	std	Y+3, r26	; 0x03
    59da:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPIN, DIO_u8HIGH) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    59dc:	8f 81       	ldd	r24, Y+7	; 0x07
    59de:	48 2f       	mov	r20, r24
    59e0:	50 e0       	ldi	r21, 0x00	; 0
    59e2:	ca 01       	movw	r24, r20
    59e4:	88 0f       	add	r24, r24
    59e6:	99 1f       	adc	r25, r25
    59e8:	9c 01       	movw	r18, r24
    59ea:	22 0f       	add	r18, r18
    59ec:	33 1f       	adc	r19, r19
    59ee:	22 0f       	add	r18, r18
    59f0:	33 1f       	adc	r19, r19
    59f2:	22 0f       	add	r18, r18
    59f4:	33 1f       	adc	r19, r19
    59f6:	82 0f       	add	r24, r18
    59f8:	93 1f       	adc	r25, r19
    59fa:	84 0f       	add	r24, r20
    59fc:	95 1f       	adc	r25, r21
    59fe:	fc 01       	movw	r30, r24
    5a00:	e2 57       	subi	r30, 0x72	; 114
    5a02:	fe 4f       	sbci	r31, 0xFE	; 254
    5a04:	60 81       	ld	r22, Z
    5a06:	8f 81       	ldd	r24, Y+7	; 0x07
    5a08:	48 2f       	mov	r20, r24
    5a0a:	50 e0       	ldi	r21, 0x00	; 0
    5a0c:	ca 01       	movw	r24, r20
    5a0e:	88 0f       	add	r24, r24
    5a10:	99 1f       	adc	r25, r25
    5a12:	9c 01       	movw	r18, r24
    5a14:	22 0f       	add	r18, r18
    5a16:	33 1f       	adc	r19, r19
    5a18:	22 0f       	add	r18, r18
    5a1a:	33 1f       	adc	r19, r19
    5a1c:	22 0f       	add	r18, r18
    5a1e:	33 1f       	adc	r19, r19
    5a20:	82 0f       	add	r24, r18
    5a22:	93 1f       	adc	r25, r19
    5a24:	84 0f       	add	r24, r20
    5a26:	95 1f       	adc	r25, r21
    5a28:	fc 01       	movw	r30, r24
    5a2a:	e1 57       	subi	r30, 0x71	; 113
    5a2c:	fe 4f       	sbci	r31, 0xFE	; 254
    5a2e:	90 81       	ld	r25, Z
    5a30:	86 2f       	mov	r24, r22
    5a32:	69 2f       	mov	r22, r25
    5a34:	41 e0       	ldi	r20, 0x01	; 1
    5a36:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5a3a:	28 2f       	mov	r18, r24
    5a3c:	30 e0       	ldi	r19, 0x00	; 0
    5a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    5a40:	8d 5f       	subi	r24, 0xFD	; 253
    5a42:	8d 83       	std	Y+5, r24	; 0x05
    5a44:	8d 81       	ldd	r24, Y+5	; 0x05
    5a46:	88 2f       	mov	r24, r24
    5a48:	90 e0       	ldi	r25, 0x00	; 0
    5a4a:	a9 01       	movw	r20, r18
    5a4c:	02 c0       	rjmp	.+4      	; 0x5a52 <Seven_Sement_enuTurnOFF+0x3e2>
    5a4e:	44 0f       	add	r20, r20
    5a50:	55 1f       	adc	r21, r21
    5a52:	8a 95       	dec	r24
    5a54:	e2 f7       	brpl	.-8      	; 0x5a4e <Seven_Sement_enuTurnOFF+0x3de>
    5a56:	ca 01       	movw	r24, r20
    5a58:	9c 01       	movw	r18, r24
    5a5a:	44 27       	eor	r20, r20
    5a5c:	37 fd       	sbrc	r19, 7
    5a5e:	40 95       	com	r20
    5a60:	54 2f       	mov	r21, r20
    5a62:	89 81       	ldd	r24, Y+1	; 0x01
    5a64:	9a 81       	ldd	r25, Y+2	; 0x02
    5a66:	ab 81       	ldd	r26, Y+3	; 0x03
    5a68:	bc 81       	ldd	r27, Y+4	; 0x04
    5a6a:	82 2b       	or	r24, r18
    5a6c:	93 2b       	or	r25, r19
    5a6e:	a4 2b       	or	r26, r20
    5a70:	b5 2b       	or	r27, r21
    5a72:	89 83       	std	Y+1, r24	; 0x01
    5a74:	9a 83       	std	Y+2, r25	; 0x02
    5a76:	ab 83       	std	Y+3, r26	; 0x03
    5a78:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPIN, DIO_u8HIGH) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    5a7a:	8f 81       	ldd	r24, Y+7	; 0x07
    5a7c:	48 2f       	mov	r20, r24
    5a7e:	50 e0       	ldi	r21, 0x00	; 0
    5a80:	ca 01       	movw	r24, r20
    5a82:	88 0f       	add	r24, r24
    5a84:	99 1f       	adc	r25, r25
    5a86:	9c 01       	movw	r18, r24
    5a88:	22 0f       	add	r18, r18
    5a8a:	33 1f       	adc	r19, r19
    5a8c:	22 0f       	add	r18, r18
    5a8e:	33 1f       	adc	r19, r19
    5a90:	22 0f       	add	r18, r18
    5a92:	33 1f       	adc	r19, r19
    5a94:	82 0f       	add	r24, r18
    5a96:	93 1f       	adc	r25, r19
    5a98:	84 0f       	add	r24, r20
    5a9a:	95 1f       	adc	r25, r21
    5a9c:	fc 01       	movw	r30, r24
    5a9e:	e0 57       	subi	r30, 0x70	; 112
    5aa0:	fe 4f       	sbci	r31, 0xFE	; 254
    5aa2:	60 81       	ld	r22, Z
    5aa4:	8f 81       	ldd	r24, Y+7	; 0x07
    5aa6:	48 2f       	mov	r20, r24
    5aa8:	50 e0       	ldi	r21, 0x00	; 0
    5aaa:	ca 01       	movw	r24, r20
    5aac:	88 0f       	add	r24, r24
    5aae:	99 1f       	adc	r25, r25
    5ab0:	9c 01       	movw	r18, r24
    5ab2:	22 0f       	add	r18, r18
    5ab4:	33 1f       	adc	r19, r19
    5ab6:	22 0f       	add	r18, r18
    5ab8:	33 1f       	adc	r19, r19
    5aba:	22 0f       	add	r18, r18
    5abc:	33 1f       	adc	r19, r19
    5abe:	82 0f       	add	r24, r18
    5ac0:	93 1f       	adc	r25, r19
    5ac2:	84 0f       	add	r24, r20
    5ac4:	95 1f       	adc	r25, r21
    5ac6:	fc 01       	movw	r30, r24
    5ac8:	ef 56       	subi	r30, 0x6F	; 111
    5aca:	fe 4f       	sbci	r31, 0xFE	; 254
    5acc:	90 81       	ld	r25, Z
    5ace:	86 2f       	mov	r24, r22
    5ad0:	69 2f       	mov	r22, r25
    5ad2:	41 e0       	ldi	r20, 0x01	; 1
    5ad4:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5ad8:	28 2f       	mov	r18, r24
    5ada:	30 e0       	ldi	r19, 0x00	; 0
    5adc:	8d 81       	ldd	r24, Y+5	; 0x05
    5ade:	8d 5f       	subi	r24, 0xFD	; 253
    5ae0:	8d 83       	std	Y+5, r24	; 0x05
    5ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    5ae4:	88 2f       	mov	r24, r24
    5ae6:	90 e0       	ldi	r25, 0x00	; 0
    5ae8:	a9 01       	movw	r20, r18
    5aea:	02 c0       	rjmp	.+4      	; 0x5af0 <Seven_Sement_enuTurnOFF+0x480>
    5aec:	44 0f       	add	r20, r20
    5aee:	55 1f       	adc	r21, r21
    5af0:	8a 95       	dec	r24
    5af2:	e2 f7       	brpl	.-8      	; 0x5aec <Seven_Sement_enuTurnOFF+0x47c>
    5af4:	ca 01       	movw	r24, r20
    5af6:	9c 01       	movw	r18, r24
    5af8:	44 27       	eor	r20, r20
    5afa:	37 fd       	sbrc	r19, 7
    5afc:	40 95       	com	r20
    5afe:	54 2f       	mov	r21, r20
    5b00:	89 81       	ldd	r24, Y+1	; 0x01
    5b02:	9a 81       	ldd	r25, Y+2	; 0x02
    5b04:	ab 81       	ldd	r26, Y+3	; 0x03
    5b06:	bc 81       	ldd	r27, Y+4	; 0x04
    5b08:	82 2b       	or	r24, r18
    5b0a:	93 2b       	or	r25, r19
    5b0c:	a4 2b       	or	r26, r20
    5b0e:	b5 2b       	or	r27, r21
    5b10:	89 83       	std	Y+1, r24	; 0x01
    5b12:	9a 83       	std	Y+2, r25	; 0x02
    5b14:	ab 83       	std	Y+3, r26	; 0x03
    5b16:	bc 83       	std	Y+4, r27	; 0x04
			
			if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PORT != NOT_CONNECTED && SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PIN != NOT_CONNECTED)
    5b18:	8f 81       	ldd	r24, Y+7	; 0x07
    5b1a:	48 2f       	mov	r20, r24
    5b1c:	50 e0       	ldi	r21, 0x00	; 0
    5b1e:	ca 01       	movw	r24, r20
    5b20:	88 0f       	add	r24, r24
    5b22:	99 1f       	adc	r25, r25
    5b24:	9c 01       	movw	r18, r24
    5b26:	22 0f       	add	r18, r18
    5b28:	33 1f       	adc	r19, r19
    5b2a:	22 0f       	add	r18, r18
    5b2c:	33 1f       	adc	r19, r19
    5b2e:	22 0f       	add	r18, r18
    5b30:	33 1f       	adc	r19, r19
    5b32:	82 0f       	add	r24, r18
    5b34:	93 1f       	adc	r25, r19
    5b36:	84 0f       	add	r24, r20
    5b38:	95 1f       	adc	r25, r21
    5b3a:	fc 01       	movw	r30, r24
    5b3c:	ec 56       	subi	r30, 0x6C	; 108
    5b3e:	fe 4f       	sbci	r31, 0xFE	; 254
    5b40:	80 81       	ld	r24, Z
    5b42:	8a 30       	cpi	r24, 0x0A	; 10
    5b44:	09 f4       	brne	.+2      	; 0x5b48 <Seven_Sement_enuTurnOFF+0x4d8>
    5b46:	25 c3       	rjmp	.+1610   	; 0x6192 <Seven_Sement_enuTurnOFF+0xb22>
    5b48:	8f 81       	ldd	r24, Y+7	; 0x07
    5b4a:	48 2f       	mov	r20, r24
    5b4c:	50 e0       	ldi	r21, 0x00	; 0
    5b4e:	ca 01       	movw	r24, r20
    5b50:	88 0f       	add	r24, r24
    5b52:	99 1f       	adc	r25, r25
    5b54:	9c 01       	movw	r18, r24
    5b56:	22 0f       	add	r18, r18
    5b58:	33 1f       	adc	r19, r19
    5b5a:	22 0f       	add	r18, r18
    5b5c:	33 1f       	adc	r19, r19
    5b5e:	22 0f       	add	r18, r18
    5b60:	33 1f       	adc	r19, r19
    5b62:	82 0f       	add	r24, r18
    5b64:	93 1f       	adc	r25, r19
    5b66:	84 0f       	add	r24, r20
    5b68:	95 1f       	adc	r25, r21
    5b6a:	fc 01       	movw	r30, r24
    5b6c:	eb 56       	subi	r30, 0x6B	; 107
    5b6e:	fe 4f       	sbci	r31, 0xFE	; 254
    5b70:	80 81       	ld	r24, Z
    5b72:	8a 30       	cpi	r24, 0x0A	; 10
    5b74:	09 f4       	brne	.+2      	; 0x5b78 <Seven_Sement_enuTurnOFF+0x508>
    5b76:	0d c3       	rjmp	.+1562   	; 0x6192 <Seven_Sement_enuTurnOFF+0xb22>
			{
				Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PIN, DIO_u8HIGH) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    5b78:	8f 81       	ldd	r24, Y+7	; 0x07
    5b7a:	48 2f       	mov	r20, r24
    5b7c:	50 e0       	ldi	r21, 0x00	; 0
    5b7e:	ca 01       	movw	r24, r20
    5b80:	88 0f       	add	r24, r24
    5b82:	99 1f       	adc	r25, r25
    5b84:	9c 01       	movw	r18, r24
    5b86:	22 0f       	add	r18, r18
    5b88:	33 1f       	adc	r19, r19
    5b8a:	22 0f       	add	r18, r18
    5b8c:	33 1f       	adc	r19, r19
    5b8e:	22 0f       	add	r18, r18
    5b90:	33 1f       	adc	r19, r19
    5b92:	82 0f       	add	r24, r18
    5b94:	93 1f       	adc	r25, r19
    5b96:	84 0f       	add	r24, r20
    5b98:	95 1f       	adc	r25, r21
    5b9a:	fc 01       	movw	r30, r24
    5b9c:	ec 56       	subi	r30, 0x6C	; 108
    5b9e:	fe 4f       	sbci	r31, 0xFE	; 254
    5ba0:	60 81       	ld	r22, Z
    5ba2:	8f 81       	ldd	r24, Y+7	; 0x07
    5ba4:	48 2f       	mov	r20, r24
    5ba6:	50 e0       	ldi	r21, 0x00	; 0
    5ba8:	ca 01       	movw	r24, r20
    5baa:	88 0f       	add	r24, r24
    5bac:	99 1f       	adc	r25, r25
    5bae:	9c 01       	movw	r18, r24
    5bb0:	22 0f       	add	r18, r18
    5bb2:	33 1f       	adc	r19, r19
    5bb4:	22 0f       	add	r18, r18
    5bb6:	33 1f       	adc	r19, r19
    5bb8:	22 0f       	add	r18, r18
    5bba:	33 1f       	adc	r19, r19
    5bbc:	82 0f       	add	r24, r18
    5bbe:	93 1f       	adc	r25, r19
    5bc0:	84 0f       	add	r24, r20
    5bc2:	95 1f       	adc	r25, r21
    5bc4:	fc 01       	movw	r30, r24
    5bc6:	eb 56       	subi	r30, 0x6B	; 107
    5bc8:	fe 4f       	sbci	r31, 0xFE	; 254
    5bca:	90 81       	ld	r25, Z
    5bcc:	86 2f       	mov	r24, r22
    5bce:	69 2f       	mov	r22, r25
    5bd0:	41 e0       	ldi	r20, 0x01	; 1
    5bd2:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5bd6:	28 2f       	mov	r18, r24
    5bd8:	30 e0       	ldi	r19, 0x00	; 0
    5bda:	8d 81       	ldd	r24, Y+5	; 0x05
    5bdc:	8d 5f       	subi	r24, 0xFD	; 253
    5bde:	8d 83       	std	Y+5, r24	; 0x05
    5be0:	8d 81       	ldd	r24, Y+5	; 0x05
    5be2:	88 2f       	mov	r24, r24
    5be4:	90 e0       	ldi	r25, 0x00	; 0
    5be6:	a9 01       	movw	r20, r18
    5be8:	02 c0       	rjmp	.+4      	; 0x5bee <Seven_Sement_enuTurnOFF+0x57e>
    5bea:	44 0f       	add	r20, r20
    5bec:	55 1f       	adc	r21, r21
    5bee:	8a 95       	dec	r24
    5bf0:	e2 f7       	brpl	.-8      	; 0x5bea <Seven_Sement_enuTurnOFF+0x57a>
    5bf2:	ca 01       	movw	r24, r20
    5bf4:	9c 01       	movw	r18, r24
    5bf6:	44 27       	eor	r20, r20
    5bf8:	37 fd       	sbrc	r19, 7
    5bfa:	40 95       	com	r20
    5bfc:	54 2f       	mov	r21, r20
    5bfe:	89 81       	ldd	r24, Y+1	; 0x01
    5c00:	9a 81       	ldd	r25, Y+2	; 0x02
    5c02:	ab 81       	ldd	r26, Y+3	; 0x03
    5c04:	bc 81       	ldd	r27, Y+4	; 0x04
    5c06:	82 2b       	or	r24, r18
    5c08:	93 2b       	or	r25, r19
    5c0a:	a4 2b       	or	r26, r20
    5c0c:	b5 2b       	or	r27, r21
    5c0e:	89 83       	std	Y+1, r24	; 0x01
    5c10:	9a 83       	std	Y+2, r25	; 0x02
    5c12:	ab 83       	std	Y+3, r26	; 0x03
    5c14:	bc 83       	std	Y+4, r27	; 0x04
    5c16:	bd c2       	rjmp	.+1402   	; 0x6192 <Seven_Sement_enuTurnOFF+0xb22>
			}
		}
		else if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_CATHODE)
    5c18:	8f 81       	ldd	r24, Y+7	; 0x07
    5c1a:	48 2f       	mov	r20, r24
    5c1c:	50 e0       	ldi	r21, 0x00	; 0
    5c1e:	ca 01       	movw	r24, r20
    5c20:	88 0f       	add	r24, r24
    5c22:	99 1f       	adc	r25, r25
    5c24:	9c 01       	movw	r18, r24
    5c26:	22 0f       	add	r18, r18
    5c28:	33 1f       	adc	r19, r19
    5c2a:	22 0f       	add	r18, r18
    5c2c:	33 1f       	adc	r19, r19
    5c2e:	22 0f       	add	r18, r18
    5c30:	33 1f       	adc	r19, r19
    5c32:	82 0f       	add	r24, r18
    5c34:	93 1f       	adc	r25, r19
    5c36:	84 0f       	add	r24, r20
    5c38:	95 1f       	adc	r25, r21
    5c3a:	fc 01       	movw	r30, r24
    5c3c:	ea 56       	subi	r30, 0x6A	; 106
    5c3e:	fe 4f       	sbci	r31, 0xFE	; 254
    5c40:	80 81       	ld	r24, Z
    5c42:	86 30       	cpi	r24, 0x06	; 6
    5c44:	09 f0       	breq	.+2      	; 0x5c48 <Seven_Sement_enuTurnOFF+0x5d8>
    5c46:	a5 c2       	rjmp	.+1354   	; 0x6192 <Seven_Sement_enuTurnOFF+0xb22>
		{
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_APORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_APIN, DIO_u8LOW) << Local_u8Iterator_Error);
    5c48:	8f 81       	ldd	r24, Y+7	; 0x07
    5c4a:	48 2f       	mov	r20, r24
    5c4c:	50 e0       	ldi	r21, 0x00	; 0
    5c4e:	ca 01       	movw	r24, r20
    5c50:	88 0f       	add	r24, r24
    5c52:	99 1f       	adc	r25, r25
    5c54:	9c 01       	movw	r18, r24
    5c56:	22 0f       	add	r18, r18
    5c58:	33 1f       	adc	r19, r19
    5c5a:	22 0f       	add	r18, r18
    5c5c:	33 1f       	adc	r19, r19
    5c5e:	22 0f       	add	r18, r18
    5c60:	33 1f       	adc	r19, r19
    5c62:	82 0f       	add	r24, r18
    5c64:	93 1f       	adc	r25, r19
    5c66:	84 0f       	add	r24, r20
    5c68:	95 1f       	adc	r25, r21
    5c6a:	fc 01       	movw	r30, r24
    5c6c:	ec 57       	subi	r30, 0x7C	; 124
    5c6e:	fe 4f       	sbci	r31, 0xFE	; 254
    5c70:	60 81       	ld	r22, Z
    5c72:	8f 81       	ldd	r24, Y+7	; 0x07
    5c74:	48 2f       	mov	r20, r24
    5c76:	50 e0       	ldi	r21, 0x00	; 0
    5c78:	ca 01       	movw	r24, r20
    5c7a:	88 0f       	add	r24, r24
    5c7c:	99 1f       	adc	r25, r25
    5c7e:	9c 01       	movw	r18, r24
    5c80:	22 0f       	add	r18, r18
    5c82:	33 1f       	adc	r19, r19
    5c84:	22 0f       	add	r18, r18
    5c86:	33 1f       	adc	r19, r19
    5c88:	22 0f       	add	r18, r18
    5c8a:	33 1f       	adc	r19, r19
    5c8c:	82 0f       	add	r24, r18
    5c8e:	93 1f       	adc	r25, r19
    5c90:	84 0f       	add	r24, r20
    5c92:	95 1f       	adc	r25, r21
    5c94:	fc 01       	movw	r30, r24
    5c96:	eb 57       	subi	r30, 0x7B	; 123
    5c98:	fe 4f       	sbci	r31, 0xFE	; 254
    5c9a:	90 81       	ld	r25, Z
    5c9c:	86 2f       	mov	r24, r22
    5c9e:	69 2f       	mov	r22, r25
    5ca0:	40 e0       	ldi	r20, 0x00	; 0
    5ca2:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5ca6:	28 2f       	mov	r18, r24
    5ca8:	30 e0       	ldi	r19, 0x00	; 0
    5caa:	8d 81       	ldd	r24, Y+5	; 0x05
    5cac:	88 2f       	mov	r24, r24
    5cae:	90 e0       	ldi	r25, 0x00	; 0
    5cb0:	a9 01       	movw	r20, r18
    5cb2:	02 c0       	rjmp	.+4      	; 0x5cb8 <Seven_Sement_enuTurnOFF+0x648>
    5cb4:	44 0f       	add	r20, r20
    5cb6:	55 1f       	adc	r21, r21
    5cb8:	8a 95       	dec	r24
    5cba:	e2 f7       	brpl	.-8      	; 0x5cb4 <Seven_Sement_enuTurnOFF+0x644>
    5cbc:	ca 01       	movw	r24, r20
    5cbe:	9c 01       	movw	r18, r24
    5cc0:	44 27       	eor	r20, r20
    5cc2:	37 fd       	sbrc	r19, 7
    5cc4:	40 95       	com	r20
    5cc6:	54 2f       	mov	r21, r20
    5cc8:	89 81       	ldd	r24, Y+1	; 0x01
    5cca:	9a 81       	ldd	r25, Y+2	; 0x02
    5ccc:	ab 81       	ldd	r26, Y+3	; 0x03
    5cce:	bc 81       	ldd	r27, Y+4	; 0x04
    5cd0:	82 2b       	or	r24, r18
    5cd2:	93 2b       	or	r25, r19
    5cd4:	a4 2b       	or	r26, r20
    5cd6:	b5 2b       	or	r27, r21
    5cd8:	89 83       	std	Y+1, r24	; 0x01
    5cda:	9a 83       	std	Y+2, r25	; 0x02
    5cdc:	ab 83       	std	Y+3, r26	; 0x03
    5cde:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_BPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_BPIN, DIO_u8LOW) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    5ce0:	8f 81       	ldd	r24, Y+7	; 0x07
    5ce2:	48 2f       	mov	r20, r24
    5ce4:	50 e0       	ldi	r21, 0x00	; 0
    5ce6:	ca 01       	movw	r24, r20
    5ce8:	88 0f       	add	r24, r24
    5cea:	99 1f       	adc	r25, r25
    5cec:	9c 01       	movw	r18, r24
    5cee:	22 0f       	add	r18, r18
    5cf0:	33 1f       	adc	r19, r19
    5cf2:	22 0f       	add	r18, r18
    5cf4:	33 1f       	adc	r19, r19
    5cf6:	22 0f       	add	r18, r18
    5cf8:	33 1f       	adc	r19, r19
    5cfa:	82 0f       	add	r24, r18
    5cfc:	93 1f       	adc	r25, r19
    5cfe:	84 0f       	add	r24, r20
    5d00:	95 1f       	adc	r25, r21
    5d02:	fc 01       	movw	r30, r24
    5d04:	ea 57       	subi	r30, 0x7A	; 122
    5d06:	fe 4f       	sbci	r31, 0xFE	; 254
    5d08:	60 81       	ld	r22, Z
    5d0a:	8f 81       	ldd	r24, Y+7	; 0x07
    5d0c:	48 2f       	mov	r20, r24
    5d0e:	50 e0       	ldi	r21, 0x00	; 0
    5d10:	ca 01       	movw	r24, r20
    5d12:	88 0f       	add	r24, r24
    5d14:	99 1f       	adc	r25, r25
    5d16:	9c 01       	movw	r18, r24
    5d18:	22 0f       	add	r18, r18
    5d1a:	33 1f       	adc	r19, r19
    5d1c:	22 0f       	add	r18, r18
    5d1e:	33 1f       	adc	r19, r19
    5d20:	22 0f       	add	r18, r18
    5d22:	33 1f       	adc	r19, r19
    5d24:	82 0f       	add	r24, r18
    5d26:	93 1f       	adc	r25, r19
    5d28:	84 0f       	add	r24, r20
    5d2a:	95 1f       	adc	r25, r21
    5d2c:	fc 01       	movw	r30, r24
    5d2e:	e9 57       	subi	r30, 0x79	; 121
    5d30:	fe 4f       	sbci	r31, 0xFE	; 254
    5d32:	90 81       	ld	r25, Z
    5d34:	86 2f       	mov	r24, r22
    5d36:	69 2f       	mov	r22, r25
    5d38:	40 e0       	ldi	r20, 0x00	; 0
    5d3a:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5d3e:	28 2f       	mov	r18, r24
    5d40:	30 e0       	ldi	r19, 0x00	; 0
    5d42:	8d 81       	ldd	r24, Y+5	; 0x05
    5d44:	8d 5f       	subi	r24, 0xFD	; 253
    5d46:	8d 83       	std	Y+5, r24	; 0x05
    5d48:	8d 81       	ldd	r24, Y+5	; 0x05
    5d4a:	88 2f       	mov	r24, r24
    5d4c:	90 e0       	ldi	r25, 0x00	; 0
    5d4e:	a9 01       	movw	r20, r18
    5d50:	02 c0       	rjmp	.+4      	; 0x5d56 <Seven_Sement_enuTurnOFF+0x6e6>
    5d52:	44 0f       	add	r20, r20
    5d54:	55 1f       	adc	r21, r21
    5d56:	8a 95       	dec	r24
    5d58:	e2 f7       	brpl	.-8      	; 0x5d52 <Seven_Sement_enuTurnOFF+0x6e2>
    5d5a:	ca 01       	movw	r24, r20
    5d5c:	9c 01       	movw	r18, r24
    5d5e:	44 27       	eor	r20, r20
    5d60:	37 fd       	sbrc	r19, 7
    5d62:	40 95       	com	r20
    5d64:	54 2f       	mov	r21, r20
    5d66:	89 81       	ldd	r24, Y+1	; 0x01
    5d68:	9a 81       	ldd	r25, Y+2	; 0x02
    5d6a:	ab 81       	ldd	r26, Y+3	; 0x03
    5d6c:	bc 81       	ldd	r27, Y+4	; 0x04
    5d6e:	82 2b       	or	r24, r18
    5d70:	93 2b       	or	r25, r19
    5d72:	a4 2b       	or	r26, r20
    5d74:	b5 2b       	or	r27, r21
    5d76:	89 83       	std	Y+1, r24	; 0x01
    5d78:	9a 83       	std	Y+2, r25	; 0x02
    5d7a:	ab 83       	std	Y+3, r26	; 0x03
    5d7c:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CPIN, DIO_u8LOW) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    5d7e:	8f 81       	ldd	r24, Y+7	; 0x07
    5d80:	48 2f       	mov	r20, r24
    5d82:	50 e0       	ldi	r21, 0x00	; 0
    5d84:	ca 01       	movw	r24, r20
    5d86:	88 0f       	add	r24, r24
    5d88:	99 1f       	adc	r25, r25
    5d8a:	9c 01       	movw	r18, r24
    5d8c:	22 0f       	add	r18, r18
    5d8e:	33 1f       	adc	r19, r19
    5d90:	22 0f       	add	r18, r18
    5d92:	33 1f       	adc	r19, r19
    5d94:	22 0f       	add	r18, r18
    5d96:	33 1f       	adc	r19, r19
    5d98:	82 0f       	add	r24, r18
    5d9a:	93 1f       	adc	r25, r19
    5d9c:	84 0f       	add	r24, r20
    5d9e:	95 1f       	adc	r25, r21
    5da0:	fc 01       	movw	r30, r24
    5da2:	e8 57       	subi	r30, 0x78	; 120
    5da4:	fe 4f       	sbci	r31, 0xFE	; 254
    5da6:	60 81       	ld	r22, Z
    5da8:	8f 81       	ldd	r24, Y+7	; 0x07
    5daa:	48 2f       	mov	r20, r24
    5dac:	50 e0       	ldi	r21, 0x00	; 0
    5dae:	ca 01       	movw	r24, r20
    5db0:	88 0f       	add	r24, r24
    5db2:	99 1f       	adc	r25, r25
    5db4:	9c 01       	movw	r18, r24
    5db6:	22 0f       	add	r18, r18
    5db8:	33 1f       	adc	r19, r19
    5dba:	22 0f       	add	r18, r18
    5dbc:	33 1f       	adc	r19, r19
    5dbe:	22 0f       	add	r18, r18
    5dc0:	33 1f       	adc	r19, r19
    5dc2:	82 0f       	add	r24, r18
    5dc4:	93 1f       	adc	r25, r19
    5dc6:	84 0f       	add	r24, r20
    5dc8:	95 1f       	adc	r25, r21
    5dca:	fc 01       	movw	r30, r24
    5dcc:	e7 57       	subi	r30, 0x77	; 119
    5dce:	fe 4f       	sbci	r31, 0xFE	; 254
    5dd0:	90 81       	ld	r25, Z
    5dd2:	86 2f       	mov	r24, r22
    5dd4:	69 2f       	mov	r22, r25
    5dd6:	40 e0       	ldi	r20, 0x00	; 0
    5dd8:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5ddc:	28 2f       	mov	r18, r24
    5dde:	30 e0       	ldi	r19, 0x00	; 0
    5de0:	8d 81       	ldd	r24, Y+5	; 0x05
    5de2:	8d 5f       	subi	r24, 0xFD	; 253
    5de4:	8d 83       	std	Y+5, r24	; 0x05
    5de6:	8d 81       	ldd	r24, Y+5	; 0x05
    5de8:	88 2f       	mov	r24, r24
    5dea:	90 e0       	ldi	r25, 0x00	; 0
    5dec:	a9 01       	movw	r20, r18
    5dee:	02 c0       	rjmp	.+4      	; 0x5df4 <Seven_Sement_enuTurnOFF+0x784>
    5df0:	44 0f       	add	r20, r20
    5df2:	55 1f       	adc	r21, r21
    5df4:	8a 95       	dec	r24
    5df6:	e2 f7       	brpl	.-8      	; 0x5df0 <Seven_Sement_enuTurnOFF+0x780>
    5df8:	ca 01       	movw	r24, r20
    5dfa:	9c 01       	movw	r18, r24
    5dfc:	44 27       	eor	r20, r20
    5dfe:	37 fd       	sbrc	r19, 7
    5e00:	40 95       	com	r20
    5e02:	54 2f       	mov	r21, r20
    5e04:	89 81       	ldd	r24, Y+1	; 0x01
    5e06:	9a 81       	ldd	r25, Y+2	; 0x02
    5e08:	ab 81       	ldd	r26, Y+3	; 0x03
    5e0a:	bc 81       	ldd	r27, Y+4	; 0x04
    5e0c:	82 2b       	or	r24, r18
    5e0e:	93 2b       	or	r25, r19
    5e10:	a4 2b       	or	r26, r20
    5e12:	b5 2b       	or	r27, r21
    5e14:	89 83       	std	Y+1, r24	; 0x01
    5e16:	9a 83       	std	Y+2, r25	; 0x02
    5e18:	ab 83       	std	Y+3, r26	; 0x03
    5e1a:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DPIN, DIO_u8LOW) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    5e1c:	8f 81       	ldd	r24, Y+7	; 0x07
    5e1e:	48 2f       	mov	r20, r24
    5e20:	50 e0       	ldi	r21, 0x00	; 0
    5e22:	ca 01       	movw	r24, r20
    5e24:	88 0f       	add	r24, r24
    5e26:	99 1f       	adc	r25, r25
    5e28:	9c 01       	movw	r18, r24
    5e2a:	22 0f       	add	r18, r18
    5e2c:	33 1f       	adc	r19, r19
    5e2e:	22 0f       	add	r18, r18
    5e30:	33 1f       	adc	r19, r19
    5e32:	22 0f       	add	r18, r18
    5e34:	33 1f       	adc	r19, r19
    5e36:	82 0f       	add	r24, r18
    5e38:	93 1f       	adc	r25, r19
    5e3a:	84 0f       	add	r24, r20
    5e3c:	95 1f       	adc	r25, r21
    5e3e:	fc 01       	movw	r30, r24
    5e40:	e6 57       	subi	r30, 0x76	; 118
    5e42:	fe 4f       	sbci	r31, 0xFE	; 254
    5e44:	60 81       	ld	r22, Z
    5e46:	8f 81       	ldd	r24, Y+7	; 0x07
    5e48:	48 2f       	mov	r20, r24
    5e4a:	50 e0       	ldi	r21, 0x00	; 0
    5e4c:	ca 01       	movw	r24, r20
    5e4e:	88 0f       	add	r24, r24
    5e50:	99 1f       	adc	r25, r25
    5e52:	9c 01       	movw	r18, r24
    5e54:	22 0f       	add	r18, r18
    5e56:	33 1f       	adc	r19, r19
    5e58:	22 0f       	add	r18, r18
    5e5a:	33 1f       	adc	r19, r19
    5e5c:	22 0f       	add	r18, r18
    5e5e:	33 1f       	adc	r19, r19
    5e60:	82 0f       	add	r24, r18
    5e62:	93 1f       	adc	r25, r19
    5e64:	84 0f       	add	r24, r20
    5e66:	95 1f       	adc	r25, r21
    5e68:	fc 01       	movw	r30, r24
    5e6a:	e5 57       	subi	r30, 0x75	; 117
    5e6c:	fe 4f       	sbci	r31, 0xFE	; 254
    5e6e:	90 81       	ld	r25, Z
    5e70:	86 2f       	mov	r24, r22
    5e72:	69 2f       	mov	r22, r25
    5e74:	40 e0       	ldi	r20, 0x00	; 0
    5e76:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5e7a:	28 2f       	mov	r18, r24
    5e7c:	30 e0       	ldi	r19, 0x00	; 0
    5e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    5e80:	8d 5f       	subi	r24, 0xFD	; 253
    5e82:	8d 83       	std	Y+5, r24	; 0x05
    5e84:	8d 81       	ldd	r24, Y+5	; 0x05
    5e86:	88 2f       	mov	r24, r24
    5e88:	90 e0       	ldi	r25, 0x00	; 0
    5e8a:	a9 01       	movw	r20, r18
    5e8c:	02 c0       	rjmp	.+4      	; 0x5e92 <Seven_Sement_enuTurnOFF+0x822>
    5e8e:	44 0f       	add	r20, r20
    5e90:	55 1f       	adc	r21, r21
    5e92:	8a 95       	dec	r24
    5e94:	e2 f7       	brpl	.-8      	; 0x5e8e <Seven_Sement_enuTurnOFF+0x81e>
    5e96:	ca 01       	movw	r24, r20
    5e98:	9c 01       	movw	r18, r24
    5e9a:	44 27       	eor	r20, r20
    5e9c:	37 fd       	sbrc	r19, 7
    5e9e:	40 95       	com	r20
    5ea0:	54 2f       	mov	r21, r20
    5ea2:	89 81       	ldd	r24, Y+1	; 0x01
    5ea4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ea6:	ab 81       	ldd	r26, Y+3	; 0x03
    5ea8:	bc 81       	ldd	r27, Y+4	; 0x04
    5eaa:	82 2b       	or	r24, r18
    5eac:	93 2b       	or	r25, r19
    5eae:	a4 2b       	or	r26, r20
    5eb0:	b5 2b       	or	r27, r21
    5eb2:	89 83       	std	Y+1, r24	; 0x01
    5eb4:	9a 83       	std	Y+2, r25	; 0x02
    5eb6:	ab 83       	std	Y+3, r26	; 0x03
    5eb8:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPIN, DIO_u8LOW) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    5eba:	8f 81       	ldd	r24, Y+7	; 0x07
    5ebc:	48 2f       	mov	r20, r24
    5ebe:	50 e0       	ldi	r21, 0x00	; 0
    5ec0:	ca 01       	movw	r24, r20
    5ec2:	88 0f       	add	r24, r24
    5ec4:	99 1f       	adc	r25, r25
    5ec6:	9c 01       	movw	r18, r24
    5ec8:	22 0f       	add	r18, r18
    5eca:	33 1f       	adc	r19, r19
    5ecc:	22 0f       	add	r18, r18
    5ece:	33 1f       	adc	r19, r19
    5ed0:	22 0f       	add	r18, r18
    5ed2:	33 1f       	adc	r19, r19
    5ed4:	82 0f       	add	r24, r18
    5ed6:	93 1f       	adc	r25, r19
    5ed8:	84 0f       	add	r24, r20
    5eda:	95 1f       	adc	r25, r21
    5edc:	fc 01       	movw	r30, r24
    5ede:	e4 57       	subi	r30, 0x74	; 116
    5ee0:	fe 4f       	sbci	r31, 0xFE	; 254
    5ee2:	60 81       	ld	r22, Z
    5ee4:	8f 81       	ldd	r24, Y+7	; 0x07
    5ee6:	48 2f       	mov	r20, r24
    5ee8:	50 e0       	ldi	r21, 0x00	; 0
    5eea:	ca 01       	movw	r24, r20
    5eec:	88 0f       	add	r24, r24
    5eee:	99 1f       	adc	r25, r25
    5ef0:	9c 01       	movw	r18, r24
    5ef2:	22 0f       	add	r18, r18
    5ef4:	33 1f       	adc	r19, r19
    5ef6:	22 0f       	add	r18, r18
    5ef8:	33 1f       	adc	r19, r19
    5efa:	22 0f       	add	r18, r18
    5efc:	33 1f       	adc	r19, r19
    5efe:	82 0f       	add	r24, r18
    5f00:	93 1f       	adc	r25, r19
    5f02:	84 0f       	add	r24, r20
    5f04:	95 1f       	adc	r25, r21
    5f06:	fc 01       	movw	r30, r24
    5f08:	e3 57       	subi	r30, 0x73	; 115
    5f0a:	fe 4f       	sbci	r31, 0xFE	; 254
    5f0c:	90 81       	ld	r25, Z
    5f0e:	86 2f       	mov	r24, r22
    5f10:	69 2f       	mov	r22, r25
    5f12:	40 e0       	ldi	r20, 0x00	; 0
    5f14:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5f18:	28 2f       	mov	r18, r24
    5f1a:	30 e0       	ldi	r19, 0x00	; 0
    5f1c:	8d 81       	ldd	r24, Y+5	; 0x05
    5f1e:	8d 5f       	subi	r24, 0xFD	; 253
    5f20:	8d 83       	std	Y+5, r24	; 0x05
    5f22:	8d 81       	ldd	r24, Y+5	; 0x05
    5f24:	88 2f       	mov	r24, r24
    5f26:	90 e0       	ldi	r25, 0x00	; 0
    5f28:	a9 01       	movw	r20, r18
    5f2a:	02 c0       	rjmp	.+4      	; 0x5f30 <Seven_Sement_enuTurnOFF+0x8c0>
    5f2c:	44 0f       	add	r20, r20
    5f2e:	55 1f       	adc	r21, r21
    5f30:	8a 95       	dec	r24
    5f32:	e2 f7       	brpl	.-8      	; 0x5f2c <Seven_Sement_enuTurnOFF+0x8bc>
    5f34:	ca 01       	movw	r24, r20
    5f36:	9c 01       	movw	r18, r24
    5f38:	44 27       	eor	r20, r20
    5f3a:	37 fd       	sbrc	r19, 7
    5f3c:	40 95       	com	r20
    5f3e:	54 2f       	mov	r21, r20
    5f40:	89 81       	ldd	r24, Y+1	; 0x01
    5f42:	9a 81       	ldd	r25, Y+2	; 0x02
    5f44:	ab 81       	ldd	r26, Y+3	; 0x03
    5f46:	bc 81       	ldd	r27, Y+4	; 0x04
    5f48:	82 2b       	or	r24, r18
    5f4a:	93 2b       	or	r25, r19
    5f4c:	a4 2b       	or	r26, r20
    5f4e:	b5 2b       	or	r27, r21
    5f50:	89 83       	std	Y+1, r24	; 0x01
    5f52:	9a 83       	std	Y+2, r25	; 0x02
    5f54:	ab 83       	std	Y+3, r26	; 0x03
    5f56:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPIN, DIO_u8LOW) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    5f58:	8f 81       	ldd	r24, Y+7	; 0x07
    5f5a:	48 2f       	mov	r20, r24
    5f5c:	50 e0       	ldi	r21, 0x00	; 0
    5f5e:	ca 01       	movw	r24, r20
    5f60:	88 0f       	add	r24, r24
    5f62:	99 1f       	adc	r25, r25
    5f64:	9c 01       	movw	r18, r24
    5f66:	22 0f       	add	r18, r18
    5f68:	33 1f       	adc	r19, r19
    5f6a:	22 0f       	add	r18, r18
    5f6c:	33 1f       	adc	r19, r19
    5f6e:	22 0f       	add	r18, r18
    5f70:	33 1f       	adc	r19, r19
    5f72:	82 0f       	add	r24, r18
    5f74:	93 1f       	adc	r25, r19
    5f76:	84 0f       	add	r24, r20
    5f78:	95 1f       	adc	r25, r21
    5f7a:	fc 01       	movw	r30, r24
    5f7c:	e2 57       	subi	r30, 0x72	; 114
    5f7e:	fe 4f       	sbci	r31, 0xFE	; 254
    5f80:	60 81       	ld	r22, Z
    5f82:	8f 81       	ldd	r24, Y+7	; 0x07
    5f84:	48 2f       	mov	r20, r24
    5f86:	50 e0       	ldi	r21, 0x00	; 0
    5f88:	ca 01       	movw	r24, r20
    5f8a:	88 0f       	add	r24, r24
    5f8c:	99 1f       	adc	r25, r25
    5f8e:	9c 01       	movw	r18, r24
    5f90:	22 0f       	add	r18, r18
    5f92:	33 1f       	adc	r19, r19
    5f94:	22 0f       	add	r18, r18
    5f96:	33 1f       	adc	r19, r19
    5f98:	22 0f       	add	r18, r18
    5f9a:	33 1f       	adc	r19, r19
    5f9c:	82 0f       	add	r24, r18
    5f9e:	93 1f       	adc	r25, r19
    5fa0:	84 0f       	add	r24, r20
    5fa2:	95 1f       	adc	r25, r21
    5fa4:	fc 01       	movw	r30, r24
    5fa6:	e1 57       	subi	r30, 0x71	; 113
    5fa8:	fe 4f       	sbci	r31, 0xFE	; 254
    5faa:	90 81       	ld	r25, Z
    5fac:	86 2f       	mov	r24, r22
    5fae:	69 2f       	mov	r22, r25
    5fb0:	40 e0       	ldi	r20, 0x00	; 0
    5fb2:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5fb6:	28 2f       	mov	r18, r24
    5fb8:	30 e0       	ldi	r19, 0x00	; 0
    5fba:	8d 81       	ldd	r24, Y+5	; 0x05
    5fbc:	8d 5f       	subi	r24, 0xFD	; 253
    5fbe:	8d 83       	std	Y+5, r24	; 0x05
    5fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    5fc2:	88 2f       	mov	r24, r24
    5fc4:	90 e0       	ldi	r25, 0x00	; 0
    5fc6:	a9 01       	movw	r20, r18
    5fc8:	02 c0       	rjmp	.+4      	; 0x5fce <Seven_Sement_enuTurnOFF+0x95e>
    5fca:	44 0f       	add	r20, r20
    5fcc:	55 1f       	adc	r21, r21
    5fce:	8a 95       	dec	r24
    5fd0:	e2 f7       	brpl	.-8      	; 0x5fca <Seven_Sement_enuTurnOFF+0x95a>
    5fd2:	ca 01       	movw	r24, r20
    5fd4:	9c 01       	movw	r18, r24
    5fd6:	44 27       	eor	r20, r20
    5fd8:	37 fd       	sbrc	r19, 7
    5fda:	40 95       	com	r20
    5fdc:	54 2f       	mov	r21, r20
    5fde:	89 81       	ldd	r24, Y+1	; 0x01
    5fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    5fe2:	ab 81       	ldd	r26, Y+3	; 0x03
    5fe4:	bc 81       	ldd	r27, Y+4	; 0x04
    5fe6:	82 2b       	or	r24, r18
    5fe8:	93 2b       	or	r25, r19
    5fea:	a4 2b       	or	r26, r20
    5fec:	b5 2b       	or	r27, r21
    5fee:	89 83       	std	Y+1, r24	; 0x01
    5ff0:	9a 83       	std	Y+2, r25	; 0x02
    5ff2:	ab 83       	std	Y+3, r26	; 0x03
    5ff4:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPIN, DIO_u8LOW) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    5ff6:	8f 81       	ldd	r24, Y+7	; 0x07
    5ff8:	48 2f       	mov	r20, r24
    5ffa:	50 e0       	ldi	r21, 0x00	; 0
    5ffc:	ca 01       	movw	r24, r20
    5ffe:	88 0f       	add	r24, r24
    6000:	99 1f       	adc	r25, r25
    6002:	9c 01       	movw	r18, r24
    6004:	22 0f       	add	r18, r18
    6006:	33 1f       	adc	r19, r19
    6008:	22 0f       	add	r18, r18
    600a:	33 1f       	adc	r19, r19
    600c:	22 0f       	add	r18, r18
    600e:	33 1f       	adc	r19, r19
    6010:	82 0f       	add	r24, r18
    6012:	93 1f       	adc	r25, r19
    6014:	84 0f       	add	r24, r20
    6016:	95 1f       	adc	r25, r21
    6018:	fc 01       	movw	r30, r24
    601a:	e0 57       	subi	r30, 0x70	; 112
    601c:	fe 4f       	sbci	r31, 0xFE	; 254
    601e:	60 81       	ld	r22, Z
    6020:	8f 81       	ldd	r24, Y+7	; 0x07
    6022:	48 2f       	mov	r20, r24
    6024:	50 e0       	ldi	r21, 0x00	; 0
    6026:	ca 01       	movw	r24, r20
    6028:	88 0f       	add	r24, r24
    602a:	99 1f       	adc	r25, r25
    602c:	9c 01       	movw	r18, r24
    602e:	22 0f       	add	r18, r18
    6030:	33 1f       	adc	r19, r19
    6032:	22 0f       	add	r18, r18
    6034:	33 1f       	adc	r19, r19
    6036:	22 0f       	add	r18, r18
    6038:	33 1f       	adc	r19, r19
    603a:	82 0f       	add	r24, r18
    603c:	93 1f       	adc	r25, r19
    603e:	84 0f       	add	r24, r20
    6040:	95 1f       	adc	r25, r21
    6042:	fc 01       	movw	r30, r24
    6044:	ef 56       	subi	r30, 0x6F	; 111
    6046:	fe 4f       	sbci	r31, 0xFE	; 254
    6048:	90 81       	ld	r25, Z
    604a:	86 2f       	mov	r24, r22
    604c:	69 2f       	mov	r22, r25
    604e:	40 e0       	ldi	r20, 0x00	; 0
    6050:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6054:	28 2f       	mov	r18, r24
    6056:	30 e0       	ldi	r19, 0x00	; 0
    6058:	8d 81       	ldd	r24, Y+5	; 0x05
    605a:	8d 5f       	subi	r24, 0xFD	; 253
    605c:	8d 83       	std	Y+5, r24	; 0x05
    605e:	8d 81       	ldd	r24, Y+5	; 0x05
    6060:	88 2f       	mov	r24, r24
    6062:	90 e0       	ldi	r25, 0x00	; 0
    6064:	a9 01       	movw	r20, r18
    6066:	02 c0       	rjmp	.+4      	; 0x606c <Seven_Sement_enuTurnOFF+0x9fc>
    6068:	44 0f       	add	r20, r20
    606a:	55 1f       	adc	r21, r21
    606c:	8a 95       	dec	r24
    606e:	e2 f7       	brpl	.-8      	; 0x6068 <Seven_Sement_enuTurnOFF+0x9f8>
    6070:	ca 01       	movw	r24, r20
    6072:	9c 01       	movw	r18, r24
    6074:	44 27       	eor	r20, r20
    6076:	37 fd       	sbrc	r19, 7
    6078:	40 95       	com	r20
    607a:	54 2f       	mov	r21, r20
    607c:	89 81       	ldd	r24, Y+1	; 0x01
    607e:	9a 81       	ldd	r25, Y+2	; 0x02
    6080:	ab 81       	ldd	r26, Y+3	; 0x03
    6082:	bc 81       	ldd	r27, Y+4	; 0x04
    6084:	82 2b       	or	r24, r18
    6086:	93 2b       	or	r25, r19
    6088:	a4 2b       	or	r26, r20
    608a:	b5 2b       	or	r27, r21
    608c:	89 83       	std	Y+1, r24	; 0x01
    608e:	9a 83       	std	Y+2, r25	; 0x02
    6090:	ab 83       	std	Y+3, r26	; 0x03
    6092:	bc 83       	std	Y+4, r27	; 0x04
			
			if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PORT != NOT_CONNECTED && SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PIN != NOT_CONNECTED)
    6094:	8f 81       	ldd	r24, Y+7	; 0x07
    6096:	48 2f       	mov	r20, r24
    6098:	50 e0       	ldi	r21, 0x00	; 0
    609a:	ca 01       	movw	r24, r20
    609c:	88 0f       	add	r24, r24
    609e:	99 1f       	adc	r25, r25
    60a0:	9c 01       	movw	r18, r24
    60a2:	22 0f       	add	r18, r18
    60a4:	33 1f       	adc	r19, r19
    60a6:	22 0f       	add	r18, r18
    60a8:	33 1f       	adc	r19, r19
    60aa:	22 0f       	add	r18, r18
    60ac:	33 1f       	adc	r19, r19
    60ae:	82 0f       	add	r24, r18
    60b0:	93 1f       	adc	r25, r19
    60b2:	84 0f       	add	r24, r20
    60b4:	95 1f       	adc	r25, r21
    60b6:	fc 01       	movw	r30, r24
    60b8:	ec 56       	subi	r30, 0x6C	; 108
    60ba:	fe 4f       	sbci	r31, 0xFE	; 254
    60bc:	80 81       	ld	r24, Z
    60be:	8a 30       	cpi	r24, 0x0A	; 10
    60c0:	09 f4       	brne	.+2      	; 0x60c4 <Seven_Sement_enuTurnOFF+0xa54>
    60c2:	67 c0       	rjmp	.+206    	; 0x6192 <Seven_Sement_enuTurnOFF+0xb22>
    60c4:	8f 81       	ldd	r24, Y+7	; 0x07
    60c6:	48 2f       	mov	r20, r24
    60c8:	50 e0       	ldi	r21, 0x00	; 0
    60ca:	ca 01       	movw	r24, r20
    60cc:	88 0f       	add	r24, r24
    60ce:	99 1f       	adc	r25, r25
    60d0:	9c 01       	movw	r18, r24
    60d2:	22 0f       	add	r18, r18
    60d4:	33 1f       	adc	r19, r19
    60d6:	22 0f       	add	r18, r18
    60d8:	33 1f       	adc	r19, r19
    60da:	22 0f       	add	r18, r18
    60dc:	33 1f       	adc	r19, r19
    60de:	82 0f       	add	r24, r18
    60e0:	93 1f       	adc	r25, r19
    60e2:	84 0f       	add	r24, r20
    60e4:	95 1f       	adc	r25, r21
    60e6:	fc 01       	movw	r30, r24
    60e8:	eb 56       	subi	r30, 0x6B	; 107
    60ea:	fe 4f       	sbci	r31, 0xFE	; 254
    60ec:	80 81       	ld	r24, Z
    60ee:	8a 30       	cpi	r24, 0x0A	; 10
    60f0:	09 f4       	brne	.+2      	; 0x60f4 <Seven_Sement_enuTurnOFF+0xa84>
    60f2:	4f c0       	rjmp	.+158    	; 0x6192 <Seven_Sement_enuTurnOFF+0xb22>
			{
				Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PIN, DIO_u8LOW) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    60f4:	8f 81       	ldd	r24, Y+7	; 0x07
    60f6:	48 2f       	mov	r20, r24
    60f8:	50 e0       	ldi	r21, 0x00	; 0
    60fa:	ca 01       	movw	r24, r20
    60fc:	88 0f       	add	r24, r24
    60fe:	99 1f       	adc	r25, r25
    6100:	9c 01       	movw	r18, r24
    6102:	22 0f       	add	r18, r18
    6104:	33 1f       	adc	r19, r19
    6106:	22 0f       	add	r18, r18
    6108:	33 1f       	adc	r19, r19
    610a:	22 0f       	add	r18, r18
    610c:	33 1f       	adc	r19, r19
    610e:	82 0f       	add	r24, r18
    6110:	93 1f       	adc	r25, r19
    6112:	84 0f       	add	r24, r20
    6114:	95 1f       	adc	r25, r21
    6116:	fc 01       	movw	r30, r24
    6118:	ec 56       	subi	r30, 0x6C	; 108
    611a:	fe 4f       	sbci	r31, 0xFE	; 254
    611c:	60 81       	ld	r22, Z
    611e:	8f 81       	ldd	r24, Y+7	; 0x07
    6120:	48 2f       	mov	r20, r24
    6122:	50 e0       	ldi	r21, 0x00	; 0
    6124:	ca 01       	movw	r24, r20
    6126:	88 0f       	add	r24, r24
    6128:	99 1f       	adc	r25, r25
    612a:	9c 01       	movw	r18, r24
    612c:	22 0f       	add	r18, r18
    612e:	33 1f       	adc	r19, r19
    6130:	22 0f       	add	r18, r18
    6132:	33 1f       	adc	r19, r19
    6134:	22 0f       	add	r18, r18
    6136:	33 1f       	adc	r19, r19
    6138:	82 0f       	add	r24, r18
    613a:	93 1f       	adc	r25, r19
    613c:	84 0f       	add	r24, r20
    613e:	95 1f       	adc	r25, r21
    6140:	fc 01       	movw	r30, r24
    6142:	eb 56       	subi	r30, 0x6B	; 107
    6144:	fe 4f       	sbci	r31, 0xFE	; 254
    6146:	90 81       	ld	r25, Z
    6148:	86 2f       	mov	r24, r22
    614a:	69 2f       	mov	r22, r25
    614c:	40 e0       	ldi	r20, 0x00	; 0
    614e:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6152:	28 2f       	mov	r18, r24
    6154:	30 e0       	ldi	r19, 0x00	; 0
    6156:	8d 81       	ldd	r24, Y+5	; 0x05
    6158:	8d 5f       	subi	r24, 0xFD	; 253
    615a:	8d 83       	std	Y+5, r24	; 0x05
    615c:	8d 81       	ldd	r24, Y+5	; 0x05
    615e:	88 2f       	mov	r24, r24
    6160:	90 e0       	ldi	r25, 0x00	; 0
    6162:	a9 01       	movw	r20, r18
    6164:	02 c0       	rjmp	.+4      	; 0x616a <Seven_Sement_enuTurnOFF+0xafa>
    6166:	44 0f       	add	r20, r20
    6168:	55 1f       	adc	r21, r21
    616a:	8a 95       	dec	r24
    616c:	e2 f7       	brpl	.-8      	; 0x6166 <Seven_Sement_enuTurnOFF+0xaf6>
    616e:	ca 01       	movw	r24, r20
    6170:	9c 01       	movw	r18, r24
    6172:	44 27       	eor	r20, r20
    6174:	37 fd       	sbrc	r19, 7
    6176:	40 95       	com	r20
    6178:	54 2f       	mov	r21, r20
    617a:	89 81       	ldd	r24, Y+1	; 0x01
    617c:	9a 81       	ldd	r25, Y+2	; 0x02
    617e:	ab 81       	ldd	r26, Y+3	; 0x03
    6180:	bc 81       	ldd	r27, Y+4	; 0x04
    6182:	82 2b       	or	r24, r18
    6184:	93 2b       	or	r25, r19
    6186:	a4 2b       	or	r26, r20
    6188:	b5 2b       	or	r27, r21
    618a:	89 83       	std	Y+1, r24	; 0x01
    618c:	9a 83       	std	Y+2, r25	; 0x02
    618e:	ab 83       	std	Y+3, r26	; 0x03
    6190:	bc 83       	std	Y+4, r27	; 0x04
			}
		}
		
		for(Local_u8Iterator_Error = 0; Local_u8Iterator_Error < sizeof(Local_u32CheckError)*8; Local_u8Iterator_Error += ERROR_STATE_SIZE)
    6192:	1d 82       	std	Y+5, r1	; 0x05
    6194:	1d c0       	rjmp	.+58     	; 0x61d0 <Seven_Sement_enuTurnOFF+0xb60>
		{
			if(((Local_u32CheckError >> Local_u8Iterator_Error) & ERROR_STATE_MASK) != ES_OK)
    6196:	8d 81       	ldd	r24, Y+5	; 0x05
    6198:	28 2f       	mov	r18, r24
    619a:	30 e0       	ldi	r19, 0x00	; 0
    619c:	89 81       	ldd	r24, Y+1	; 0x01
    619e:	9a 81       	ldd	r25, Y+2	; 0x02
    61a0:	ab 81       	ldd	r26, Y+3	; 0x03
    61a2:	bc 81       	ldd	r27, Y+4	; 0x04
    61a4:	02 2e       	mov	r0, r18
    61a6:	04 c0       	rjmp	.+8      	; 0x61b0 <Seven_Sement_enuTurnOFF+0xb40>
    61a8:	b6 95       	lsr	r27
    61aa:	a7 95       	ror	r26
    61ac:	97 95       	ror	r25
    61ae:	87 95       	ror	r24
    61b0:	0a 94       	dec	r0
    61b2:	d2 f7       	brpl	.-12     	; 0x61a8 <Seven_Sement_enuTurnOFF+0xb38>
    61b4:	87 70       	andi	r24, 0x07	; 7
    61b6:	90 70       	andi	r25, 0x00	; 0
    61b8:	a0 70       	andi	r26, 0x00	; 0
    61ba:	b0 70       	andi	r27, 0x00	; 0
    61bc:	00 97       	sbiw	r24, 0x00	; 0
    61be:	a1 05       	cpc	r26, r1
    61c0:	b1 05       	cpc	r27, r1
    61c2:	19 f0       	breq	.+6      	; 0x61ca <Seven_Sement_enuTurnOFF+0xb5a>
			{
				return ES_NOK;
    61c4:	51 e0       	ldi	r21, 0x01	; 1
    61c6:	58 87       	std	Y+8, r21	; 0x08
    61c8:	0c c0       	rjmp	.+24     	; 0x61e2 <Seven_Sement_enuTurnOFF+0xb72>
			{
				Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PIN, DIO_u8LOW) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			}
		}
		
		for(Local_u8Iterator_Error = 0; Local_u8Iterator_Error < sizeof(Local_u32CheckError)*8; Local_u8Iterator_Error += ERROR_STATE_SIZE)
    61ca:	8d 81       	ldd	r24, Y+5	; 0x05
    61cc:	8d 5f       	subi	r24, 0xFD	; 253
    61ce:	8d 83       	std	Y+5, r24	; 0x05
    61d0:	8d 81       	ldd	r24, Y+5	; 0x05
    61d2:	80 32       	cpi	r24, 0x20	; 32
    61d4:	00 f3       	brcs	.-64     	; 0x6196 <Seven_Sement_enuTurnOFF+0xb26>
			if(((Local_u32CheckError >> Local_u8Iterator_Error) & ERROR_STATE_MASK) != ES_OK)
			{
				return ES_NOK;
			}
		}
		Local_enuErrorState = ES_OK;
    61d6:	1e 82       	std	Y+6, r1	; 0x06
    61d8:	02 c0       	rjmp	.+4      	; 0x61de <Seven_Sement_enuTurnOFF+0xb6e>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    61da:	83 e0       	ldi	r24, 0x03	; 3
    61dc:	8e 83       	std	Y+6, r24	; 0x06
	}
	
	return Local_enuErrorState;
    61de:	8e 81       	ldd	r24, Y+6	; 0x06
    61e0:	88 87       	std	Y+8, r24	; 0x08
    61e2:	88 85       	ldd	r24, Y+8	; 0x08
    61e4:	28 96       	adiw	r28, 0x08	; 8
    61e6:	0f b6       	in	r0, 0x3f	; 63
    61e8:	f8 94       	cli
    61ea:	de bf       	out	0x3e, r29	; 62
    61ec:	0f be       	out	0x3f, r0	; 63
    61ee:	cd bf       	out	0x3d, r28	; 61
    61f0:	cf 91       	pop	r28
    61f2:	df 91       	pop	r29
    61f4:	08 95       	ret

000061f6 <LED_enuINIT>:

#include "LED_priv.h"
#include "LED_config.h"

ES_t LED_enuINIT(LED_t *Copy_pAstrLedConfig)
{
    61f6:	df 93       	push	r29
    61f8:	cf 93       	push	r28
    61fa:	00 d0       	rcall	.+0      	; 0x61fc <LED_enuINIT+0x6>
    61fc:	00 d0       	rcall	.+0      	; 0x61fe <LED_enuINIT+0x8>
    61fe:	cd b7       	in	r28, 0x3d	; 61
    6200:	de b7       	in	r29, 0x3e	; 62
    6202:	9c 83       	std	Y+4, r25	; 0x04
    6204:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    6206:	81 e0       	ldi	r24, 0x01	; 1
    6208:	8a 83       	std	Y+2, r24	; 0x02
	
	if(Copy_pAstrLedConfig != NULL)
    620a:	8b 81       	ldd	r24, Y+3	; 0x03
    620c:	9c 81       	ldd	r25, Y+4	; 0x04
    620e:	00 97       	sbiw	r24, 0x00	; 0
    6210:	09 f4       	brne	.+2      	; 0x6214 <LED_enuINIT+0x1e>
    6212:	21 c1       	rjmp	.+578    	; 0x6456 <LED_enuINIT+0x260>
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < LED_NUM; Local_u8Iterator++)
    6214:	19 82       	std	Y+1, r1	; 0x01
    6216:	1a c1       	rjmp	.+564    	; 0x644c <LED_enuINIT+0x256>
		{
			DIO_enuSetPinDirection(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8OUTPUT);
    6218:	89 81       	ldd	r24, Y+1	; 0x01
    621a:	88 2f       	mov	r24, r24
    621c:	90 e0       	ldi	r25, 0x00	; 0
    621e:	9c 01       	movw	r18, r24
    6220:	22 0f       	add	r18, r18
    6222:	33 1f       	adc	r19, r19
    6224:	22 0f       	add	r18, r18
    6226:	33 1f       	adc	r19, r19
    6228:	8b 81       	ldd	r24, Y+3	; 0x03
    622a:	9c 81       	ldd	r25, Y+4	; 0x04
    622c:	fc 01       	movw	r30, r24
    622e:	e2 0f       	add	r30, r18
    6230:	f3 1f       	adc	r31, r19
    6232:	40 81       	ld	r20, Z
    6234:	89 81       	ldd	r24, Y+1	; 0x01
    6236:	88 2f       	mov	r24, r24
    6238:	90 e0       	ldi	r25, 0x00	; 0
    623a:	9c 01       	movw	r18, r24
    623c:	22 0f       	add	r18, r18
    623e:	33 1f       	adc	r19, r19
    6240:	22 0f       	add	r18, r18
    6242:	33 1f       	adc	r19, r19
    6244:	8b 81       	ldd	r24, Y+3	; 0x03
    6246:	9c 81       	ldd	r25, Y+4	; 0x04
    6248:	fc 01       	movw	r30, r24
    624a:	e2 0f       	add	r30, r18
    624c:	f3 1f       	adc	r31, r19
    624e:	91 81       	ldd	r25, Z+1	; 0x01
    6250:	84 2f       	mov	r24, r20
    6252:	69 2f       	mov	r22, r25
    6254:	41 e0       	ldi	r20, 0x01	; 1
    6256:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
			if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8Connection == LED_u8SINK)
    625a:	89 81       	ldd	r24, Y+1	; 0x01
    625c:	88 2f       	mov	r24, r24
    625e:	90 e0       	ldi	r25, 0x00	; 0
    6260:	9c 01       	movw	r18, r24
    6262:	22 0f       	add	r18, r18
    6264:	33 1f       	adc	r19, r19
    6266:	22 0f       	add	r18, r18
    6268:	33 1f       	adc	r19, r19
    626a:	8b 81       	ldd	r24, Y+3	; 0x03
    626c:	9c 81       	ldd	r25, Y+4	; 0x04
    626e:	fc 01       	movw	r30, r24
    6270:	e2 0f       	add	r30, r18
    6272:	f3 1f       	adc	r31, r19
    6274:	82 81       	ldd	r24, Z+2	; 0x02
    6276:	8c 30       	cpi	r24, 0x0C	; 12
    6278:	09 f0       	breq	.+2      	; 0x627c <LED_enuINIT+0x86>
    627a:	69 c0       	rjmp	.+210    	; 0x634e <LED_enuINIT+0x158>
			{
				if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_u8ON)
    627c:	89 81       	ldd	r24, Y+1	; 0x01
    627e:	88 2f       	mov	r24, r24
    6280:	90 e0       	ldi	r25, 0x00	; 0
    6282:	9c 01       	movw	r18, r24
    6284:	22 0f       	add	r18, r18
    6286:	33 1f       	adc	r19, r19
    6288:	22 0f       	add	r18, r18
    628a:	33 1f       	adc	r19, r19
    628c:	8b 81       	ldd	r24, Y+3	; 0x03
    628e:	9c 81       	ldd	r25, Y+4	; 0x04
    6290:	fc 01       	movw	r30, r24
    6292:	e2 0f       	add	r30, r18
    6294:	f3 1f       	adc	r31, r19
    6296:	83 81       	ldd	r24, Z+3	; 0x03
    6298:	8a 30       	cpi	r24, 0x0A	; 10
    629a:	19 f5       	brne	.+70     	; 0x62e2 <LED_enuINIT+0xec>
				{
					Local_enuErrorState = DIO_enuSetPinVal(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8LOW);
    629c:	89 81       	ldd	r24, Y+1	; 0x01
    629e:	88 2f       	mov	r24, r24
    62a0:	90 e0       	ldi	r25, 0x00	; 0
    62a2:	9c 01       	movw	r18, r24
    62a4:	22 0f       	add	r18, r18
    62a6:	33 1f       	adc	r19, r19
    62a8:	22 0f       	add	r18, r18
    62aa:	33 1f       	adc	r19, r19
    62ac:	8b 81       	ldd	r24, Y+3	; 0x03
    62ae:	9c 81       	ldd	r25, Y+4	; 0x04
    62b0:	fc 01       	movw	r30, r24
    62b2:	e2 0f       	add	r30, r18
    62b4:	f3 1f       	adc	r31, r19
    62b6:	40 81       	ld	r20, Z
    62b8:	89 81       	ldd	r24, Y+1	; 0x01
    62ba:	88 2f       	mov	r24, r24
    62bc:	90 e0       	ldi	r25, 0x00	; 0
    62be:	9c 01       	movw	r18, r24
    62c0:	22 0f       	add	r18, r18
    62c2:	33 1f       	adc	r19, r19
    62c4:	22 0f       	add	r18, r18
    62c6:	33 1f       	adc	r19, r19
    62c8:	8b 81       	ldd	r24, Y+3	; 0x03
    62ca:	9c 81       	ldd	r25, Y+4	; 0x04
    62cc:	fc 01       	movw	r30, r24
    62ce:	e2 0f       	add	r30, r18
    62d0:	f3 1f       	adc	r31, r19
    62d2:	91 81       	ldd	r25, Z+1	; 0x01
    62d4:	84 2f       	mov	r24, r20
    62d6:	69 2f       	mov	r22, r25
    62d8:	40 e0       	ldi	r20, 0x00	; 0
    62da:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    62de:	8a 83       	std	Y+2, r24	; 0x02
    62e0:	b2 c0       	rjmp	.+356    	; 0x6446 <LED_enuINIT+0x250>
				}
				else if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_u8OFF)
    62e2:	89 81       	ldd	r24, Y+1	; 0x01
    62e4:	88 2f       	mov	r24, r24
    62e6:	90 e0       	ldi	r25, 0x00	; 0
    62e8:	9c 01       	movw	r18, r24
    62ea:	22 0f       	add	r18, r18
    62ec:	33 1f       	adc	r19, r19
    62ee:	22 0f       	add	r18, r18
    62f0:	33 1f       	adc	r19, r19
    62f2:	8b 81       	ldd	r24, Y+3	; 0x03
    62f4:	9c 81       	ldd	r25, Y+4	; 0x04
    62f6:	fc 01       	movw	r30, r24
    62f8:	e2 0f       	add	r30, r18
    62fa:	f3 1f       	adc	r31, r19
    62fc:	83 81       	ldd	r24, Z+3	; 0x03
    62fe:	8b 30       	cpi	r24, 0x0B	; 11
    6300:	19 f5       	brne	.+70     	; 0x6348 <LED_enuINIT+0x152>
				{
					Local_enuErrorState = DIO_enuSetPinVal(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8HIGH);
    6302:	89 81       	ldd	r24, Y+1	; 0x01
    6304:	88 2f       	mov	r24, r24
    6306:	90 e0       	ldi	r25, 0x00	; 0
    6308:	9c 01       	movw	r18, r24
    630a:	22 0f       	add	r18, r18
    630c:	33 1f       	adc	r19, r19
    630e:	22 0f       	add	r18, r18
    6310:	33 1f       	adc	r19, r19
    6312:	8b 81       	ldd	r24, Y+3	; 0x03
    6314:	9c 81       	ldd	r25, Y+4	; 0x04
    6316:	fc 01       	movw	r30, r24
    6318:	e2 0f       	add	r30, r18
    631a:	f3 1f       	adc	r31, r19
    631c:	40 81       	ld	r20, Z
    631e:	89 81       	ldd	r24, Y+1	; 0x01
    6320:	88 2f       	mov	r24, r24
    6322:	90 e0       	ldi	r25, 0x00	; 0
    6324:	9c 01       	movw	r18, r24
    6326:	22 0f       	add	r18, r18
    6328:	33 1f       	adc	r19, r19
    632a:	22 0f       	add	r18, r18
    632c:	33 1f       	adc	r19, r19
    632e:	8b 81       	ldd	r24, Y+3	; 0x03
    6330:	9c 81       	ldd	r25, Y+4	; 0x04
    6332:	fc 01       	movw	r30, r24
    6334:	e2 0f       	add	r30, r18
    6336:	f3 1f       	adc	r31, r19
    6338:	91 81       	ldd	r25, Z+1	; 0x01
    633a:	84 2f       	mov	r24, r20
    633c:	69 2f       	mov	r22, r25
    633e:	41 e0       	ldi	r20, 0x01	; 1
    6340:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6344:	8a 83       	std	Y+2, r24	; 0x02
    6346:	7f c0       	rjmp	.+254    	; 0x6446 <LED_enuINIT+0x250>
				}
				else
				{
					Local_enuErrorState = ES_OUT_OF_RANGE;
    6348:	83 e0       	ldi	r24, 0x03	; 3
    634a:	8a 83       	std	Y+2, r24	; 0x02
    634c:	7c c0       	rjmp	.+248    	; 0x6446 <LED_enuINIT+0x250>
				}
			}
			else if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8Connection == LED_u8SOURCE)
    634e:	89 81       	ldd	r24, Y+1	; 0x01
    6350:	88 2f       	mov	r24, r24
    6352:	90 e0       	ldi	r25, 0x00	; 0
    6354:	9c 01       	movw	r18, r24
    6356:	22 0f       	add	r18, r18
    6358:	33 1f       	adc	r19, r19
    635a:	22 0f       	add	r18, r18
    635c:	33 1f       	adc	r19, r19
    635e:	8b 81       	ldd	r24, Y+3	; 0x03
    6360:	9c 81       	ldd	r25, Y+4	; 0x04
    6362:	fc 01       	movw	r30, r24
    6364:	e2 0f       	add	r30, r18
    6366:	f3 1f       	adc	r31, r19
    6368:	82 81       	ldd	r24, Z+2	; 0x02
    636a:	8d 30       	cpi	r24, 0x0D	; 13
    636c:	09 f0       	breq	.+2      	; 0x6370 <LED_enuINIT+0x17a>
    636e:	69 c0       	rjmp	.+210    	; 0x6442 <LED_enuINIT+0x24c>
			{
				if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_u8ON)
    6370:	89 81       	ldd	r24, Y+1	; 0x01
    6372:	88 2f       	mov	r24, r24
    6374:	90 e0       	ldi	r25, 0x00	; 0
    6376:	9c 01       	movw	r18, r24
    6378:	22 0f       	add	r18, r18
    637a:	33 1f       	adc	r19, r19
    637c:	22 0f       	add	r18, r18
    637e:	33 1f       	adc	r19, r19
    6380:	8b 81       	ldd	r24, Y+3	; 0x03
    6382:	9c 81       	ldd	r25, Y+4	; 0x04
    6384:	fc 01       	movw	r30, r24
    6386:	e2 0f       	add	r30, r18
    6388:	f3 1f       	adc	r31, r19
    638a:	83 81       	ldd	r24, Z+3	; 0x03
    638c:	8a 30       	cpi	r24, 0x0A	; 10
    638e:	19 f5       	brne	.+70     	; 0x63d6 <LED_enuINIT+0x1e0>
				{
					Local_enuErrorState = DIO_enuSetPinVal(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8HIGH);
    6390:	89 81       	ldd	r24, Y+1	; 0x01
    6392:	88 2f       	mov	r24, r24
    6394:	90 e0       	ldi	r25, 0x00	; 0
    6396:	9c 01       	movw	r18, r24
    6398:	22 0f       	add	r18, r18
    639a:	33 1f       	adc	r19, r19
    639c:	22 0f       	add	r18, r18
    639e:	33 1f       	adc	r19, r19
    63a0:	8b 81       	ldd	r24, Y+3	; 0x03
    63a2:	9c 81       	ldd	r25, Y+4	; 0x04
    63a4:	fc 01       	movw	r30, r24
    63a6:	e2 0f       	add	r30, r18
    63a8:	f3 1f       	adc	r31, r19
    63aa:	40 81       	ld	r20, Z
    63ac:	89 81       	ldd	r24, Y+1	; 0x01
    63ae:	88 2f       	mov	r24, r24
    63b0:	90 e0       	ldi	r25, 0x00	; 0
    63b2:	9c 01       	movw	r18, r24
    63b4:	22 0f       	add	r18, r18
    63b6:	33 1f       	adc	r19, r19
    63b8:	22 0f       	add	r18, r18
    63ba:	33 1f       	adc	r19, r19
    63bc:	8b 81       	ldd	r24, Y+3	; 0x03
    63be:	9c 81       	ldd	r25, Y+4	; 0x04
    63c0:	fc 01       	movw	r30, r24
    63c2:	e2 0f       	add	r30, r18
    63c4:	f3 1f       	adc	r31, r19
    63c6:	91 81       	ldd	r25, Z+1	; 0x01
    63c8:	84 2f       	mov	r24, r20
    63ca:	69 2f       	mov	r22, r25
    63cc:	41 e0       	ldi	r20, 0x01	; 1
    63ce:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    63d2:	8a 83       	std	Y+2, r24	; 0x02
    63d4:	38 c0       	rjmp	.+112    	; 0x6446 <LED_enuINIT+0x250>
				}
				else if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_u8OFF)
    63d6:	89 81       	ldd	r24, Y+1	; 0x01
    63d8:	88 2f       	mov	r24, r24
    63da:	90 e0       	ldi	r25, 0x00	; 0
    63dc:	9c 01       	movw	r18, r24
    63de:	22 0f       	add	r18, r18
    63e0:	33 1f       	adc	r19, r19
    63e2:	22 0f       	add	r18, r18
    63e4:	33 1f       	adc	r19, r19
    63e6:	8b 81       	ldd	r24, Y+3	; 0x03
    63e8:	9c 81       	ldd	r25, Y+4	; 0x04
    63ea:	fc 01       	movw	r30, r24
    63ec:	e2 0f       	add	r30, r18
    63ee:	f3 1f       	adc	r31, r19
    63f0:	83 81       	ldd	r24, Z+3	; 0x03
    63f2:	8b 30       	cpi	r24, 0x0B	; 11
    63f4:	19 f5       	brne	.+70     	; 0x643c <LED_enuINIT+0x246>
				{
					Local_enuErrorState = DIO_enuSetPinVal(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8LOW);
    63f6:	89 81       	ldd	r24, Y+1	; 0x01
    63f8:	88 2f       	mov	r24, r24
    63fa:	90 e0       	ldi	r25, 0x00	; 0
    63fc:	9c 01       	movw	r18, r24
    63fe:	22 0f       	add	r18, r18
    6400:	33 1f       	adc	r19, r19
    6402:	22 0f       	add	r18, r18
    6404:	33 1f       	adc	r19, r19
    6406:	8b 81       	ldd	r24, Y+3	; 0x03
    6408:	9c 81       	ldd	r25, Y+4	; 0x04
    640a:	fc 01       	movw	r30, r24
    640c:	e2 0f       	add	r30, r18
    640e:	f3 1f       	adc	r31, r19
    6410:	40 81       	ld	r20, Z
    6412:	89 81       	ldd	r24, Y+1	; 0x01
    6414:	88 2f       	mov	r24, r24
    6416:	90 e0       	ldi	r25, 0x00	; 0
    6418:	9c 01       	movw	r18, r24
    641a:	22 0f       	add	r18, r18
    641c:	33 1f       	adc	r19, r19
    641e:	22 0f       	add	r18, r18
    6420:	33 1f       	adc	r19, r19
    6422:	8b 81       	ldd	r24, Y+3	; 0x03
    6424:	9c 81       	ldd	r25, Y+4	; 0x04
    6426:	fc 01       	movw	r30, r24
    6428:	e2 0f       	add	r30, r18
    642a:	f3 1f       	adc	r31, r19
    642c:	91 81       	ldd	r25, Z+1	; 0x01
    642e:	84 2f       	mov	r24, r20
    6430:	69 2f       	mov	r22, r25
    6432:	40 e0       	ldi	r20, 0x00	; 0
    6434:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6438:	8a 83       	std	Y+2, r24	; 0x02
    643a:	05 c0       	rjmp	.+10     	; 0x6446 <LED_enuINIT+0x250>
				}
				else
				{
					Local_enuErrorState = ES_OUT_OF_RANGE;
    643c:	83 e0       	ldi	r24, 0x03	; 3
    643e:	8a 83       	std	Y+2, r24	; 0x02
    6440:	02 c0       	rjmp	.+4      	; 0x6446 <LED_enuINIT+0x250>
				}
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    6442:	83 e0       	ldi	r24, 0x03	; 3
    6444:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_pAstrLedConfig != NULL)
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < LED_NUM; Local_u8Iterator++)
    6446:	89 81       	ldd	r24, Y+1	; 0x01
    6448:	8f 5f       	subi	r24, 0xFF	; 255
    644a:	89 83       	std	Y+1, r24	; 0x01
    644c:	89 81       	ldd	r24, Y+1	; 0x01
    644e:	88 30       	cpi	r24, 0x08	; 8
    6450:	08 f4       	brcc	.+2      	; 0x6454 <LED_enuINIT+0x25e>
    6452:	e2 ce       	rjmp	.-572    	; 0x6218 <LED_enuINIT+0x22>
    6454:	02 c0       	rjmp	.+4      	; 0x645a <LED_enuINIT+0x264>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    6456:	82 e0       	ldi	r24, 0x02	; 2
    6458:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	return Local_enuErrorState;
    645a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    645c:	0f 90       	pop	r0
    645e:	0f 90       	pop	r0
    6460:	0f 90       	pop	r0
    6462:	0f 90       	pop	r0
    6464:	cf 91       	pop	r28
    6466:	df 91       	pop	r29
    6468:	08 95       	ret

0000646a <LED_enuTurnON>:

ES_t LED_enuTurnON(LED_t *Copy_pstrLedID)
{
    646a:	df 93       	push	r29
    646c:	cf 93       	push	r28
    646e:	00 d0       	rcall	.+0      	; 0x6470 <LED_enuTurnON+0x6>
    6470:	0f 92       	push	r0
    6472:	cd b7       	in	r28, 0x3d	; 61
    6474:	de b7       	in	r29, 0x3e	; 62
    6476:	9b 83       	std	Y+3, r25	; 0x03
    6478:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    647a:	81 e0       	ldi	r24, 0x01	; 1
    647c:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_pstrLedID != NULL)
    647e:	8a 81       	ldd	r24, Y+2	; 0x02
    6480:	9b 81       	ldd	r25, Y+3	; 0x03
    6482:	00 97       	sbiw	r24, 0x00	; 0
    6484:	79 f1       	breq	.+94     	; 0x64e4 <LED_enuTurnON+0x7a>
	{
		DIO_enuSetPinDirection(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8OUTPUT);
    6486:	ea 81       	ldd	r30, Y+2	; 0x02
    6488:	fb 81       	ldd	r31, Y+3	; 0x03
    648a:	80 81       	ld	r24, Z
    648c:	ea 81       	ldd	r30, Y+2	; 0x02
    648e:	fb 81       	ldd	r31, Y+3	; 0x03
    6490:	91 81       	ldd	r25, Z+1	; 0x01
    6492:	69 2f       	mov	r22, r25
    6494:	41 e0       	ldi	r20, 0x01	; 1
    6496:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
		if(Copy_pstrLedID->LED_u8Connection == LED_u8SINK)
    649a:	ea 81       	ldd	r30, Y+2	; 0x02
    649c:	fb 81       	ldd	r31, Y+3	; 0x03
    649e:	82 81       	ldd	r24, Z+2	; 0x02
    64a0:	8c 30       	cpi	r24, 0x0C	; 12
    64a2:	61 f4       	brne	.+24     	; 0x64bc <LED_enuTurnON+0x52>
		{
			Local_enuErrorState = DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8LOW);
    64a4:	ea 81       	ldd	r30, Y+2	; 0x02
    64a6:	fb 81       	ldd	r31, Y+3	; 0x03
    64a8:	80 81       	ld	r24, Z
    64aa:	ea 81       	ldd	r30, Y+2	; 0x02
    64ac:	fb 81       	ldd	r31, Y+3	; 0x03
    64ae:	91 81       	ldd	r25, Z+1	; 0x01
    64b0:	69 2f       	mov	r22, r25
    64b2:	40 e0       	ldi	r20, 0x00	; 0
    64b4:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    64b8:	89 83       	std	Y+1, r24	; 0x01
    64ba:	16 c0       	rjmp	.+44     	; 0x64e8 <LED_enuTurnON+0x7e>
		}
		else if(Copy_pstrLedID->LED_u8Connection == LED_u8SOURCE)
    64bc:	ea 81       	ldd	r30, Y+2	; 0x02
    64be:	fb 81       	ldd	r31, Y+3	; 0x03
    64c0:	82 81       	ldd	r24, Z+2	; 0x02
    64c2:	8d 30       	cpi	r24, 0x0D	; 13
    64c4:	61 f4       	brne	.+24     	; 0x64de <LED_enuTurnON+0x74>
		{
			Local_enuErrorState = DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8HIGH);
    64c6:	ea 81       	ldd	r30, Y+2	; 0x02
    64c8:	fb 81       	ldd	r31, Y+3	; 0x03
    64ca:	80 81       	ld	r24, Z
    64cc:	ea 81       	ldd	r30, Y+2	; 0x02
    64ce:	fb 81       	ldd	r31, Y+3	; 0x03
    64d0:	91 81       	ldd	r25, Z+1	; 0x01
    64d2:	69 2f       	mov	r22, r25
    64d4:	41 e0       	ldi	r20, 0x01	; 1
    64d6:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    64da:	89 83       	std	Y+1, r24	; 0x01
    64dc:	05 c0       	rjmp	.+10     	; 0x64e8 <LED_enuTurnON+0x7e>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    64de:	83 e0       	ldi	r24, 0x03	; 3
    64e0:	89 83       	std	Y+1, r24	; 0x01
    64e2:	02 c0       	rjmp	.+4      	; 0x64e8 <LED_enuTurnON+0x7e>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    64e4:	82 e0       	ldi	r24, 0x02	; 2
    64e6:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    64e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    64ea:	0f 90       	pop	r0
    64ec:	0f 90       	pop	r0
    64ee:	0f 90       	pop	r0
    64f0:	cf 91       	pop	r28
    64f2:	df 91       	pop	r29
    64f4:	08 95       	ret

000064f6 <LED_enuTurnOFF>:

ES_t LED_enuTurnOFF(LED_t *Copy_pstrLedID)
{
    64f6:	df 93       	push	r29
    64f8:	cf 93       	push	r28
    64fa:	00 d0       	rcall	.+0      	; 0x64fc <LED_enuTurnOFF+0x6>
    64fc:	0f 92       	push	r0
    64fe:	cd b7       	in	r28, 0x3d	; 61
    6500:	de b7       	in	r29, 0x3e	; 62
    6502:	9b 83       	std	Y+3, r25	; 0x03
    6504:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    6506:	81 e0       	ldi	r24, 0x01	; 1
    6508:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_pstrLedID != NULL)
    650a:	8a 81       	ldd	r24, Y+2	; 0x02
    650c:	9b 81       	ldd	r25, Y+3	; 0x03
    650e:	00 97       	sbiw	r24, 0x00	; 0
    6510:	79 f1       	breq	.+94     	; 0x6570 <LED_enuTurnOFF+0x7a>
	{
		DIO_enuSetPinDirection(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8OUTPUT);
    6512:	ea 81       	ldd	r30, Y+2	; 0x02
    6514:	fb 81       	ldd	r31, Y+3	; 0x03
    6516:	80 81       	ld	r24, Z
    6518:	ea 81       	ldd	r30, Y+2	; 0x02
    651a:	fb 81       	ldd	r31, Y+3	; 0x03
    651c:	91 81       	ldd	r25, Z+1	; 0x01
    651e:	69 2f       	mov	r22, r25
    6520:	41 e0       	ldi	r20, 0x01	; 1
    6522:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
		if(Copy_pstrLedID->LED_u8Connection == LED_u8SINK)
    6526:	ea 81       	ldd	r30, Y+2	; 0x02
    6528:	fb 81       	ldd	r31, Y+3	; 0x03
    652a:	82 81       	ldd	r24, Z+2	; 0x02
    652c:	8c 30       	cpi	r24, 0x0C	; 12
    652e:	61 f4       	brne	.+24     	; 0x6548 <LED_enuTurnOFF+0x52>
		{
			Local_enuErrorState = DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8HIGH);
    6530:	ea 81       	ldd	r30, Y+2	; 0x02
    6532:	fb 81       	ldd	r31, Y+3	; 0x03
    6534:	80 81       	ld	r24, Z
    6536:	ea 81       	ldd	r30, Y+2	; 0x02
    6538:	fb 81       	ldd	r31, Y+3	; 0x03
    653a:	91 81       	ldd	r25, Z+1	; 0x01
    653c:	69 2f       	mov	r22, r25
    653e:	41 e0       	ldi	r20, 0x01	; 1
    6540:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6544:	89 83       	std	Y+1, r24	; 0x01
    6546:	16 c0       	rjmp	.+44     	; 0x6574 <LED_enuTurnOFF+0x7e>
		}
		else if(Copy_pstrLedID->LED_u8Connection == LED_u8SOURCE)
    6548:	ea 81       	ldd	r30, Y+2	; 0x02
    654a:	fb 81       	ldd	r31, Y+3	; 0x03
    654c:	82 81       	ldd	r24, Z+2	; 0x02
    654e:	8d 30       	cpi	r24, 0x0D	; 13
    6550:	61 f4       	brne	.+24     	; 0x656a <LED_enuTurnOFF+0x74>
		{
			Local_enuErrorState = DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8LOW);
    6552:	ea 81       	ldd	r30, Y+2	; 0x02
    6554:	fb 81       	ldd	r31, Y+3	; 0x03
    6556:	80 81       	ld	r24, Z
    6558:	ea 81       	ldd	r30, Y+2	; 0x02
    655a:	fb 81       	ldd	r31, Y+3	; 0x03
    655c:	91 81       	ldd	r25, Z+1	; 0x01
    655e:	69 2f       	mov	r22, r25
    6560:	40 e0       	ldi	r20, 0x00	; 0
    6562:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6566:	89 83       	std	Y+1, r24	; 0x01
    6568:	05 c0       	rjmp	.+10     	; 0x6574 <LED_enuTurnOFF+0x7e>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    656a:	83 e0       	ldi	r24, 0x03	; 3
    656c:	89 83       	std	Y+1, r24	; 0x01
    656e:	02 c0       	rjmp	.+4      	; 0x6574 <LED_enuTurnOFF+0x7e>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    6570:	82 e0       	ldi	r24, 0x02	; 2
    6572:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    6574:	89 81       	ldd	r24, Y+1	; 0x01
}
    6576:	0f 90       	pop	r0
    6578:	0f 90       	pop	r0
    657a:	0f 90       	pop	r0
    657c:	cf 91       	pop	r28
    657e:	df 91       	pop	r29
    6580:	08 95       	ret

00006582 <LDR_enuInit>:
/** Return Type     : ES_t enum.                                            **/
/** Arguments       : LDR_t* Copy_PstrLDRconfig.                            **/
/** Brief           : Initializing LDR configuration (Config of pin)        **/
/*****************************************************************************/
/*****************************************************************************/
ES_t LDR_enuInit(LDR_t* Copy_PstrLDRconfig) {
    6582:	df 93       	push	r29
    6584:	cf 93       	push	r28
    6586:	00 d0       	rcall	.+0      	; 0x6588 <LDR_enuInit+0x6>
    6588:	00 d0       	rcall	.+0      	; 0x658a <LDR_enuInit+0x8>
    658a:	cd b7       	in	r28, 0x3d	; 61
    658c:	de b7       	in	r29, 0x3e	; 62
    658e:	9c 83       	std	Y+4, r25	; 0x04
    6590:	8b 83       	std	Y+3, r24	; 0x03
    ES_t Local_enuErrorState = ES_NOK;
    6592:	81 e0       	ldi	r24, 0x01	; 1
    6594:	8a 83       	std	Y+2, r24	; 0x02

    // Iterate through each LDR configuration
    for (u8 Local_u8Iterator = 0; Local_u8Iterator < LDRNUM; Local_u8Iterator++) {
    6596:	19 82       	std	Y+1, r1	; 0x01
    6598:	27 c0       	rjmp	.+78     	; 0x65e8 <LDR_enuInit+0x66>
        if (Copy_PstrLDRconfig[Local_u8Iterator].LDR_Channel != NOTCONNECTED) {
    659a:	89 81       	ldd	r24, Y+1	; 0x01
    659c:	88 2f       	mov	r24, r24
    659e:	90 e0       	ldi	r25, 0x00	; 0
    65a0:	9c 01       	movw	r18, r24
    65a2:	22 0f       	add	r18, r18
    65a4:	33 1f       	adc	r19, r19
    65a6:	8b 81       	ldd	r24, Y+3	; 0x03
    65a8:	9c 81       	ldd	r25, Y+4	; 0x04
    65aa:	fc 01       	movw	r30, r24
    65ac:	e2 0f       	add	r30, r18
    65ae:	f3 1f       	adc	r31, r19
    65b0:	80 81       	ld	r24, Z
    65b2:	91 81       	ldd	r25, Z+1	; 0x01
    65b4:	8f 3f       	cpi	r24, 0xFF	; 255
    65b6:	91 05       	cpc	r25, r1
    65b8:	a1 f0       	breq	.+40     	; 0x65e2 <LDR_enuInit+0x60>
            // Set pin direction
            Local_enuErrorState=DIO_enuSetPinDirection(DIO_u8PORTA, Copy_PstrLDRconfig[Local_u8Iterator].LDR_Channel, DIO_u8INPUT);
    65ba:	89 81       	ldd	r24, Y+1	; 0x01
    65bc:	88 2f       	mov	r24, r24
    65be:	90 e0       	ldi	r25, 0x00	; 0
    65c0:	9c 01       	movw	r18, r24
    65c2:	22 0f       	add	r18, r18
    65c4:	33 1f       	adc	r19, r19
    65c6:	8b 81       	ldd	r24, Y+3	; 0x03
    65c8:	9c 81       	ldd	r25, Y+4	; 0x04
    65ca:	fc 01       	movw	r30, r24
    65cc:	e2 0f       	add	r30, r18
    65ce:	f3 1f       	adc	r31, r19
    65d0:	80 81       	ld	r24, Z
    65d2:	91 81       	ldd	r25, Z+1	; 0x01
    65d4:	98 2f       	mov	r25, r24
    65d6:	80 e0       	ldi	r24, 0x00	; 0
    65d8:	69 2f       	mov	r22, r25
    65da:	40 e0       	ldi	r20, 0x00	; 0
    65dc:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    65e0:	8a 83       	std	Y+2, r24	; 0x02
/*****************************************************************************/
ES_t LDR_enuInit(LDR_t* Copy_PstrLDRconfig) {
    ES_t Local_enuErrorState = ES_NOK;

    // Iterate through each LDR configuration
    for (u8 Local_u8Iterator = 0; Local_u8Iterator < LDRNUM; Local_u8Iterator++) {
    65e2:	89 81       	ldd	r24, Y+1	; 0x01
    65e4:	8f 5f       	subi	r24, 0xFF	; 255
    65e6:	89 83       	std	Y+1, r24	; 0x01
    65e8:	89 81       	ldd	r24, Y+1	; 0x01
    65ea:	88 23       	and	r24, r24
    65ec:	b1 f2       	breq	.-84     	; 0x659a <LDR_enuInit+0x18>

        }
    }


    return Local_enuErrorState;
    65ee:	8a 81       	ldd	r24, Y+2	; 0x02
}
    65f0:	0f 90       	pop	r0
    65f2:	0f 90       	pop	r0
    65f4:	0f 90       	pop	r0
    65f6:	0f 90       	pop	r0
    65f8:	cf 91       	pop	r28
    65fa:	df 91       	pop	r29
    65fc:	08 95       	ret

000065fe <LDR_enuGetValue>:
/** Return Type     : ES_t enum.                                            **/
/** Arguments       : u16 *Copy_pu16ReadValue, u8 Copy_u8ChannelID.         **/
/** Brief           : Get the value from the specified ADC channel.         **/
/*****************************************************************************/
/*****************************************************************************/
ES_t LDR_enuGetValue(u16 *Copy_pu16ReadValue, u8 Copy_u8ChannelID) {
    65fe:	df 93       	push	r29
    6600:	cf 93       	push	r28
    6602:	00 d0       	rcall	.+0      	; 0x6604 <LDR_enuGetValue+0x6>
    6604:	00 d0       	rcall	.+0      	; 0x6606 <LDR_enuGetValue+0x8>
    6606:	cd b7       	in	r28, 0x3d	; 61
    6608:	de b7       	in	r29, 0x3e	; 62
    660a:	9b 83       	std	Y+3, r25	; 0x03
    660c:	8a 83       	std	Y+2, r24	; 0x02
    660e:	6c 83       	std	Y+4, r22	; 0x04
	 ES_t Local_enuErrorState = ES_NOK;
    6610:	81 e0       	ldi	r24, 0x01	; 1
    6612:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState=ADC_Read_From_Ch(Copy_pu16ReadValue,Copy_u8ChannelID);
    6614:	8a 81       	ldd	r24, Y+2	; 0x02
    6616:	9b 81       	ldd	r25, Y+3	; 0x03
    6618:	6c 81       	ldd	r22, Y+4	; 0x04
    661a:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <ADC_Read_From_Ch>
    661e:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    6620:	89 81       	ldd	r24, Y+1	; 0x01
}
    6622:	0f 90       	pop	r0
    6624:	0f 90       	pop	r0
    6626:	0f 90       	pop	r0
    6628:	0f 90       	pop	r0
    662a:	cf 91       	pop	r28
    662c:	df 91       	pop	r29
    662e:	08 95       	ret

00006630 <LCD_enuInit>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuInit(void)
{
    6630:	0f 93       	push	r16
    6632:	1f 93       	push	r17
    6634:	df 93       	push	r29
    6636:	cf 93       	push	r28
    6638:	cd b7       	in	r28, 0x3d	; 61
    663a:	de b7       	in	r29, 0x3e	; 62
    663c:	c8 54       	subi	r28, 0x48	; 72
    663e:	d0 40       	sbci	r29, 0x00	; 0
    6640:	0f b6       	in	r0, 0x3f	; 63
    6642:	f8 94       	cli
    6644:	de bf       	out	0x3e, r29	; 62
    6646:	0f be       	out	0x3f, r0	; 63
    6648:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    664a:	fe 01       	movw	r30, r28
    664c:	e9 5b       	subi	r30, 0xB9	; 185
    664e:	ff 4f       	sbci	r31, 0xFF	; 255
    6650:	81 e0       	ldi	r24, 0x01	; 1
    6652:	80 83       	st	Z, r24
	
	/* Set Control Pins as output */
	Local_enuErrorState = DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    6654:	80 e0       	ldi	r24, 0x00	; 0
    6656:	60 e0       	ldi	r22, 0x00	; 0
    6658:	41 e0       	ldi	r20, 0x01	; 1
    665a:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    665e:	fe 01       	movw	r30, r28
    6660:	e9 5b       	subi	r30, 0xB9	; 185
    6662:	ff 4f       	sbci	r31, 0xFF	; 255
    6664:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    6666:	fe 01       	movw	r30, r28
    6668:	e9 5b       	subi	r30, 0xB9	; 185
    666a:	ff 4f       	sbci	r31, 0xFF	; 255
    666c:	80 81       	ld	r24, Z
    666e:	88 23       	and	r24, r24
    6670:	41 f0       	breq	.+16     	; 0x6682 <LCD_enuInit+0x52>
		return Local_enuErrorState;
    6672:	fe 01       	movw	r30, r28
    6674:	e9 5b       	subi	r30, 0xB9	; 185
    6676:	ff 4f       	sbci	r31, 0xFF	; 255
    6678:	80 81       	ld	r24, Z
    667a:	29 96       	adiw	r28, 0x09	; 9
    667c:	8f af       	std	Y+63, r24	; 0x3f
    667e:	29 97       	sbiw	r28, 0x09	; 9
    6680:	92 c3       	rjmp	.+1828   	; 0x6da6 <LCD_enuInit+0x776>
	
	Local_enuErrorState = DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    6682:	80 e0       	ldi	r24, 0x00	; 0
    6684:	61 e0       	ldi	r22, 0x01	; 1
    6686:	41 e0       	ldi	r20, 0x01	; 1
    6688:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    668c:	fe 01       	movw	r30, r28
    668e:	e9 5b       	subi	r30, 0xB9	; 185
    6690:	ff 4f       	sbci	r31, 0xFF	; 255
    6692:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    6694:	fe 01       	movw	r30, r28
    6696:	e9 5b       	subi	r30, 0xB9	; 185
    6698:	ff 4f       	sbci	r31, 0xFF	; 255
    669a:	80 81       	ld	r24, Z
    669c:	88 23       	and	r24, r24
    669e:	41 f0       	breq	.+16     	; 0x66b0 <LCD_enuInit+0x80>
		return Local_enuErrorState;
    66a0:	fe 01       	movw	r30, r28
    66a2:	e9 5b       	subi	r30, 0xB9	; 185
    66a4:	ff 4f       	sbci	r31, 0xFF	; 255
    66a6:	80 81       	ld	r24, Z
    66a8:	29 96       	adiw	r28, 0x09	; 9
    66aa:	8f af       	std	Y+63, r24	; 0x3f
    66ac:	29 97       	sbiw	r28, 0x09	; 9
    66ae:	7b c3       	rjmp	.+1782   	; 0x6da6 <LCD_enuInit+0x776>
		
	Local_enuErrorState = DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    66b0:	80 e0       	ldi	r24, 0x00	; 0
    66b2:	62 e0       	ldi	r22, 0x02	; 2
    66b4:	41 e0       	ldi	r20, 0x01	; 1
    66b6:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    66ba:	fe 01       	movw	r30, r28
    66bc:	e9 5b       	subi	r30, 0xB9	; 185
    66be:	ff 4f       	sbci	r31, 0xFF	; 255
    66c0:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    66c2:	fe 01       	movw	r30, r28
    66c4:	e9 5b       	subi	r30, 0xB9	; 185
    66c6:	ff 4f       	sbci	r31, 0xFF	; 255
    66c8:	80 81       	ld	r24, Z
    66ca:	88 23       	and	r24, r24
    66cc:	41 f0       	breq	.+16     	; 0x66de <LCD_enuInit+0xae>
		return Local_enuErrorState;
    66ce:	fe 01       	movw	r30, r28
    66d0:	e9 5b       	subi	r30, 0xB9	; 185
    66d2:	ff 4f       	sbci	r31, 0xFF	; 255
    66d4:	80 81       	ld	r24, Z
    66d6:	29 96       	adiw	r28, 0x09	; 9
    66d8:	8f af       	std	Y+63, r24	; 0x3f
    66da:	29 97       	sbiw	r28, 0x09	; 9
    66dc:	64 c3       	rjmp	.+1736   	; 0x6da6 <LCD_enuInit+0x776>
	
	/* Set Data Pins as output */
	Local_enuErrorState = DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    66de:	81 e0       	ldi	r24, 0x01	; 1
    66e0:	67 e0       	ldi	r22, 0x07	; 7
    66e2:	41 e0       	ldi	r20, 0x01	; 1
    66e4:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    66e8:	fe 01       	movw	r30, r28
    66ea:	e9 5b       	subi	r30, 0xB9	; 185
    66ec:	ff 4f       	sbci	r31, 0xFF	; 255
    66ee:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    66f0:	fe 01       	movw	r30, r28
    66f2:	e9 5b       	subi	r30, 0xB9	; 185
    66f4:	ff 4f       	sbci	r31, 0xFF	; 255
    66f6:	80 81       	ld	r24, Z
    66f8:	88 23       	and	r24, r24
    66fa:	41 f0       	breq	.+16     	; 0x670c <LCD_enuInit+0xdc>
		return Local_enuErrorState;
    66fc:	fe 01       	movw	r30, r28
    66fe:	e9 5b       	subi	r30, 0xB9	; 185
    6700:	ff 4f       	sbci	r31, 0xFF	; 255
    6702:	80 81       	ld	r24, Z
    6704:	29 96       	adiw	r28, 0x09	; 9
    6706:	8f af       	std	Y+63, r24	; 0x3f
    6708:	29 97       	sbiw	r28, 0x09	; 9
    670a:	4d c3       	rjmp	.+1690   	; 0x6da6 <LCD_enuInit+0x776>
		
	Local_enuErrorState = DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    670c:	81 e0       	ldi	r24, 0x01	; 1
    670e:	66 e0       	ldi	r22, 0x06	; 6
    6710:	41 e0       	ldi	r20, 0x01	; 1
    6712:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    6716:	fe 01       	movw	r30, r28
    6718:	e9 5b       	subi	r30, 0xB9	; 185
    671a:	ff 4f       	sbci	r31, 0xFF	; 255
    671c:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    671e:	fe 01       	movw	r30, r28
    6720:	e9 5b       	subi	r30, 0xB9	; 185
    6722:	ff 4f       	sbci	r31, 0xFF	; 255
    6724:	80 81       	ld	r24, Z
    6726:	88 23       	and	r24, r24
    6728:	41 f0       	breq	.+16     	; 0x673a <LCD_enuInit+0x10a>
		return Local_enuErrorState;
    672a:	fe 01       	movw	r30, r28
    672c:	e9 5b       	subi	r30, 0xB9	; 185
    672e:	ff 4f       	sbci	r31, 0xFF	; 255
    6730:	80 81       	ld	r24, Z
    6732:	29 96       	adiw	r28, 0x09	; 9
    6734:	8f af       	std	Y+63, r24	; 0x3f
    6736:	29 97       	sbiw	r28, 0x09	; 9
    6738:	36 c3       	rjmp	.+1644   	; 0x6da6 <LCD_enuInit+0x776>
		
	Local_enuErrorState = DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    673a:	81 e0       	ldi	r24, 0x01	; 1
    673c:	65 e0       	ldi	r22, 0x05	; 5
    673e:	41 e0       	ldi	r20, 0x01	; 1
    6740:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    6744:	fe 01       	movw	r30, r28
    6746:	e9 5b       	subi	r30, 0xB9	; 185
    6748:	ff 4f       	sbci	r31, 0xFF	; 255
    674a:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    674c:	fe 01       	movw	r30, r28
    674e:	e9 5b       	subi	r30, 0xB9	; 185
    6750:	ff 4f       	sbci	r31, 0xFF	; 255
    6752:	80 81       	ld	r24, Z
    6754:	88 23       	and	r24, r24
    6756:	41 f0       	breq	.+16     	; 0x6768 <LCD_enuInit+0x138>
		return Local_enuErrorState;
    6758:	fe 01       	movw	r30, r28
    675a:	e9 5b       	subi	r30, 0xB9	; 185
    675c:	ff 4f       	sbci	r31, 0xFF	; 255
    675e:	80 81       	ld	r24, Z
    6760:	29 96       	adiw	r28, 0x09	; 9
    6762:	8f af       	std	Y+63, r24	; 0x3f
    6764:	29 97       	sbiw	r28, 0x09	; 9
    6766:	1f c3       	rjmp	.+1598   	; 0x6da6 <LCD_enuInit+0x776>
	Local_enuErrorState = DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    6768:	81 e0       	ldi	r24, 0x01	; 1
    676a:	64 e0       	ldi	r22, 0x04	; 4
    676c:	41 e0       	ldi	r20, 0x01	; 1
    676e:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    6772:	fe 01       	movw	r30, r28
    6774:	e9 5b       	subi	r30, 0xB9	; 185
    6776:	ff 4f       	sbci	r31, 0xFF	; 255
    6778:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    677a:	fe 01       	movw	r30, r28
    677c:	e9 5b       	subi	r30, 0xB9	; 185
    677e:	ff 4f       	sbci	r31, 0xFF	; 255
    6780:	80 81       	ld	r24, Z
    6782:	88 23       	and	r24, r24
    6784:	41 f0       	breq	.+16     	; 0x6796 <LCD_enuInit+0x166>
		return Local_enuErrorState;
    6786:	fe 01       	movw	r30, r28
    6788:	e9 5b       	subi	r30, 0xB9	; 185
    678a:	ff 4f       	sbci	r31, 0xFF	; 255
    678c:	80 81       	ld	r24, Z
    678e:	29 96       	adiw	r28, 0x09	; 9
    6790:	8f af       	std	Y+63, r24	; 0x3f
    6792:	29 97       	sbiw	r28, 0x09	; 9
    6794:	08 c3       	rjmp	.+1552   	; 0x6da6 <LCD_enuInit+0x776>
    6796:	fe 01       	movw	r30, r28
    6798:	ed 5b       	subi	r30, 0xBD	; 189
    679a:	ff 4f       	sbci	r31, 0xFF	; 255
    679c:	80 e0       	ldi	r24, 0x00	; 0
    679e:	90 e0       	ldi	r25, 0x00	; 0
    67a0:	ac e0       	ldi	r26, 0x0C	; 12
    67a2:	b2 e4       	ldi	r27, 0x42	; 66
    67a4:	80 83       	st	Z, r24
    67a6:	91 83       	std	Z+1, r25	; 0x01
    67a8:	a2 83       	std	Z+2, r26	; 0x02
    67aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    67ac:	8e 01       	movw	r16, r28
    67ae:	01 5c       	subi	r16, 0xC1	; 193
    67b0:	1f 4f       	sbci	r17, 0xFF	; 255
    67b2:	fe 01       	movw	r30, r28
    67b4:	ed 5b       	subi	r30, 0xBD	; 189
    67b6:	ff 4f       	sbci	r31, 0xFF	; 255
    67b8:	60 81       	ld	r22, Z
    67ba:	71 81       	ldd	r23, Z+1	; 0x01
    67bc:	82 81       	ldd	r24, Z+2	; 0x02
    67be:	93 81       	ldd	r25, Z+3	; 0x03
    67c0:	20 e0       	ldi	r18, 0x00	; 0
    67c2:	30 e0       	ldi	r19, 0x00	; 0
    67c4:	4a e7       	ldi	r20, 0x7A	; 122
    67c6:	53 e4       	ldi	r21, 0x43	; 67
    67c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    67cc:	dc 01       	movw	r26, r24
    67ce:	cb 01       	movw	r24, r22
    67d0:	f8 01       	movw	r30, r16
    67d2:	80 83       	st	Z, r24
    67d4:	91 83       	std	Z+1, r25	; 0x01
    67d6:	a2 83       	std	Z+2, r26	; 0x02
    67d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    67da:	fe 01       	movw	r30, r28
    67dc:	ff 96       	adiw	r30, 0x3f	; 63
    67de:	60 81       	ld	r22, Z
    67e0:	71 81       	ldd	r23, Z+1	; 0x01
    67e2:	82 81       	ldd	r24, Z+2	; 0x02
    67e4:	93 81       	ldd	r25, Z+3	; 0x03
    67e6:	20 e0       	ldi	r18, 0x00	; 0
    67e8:	30 e0       	ldi	r19, 0x00	; 0
    67ea:	40 e8       	ldi	r20, 0x80	; 128
    67ec:	5f e3       	ldi	r21, 0x3F	; 63
    67ee:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    67f2:	88 23       	and	r24, r24
    67f4:	2c f4       	brge	.+10     	; 0x6800 <LCD_enuInit+0x1d0>
		__ticks = 1;
    67f6:	81 e0       	ldi	r24, 0x01	; 1
    67f8:	90 e0       	ldi	r25, 0x00	; 0
    67fa:	9e af       	std	Y+62, r25	; 0x3e
    67fc:	8d af       	std	Y+61, r24	; 0x3d
    67fe:	46 c0       	rjmp	.+140    	; 0x688c <LCD_enuInit+0x25c>
	else if (__tmp > 65535)
    6800:	fe 01       	movw	r30, r28
    6802:	ff 96       	adiw	r30, 0x3f	; 63
    6804:	60 81       	ld	r22, Z
    6806:	71 81       	ldd	r23, Z+1	; 0x01
    6808:	82 81       	ldd	r24, Z+2	; 0x02
    680a:	93 81       	ldd	r25, Z+3	; 0x03
    680c:	20 e0       	ldi	r18, 0x00	; 0
    680e:	3f ef       	ldi	r19, 0xFF	; 255
    6810:	4f e7       	ldi	r20, 0x7F	; 127
    6812:	57 e4       	ldi	r21, 0x47	; 71
    6814:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    6818:	18 16       	cp	r1, r24
    681a:	64 f5       	brge	.+88     	; 0x6874 <LCD_enuInit+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    681c:	fe 01       	movw	r30, r28
    681e:	ed 5b       	subi	r30, 0xBD	; 189
    6820:	ff 4f       	sbci	r31, 0xFF	; 255
    6822:	60 81       	ld	r22, Z
    6824:	71 81       	ldd	r23, Z+1	; 0x01
    6826:	82 81       	ldd	r24, Z+2	; 0x02
    6828:	93 81       	ldd	r25, Z+3	; 0x03
    682a:	20 e0       	ldi	r18, 0x00	; 0
    682c:	30 e0       	ldi	r19, 0x00	; 0
    682e:	40 e2       	ldi	r20, 0x20	; 32
    6830:	51 e4       	ldi	r21, 0x41	; 65
    6832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6836:	dc 01       	movw	r26, r24
    6838:	cb 01       	movw	r24, r22
    683a:	bc 01       	movw	r22, r24
    683c:	cd 01       	movw	r24, r26
    683e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6842:	dc 01       	movw	r26, r24
    6844:	cb 01       	movw	r24, r22
    6846:	9e af       	std	Y+62, r25	; 0x3e
    6848:	8d af       	std	Y+61, r24	; 0x3d
    684a:	0f c0       	rjmp	.+30     	; 0x686a <LCD_enuInit+0x23a>
    684c:	89 e1       	ldi	r24, 0x19	; 25
    684e:	90 e0       	ldi	r25, 0x00	; 0
    6850:	9c af       	std	Y+60, r25	; 0x3c
    6852:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6854:	8b ad       	ldd	r24, Y+59	; 0x3b
    6856:	9c ad       	ldd	r25, Y+60	; 0x3c
    6858:	01 97       	sbiw	r24, 0x01	; 1
    685a:	f1 f7       	brne	.-4      	; 0x6858 <LCD_enuInit+0x228>
    685c:	9c af       	std	Y+60, r25	; 0x3c
    685e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6860:	8d ad       	ldd	r24, Y+61	; 0x3d
    6862:	9e ad       	ldd	r25, Y+62	; 0x3e
    6864:	01 97       	sbiw	r24, 0x01	; 1
    6866:	9e af       	std	Y+62, r25	; 0x3e
    6868:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    686a:	8d ad       	ldd	r24, Y+61	; 0x3d
    686c:	9e ad       	ldd	r25, Y+62	; 0x3e
    686e:	00 97       	sbiw	r24, 0x00	; 0
    6870:	69 f7       	brne	.-38     	; 0x684c <LCD_enuInit+0x21c>
    6872:	16 c0       	rjmp	.+44     	; 0x68a0 <LCD_enuInit+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6874:	fe 01       	movw	r30, r28
    6876:	ff 96       	adiw	r30, 0x3f	; 63
    6878:	60 81       	ld	r22, Z
    687a:	71 81       	ldd	r23, Z+1	; 0x01
    687c:	82 81       	ldd	r24, Z+2	; 0x02
    687e:	93 81       	ldd	r25, Z+3	; 0x03
    6880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6884:	dc 01       	movw	r26, r24
    6886:	cb 01       	movw	r24, r22
    6888:	9e af       	std	Y+62, r25	; 0x3e
    688a:	8d af       	std	Y+61, r24	; 0x3d
    688c:	8d ad       	ldd	r24, Y+61	; 0x3d
    688e:	9e ad       	ldd	r25, Y+62	; 0x3e
    6890:	9a af       	std	Y+58, r25	; 0x3a
    6892:	89 af       	std	Y+57, r24	; 0x39
    6894:	89 ad       	ldd	r24, Y+57	; 0x39
    6896:	9a ad       	ldd	r25, Y+58	; 0x3a
    6898:	01 97       	sbiw	r24, 0x01	; 1
    689a:	f1 f7       	brne	.-4      	; 0x6898 <LCD_enuInit+0x268>
    689c:	9a af       	std	Y+58, r25	; 0x3a
    689e:	89 af       	std	Y+57, r24	; 0x39
	
	_delay_ms(35);
	
	#if LCD_MODE == EIGHT_BIT
	Local_enuErrorState = DIO_enuSetPinDirection(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    68a0:	81 e0       	ldi	r24, 0x01	; 1
    68a2:	63 e0       	ldi	r22, 0x03	; 3
    68a4:	41 e0       	ldi	r20, 0x01	; 1
    68a6:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    68aa:	fe 01       	movw	r30, r28
    68ac:	e9 5b       	subi	r30, 0xB9	; 185
    68ae:	ff 4f       	sbci	r31, 0xFF	; 255
    68b0:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    68b2:	fe 01       	movw	r30, r28
    68b4:	e9 5b       	subi	r30, 0xB9	; 185
    68b6:	ff 4f       	sbci	r31, 0xFF	; 255
    68b8:	80 81       	ld	r24, Z
    68ba:	88 23       	and	r24, r24
    68bc:	41 f0       	breq	.+16     	; 0x68ce <LCD_enuInit+0x29e>
		return Local_enuErrorState;
    68be:	fe 01       	movw	r30, r28
    68c0:	e9 5b       	subi	r30, 0xB9	; 185
    68c2:	ff 4f       	sbci	r31, 0xFF	; 255
    68c4:	80 81       	ld	r24, Z
    68c6:	29 96       	adiw	r28, 0x09	; 9
    68c8:	8f af       	std	Y+63, r24	; 0x3f
    68ca:	29 97       	sbiw	r28, 0x09	; 9
    68cc:	6c c2       	rjmp	.+1240   	; 0x6da6 <LCD_enuInit+0x776>
	
	Local_enuErrorState = DIO_enuSetPinDirection(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    68ce:	81 e0       	ldi	r24, 0x01	; 1
    68d0:	62 e0       	ldi	r22, 0x02	; 2
    68d2:	41 e0       	ldi	r20, 0x01	; 1
    68d4:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    68d8:	fe 01       	movw	r30, r28
    68da:	e9 5b       	subi	r30, 0xB9	; 185
    68dc:	ff 4f       	sbci	r31, 0xFF	; 255
    68de:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    68e0:	fe 01       	movw	r30, r28
    68e2:	e9 5b       	subi	r30, 0xB9	; 185
    68e4:	ff 4f       	sbci	r31, 0xFF	; 255
    68e6:	80 81       	ld	r24, Z
    68e8:	88 23       	and	r24, r24
    68ea:	41 f0       	breq	.+16     	; 0x68fc <LCD_enuInit+0x2cc>
		return Local_enuErrorState;
    68ec:	fe 01       	movw	r30, r28
    68ee:	e9 5b       	subi	r30, 0xB9	; 185
    68f0:	ff 4f       	sbci	r31, 0xFF	; 255
    68f2:	80 81       	ld	r24, Z
    68f4:	29 96       	adiw	r28, 0x09	; 9
    68f6:	8f af       	std	Y+63, r24	; 0x3f
    68f8:	29 97       	sbiw	r28, 0x09	; 9
    68fa:	55 c2       	rjmp	.+1194   	; 0x6da6 <LCD_enuInit+0x776>
	
	Local_enuErrorState = DIO_enuSetPinDirection(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    68fc:	81 e0       	ldi	r24, 0x01	; 1
    68fe:	61 e0       	ldi	r22, 0x01	; 1
    6900:	41 e0       	ldi	r20, 0x01	; 1
    6902:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    6906:	fe 01       	movw	r30, r28
    6908:	e9 5b       	subi	r30, 0xB9	; 185
    690a:	ff 4f       	sbci	r31, 0xFF	; 255
    690c:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    690e:	fe 01       	movw	r30, r28
    6910:	e9 5b       	subi	r30, 0xB9	; 185
    6912:	ff 4f       	sbci	r31, 0xFF	; 255
    6914:	80 81       	ld	r24, Z
    6916:	88 23       	and	r24, r24
    6918:	41 f0       	breq	.+16     	; 0x692a <LCD_enuInit+0x2fa>
		return Local_enuErrorState;
    691a:	fe 01       	movw	r30, r28
    691c:	e9 5b       	subi	r30, 0xB9	; 185
    691e:	ff 4f       	sbci	r31, 0xFF	; 255
    6920:	80 81       	ld	r24, Z
    6922:	29 96       	adiw	r28, 0x09	; 9
    6924:	8f af       	std	Y+63, r24	; 0x3f
    6926:	29 97       	sbiw	r28, 0x09	; 9
    6928:	3e c2       	rjmp	.+1148   	; 0x6da6 <LCD_enuInit+0x776>
	
	Local_enuErrorState = DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    692a:	81 e0       	ldi	r24, 0x01	; 1
    692c:	60 e0       	ldi	r22, 0x00	; 0
    692e:	41 e0       	ldi	r20, 0x01	; 1
    6930:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    6934:	fe 01       	movw	r30, r28
    6936:	e9 5b       	subi	r30, 0xB9	; 185
    6938:	ff 4f       	sbci	r31, 0xFF	; 255
    693a:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    693c:	fe 01       	movw	r30, r28
    693e:	e9 5b       	subi	r30, 0xB9	; 185
    6940:	ff 4f       	sbci	r31, 0xFF	; 255
    6942:	80 81       	ld	r24, Z
    6944:	88 23       	and	r24, r24
    6946:	41 f0       	breq	.+16     	; 0x6958 <LCD_enuInit+0x328>
		return Local_enuErrorState;
    6948:	fe 01       	movw	r30, r28
    694a:	e9 5b       	subi	r30, 0xB9	; 185
    694c:	ff 4f       	sbci	r31, 0xFF	; 255
    694e:	80 81       	ld	r24, Z
    6950:	29 96       	adiw	r28, 0x09	; 9
    6952:	8f af       	std	Y+63, r24	; 0x3f
    6954:	29 97       	sbiw	r28, 0x09	; 9
    6956:	27 c2       	rjmp	.+1102   	; 0x6da6 <LCD_enuInit+0x776>
	/* Function Set */
	Local_enuErrorState = LCD_inlenuSendCommand(LCD_8Bit_TwoLine_5_7CharFont);
    6958:	88 e3       	ldi	r24, 0x38	; 56
    695a:	0e 94 69 39 	call	0x72d2	; 0x72d2 <LCD_inlenuSendCommand>
    695e:	fe 01       	movw	r30, r28
    6960:	e9 5b       	subi	r30, 0xB9	; 185
    6962:	ff 4f       	sbci	r31, 0xFF	; 255
    6964:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    6966:	fe 01       	movw	r30, r28
    6968:	e9 5b       	subi	r30, 0xB9	; 185
    696a:	ff 4f       	sbci	r31, 0xFF	; 255
    696c:	80 81       	ld	r24, Z
    696e:	88 23       	and	r24, r24
    6970:	41 f0       	breq	.+16     	; 0x6982 <LCD_enuInit+0x352>
		return Local_enuErrorState;
    6972:	fe 01       	movw	r30, r28
    6974:	e9 5b       	subi	r30, 0xB9	; 185
    6976:	ff 4f       	sbci	r31, 0xFF	; 255
    6978:	80 81       	ld	r24, Z
    697a:	29 96       	adiw	r28, 0x09	; 9
    697c:	8f af       	std	Y+63, r24	; 0x3f
    697e:	29 97       	sbiw	r28, 0x09	; 9
    6980:	12 c2       	rjmp	.+1060   	; 0x6da6 <LCD_enuInit+0x776>
    6982:	80 e0       	ldi	r24, 0x00	; 0
    6984:	90 e0       	ldi	r25, 0x00	; 0
    6986:	a0 e8       	ldi	r26, 0x80	; 128
    6988:	bf e3       	ldi	r27, 0x3F	; 63
    698a:	8d ab       	std	Y+53, r24	; 0x35
    698c:	9e ab       	std	Y+54, r25	; 0x36
    698e:	af ab       	std	Y+55, r26	; 0x37
    6990:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6992:	6d a9       	ldd	r22, Y+53	; 0x35
    6994:	7e a9       	ldd	r23, Y+54	; 0x36
    6996:	8f a9       	ldd	r24, Y+55	; 0x37
    6998:	98 ad       	ldd	r25, Y+56	; 0x38
    699a:	20 e0       	ldi	r18, 0x00	; 0
    699c:	30 e0       	ldi	r19, 0x00	; 0
    699e:	4a e7       	ldi	r20, 0x7A	; 122
    69a0:	53 e4       	ldi	r21, 0x43	; 67
    69a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    69a6:	dc 01       	movw	r26, r24
    69a8:	cb 01       	movw	r24, r22
    69aa:	89 ab       	std	Y+49, r24	; 0x31
    69ac:	9a ab       	std	Y+50, r25	; 0x32
    69ae:	ab ab       	std	Y+51, r26	; 0x33
    69b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    69b2:	69 a9       	ldd	r22, Y+49	; 0x31
    69b4:	7a a9       	ldd	r23, Y+50	; 0x32
    69b6:	8b a9       	ldd	r24, Y+51	; 0x33
    69b8:	9c a9       	ldd	r25, Y+52	; 0x34
    69ba:	20 e0       	ldi	r18, 0x00	; 0
    69bc:	30 e0       	ldi	r19, 0x00	; 0
    69be:	40 e8       	ldi	r20, 0x80	; 128
    69c0:	5f e3       	ldi	r21, 0x3F	; 63
    69c2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    69c6:	88 23       	and	r24, r24
    69c8:	2c f4       	brge	.+10     	; 0x69d4 <LCD_enuInit+0x3a4>
		__ticks = 1;
    69ca:	81 e0       	ldi	r24, 0x01	; 1
    69cc:	90 e0       	ldi	r25, 0x00	; 0
    69ce:	98 ab       	std	Y+48, r25	; 0x30
    69d0:	8f a7       	std	Y+47, r24	; 0x2f
    69d2:	3f c0       	rjmp	.+126    	; 0x6a52 <LCD_enuInit+0x422>
	else if (__tmp > 65535)
    69d4:	69 a9       	ldd	r22, Y+49	; 0x31
    69d6:	7a a9       	ldd	r23, Y+50	; 0x32
    69d8:	8b a9       	ldd	r24, Y+51	; 0x33
    69da:	9c a9       	ldd	r25, Y+52	; 0x34
    69dc:	20 e0       	ldi	r18, 0x00	; 0
    69de:	3f ef       	ldi	r19, 0xFF	; 255
    69e0:	4f e7       	ldi	r20, 0x7F	; 127
    69e2:	57 e4       	ldi	r21, 0x47	; 71
    69e4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    69e8:	18 16       	cp	r1, r24
    69ea:	4c f5       	brge	.+82     	; 0x6a3e <LCD_enuInit+0x40e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    69ec:	6d a9       	ldd	r22, Y+53	; 0x35
    69ee:	7e a9       	ldd	r23, Y+54	; 0x36
    69f0:	8f a9       	ldd	r24, Y+55	; 0x37
    69f2:	98 ad       	ldd	r25, Y+56	; 0x38
    69f4:	20 e0       	ldi	r18, 0x00	; 0
    69f6:	30 e0       	ldi	r19, 0x00	; 0
    69f8:	40 e2       	ldi	r20, 0x20	; 32
    69fa:	51 e4       	ldi	r21, 0x41	; 65
    69fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a00:	dc 01       	movw	r26, r24
    6a02:	cb 01       	movw	r24, r22
    6a04:	bc 01       	movw	r22, r24
    6a06:	cd 01       	movw	r24, r26
    6a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a0c:	dc 01       	movw	r26, r24
    6a0e:	cb 01       	movw	r24, r22
    6a10:	98 ab       	std	Y+48, r25	; 0x30
    6a12:	8f a7       	std	Y+47, r24	; 0x2f
    6a14:	0f c0       	rjmp	.+30     	; 0x6a34 <LCD_enuInit+0x404>
    6a16:	89 e1       	ldi	r24, 0x19	; 25
    6a18:	90 e0       	ldi	r25, 0x00	; 0
    6a1a:	9e a7       	std	Y+46, r25	; 0x2e
    6a1c:	8d a7       	std	Y+45, r24	; 0x2d
    6a1e:	8d a5       	ldd	r24, Y+45	; 0x2d
    6a20:	9e a5       	ldd	r25, Y+46	; 0x2e
    6a22:	01 97       	sbiw	r24, 0x01	; 1
    6a24:	f1 f7       	brne	.-4      	; 0x6a22 <LCD_enuInit+0x3f2>
    6a26:	9e a7       	std	Y+46, r25	; 0x2e
    6a28:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    6a2c:	98 a9       	ldd	r25, Y+48	; 0x30
    6a2e:	01 97       	sbiw	r24, 0x01	; 1
    6a30:	98 ab       	std	Y+48, r25	; 0x30
    6a32:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a34:	8f a5       	ldd	r24, Y+47	; 0x2f
    6a36:	98 a9       	ldd	r25, Y+48	; 0x30
    6a38:	00 97       	sbiw	r24, 0x00	; 0
    6a3a:	69 f7       	brne	.-38     	; 0x6a16 <LCD_enuInit+0x3e6>
    6a3c:	14 c0       	rjmp	.+40     	; 0x6a66 <LCD_enuInit+0x436>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6a3e:	69 a9       	ldd	r22, Y+49	; 0x31
    6a40:	7a a9       	ldd	r23, Y+50	; 0x32
    6a42:	8b a9       	ldd	r24, Y+51	; 0x33
    6a44:	9c a9       	ldd	r25, Y+52	; 0x34
    6a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a4a:	dc 01       	movw	r26, r24
    6a4c:	cb 01       	movw	r24, r22
    6a4e:	98 ab       	std	Y+48, r25	; 0x30
    6a50:	8f a7       	std	Y+47, r24	; 0x2f
    6a52:	8f a5       	ldd	r24, Y+47	; 0x2f
    6a54:	98 a9       	ldd	r25, Y+48	; 0x30
    6a56:	9c a7       	std	Y+44, r25	; 0x2c
    6a58:	8b a7       	std	Y+43, r24	; 0x2b
    6a5a:	8b a5       	ldd	r24, Y+43	; 0x2b
    6a5c:	9c a5       	ldd	r25, Y+44	; 0x2c
    6a5e:	01 97       	sbiw	r24, 0x01	; 1
    6a60:	f1 f7       	brne	.-4      	; 0x6a5e <LCD_enuInit+0x42e>
    6a62:	9c a7       	std	Y+44, r25	; 0x2c
    6a64:	8b a7       	std	Y+43, r24	; 0x2b
	#else
	#error "LCD Mode has a wrong configuration"
	#endif
	
	/* Display ON/OFF Control */
	Local_enuErrorState = LCD_inlenuSendCommand(LCD_DisplayOn_CursorOn_Blinking);
    6a66:	8f e0       	ldi	r24, 0x0F	; 15
    6a68:	0e 94 69 39 	call	0x72d2	; 0x72d2 <LCD_inlenuSendCommand>
    6a6c:	fe 01       	movw	r30, r28
    6a6e:	e9 5b       	subi	r30, 0xB9	; 185
    6a70:	ff 4f       	sbci	r31, 0xFF	; 255
    6a72:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    6a74:	fe 01       	movw	r30, r28
    6a76:	e9 5b       	subi	r30, 0xB9	; 185
    6a78:	ff 4f       	sbci	r31, 0xFF	; 255
    6a7a:	80 81       	ld	r24, Z
    6a7c:	88 23       	and	r24, r24
    6a7e:	41 f0       	breq	.+16     	; 0x6a90 <LCD_enuInit+0x460>
		return Local_enuErrorState;
    6a80:	fe 01       	movw	r30, r28
    6a82:	e9 5b       	subi	r30, 0xB9	; 185
    6a84:	ff 4f       	sbci	r31, 0xFF	; 255
    6a86:	80 81       	ld	r24, Z
    6a88:	29 96       	adiw	r28, 0x09	; 9
    6a8a:	8f af       	std	Y+63, r24	; 0x3f
    6a8c:	29 97       	sbiw	r28, 0x09	; 9
    6a8e:	8b c1       	rjmp	.+790    	; 0x6da6 <LCD_enuInit+0x776>
    6a90:	80 e0       	ldi	r24, 0x00	; 0
    6a92:	90 e0       	ldi	r25, 0x00	; 0
    6a94:	a0 e8       	ldi	r26, 0x80	; 128
    6a96:	bf e3       	ldi	r27, 0x3F	; 63
    6a98:	8f a3       	std	Y+39, r24	; 0x27
    6a9a:	98 a7       	std	Y+40, r25	; 0x28
    6a9c:	a9 a7       	std	Y+41, r26	; 0x29
    6a9e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6aa0:	6f a1       	ldd	r22, Y+39	; 0x27
    6aa2:	78 a5       	ldd	r23, Y+40	; 0x28
    6aa4:	89 a5       	ldd	r24, Y+41	; 0x29
    6aa6:	9a a5       	ldd	r25, Y+42	; 0x2a
    6aa8:	20 e0       	ldi	r18, 0x00	; 0
    6aaa:	30 e0       	ldi	r19, 0x00	; 0
    6aac:	4a e7       	ldi	r20, 0x7A	; 122
    6aae:	53 e4       	ldi	r21, 0x43	; 67
    6ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6ab4:	dc 01       	movw	r26, r24
    6ab6:	cb 01       	movw	r24, r22
    6ab8:	8b a3       	std	Y+35, r24	; 0x23
    6aba:	9c a3       	std	Y+36, r25	; 0x24
    6abc:	ad a3       	std	Y+37, r26	; 0x25
    6abe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6ac0:	6b a1       	ldd	r22, Y+35	; 0x23
    6ac2:	7c a1       	ldd	r23, Y+36	; 0x24
    6ac4:	8d a1       	ldd	r24, Y+37	; 0x25
    6ac6:	9e a1       	ldd	r25, Y+38	; 0x26
    6ac8:	20 e0       	ldi	r18, 0x00	; 0
    6aca:	30 e0       	ldi	r19, 0x00	; 0
    6acc:	40 e8       	ldi	r20, 0x80	; 128
    6ace:	5f e3       	ldi	r21, 0x3F	; 63
    6ad0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    6ad4:	88 23       	and	r24, r24
    6ad6:	2c f4       	brge	.+10     	; 0x6ae2 <LCD_enuInit+0x4b2>
		__ticks = 1;
    6ad8:	81 e0       	ldi	r24, 0x01	; 1
    6ada:	90 e0       	ldi	r25, 0x00	; 0
    6adc:	9a a3       	std	Y+34, r25	; 0x22
    6ade:	89 a3       	std	Y+33, r24	; 0x21
    6ae0:	3f c0       	rjmp	.+126    	; 0x6b60 <LCD_enuInit+0x530>
	else if (__tmp > 65535)
    6ae2:	6b a1       	ldd	r22, Y+35	; 0x23
    6ae4:	7c a1       	ldd	r23, Y+36	; 0x24
    6ae6:	8d a1       	ldd	r24, Y+37	; 0x25
    6ae8:	9e a1       	ldd	r25, Y+38	; 0x26
    6aea:	20 e0       	ldi	r18, 0x00	; 0
    6aec:	3f ef       	ldi	r19, 0xFF	; 255
    6aee:	4f e7       	ldi	r20, 0x7F	; 127
    6af0:	57 e4       	ldi	r21, 0x47	; 71
    6af2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    6af6:	18 16       	cp	r1, r24
    6af8:	4c f5       	brge	.+82     	; 0x6b4c <LCD_enuInit+0x51c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6afa:	6f a1       	ldd	r22, Y+39	; 0x27
    6afc:	78 a5       	ldd	r23, Y+40	; 0x28
    6afe:	89 a5       	ldd	r24, Y+41	; 0x29
    6b00:	9a a5       	ldd	r25, Y+42	; 0x2a
    6b02:	20 e0       	ldi	r18, 0x00	; 0
    6b04:	30 e0       	ldi	r19, 0x00	; 0
    6b06:	40 e2       	ldi	r20, 0x20	; 32
    6b08:	51 e4       	ldi	r21, 0x41	; 65
    6b0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6b0e:	dc 01       	movw	r26, r24
    6b10:	cb 01       	movw	r24, r22
    6b12:	bc 01       	movw	r22, r24
    6b14:	cd 01       	movw	r24, r26
    6b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b1a:	dc 01       	movw	r26, r24
    6b1c:	cb 01       	movw	r24, r22
    6b1e:	9a a3       	std	Y+34, r25	; 0x22
    6b20:	89 a3       	std	Y+33, r24	; 0x21
    6b22:	0f c0       	rjmp	.+30     	; 0x6b42 <LCD_enuInit+0x512>
    6b24:	89 e1       	ldi	r24, 0x19	; 25
    6b26:	90 e0       	ldi	r25, 0x00	; 0
    6b28:	98 a3       	std	Y+32, r25	; 0x20
    6b2a:	8f 8f       	std	Y+31, r24	; 0x1f
    6b2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6b2e:	98 a1       	ldd	r25, Y+32	; 0x20
    6b30:	01 97       	sbiw	r24, 0x01	; 1
    6b32:	f1 f7       	brne	.-4      	; 0x6b30 <LCD_enuInit+0x500>
    6b34:	98 a3       	std	Y+32, r25	; 0x20
    6b36:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6b38:	89 a1       	ldd	r24, Y+33	; 0x21
    6b3a:	9a a1       	ldd	r25, Y+34	; 0x22
    6b3c:	01 97       	sbiw	r24, 0x01	; 1
    6b3e:	9a a3       	std	Y+34, r25	; 0x22
    6b40:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b42:	89 a1       	ldd	r24, Y+33	; 0x21
    6b44:	9a a1       	ldd	r25, Y+34	; 0x22
    6b46:	00 97       	sbiw	r24, 0x00	; 0
    6b48:	69 f7       	brne	.-38     	; 0x6b24 <LCD_enuInit+0x4f4>
    6b4a:	14 c0       	rjmp	.+40     	; 0x6b74 <LCD_enuInit+0x544>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b4c:	6b a1       	ldd	r22, Y+35	; 0x23
    6b4e:	7c a1       	ldd	r23, Y+36	; 0x24
    6b50:	8d a1       	ldd	r24, Y+37	; 0x25
    6b52:	9e a1       	ldd	r25, Y+38	; 0x26
    6b54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b58:	dc 01       	movw	r26, r24
    6b5a:	cb 01       	movw	r24, r22
    6b5c:	9a a3       	std	Y+34, r25	; 0x22
    6b5e:	89 a3       	std	Y+33, r24	; 0x21
    6b60:	89 a1       	ldd	r24, Y+33	; 0x21
    6b62:	9a a1       	ldd	r25, Y+34	; 0x22
    6b64:	9e 8f       	std	Y+30, r25	; 0x1e
    6b66:	8d 8f       	std	Y+29, r24	; 0x1d
    6b68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6b6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6b6c:	01 97       	sbiw	r24, 0x01	; 1
    6b6e:	f1 f7       	brne	.-4      	; 0x6b6c <LCD_enuInit+0x53c>
    6b70:	9e 8f       	std	Y+30, r25	; 0x1e
    6b72:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	
	/* Display Clear */
	Local_enuErrorState = LCD_inlenuSendCommand(LCD_Clear_Display);
    6b74:	81 e0       	ldi	r24, 0x01	; 1
    6b76:	0e 94 69 39 	call	0x72d2	; 0x72d2 <LCD_inlenuSendCommand>
    6b7a:	fe 01       	movw	r30, r28
    6b7c:	e9 5b       	subi	r30, 0xB9	; 185
    6b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    6b80:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    6b82:	fe 01       	movw	r30, r28
    6b84:	e9 5b       	subi	r30, 0xB9	; 185
    6b86:	ff 4f       	sbci	r31, 0xFF	; 255
    6b88:	80 81       	ld	r24, Z
    6b8a:	88 23       	and	r24, r24
    6b8c:	41 f0       	breq	.+16     	; 0x6b9e <LCD_enuInit+0x56e>
		return Local_enuErrorState;
    6b8e:	fe 01       	movw	r30, r28
    6b90:	e9 5b       	subi	r30, 0xB9	; 185
    6b92:	ff 4f       	sbci	r31, 0xFF	; 255
    6b94:	80 81       	ld	r24, Z
    6b96:	29 96       	adiw	r28, 0x09	; 9
    6b98:	8f af       	std	Y+63, r24	; 0x3f
    6b9a:	29 97       	sbiw	r28, 0x09	; 9
    6b9c:	04 c1       	rjmp	.+520    	; 0x6da6 <LCD_enuInit+0x776>
    6b9e:	80 e0       	ldi	r24, 0x00	; 0
    6ba0:	90 e0       	ldi	r25, 0x00	; 0
    6ba2:	a0 e0       	ldi	r26, 0x00	; 0
    6ba4:	b0 e4       	ldi	r27, 0x40	; 64
    6ba6:	89 8f       	std	Y+25, r24	; 0x19
    6ba8:	9a 8f       	std	Y+26, r25	; 0x1a
    6baa:	ab 8f       	std	Y+27, r26	; 0x1b
    6bac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6bae:	69 8d       	ldd	r22, Y+25	; 0x19
    6bb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6bb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6bb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6bb6:	20 e0       	ldi	r18, 0x00	; 0
    6bb8:	30 e0       	ldi	r19, 0x00	; 0
    6bba:	4a e7       	ldi	r20, 0x7A	; 122
    6bbc:	53 e4       	ldi	r21, 0x43	; 67
    6bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6bc2:	dc 01       	movw	r26, r24
    6bc4:	cb 01       	movw	r24, r22
    6bc6:	8d 8b       	std	Y+21, r24	; 0x15
    6bc8:	9e 8b       	std	Y+22, r25	; 0x16
    6bca:	af 8b       	std	Y+23, r26	; 0x17
    6bcc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6bce:	6d 89       	ldd	r22, Y+21	; 0x15
    6bd0:	7e 89       	ldd	r23, Y+22	; 0x16
    6bd2:	8f 89       	ldd	r24, Y+23	; 0x17
    6bd4:	98 8d       	ldd	r25, Y+24	; 0x18
    6bd6:	20 e0       	ldi	r18, 0x00	; 0
    6bd8:	30 e0       	ldi	r19, 0x00	; 0
    6bda:	40 e8       	ldi	r20, 0x80	; 128
    6bdc:	5f e3       	ldi	r21, 0x3F	; 63
    6bde:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    6be2:	88 23       	and	r24, r24
    6be4:	2c f4       	brge	.+10     	; 0x6bf0 <LCD_enuInit+0x5c0>
		__ticks = 1;
    6be6:	81 e0       	ldi	r24, 0x01	; 1
    6be8:	90 e0       	ldi	r25, 0x00	; 0
    6bea:	9c 8b       	std	Y+20, r25	; 0x14
    6bec:	8b 8b       	std	Y+19, r24	; 0x13
    6bee:	3f c0       	rjmp	.+126    	; 0x6c6e <LCD_enuInit+0x63e>
	else if (__tmp > 65535)
    6bf0:	6d 89       	ldd	r22, Y+21	; 0x15
    6bf2:	7e 89       	ldd	r23, Y+22	; 0x16
    6bf4:	8f 89       	ldd	r24, Y+23	; 0x17
    6bf6:	98 8d       	ldd	r25, Y+24	; 0x18
    6bf8:	20 e0       	ldi	r18, 0x00	; 0
    6bfa:	3f ef       	ldi	r19, 0xFF	; 255
    6bfc:	4f e7       	ldi	r20, 0x7F	; 127
    6bfe:	57 e4       	ldi	r21, 0x47	; 71
    6c00:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    6c04:	18 16       	cp	r1, r24
    6c06:	4c f5       	brge	.+82     	; 0x6c5a <LCD_enuInit+0x62a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6c08:	69 8d       	ldd	r22, Y+25	; 0x19
    6c0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6c0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6c0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6c10:	20 e0       	ldi	r18, 0x00	; 0
    6c12:	30 e0       	ldi	r19, 0x00	; 0
    6c14:	40 e2       	ldi	r20, 0x20	; 32
    6c16:	51 e4       	ldi	r21, 0x41	; 65
    6c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c1c:	dc 01       	movw	r26, r24
    6c1e:	cb 01       	movw	r24, r22
    6c20:	bc 01       	movw	r22, r24
    6c22:	cd 01       	movw	r24, r26
    6c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c28:	dc 01       	movw	r26, r24
    6c2a:	cb 01       	movw	r24, r22
    6c2c:	9c 8b       	std	Y+20, r25	; 0x14
    6c2e:	8b 8b       	std	Y+19, r24	; 0x13
    6c30:	0f c0       	rjmp	.+30     	; 0x6c50 <LCD_enuInit+0x620>
    6c32:	89 e1       	ldi	r24, 0x19	; 25
    6c34:	90 e0       	ldi	r25, 0x00	; 0
    6c36:	9a 8b       	std	Y+18, r25	; 0x12
    6c38:	89 8b       	std	Y+17, r24	; 0x11
    6c3a:	89 89       	ldd	r24, Y+17	; 0x11
    6c3c:	9a 89       	ldd	r25, Y+18	; 0x12
    6c3e:	01 97       	sbiw	r24, 0x01	; 1
    6c40:	f1 f7       	brne	.-4      	; 0x6c3e <LCD_enuInit+0x60e>
    6c42:	9a 8b       	std	Y+18, r25	; 0x12
    6c44:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c46:	8b 89       	ldd	r24, Y+19	; 0x13
    6c48:	9c 89       	ldd	r25, Y+20	; 0x14
    6c4a:	01 97       	sbiw	r24, 0x01	; 1
    6c4c:	9c 8b       	std	Y+20, r25	; 0x14
    6c4e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c50:	8b 89       	ldd	r24, Y+19	; 0x13
    6c52:	9c 89       	ldd	r25, Y+20	; 0x14
    6c54:	00 97       	sbiw	r24, 0x00	; 0
    6c56:	69 f7       	brne	.-38     	; 0x6c32 <LCD_enuInit+0x602>
    6c58:	14 c0       	rjmp	.+40     	; 0x6c82 <LCD_enuInit+0x652>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6c5a:	6d 89       	ldd	r22, Y+21	; 0x15
    6c5c:	7e 89       	ldd	r23, Y+22	; 0x16
    6c5e:	8f 89       	ldd	r24, Y+23	; 0x17
    6c60:	98 8d       	ldd	r25, Y+24	; 0x18
    6c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c66:	dc 01       	movw	r26, r24
    6c68:	cb 01       	movw	r24, r22
    6c6a:	9c 8b       	std	Y+20, r25	; 0x14
    6c6c:	8b 8b       	std	Y+19, r24	; 0x13
    6c6e:	8b 89       	ldd	r24, Y+19	; 0x13
    6c70:	9c 89       	ldd	r25, Y+20	; 0x14
    6c72:	98 8b       	std	Y+16, r25	; 0x10
    6c74:	8f 87       	std	Y+15, r24	; 0x0f
    6c76:	8f 85       	ldd	r24, Y+15	; 0x0f
    6c78:	98 89       	ldd	r25, Y+16	; 0x10
    6c7a:	01 97       	sbiw	r24, 0x01	; 1
    6c7c:	f1 f7       	brne	.-4      	; 0x6c7a <LCD_enuInit+0x64a>
    6c7e:	98 8b       	std	Y+16, r25	; 0x10
    6c80:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	
	/* Entry Mode Set */
	Local_enuErrorState = LCD_inlenuSendCommand(LCD_Increase_NoShift);
    6c82:	86 e0       	ldi	r24, 0x06	; 6
    6c84:	0e 94 69 39 	call	0x72d2	; 0x72d2 <LCD_inlenuSendCommand>
    6c88:	fe 01       	movw	r30, r28
    6c8a:	e9 5b       	subi	r30, 0xB9	; 185
    6c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    6c8e:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    6c90:	fe 01       	movw	r30, r28
    6c92:	e9 5b       	subi	r30, 0xB9	; 185
    6c94:	ff 4f       	sbci	r31, 0xFF	; 255
    6c96:	80 81       	ld	r24, Z
    6c98:	88 23       	and	r24, r24
    6c9a:	41 f0       	breq	.+16     	; 0x6cac <LCD_enuInit+0x67c>
		return Local_enuErrorState;
    6c9c:	fe 01       	movw	r30, r28
    6c9e:	e9 5b       	subi	r30, 0xB9	; 185
    6ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    6ca2:	80 81       	ld	r24, Z
    6ca4:	29 96       	adiw	r28, 0x09	; 9
    6ca6:	8f af       	std	Y+63, r24	; 0x3f
    6ca8:	29 97       	sbiw	r28, 0x09	; 9
    6caa:	7d c0       	rjmp	.+250    	; 0x6da6 <LCD_enuInit+0x776>
    6cac:	80 e0       	ldi	r24, 0x00	; 0
    6cae:	90 e0       	ldi	r25, 0x00	; 0
    6cb0:	a0 e8       	ldi	r26, 0x80	; 128
    6cb2:	bf e3       	ldi	r27, 0x3F	; 63
    6cb4:	8b 87       	std	Y+11, r24	; 0x0b
    6cb6:	9c 87       	std	Y+12, r25	; 0x0c
    6cb8:	ad 87       	std	Y+13, r26	; 0x0d
    6cba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6cbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    6cbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    6cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    6cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    6cc4:	20 e0       	ldi	r18, 0x00	; 0
    6cc6:	30 e0       	ldi	r19, 0x00	; 0
    6cc8:	4a e7       	ldi	r20, 0x7A	; 122
    6cca:	53 e4       	ldi	r21, 0x43	; 67
    6ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6cd0:	dc 01       	movw	r26, r24
    6cd2:	cb 01       	movw	r24, r22
    6cd4:	8f 83       	std	Y+7, r24	; 0x07
    6cd6:	98 87       	std	Y+8, r25	; 0x08
    6cd8:	a9 87       	std	Y+9, r26	; 0x09
    6cda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6cdc:	6f 81       	ldd	r22, Y+7	; 0x07
    6cde:	78 85       	ldd	r23, Y+8	; 0x08
    6ce0:	89 85       	ldd	r24, Y+9	; 0x09
    6ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ce4:	20 e0       	ldi	r18, 0x00	; 0
    6ce6:	30 e0       	ldi	r19, 0x00	; 0
    6ce8:	40 e8       	ldi	r20, 0x80	; 128
    6cea:	5f e3       	ldi	r21, 0x3F	; 63
    6cec:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    6cf0:	88 23       	and	r24, r24
    6cf2:	2c f4       	brge	.+10     	; 0x6cfe <LCD_enuInit+0x6ce>
		__ticks = 1;
    6cf4:	81 e0       	ldi	r24, 0x01	; 1
    6cf6:	90 e0       	ldi	r25, 0x00	; 0
    6cf8:	9e 83       	std	Y+6, r25	; 0x06
    6cfa:	8d 83       	std	Y+5, r24	; 0x05
    6cfc:	3f c0       	rjmp	.+126    	; 0x6d7c <LCD_enuInit+0x74c>
	else if (__tmp > 65535)
    6cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    6d00:	78 85       	ldd	r23, Y+8	; 0x08
    6d02:	89 85       	ldd	r24, Y+9	; 0x09
    6d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d06:	20 e0       	ldi	r18, 0x00	; 0
    6d08:	3f ef       	ldi	r19, 0xFF	; 255
    6d0a:	4f e7       	ldi	r20, 0x7F	; 127
    6d0c:	57 e4       	ldi	r21, 0x47	; 71
    6d0e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    6d12:	18 16       	cp	r1, r24
    6d14:	4c f5       	brge	.+82     	; 0x6d68 <LCD_enuInit+0x738>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d16:	6b 85       	ldd	r22, Y+11	; 0x0b
    6d18:	7c 85       	ldd	r23, Y+12	; 0x0c
    6d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    6d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    6d1e:	20 e0       	ldi	r18, 0x00	; 0
    6d20:	30 e0       	ldi	r19, 0x00	; 0
    6d22:	40 e2       	ldi	r20, 0x20	; 32
    6d24:	51 e4       	ldi	r21, 0x41	; 65
    6d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d2a:	dc 01       	movw	r26, r24
    6d2c:	cb 01       	movw	r24, r22
    6d2e:	bc 01       	movw	r22, r24
    6d30:	cd 01       	movw	r24, r26
    6d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6d36:	dc 01       	movw	r26, r24
    6d38:	cb 01       	movw	r24, r22
    6d3a:	9e 83       	std	Y+6, r25	; 0x06
    6d3c:	8d 83       	std	Y+5, r24	; 0x05
    6d3e:	0f c0       	rjmp	.+30     	; 0x6d5e <LCD_enuInit+0x72e>
    6d40:	89 e1       	ldi	r24, 0x19	; 25
    6d42:	90 e0       	ldi	r25, 0x00	; 0
    6d44:	9c 83       	std	Y+4, r25	; 0x04
    6d46:	8b 83       	std	Y+3, r24	; 0x03
    6d48:	8b 81       	ldd	r24, Y+3	; 0x03
    6d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    6d4c:	01 97       	sbiw	r24, 0x01	; 1
    6d4e:	f1 f7       	brne	.-4      	; 0x6d4c <LCD_enuInit+0x71c>
    6d50:	9c 83       	std	Y+4, r25	; 0x04
    6d52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6d54:	8d 81       	ldd	r24, Y+5	; 0x05
    6d56:	9e 81       	ldd	r25, Y+6	; 0x06
    6d58:	01 97       	sbiw	r24, 0x01	; 1
    6d5a:	9e 83       	std	Y+6, r25	; 0x06
    6d5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    6d60:	9e 81       	ldd	r25, Y+6	; 0x06
    6d62:	00 97       	sbiw	r24, 0x00	; 0
    6d64:	69 f7       	brne	.-38     	; 0x6d40 <LCD_enuInit+0x710>
    6d66:	14 c0       	rjmp	.+40     	; 0x6d90 <LCD_enuInit+0x760>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6d68:	6f 81       	ldd	r22, Y+7	; 0x07
    6d6a:	78 85       	ldd	r23, Y+8	; 0x08
    6d6c:	89 85       	ldd	r24, Y+9	; 0x09
    6d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6d74:	dc 01       	movw	r26, r24
    6d76:	cb 01       	movw	r24, r22
    6d78:	9e 83       	std	Y+6, r25	; 0x06
    6d7a:	8d 83       	std	Y+5, r24	; 0x05
    6d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    6d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    6d80:	9a 83       	std	Y+2, r25	; 0x02
    6d82:	89 83       	std	Y+1, r24	; 0x01
    6d84:	89 81       	ldd	r24, Y+1	; 0x01
    6d86:	9a 81       	ldd	r25, Y+2	; 0x02
    6d88:	01 97       	sbiw	r24, 0x01	; 1
    6d8a:	f1 f7       	brne	.-4      	; 0x6d88 <LCD_enuInit+0x758>
    6d8c:	9a 83       	std	Y+2, r25	; 0x02
    6d8e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	
	Local_enuErrorState = ES_OK;
    6d90:	fe 01       	movw	r30, r28
    6d92:	e9 5b       	subi	r30, 0xB9	; 185
    6d94:	ff 4f       	sbci	r31, 0xFF	; 255
    6d96:	10 82       	st	Z, r1
	return Local_enuErrorState;
    6d98:	fe 01       	movw	r30, r28
    6d9a:	e9 5b       	subi	r30, 0xB9	; 185
    6d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    6d9e:	80 81       	ld	r24, Z
    6da0:	29 96       	adiw	r28, 0x09	; 9
    6da2:	8f af       	std	Y+63, r24	; 0x3f
    6da4:	29 97       	sbiw	r28, 0x09	; 9
    6da6:	29 96       	adiw	r28, 0x09	; 9
    6da8:	8f ad       	ldd	r24, Y+63	; 0x3f
    6daa:	29 97       	sbiw	r28, 0x09	; 9
}
    6dac:	c8 5b       	subi	r28, 0xB8	; 184
    6dae:	df 4f       	sbci	r29, 0xFF	; 255
    6db0:	0f b6       	in	r0, 0x3f	; 63
    6db2:	f8 94       	cli
    6db4:	de bf       	out	0x3e, r29	; 62
    6db6:	0f be       	out	0x3f, r0	; 63
    6db8:	cd bf       	out	0x3d, r28	; 61
    6dba:	cf 91       	pop	r28
    6dbc:	df 91       	pop	r29
    6dbe:	1f 91       	pop	r17
    6dc0:	0f 91       	pop	r16
    6dc2:	08 95       	ret

00006dc4 <LCD_enuDisplayChar>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    6dc4:	df 93       	push	r29
    6dc6:	cf 93       	push	r28
    6dc8:	00 d0       	rcall	.+0      	; 0x6dca <LCD_enuDisplayChar+0x6>
    6dca:	0f 92       	push	r0
    6dcc:	cd b7       	in	r28, 0x3d	; 61
    6dce:	de b7       	in	r29, 0x3e	; 62
    6dd0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    6dd2:	81 e0       	ldi	r24, 0x01	; 1
    6dd4:	89 83       	std	Y+1, r24	; 0x01
	
	/* Check position in case of we send data */
	LCD_vidCheckPosition();
    6dd6:	0e 94 f5 39 	call	0x73ea	; 0x73ea <LCD_vidCheckPosition>
	
	/* RS --> High to write Data */
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8HIGH);
    6dda:	80 e0       	ldi	r24, 0x00	; 0
    6ddc:	60 e0       	ldi	r22, 0x00	; 0
    6dde:	41 e0       	ldi	r20, 0x01	; 1
    6de0:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6de4:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enuErrorState != ES_OK)
    6de6:	89 81       	ldd	r24, Y+1	; 0x01
    6de8:	88 23       	and	r24, r24
    6dea:	19 f0       	breq	.+6      	; 0x6df2 <LCD_enuDisplayChar+0x2e>
		return Local_enuErrorState;
    6dec:	89 81       	ldd	r24, Y+1	; 0x01
    6dee:	8b 83       	std	Y+3, r24	; 0x03
    6df0:	0d c0       	rjmp	.+26     	; 0x6e0c <LCD_enuDisplayChar+0x48>
	
	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Data);
    6df2:	8a 81       	ldd	r24, Y+2	; 0x02
    6df4:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <LCD_enuLatch>
    6df8:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enuErrorState != ES_OK)
    6dfa:	89 81       	ldd	r24, Y+1	; 0x01
    6dfc:	88 23       	and	r24, r24
    6dfe:	19 f0       	breq	.+6      	; 0x6e06 <LCD_enuDisplayChar+0x42>
		return Local_enuErrorState;
    6e00:	89 81       	ldd	r24, Y+1	; 0x01
    6e02:	8b 83       	std	Y+3, r24	; 0x03
    6e04:	03 c0       	rjmp	.+6      	; 0x6e0c <LCD_enuDisplayChar+0x48>
	
	Local_enuErrorState = ES_OK;
    6e06:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    6e08:	89 81       	ldd	r24, Y+1	; 0x01
    6e0a:	8b 83       	std	Y+3, r24	; 0x03
    6e0c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    6e0e:	0f 90       	pop	r0
    6e10:	0f 90       	pop	r0
    6e12:	0f 90       	pop	r0
    6e14:	cf 91       	pop	r28
    6e16:	df 91       	pop	r29
    6e18:	08 95       	ret

00006e1a <LCD_enuSendCommand>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    6e1a:	df 93       	push	r29
    6e1c:	cf 93       	push	r28
    6e1e:	00 d0       	rcall	.+0      	; 0x6e20 <LCD_enuSendCommand+0x6>
    6e20:	0f 92       	push	r0
    6e22:	cd b7       	in	r28, 0x3d	; 61
    6e24:	de b7       	in	r29, 0x3e	; 62
    6e26:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    6e28:	81 e0       	ldi	r24, 0x01	; 1
    6e2a:	89 83       	std	Y+1, r24	; 0x01
	
	/* RS --> LOW to write Command */
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8LOW);
    6e2c:	80 e0       	ldi	r24, 0x00	; 0
    6e2e:	60 e0       	ldi	r22, 0x00	; 0
    6e30:	40 e0       	ldi	r20, 0x00	; 0
    6e32:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6e36:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enuErrorState != ES_OK)
    6e38:	89 81       	ldd	r24, Y+1	; 0x01
    6e3a:	88 23       	and	r24, r24
    6e3c:	19 f0       	breq	.+6      	; 0x6e44 <LCD_enuSendCommand+0x2a>
		return Local_enuErrorState;
    6e3e:	89 81       	ldd	r24, Y+1	; 0x01
    6e40:	8b 83       	std	Y+3, r24	; 0x03
    6e42:	0d c0       	rjmp	.+26     	; 0x6e5e <LCD_enuSendCommand+0x44>
	
	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Command);
    6e44:	8a 81       	ldd	r24, Y+2	; 0x02
    6e46:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <LCD_enuLatch>
    6e4a:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enuErrorState != ES_OK)
    6e4c:	89 81       	ldd	r24, Y+1	; 0x01
    6e4e:	88 23       	and	r24, r24
    6e50:	19 f0       	breq	.+6      	; 0x6e58 <LCD_enuSendCommand+0x3e>
		return Local_enuErrorState;
    6e52:	89 81       	ldd	r24, Y+1	; 0x01
    6e54:	8b 83       	std	Y+3, r24	; 0x03
    6e56:	03 c0       	rjmp	.+6      	; 0x6e5e <LCD_enuSendCommand+0x44>
	
	Local_enuErrorState = ES_OK;
    6e58:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    6e5a:	89 81       	ldd	r24, Y+1	; 0x01
    6e5c:	8b 83       	std	Y+3, r24	; 0x03
    6e5e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    6e60:	0f 90       	pop	r0
    6e62:	0f 90       	pop	r0
    6e64:	0f 90       	pop	r0
    6e66:	cf 91       	pop	r28
    6e68:	df 91       	pop	r29
    6e6a:	08 95       	ret

00006e6c <LCD_enuLatch>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
static ES_t LCD_enuLatch(u8 Copy_u8Data)
{	
    6e6c:	df 93       	push	r29
    6e6e:	cf 93       	push	r28
    6e70:	cd b7       	in	r28, 0x3d	; 61
    6e72:	de b7       	in	r29, 0x3e	; 62
    6e74:	6f 97       	sbiw	r28, 0x1f	; 31
    6e76:	0f b6       	in	r0, 0x3f	; 63
    6e78:	f8 94       	cli
    6e7a:	de bf       	out	0x3e, r29	; 62
    6e7c:	0f be       	out	0x3f, r0	; 63
    6e7e:	cd bf       	out	0x3d, r28	; 61
    6e80:	8e 8f       	std	Y+30, r24	; 0x1e
	ES_t Local_enuErrorState = ES_NOK;
    6e82:	81 e0       	ldi	r24, 0x01	; 1
    6e84:	8d 8f       	std	Y+29, r24	; 0x1d
	
	/* RW --> LOW to write */
	Local_enuErrorState = DIO_enuSetPinVal(RW_PORT, RW_PIN, DIO_u8LOW);
    6e86:	80 e0       	ldi	r24, 0x00	; 0
    6e88:	61 e0       	ldi	r22, 0x01	; 1
    6e8a:	40 e0       	ldi	r20, 0x00	; 0
    6e8c:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6e90:	8d 8f       	std	Y+29, r24	; 0x1d
	if(Local_enuErrorState != ES_OK)
    6e92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6e94:	88 23       	and	r24, r24
    6e96:	19 f0       	breq	.+6      	; 0x6e9e <LCD_enuLatch+0x32>
		return Local_enuErrorState;
    6e98:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6e9a:	8f 8f       	std	Y+31, r24	; 0x1f
    6e9c:	81 c1       	rjmp	.+770    	; 0x71a0 <LCD_enuLatch+0x334>
	
	/* Enable --> HIGH */
	Local_enuErrorState = DIO_enuSetPinVal(EN_PORT, EN_PIN, DIO_u8HIGH);
    6e9e:	80 e0       	ldi	r24, 0x00	; 0
    6ea0:	62 e0       	ldi	r22, 0x02	; 2
    6ea2:	41 e0       	ldi	r20, 0x01	; 1
    6ea4:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6ea8:	8d 8f       	std	Y+29, r24	; 0x1d
	if(Local_enuErrorState != ES_OK)
    6eaa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6eac:	88 23       	and	r24, r24
    6eae:	19 f0       	breq	.+6      	; 0x6eb6 <LCD_enuLatch+0x4a>
		return Local_enuErrorState;
    6eb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6eb2:	8f 8f       	std	Y+31, r24	; 0x1f
    6eb4:	75 c1       	rjmp	.+746    	; 0x71a0 <LCD_enuLatch+0x334>
	
	#if LCD_MODE == EIGHT_BIT
	/* Write Command to Data Pins */
	Local_enuErrorState = DIO_enuSetPinVal(D7_PORT, D7_PIN, ((Copy_u8Data >> D7_POS) & MASK_BIT));
    6eb6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6eb8:	98 2f       	mov	r25, r24
    6eba:	99 1f       	adc	r25, r25
    6ebc:	99 27       	eor	r25, r25
    6ebe:	99 1f       	adc	r25, r25
    6ec0:	81 e0       	ldi	r24, 0x01	; 1
    6ec2:	67 e0       	ldi	r22, 0x07	; 7
    6ec4:	49 2f       	mov	r20, r25
    6ec6:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6eca:	8d 8f       	std	Y+29, r24	; 0x1d
	if(Local_enuErrorState != ES_OK)
    6ecc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6ece:	88 23       	and	r24, r24
    6ed0:	19 f0       	breq	.+6      	; 0x6ed8 <LCD_enuLatch+0x6c>
		return Local_enuErrorState;
    6ed2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6ed4:	8f 8f       	std	Y+31, r24	; 0x1f
    6ed6:	64 c1       	rjmp	.+712    	; 0x71a0 <LCD_enuLatch+0x334>
		
	Local_enuErrorState = DIO_enuSetPinVal(D6_PORT, D6_PIN, ((Copy_u8Data >> D6_POS) & MASK_BIT));
    6ed8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6eda:	82 95       	swap	r24
    6edc:	86 95       	lsr	r24
    6ede:	86 95       	lsr	r24
    6ee0:	83 70       	andi	r24, 0x03	; 3
    6ee2:	98 2f       	mov	r25, r24
    6ee4:	91 70       	andi	r25, 0x01	; 1
    6ee6:	81 e0       	ldi	r24, 0x01	; 1
    6ee8:	66 e0       	ldi	r22, 0x06	; 6
    6eea:	49 2f       	mov	r20, r25
    6eec:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6ef0:	8d 8f       	std	Y+29, r24	; 0x1d
	if(Local_enuErrorState != ES_OK)
    6ef2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6ef4:	88 23       	and	r24, r24
    6ef6:	19 f0       	breq	.+6      	; 0x6efe <LCD_enuLatch+0x92>
		return Local_enuErrorState;
    6ef8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6efa:	8f 8f       	std	Y+31, r24	; 0x1f
    6efc:	51 c1       	rjmp	.+674    	; 0x71a0 <LCD_enuLatch+0x334>
		
	Local_enuErrorState = DIO_enuSetPinVal(D5_PORT, D5_PIN, ((Copy_u8Data >> D5_POS) & MASK_BIT));
    6efe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6f00:	82 95       	swap	r24
    6f02:	86 95       	lsr	r24
    6f04:	87 70       	andi	r24, 0x07	; 7
    6f06:	98 2f       	mov	r25, r24
    6f08:	91 70       	andi	r25, 0x01	; 1
    6f0a:	81 e0       	ldi	r24, 0x01	; 1
    6f0c:	65 e0       	ldi	r22, 0x05	; 5
    6f0e:	49 2f       	mov	r20, r25
    6f10:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6f14:	8d 8f       	std	Y+29, r24	; 0x1d
	if(Local_enuErrorState != ES_OK)
    6f16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6f18:	88 23       	and	r24, r24
    6f1a:	19 f0       	breq	.+6      	; 0x6f22 <LCD_enuLatch+0xb6>
		return Local_enuErrorState;
    6f1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6f1e:	8f 8f       	std	Y+31, r24	; 0x1f
    6f20:	3f c1       	rjmp	.+638    	; 0x71a0 <LCD_enuLatch+0x334>
		
	Local_enuErrorState = DIO_enuSetPinVal(D4_PORT, D4_PIN, ((Copy_u8Data >> D4_POS) & MASK_BIT));
    6f22:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6f24:	82 95       	swap	r24
    6f26:	8f 70       	andi	r24, 0x0F	; 15
    6f28:	98 2f       	mov	r25, r24
    6f2a:	91 70       	andi	r25, 0x01	; 1
    6f2c:	81 e0       	ldi	r24, 0x01	; 1
    6f2e:	64 e0       	ldi	r22, 0x04	; 4
    6f30:	49 2f       	mov	r20, r25
    6f32:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6f36:	8d 8f       	std	Y+29, r24	; 0x1d
	if(Local_enuErrorState != ES_OK)
    6f38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6f3a:	88 23       	and	r24, r24
    6f3c:	19 f0       	breq	.+6      	; 0x6f44 <LCD_enuLatch+0xd8>
		return Local_enuErrorState;
    6f3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6f40:	8f 8f       	std	Y+31, r24	; 0x1f
    6f42:	2e c1       	rjmp	.+604    	; 0x71a0 <LCD_enuLatch+0x334>
		
	Local_enuErrorState = DIO_enuSetPinVal(D3_PORT, D3_PIN, ((Copy_u8Data >> D3_POS) & MASK_BIT));
    6f44:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6f46:	86 95       	lsr	r24
    6f48:	86 95       	lsr	r24
    6f4a:	86 95       	lsr	r24
    6f4c:	98 2f       	mov	r25, r24
    6f4e:	91 70       	andi	r25, 0x01	; 1
    6f50:	81 e0       	ldi	r24, 0x01	; 1
    6f52:	63 e0       	ldi	r22, 0x03	; 3
    6f54:	49 2f       	mov	r20, r25
    6f56:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6f5a:	8d 8f       	std	Y+29, r24	; 0x1d
	if(Local_enuErrorState != ES_OK)
    6f5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6f5e:	88 23       	and	r24, r24
    6f60:	19 f0       	breq	.+6      	; 0x6f68 <LCD_enuLatch+0xfc>
		return Local_enuErrorState;
    6f62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6f64:	8f 8f       	std	Y+31, r24	; 0x1f
    6f66:	1c c1       	rjmp	.+568    	; 0x71a0 <LCD_enuLatch+0x334>
		
	Local_enuErrorState = DIO_enuSetPinVal(D2_PORT, D2_PIN, ((Copy_u8Data >> D2_POS) & MASK_BIT));
    6f68:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6f6a:	86 95       	lsr	r24
    6f6c:	86 95       	lsr	r24
    6f6e:	98 2f       	mov	r25, r24
    6f70:	91 70       	andi	r25, 0x01	; 1
    6f72:	81 e0       	ldi	r24, 0x01	; 1
    6f74:	62 e0       	ldi	r22, 0x02	; 2
    6f76:	49 2f       	mov	r20, r25
    6f78:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6f7c:	8d 8f       	std	Y+29, r24	; 0x1d
	if(Local_enuErrorState != ES_OK)
    6f7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6f80:	88 23       	and	r24, r24
    6f82:	19 f0       	breq	.+6      	; 0x6f8a <LCD_enuLatch+0x11e>
		return Local_enuErrorState;
    6f84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6f86:	8f 8f       	std	Y+31, r24	; 0x1f
    6f88:	0b c1       	rjmp	.+534    	; 0x71a0 <LCD_enuLatch+0x334>
	
	Local_enuErrorState = DIO_enuSetPinVal(D1_PORT, D1_PIN, ((Copy_u8Data >> D1_POS) & MASK_BIT));
    6f8a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6f8c:	86 95       	lsr	r24
    6f8e:	98 2f       	mov	r25, r24
    6f90:	91 70       	andi	r25, 0x01	; 1
    6f92:	81 e0       	ldi	r24, 0x01	; 1
    6f94:	61 e0       	ldi	r22, 0x01	; 1
    6f96:	49 2f       	mov	r20, r25
    6f98:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6f9c:	8d 8f       	std	Y+29, r24	; 0x1d
	if(Local_enuErrorState != ES_OK)
    6f9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6fa0:	88 23       	and	r24, r24
    6fa2:	19 f0       	breq	.+6      	; 0x6faa <LCD_enuLatch+0x13e>
		return Local_enuErrorState;
    6fa4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6fa6:	8f 8f       	std	Y+31, r24	; 0x1f
    6fa8:	fb c0       	rjmp	.+502    	; 0x71a0 <LCD_enuLatch+0x334>
		
	Local_enuErrorState = DIO_enuSetPinVal(D0_PORT, D0_PIN, ((Copy_u8Data >> D0_POS) & MASK_BIT));
    6faa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6fac:	98 2f       	mov	r25, r24
    6fae:	91 70       	andi	r25, 0x01	; 1
    6fb0:	81 e0       	ldi	r24, 0x01	; 1
    6fb2:	60 e0       	ldi	r22, 0x00	; 0
    6fb4:	49 2f       	mov	r20, r25
    6fb6:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6fba:	8d 8f       	std	Y+29, r24	; 0x1d
	if(Local_enuErrorState != ES_OK)
    6fbc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6fbe:	88 23       	and	r24, r24
    6fc0:	19 f0       	breq	.+6      	; 0x6fc8 <LCD_enuLatch+0x15c>
		return Local_enuErrorState;
    6fc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6fc4:	8f 8f       	std	Y+31, r24	; 0x1f
    6fc6:	ec c0       	rjmp	.+472    	; 0x71a0 <LCD_enuLatch+0x334>
    6fc8:	80 e0       	ldi	r24, 0x00	; 0
    6fca:	90 e0       	ldi	r25, 0x00	; 0
    6fcc:	a0 e8       	ldi	r26, 0x80	; 128
    6fce:	bf e3       	ldi	r27, 0x3F	; 63
    6fd0:	89 8f       	std	Y+25, r24	; 0x19
    6fd2:	9a 8f       	std	Y+26, r25	; 0x1a
    6fd4:	ab 8f       	std	Y+27, r26	; 0x1b
    6fd6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6fd8:	69 8d       	ldd	r22, Y+25	; 0x19
    6fda:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6fdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6fde:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6fe0:	20 e0       	ldi	r18, 0x00	; 0
    6fe2:	30 e0       	ldi	r19, 0x00	; 0
    6fe4:	4a e7       	ldi	r20, 0x7A	; 122
    6fe6:	53 e4       	ldi	r21, 0x43	; 67
    6fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6fec:	dc 01       	movw	r26, r24
    6fee:	cb 01       	movw	r24, r22
    6ff0:	8d 8b       	std	Y+21, r24	; 0x15
    6ff2:	9e 8b       	std	Y+22, r25	; 0x16
    6ff4:	af 8b       	std	Y+23, r26	; 0x17
    6ff6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6ff8:	6d 89       	ldd	r22, Y+21	; 0x15
    6ffa:	7e 89       	ldd	r23, Y+22	; 0x16
    6ffc:	8f 89       	ldd	r24, Y+23	; 0x17
    6ffe:	98 8d       	ldd	r25, Y+24	; 0x18
    7000:	20 e0       	ldi	r18, 0x00	; 0
    7002:	30 e0       	ldi	r19, 0x00	; 0
    7004:	40 e8       	ldi	r20, 0x80	; 128
    7006:	5f e3       	ldi	r21, 0x3F	; 63
    7008:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    700c:	88 23       	and	r24, r24
    700e:	2c f4       	brge	.+10     	; 0x701a <LCD_enuLatch+0x1ae>
		__ticks = 1;
    7010:	81 e0       	ldi	r24, 0x01	; 1
    7012:	90 e0       	ldi	r25, 0x00	; 0
    7014:	9c 8b       	std	Y+20, r25	; 0x14
    7016:	8b 8b       	std	Y+19, r24	; 0x13
    7018:	3f c0       	rjmp	.+126    	; 0x7098 <LCD_enuLatch+0x22c>
	else if (__tmp > 65535)
    701a:	6d 89       	ldd	r22, Y+21	; 0x15
    701c:	7e 89       	ldd	r23, Y+22	; 0x16
    701e:	8f 89       	ldd	r24, Y+23	; 0x17
    7020:	98 8d       	ldd	r25, Y+24	; 0x18
    7022:	20 e0       	ldi	r18, 0x00	; 0
    7024:	3f ef       	ldi	r19, 0xFF	; 255
    7026:	4f e7       	ldi	r20, 0x7F	; 127
    7028:	57 e4       	ldi	r21, 0x47	; 71
    702a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    702e:	18 16       	cp	r1, r24
    7030:	4c f5       	brge	.+82     	; 0x7084 <LCD_enuLatch+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7032:	69 8d       	ldd	r22, Y+25	; 0x19
    7034:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7036:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7038:	9c 8d       	ldd	r25, Y+28	; 0x1c
    703a:	20 e0       	ldi	r18, 0x00	; 0
    703c:	30 e0       	ldi	r19, 0x00	; 0
    703e:	40 e2       	ldi	r20, 0x20	; 32
    7040:	51 e4       	ldi	r21, 0x41	; 65
    7042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7046:	dc 01       	movw	r26, r24
    7048:	cb 01       	movw	r24, r22
    704a:	bc 01       	movw	r22, r24
    704c:	cd 01       	movw	r24, r26
    704e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7052:	dc 01       	movw	r26, r24
    7054:	cb 01       	movw	r24, r22
    7056:	9c 8b       	std	Y+20, r25	; 0x14
    7058:	8b 8b       	std	Y+19, r24	; 0x13
    705a:	0f c0       	rjmp	.+30     	; 0x707a <LCD_enuLatch+0x20e>
    705c:	89 e1       	ldi	r24, 0x19	; 25
    705e:	90 e0       	ldi	r25, 0x00	; 0
    7060:	9a 8b       	std	Y+18, r25	; 0x12
    7062:	89 8b       	std	Y+17, r24	; 0x11
    7064:	89 89       	ldd	r24, Y+17	; 0x11
    7066:	9a 89       	ldd	r25, Y+18	; 0x12
    7068:	01 97       	sbiw	r24, 0x01	; 1
    706a:	f1 f7       	brne	.-4      	; 0x7068 <LCD_enuLatch+0x1fc>
    706c:	9a 8b       	std	Y+18, r25	; 0x12
    706e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7070:	8b 89       	ldd	r24, Y+19	; 0x13
    7072:	9c 89       	ldd	r25, Y+20	; 0x14
    7074:	01 97       	sbiw	r24, 0x01	; 1
    7076:	9c 8b       	std	Y+20, r25	; 0x14
    7078:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    707a:	8b 89       	ldd	r24, Y+19	; 0x13
    707c:	9c 89       	ldd	r25, Y+20	; 0x14
    707e:	00 97       	sbiw	r24, 0x00	; 0
    7080:	69 f7       	brne	.-38     	; 0x705c <LCD_enuLatch+0x1f0>
    7082:	14 c0       	rjmp	.+40     	; 0x70ac <LCD_enuLatch+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7084:	6d 89       	ldd	r22, Y+21	; 0x15
    7086:	7e 89       	ldd	r23, Y+22	; 0x16
    7088:	8f 89       	ldd	r24, Y+23	; 0x17
    708a:	98 8d       	ldd	r25, Y+24	; 0x18
    708c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7090:	dc 01       	movw	r26, r24
    7092:	cb 01       	movw	r24, r22
    7094:	9c 8b       	std	Y+20, r25	; 0x14
    7096:	8b 8b       	std	Y+19, r24	; 0x13
    7098:	8b 89       	ldd	r24, Y+19	; 0x13
    709a:	9c 89       	ldd	r25, Y+20	; 0x14
    709c:	98 8b       	std	Y+16, r25	; 0x10
    709e:	8f 87       	std	Y+15, r24	; 0x0f
    70a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    70a2:	98 89       	ldd	r25, Y+16	; 0x10
    70a4:	01 97       	sbiw	r24, 0x01	; 1
    70a6:	f1 f7       	brne	.-4      	; 0x70a4 <LCD_enuLatch+0x238>
    70a8:	98 8b       	std	Y+16, r25	; 0x10
    70aa:	8f 87       	std	Y+15, r24	; 0x0f
	#else
	#error "LCD Mode has a wrong configuration"
	#endif
	
	_delay_ms(1);
	DIO_enuSetPinVal(EN_PORT, EN_PIN, DIO_u8LOW);
    70ac:	80 e0       	ldi	r24, 0x00	; 0
    70ae:	62 e0       	ldi	r22, 0x02	; 2
    70b0:	40 e0       	ldi	r20, 0x00	; 0
    70b2:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    70b6:	80 e0       	ldi	r24, 0x00	; 0
    70b8:	90 e0       	ldi	r25, 0x00	; 0
    70ba:	a0 e8       	ldi	r26, 0x80	; 128
    70bc:	bf e3       	ldi	r27, 0x3F	; 63
    70be:	8b 87       	std	Y+11, r24	; 0x0b
    70c0:	9c 87       	std	Y+12, r25	; 0x0c
    70c2:	ad 87       	std	Y+13, r26	; 0x0d
    70c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    70c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    70c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    70ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    70cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    70ce:	20 e0       	ldi	r18, 0x00	; 0
    70d0:	30 e0       	ldi	r19, 0x00	; 0
    70d2:	4a e7       	ldi	r20, 0x7A	; 122
    70d4:	53 e4       	ldi	r21, 0x43	; 67
    70d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    70da:	dc 01       	movw	r26, r24
    70dc:	cb 01       	movw	r24, r22
    70de:	8f 83       	std	Y+7, r24	; 0x07
    70e0:	98 87       	std	Y+8, r25	; 0x08
    70e2:	a9 87       	std	Y+9, r26	; 0x09
    70e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    70e6:	6f 81       	ldd	r22, Y+7	; 0x07
    70e8:	78 85       	ldd	r23, Y+8	; 0x08
    70ea:	89 85       	ldd	r24, Y+9	; 0x09
    70ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    70ee:	20 e0       	ldi	r18, 0x00	; 0
    70f0:	30 e0       	ldi	r19, 0x00	; 0
    70f2:	40 e8       	ldi	r20, 0x80	; 128
    70f4:	5f e3       	ldi	r21, 0x3F	; 63
    70f6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    70fa:	88 23       	and	r24, r24
    70fc:	2c f4       	brge	.+10     	; 0x7108 <LCD_enuLatch+0x29c>
		__ticks = 1;
    70fe:	81 e0       	ldi	r24, 0x01	; 1
    7100:	90 e0       	ldi	r25, 0x00	; 0
    7102:	9e 83       	std	Y+6, r25	; 0x06
    7104:	8d 83       	std	Y+5, r24	; 0x05
    7106:	3f c0       	rjmp	.+126    	; 0x7186 <LCD_enuLatch+0x31a>
	else if (__tmp > 65535)
    7108:	6f 81       	ldd	r22, Y+7	; 0x07
    710a:	78 85       	ldd	r23, Y+8	; 0x08
    710c:	89 85       	ldd	r24, Y+9	; 0x09
    710e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7110:	20 e0       	ldi	r18, 0x00	; 0
    7112:	3f ef       	ldi	r19, 0xFF	; 255
    7114:	4f e7       	ldi	r20, 0x7F	; 127
    7116:	57 e4       	ldi	r21, 0x47	; 71
    7118:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    711c:	18 16       	cp	r1, r24
    711e:	4c f5       	brge	.+82     	; 0x7172 <LCD_enuLatch+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7120:	6b 85       	ldd	r22, Y+11	; 0x0b
    7122:	7c 85       	ldd	r23, Y+12	; 0x0c
    7124:	8d 85       	ldd	r24, Y+13	; 0x0d
    7126:	9e 85       	ldd	r25, Y+14	; 0x0e
    7128:	20 e0       	ldi	r18, 0x00	; 0
    712a:	30 e0       	ldi	r19, 0x00	; 0
    712c:	40 e2       	ldi	r20, 0x20	; 32
    712e:	51 e4       	ldi	r21, 0x41	; 65
    7130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7134:	dc 01       	movw	r26, r24
    7136:	cb 01       	movw	r24, r22
    7138:	bc 01       	movw	r22, r24
    713a:	cd 01       	movw	r24, r26
    713c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7140:	dc 01       	movw	r26, r24
    7142:	cb 01       	movw	r24, r22
    7144:	9e 83       	std	Y+6, r25	; 0x06
    7146:	8d 83       	std	Y+5, r24	; 0x05
    7148:	0f c0       	rjmp	.+30     	; 0x7168 <LCD_enuLatch+0x2fc>
    714a:	89 e1       	ldi	r24, 0x19	; 25
    714c:	90 e0       	ldi	r25, 0x00	; 0
    714e:	9c 83       	std	Y+4, r25	; 0x04
    7150:	8b 83       	std	Y+3, r24	; 0x03
    7152:	8b 81       	ldd	r24, Y+3	; 0x03
    7154:	9c 81       	ldd	r25, Y+4	; 0x04
    7156:	01 97       	sbiw	r24, 0x01	; 1
    7158:	f1 f7       	brne	.-4      	; 0x7156 <LCD_enuLatch+0x2ea>
    715a:	9c 83       	std	Y+4, r25	; 0x04
    715c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    715e:	8d 81       	ldd	r24, Y+5	; 0x05
    7160:	9e 81       	ldd	r25, Y+6	; 0x06
    7162:	01 97       	sbiw	r24, 0x01	; 1
    7164:	9e 83       	std	Y+6, r25	; 0x06
    7166:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7168:	8d 81       	ldd	r24, Y+5	; 0x05
    716a:	9e 81       	ldd	r25, Y+6	; 0x06
    716c:	00 97       	sbiw	r24, 0x00	; 0
    716e:	69 f7       	brne	.-38     	; 0x714a <LCD_enuLatch+0x2de>
    7170:	14 c0       	rjmp	.+40     	; 0x719a <LCD_enuLatch+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7172:	6f 81       	ldd	r22, Y+7	; 0x07
    7174:	78 85       	ldd	r23, Y+8	; 0x08
    7176:	89 85       	ldd	r24, Y+9	; 0x09
    7178:	9a 85       	ldd	r25, Y+10	; 0x0a
    717a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    717e:	dc 01       	movw	r26, r24
    7180:	cb 01       	movw	r24, r22
    7182:	9e 83       	std	Y+6, r25	; 0x06
    7184:	8d 83       	std	Y+5, r24	; 0x05
    7186:	8d 81       	ldd	r24, Y+5	; 0x05
    7188:	9e 81       	ldd	r25, Y+6	; 0x06
    718a:	9a 83       	std	Y+2, r25	; 0x02
    718c:	89 83       	std	Y+1, r24	; 0x01
    718e:	89 81       	ldd	r24, Y+1	; 0x01
    7190:	9a 81       	ldd	r25, Y+2	; 0x02
    7192:	01 97       	sbiw	r24, 0x01	; 1
    7194:	f1 f7       	brne	.-4      	; 0x7192 <LCD_enuLatch+0x326>
    7196:	9a 83       	std	Y+2, r25	; 0x02
    7198:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	
	Local_enuErrorState = ES_OK;
    719a:	1d 8e       	std	Y+29, r1	; 0x1d
	return Local_enuErrorState;
    719c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    719e:	8f 8f       	std	Y+31, r24	; 0x1f
    71a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    71a2:	6f 96       	adiw	r28, 0x1f	; 31
    71a4:	0f b6       	in	r0, 0x3f	; 63
    71a6:	f8 94       	cli
    71a8:	de bf       	out	0x3e, r29	; 62
    71aa:	0f be       	out	0x3f, r0	; 63
    71ac:	cd bf       	out	0x3d, r28	; 61
    71ae:	cf 91       	pop	r28
    71b0:	df 91       	pop	r29
    71b2:	08 95       	ret

000071b4 <LCD_vidTrigger_LATCH>:

static void LCD_vidTrigger_LATCH(void)
{
    71b4:	df 93       	push	r29
    71b6:	cf 93       	push	r28
    71b8:	cd b7       	in	r28, 0x3d	; 61
    71ba:	de b7       	in	r29, 0x3e	; 62
    71bc:	2e 97       	sbiw	r28, 0x0e	; 14
    71be:	0f b6       	in	r0, 0x3f	; 63
    71c0:	f8 94       	cli
    71c2:	de bf       	out	0x3e, r29	; 62
    71c4:	0f be       	out	0x3f, r0	; 63
    71c6:	cd bf       	out	0x3d, r28	; 61
	/* Enable EN --> it works at Rising Edge */
	DIO_enuSetPinVal(EN_PORT, EN_PIN, DIO_u8LOW);
    71c8:	80 e0       	ldi	r24, 0x00	; 0
    71ca:	62 e0       	ldi	r22, 0x02	; 2
    71cc:	40 e0       	ldi	r20, 0x00	; 0
    71ce:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    71d2:	80 e0       	ldi	r24, 0x00	; 0
    71d4:	90 e0       	ldi	r25, 0x00	; 0
    71d6:	a0 e2       	ldi	r26, 0x20	; 32
    71d8:	b1 e4       	ldi	r27, 0x41	; 65
    71da:	8b 87       	std	Y+11, r24	; 0x0b
    71dc:	9c 87       	std	Y+12, r25	; 0x0c
    71de:	ad 87       	std	Y+13, r26	; 0x0d
    71e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    71e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    71e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    71e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    71e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    71ea:	20 e0       	ldi	r18, 0x00	; 0
    71ec:	30 e0       	ldi	r19, 0x00	; 0
    71ee:	4a e7       	ldi	r20, 0x7A	; 122
    71f0:	53 e4       	ldi	r21, 0x43	; 67
    71f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    71f6:	dc 01       	movw	r26, r24
    71f8:	cb 01       	movw	r24, r22
    71fa:	8f 83       	std	Y+7, r24	; 0x07
    71fc:	98 87       	std	Y+8, r25	; 0x08
    71fe:	a9 87       	std	Y+9, r26	; 0x09
    7200:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7202:	6f 81       	ldd	r22, Y+7	; 0x07
    7204:	78 85       	ldd	r23, Y+8	; 0x08
    7206:	89 85       	ldd	r24, Y+9	; 0x09
    7208:	9a 85       	ldd	r25, Y+10	; 0x0a
    720a:	20 e0       	ldi	r18, 0x00	; 0
    720c:	30 e0       	ldi	r19, 0x00	; 0
    720e:	40 e8       	ldi	r20, 0x80	; 128
    7210:	5f e3       	ldi	r21, 0x3F	; 63
    7212:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    7216:	88 23       	and	r24, r24
    7218:	2c f4       	brge	.+10     	; 0x7224 <LCD_vidTrigger_LATCH+0x70>
		__ticks = 1;
    721a:	81 e0       	ldi	r24, 0x01	; 1
    721c:	90 e0       	ldi	r25, 0x00	; 0
    721e:	9e 83       	std	Y+6, r25	; 0x06
    7220:	8d 83       	std	Y+5, r24	; 0x05
    7222:	3f c0       	rjmp	.+126    	; 0x72a2 <LCD_vidTrigger_LATCH+0xee>
	else if (__tmp > 65535)
    7224:	6f 81       	ldd	r22, Y+7	; 0x07
    7226:	78 85       	ldd	r23, Y+8	; 0x08
    7228:	89 85       	ldd	r24, Y+9	; 0x09
    722a:	9a 85       	ldd	r25, Y+10	; 0x0a
    722c:	20 e0       	ldi	r18, 0x00	; 0
    722e:	3f ef       	ldi	r19, 0xFF	; 255
    7230:	4f e7       	ldi	r20, 0x7F	; 127
    7232:	57 e4       	ldi	r21, 0x47	; 71
    7234:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    7238:	18 16       	cp	r1, r24
    723a:	4c f5       	brge	.+82     	; 0x728e <LCD_vidTrigger_LATCH+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    723c:	6b 85       	ldd	r22, Y+11	; 0x0b
    723e:	7c 85       	ldd	r23, Y+12	; 0x0c
    7240:	8d 85       	ldd	r24, Y+13	; 0x0d
    7242:	9e 85       	ldd	r25, Y+14	; 0x0e
    7244:	20 e0       	ldi	r18, 0x00	; 0
    7246:	30 e0       	ldi	r19, 0x00	; 0
    7248:	40 e2       	ldi	r20, 0x20	; 32
    724a:	51 e4       	ldi	r21, 0x41	; 65
    724c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7250:	dc 01       	movw	r26, r24
    7252:	cb 01       	movw	r24, r22
    7254:	bc 01       	movw	r22, r24
    7256:	cd 01       	movw	r24, r26
    7258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    725c:	dc 01       	movw	r26, r24
    725e:	cb 01       	movw	r24, r22
    7260:	9e 83       	std	Y+6, r25	; 0x06
    7262:	8d 83       	std	Y+5, r24	; 0x05
    7264:	0f c0       	rjmp	.+30     	; 0x7284 <LCD_vidTrigger_LATCH+0xd0>
    7266:	89 e1       	ldi	r24, 0x19	; 25
    7268:	90 e0       	ldi	r25, 0x00	; 0
    726a:	9c 83       	std	Y+4, r25	; 0x04
    726c:	8b 83       	std	Y+3, r24	; 0x03
    726e:	8b 81       	ldd	r24, Y+3	; 0x03
    7270:	9c 81       	ldd	r25, Y+4	; 0x04
    7272:	01 97       	sbiw	r24, 0x01	; 1
    7274:	f1 f7       	brne	.-4      	; 0x7272 <LCD_vidTrigger_LATCH+0xbe>
    7276:	9c 83       	std	Y+4, r25	; 0x04
    7278:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    727a:	8d 81       	ldd	r24, Y+5	; 0x05
    727c:	9e 81       	ldd	r25, Y+6	; 0x06
    727e:	01 97       	sbiw	r24, 0x01	; 1
    7280:	9e 83       	std	Y+6, r25	; 0x06
    7282:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7284:	8d 81       	ldd	r24, Y+5	; 0x05
    7286:	9e 81       	ldd	r25, Y+6	; 0x06
    7288:	00 97       	sbiw	r24, 0x00	; 0
    728a:	69 f7       	brne	.-38     	; 0x7266 <LCD_vidTrigger_LATCH+0xb2>
    728c:	14 c0       	rjmp	.+40     	; 0x72b6 <LCD_vidTrigger_LATCH+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    728e:	6f 81       	ldd	r22, Y+7	; 0x07
    7290:	78 85       	ldd	r23, Y+8	; 0x08
    7292:	89 85       	ldd	r24, Y+9	; 0x09
    7294:	9a 85       	ldd	r25, Y+10	; 0x0a
    7296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    729a:	dc 01       	movw	r26, r24
    729c:	cb 01       	movw	r24, r22
    729e:	9e 83       	std	Y+6, r25	; 0x06
    72a0:	8d 83       	std	Y+5, r24	; 0x05
    72a2:	8d 81       	ldd	r24, Y+5	; 0x05
    72a4:	9e 81       	ldd	r25, Y+6	; 0x06
    72a6:	9a 83       	std	Y+2, r25	; 0x02
    72a8:	89 83       	std	Y+1, r24	; 0x01
    72aa:	89 81       	ldd	r24, Y+1	; 0x01
    72ac:	9a 81       	ldd	r25, Y+2	; 0x02
    72ae:	01 97       	sbiw	r24, 0x01	; 1
    72b0:	f1 f7       	brne	.-4      	; 0x72ae <LCD_vidTrigger_LATCH+0xfa>
    72b2:	9a 83       	std	Y+2, r25	; 0x02
    72b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinVal(EN_PORT, EN_PIN, DIO_u8HIGH);
    72b6:	80 e0       	ldi	r24, 0x00	; 0
    72b8:	62 e0       	ldi	r22, 0x02	; 2
    72ba:	41 e0       	ldi	r20, 0x01	; 1
    72bc:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
}
    72c0:	2e 96       	adiw	r28, 0x0e	; 14
    72c2:	0f b6       	in	r0, 0x3f	; 63
    72c4:	f8 94       	cli
    72c6:	de bf       	out	0x3e, r29	; 62
    72c8:	0f be       	out	0x3f, r0	; 63
    72ca:	cd bf       	out	0x3d, r28	; 61
    72cc:	cf 91       	pop	r28
    72ce:	df 91       	pop	r29
    72d0:	08 95       	ret

000072d2 <LCD_inlenuSendCommand>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
static inline ES_t LCD_inlenuSendCommand(u8 Copy_u8Command)
{
    72d2:	df 93       	push	r29
    72d4:	cf 93       	push	r28
    72d6:	00 d0       	rcall	.+0      	; 0x72d8 <LCD_inlenuSendCommand+0x6>
    72d8:	0f 92       	push	r0
    72da:	cd b7       	in	r28, 0x3d	; 61
    72dc:	de b7       	in	r29, 0x3e	; 62
    72de:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    72e0:	81 e0       	ldi	r24, 0x01	; 1
    72e2:	89 83       	std	Y+1, r24	; 0x01
		
	/* RS --> LOW to write Command */
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8LOW);
    72e4:	80 e0       	ldi	r24, 0x00	; 0
    72e6:	60 e0       	ldi	r22, 0x00	; 0
    72e8:	40 e0       	ldi	r20, 0x00	; 0
    72ea:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    72ee:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enuErrorState != ES_OK)
    72f0:	89 81       	ldd	r24, Y+1	; 0x01
    72f2:	88 23       	and	r24, r24
    72f4:	19 f0       	breq	.+6      	; 0x72fc <LCD_inlenuSendCommand+0x2a>
		return Local_enuErrorState;	
    72f6:	89 81       	ldd	r24, Y+1	; 0x01
    72f8:	8b 83       	std	Y+3, r24	; 0x03
    72fa:	0d c0       	rjmp	.+26     	; 0x7316 <LCD_inlenuSendCommand+0x44>

	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Command);
    72fc:	8a 81       	ldd	r24, Y+2	; 0x02
    72fe:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <LCD_enuLatch>
    7302:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enuErrorState != ES_OK)
    7304:	89 81       	ldd	r24, Y+1	; 0x01
    7306:	88 23       	and	r24, r24
    7308:	19 f0       	breq	.+6      	; 0x7310 <LCD_inlenuSendCommand+0x3e>
		return Local_enuErrorState;
    730a:	89 81       	ldd	r24, Y+1	; 0x01
    730c:	8b 83       	std	Y+3, r24	; 0x03
    730e:	03 c0       	rjmp	.+6      	; 0x7316 <LCD_inlenuSendCommand+0x44>
	
	Local_enuErrorState = ES_OK;	
    7310:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    7312:	89 81       	ldd	r24, Y+1	; 0x01
    7314:	8b 83       	std	Y+3, r24	; 0x03
    7316:	8b 81       	ldd	r24, Y+3	; 0x03
}
    7318:	0f 90       	pop	r0
    731a:	0f 90       	pop	r0
    731c:	0f 90       	pop	r0
    731e:	cf 91       	pop	r28
    7320:	df 91       	pop	r29
    7322:	08 95       	ret

00007324 <LCD_enuGoToPosition>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuGoToPosition(u8 Copy_u8Line, u8 Copy_u8Position)
{
    7324:	df 93       	push	r29
    7326:	cf 93       	push	r28
    7328:	00 d0       	rcall	.+0      	; 0x732a <LCD_enuGoToPosition+0x6>
    732a:	00 d0       	rcall	.+0      	; 0x732c <LCD_enuGoToPosition+0x8>
    732c:	cd b7       	in	r28, 0x3d	; 61
    732e:	de b7       	in	r29, 0x3e	; 62
    7330:	8a 83       	std	Y+2, r24	; 0x02
    7332:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_enuErrorState = ES_NOK;
    7334:	81 e0       	ldi	r24, 0x01	; 1
    7336:	89 83       	std	Y+1, r24	; 0x01

    if (Copy_u8Position < 20) // Check if position is within the line range
    7338:	8b 81       	ldd	r24, Y+3	; 0x03
    733a:	84 31       	cpi	r24, 0x14	; 20
    733c:	08 f0       	brcs	.+2      	; 0x7340 <LCD_enuGoToPosition+0x1c>
    733e:	4a c0       	rjmp	.+148    	; 0x73d4 <LCD_enuGoToPosition+0xb0>
    {
        if (Copy_u8Line == LCD_FIRST_LINE)
    7340:	8a 81       	ldd	r24, Y+2	; 0x02
    7342:	88 23       	and	r24, r24
    7344:	79 f4       	brne	.+30     	; 0x7364 <LCD_enuGoToPosition+0x40>
        {
            Local_enuErrorState = LCD_inlenuSendCommand(LCD_BEGIN_AT_FIRST_ROW + Copy_u8Position);
    7346:	8b 81       	ldd	r24, Y+3	; 0x03
    7348:	80 58       	subi	r24, 0x80	; 128
    734a:	0e 94 69 39 	call	0x72d2	; 0x72d2 <LCD_inlenuSendCommand>
    734e:	89 83       	std	Y+1, r24	; 0x01
            if (Local_enuErrorState != ES_OK)
    7350:	89 81       	ldd	r24, Y+1	; 0x01
    7352:	88 23       	and	r24, r24
    7354:	19 f0       	breq	.+6      	; 0x735c <LCD_enuGoToPosition+0x38>
                return Local_enuErrorState;
    7356:	89 81       	ldd	r24, Y+1	; 0x01
    7358:	8c 83       	std	Y+4, r24	; 0x04
    735a:	3f c0       	rjmp	.+126    	; 0x73da <LCD_enuGoToPosition+0xb6>

            LCD_u8PosCounter = Copy_u8Position;
    735c:	8b 81       	ldd	r24, Y+3	; 0x03
    735e:	80 93 30 02 	sts	0x0230, r24
    7362:	38 c0       	rjmp	.+112    	; 0x73d4 <LCD_enuGoToPosition+0xb0>
        }
        else if (Copy_u8Line == LCD_SECOND_LINE)
    7364:	8a 81       	ldd	r24, Y+2	; 0x02
    7366:	81 30       	cpi	r24, 0x01	; 1
    7368:	81 f4       	brne	.+32     	; 0x738a <LCD_enuGoToPosition+0x66>
        {
            Local_enuErrorState = LCD_inlenuSendCommand(LCD_BEGIN_AT_SECOND_ROW + Copy_u8Position);
    736a:	8b 81       	ldd	r24, Y+3	; 0x03
    736c:	80 54       	subi	r24, 0x40	; 64
    736e:	0e 94 69 39 	call	0x72d2	; 0x72d2 <LCD_inlenuSendCommand>
    7372:	89 83       	std	Y+1, r24	; 0x01
            if (Local_enuErrorState != ES_OK)
    7374:	89 81       	ldd	r24, Y+1	; 0x01
    7376:	88 23       	and	r24, r24
    7378:	19 f0       	breq	.+6      	; 0x7380 <LCD_enuGoToPosition+0x5c>
                return Local_enuErrorState;
    737a:	89 81       	ldd	r24, Y+1	; 0x01
    737c:	8c 83       	std	Y+4, r24	; 0x04
    737e:	2d c0       	rjmp	.+90     	; 0x73da <LCD_enuGoToPosition+0xb6>

            LCD_u8PosCounter = Copy_u8Position + 20;
    7380:	8b 81       	ldd	r24, Y+3	; 0x03
    7382:	8c 5e       	subi	r24, 0xEC	; 236
    7384:	80 93 30 02 	sts	0x0230, r24
    7388:	25 c0       	rjmp	.+74     	; 0x73d4 <LCD_enuGoToPosition+0xb0>
        }
        else if (Copy_u8Line == LCD_THIRD_LINE)
    738a:	8a 81       	ldd	r24, Y+2	; 0x02
    738c:	82 30       	cpi	r24, 0x02	; 2
    738e:	81 f4       	brne	.+32     	; 0x73b0 <LCD_enuGoToPosition+0x8c>
        {
            Local_enuErrorState = LCD_inlenuSendCommand(LCD_BEGIN_AT_THIRD_ROW + Copy_u8Position);
    7390:	8b 81       	ldd	r24, Y+3	; 0x03
    7392:	8c 56       	subi	r24, 0x6C	; 108
    7394:	0e 94 69 39 	call	0x72d2	; 0x72d2 <LCD_inlenuSendCommand>
    7398:	89 83       	std	Y+1, r24	; 0x01
            if (Local_enuErrorState != ES_OK)
    739a:	89 81       	ldd	r24, Y+1	; 0x01
    739c:	88 23       	and	r24, r24
    739e:	19 f0       	breq	.+6      	; 0x73a6 <LCD_enuGoToPosition+0x82>
                return Local_enuErrorState;
    73a0:	89 81       	ldd	r24, Y+1	; 0x01
    73a2:	8c 83       	std	Y+4, r24	; 0x04
    73a4:	1a c0       	rjmp	.+52     	; 0x73da <LCD_enuGoToPosition+0xb6>

            LCD_u8PosCounter = Copy_u8Position + 40;
    73a6:	8b 81       	ldd	r24, Y+3	; 0x03
    73a8:	88 5d       	subi	r24, 0xD8	; 216
    73aa:	80 93 30 02 	sts	0x0230, r24
    73ae:	12 c0       	rjmp	.+36     	; 0x73d4 <LCD_enuGoToPosition+0xb0>
        }
        else if (Copy_u8Line == LCD_FOURTH_LINE)
    73b0:	8a 81       	ldd	r24, Y+2	; 0x02
    73b2:	83 30       	cpi	r24, 0x03	; 3
    73b4:	79 f4       	brne	.+30     	; 0x73d4 <LCD_enuGoToPosition+0xb0>
        {
            Local_enuErrorState = LCD_inlenuSendCommand(LCD_BEGIN_AT_FOURTH_ROW + Copy_u8Position);
    73b6:	8b 81       	ldd	r24, Y+3	; 0x03
    73b8:	8c 52       	subi	r24, 0x2C	; 44
    73ba:	0e 94 69 39 	call	0x72d2	; 0x72d2 <LCD_inlenuSendCommand>
    73be:	89 83       	std	Y+1, r24	; 0x01
            if (Local_enuErrorState != ES_OK)
    73c0:	89 81       	ldd	r24, Y+1	; 0x01
    73c2:	88 23       	and	r24, r24
    73c4:	19 f0       	breq	.+6      	; 0x73cc <LCD_enuGoToPosition+0xa8>
                return Local_enuErrorState;
    73c6:	89 81       	ldd	r24, Y+1	; 0x01
    73c8:	8c 83       	std	Y+4, r24	; 0x04
    73ca:	07 c0       	rjmp	.+14     	; 0x73da <LCD_enuGoToPosition+0xb6>

            LCD_u8PosCounter = Copy_u8Position + 60;
    73cc:	8b 81       	ldd	r24, Y+3	; 0x03
    73ce:	84 5c       	subi	r24, 0xC4	; 196
    73d0:	80 93 30 02 	sts	0x0230, r24
        }
    }

    Local_enuErrorState = ES_OK;
    73d4:	19 82       	std	Y+1, r1	; 0x01
    return Local_enuErrorState;
    73d6:	89 81       	ldd	r24, Y+1	; 0x01
    73d8:	8c 83       	std	Y+4, r24	; 0x04
    73da:	8c 81       	ldd	r24, Y+4	; 0x04
}
    73dc:	0f 90       	pop	r0
    73de:	0f 90       	pop	r0
    73e0:	0f 90       	pop	r0
    73e2:	0f 90       	pop	r0
    73e4:	cf 91       	pop	r28
    73e6:	df 91       	pop	r29
    73e8:	08 95       	ret

000073ea <LCD_vidCheckPosition>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
static void LCD_vidCheckPosition(void)
{
    73ea:	df 93       	push	r29
    73ec:	cf 93       	push	r28
    73ee:	cd b7       	in	r28, 0x3d	; 61
    73f0:	de b7       	in	r29, 0x3e	; 62
    if (LCD_u8PosCounter == 20)
    73f2:	80 91 30 02 	lds	r24, 0x0230
    73f6:	84 31       	cpi	r24, 0x14	; 20
    73f8:	51 f4       	brne	.+20     	; 0x740e <LCD_vidCheckPosition+0x24>
    {
        LCD_enuGoToPosition(LCD_SECOND_LINE, 0);
    73fa:	81 e0       	ldi	r24, 0x01	; 1
    73fc:	60 e0       	ldi	r22, 0x00	; 0
    73fe:	0e 94 92 39 	call	0x7324	; 0x7324 <LCD_enuGoToPosition>
        LCD_u8PosCounter++;
    7402:	80 91 30 02 	lds	r24, 0x0230
    7406:	8f 5f       	subi	r24, 0xFF	; 255
    7408:	80 93 30 02 	sts	0x0230, r24
    740c:	2f c0       	rjmp	.+94     	; 0x746c <LCD_vidCheckPosition+0x82>
    }
    else if (LCD_u8PosCounter == 40)
    740e:	80 91 30 02 	lds	r24, 0x0230
    7412:	88 32       	cpi	r24, 0x28	; 40
    7414:	51 f4       	brne	.+20     	; 0x742a <LCD_vidCheckPosition+0x40>
    {
        LCD_enuGoToPosition(LCD_THIRD_LINE, 0);
    7416:	82 e0       	ldi	r24, 0x02	; 2
    7418:	60 e0       	ldi	r22, 0x00	; 0
    741a:	0e 94 92 39 	call	0x7324	; 0x7324 <LCD_enuGoToPosition>
        LCD_u8PosCounter++;
    741e:	80 91 30 02 	lds	r24, 0x0230
    7422:	8f 5f       	subi	r24, 0xFF	; 255
    7424:	80 93 30 02 	sts	0x0230, r24
    7428:	21 c0       	rjmp	.+66     	; 0x746c <LCD_vidCheckPosition+0x82>
    }
    else if (LCD_u8PosCounter == 60)
    742a:	80 91 30 02 	lds	r24, 0x0230
    742e:	8c 33       	cpi	r24, 0x3C	; 60
    7430:	51 f4       	brne	.+20     	; 0x7446 <LCD_vidCheckPosition+0x5c>
    {
        LCD_enuGoToPosition(LCD_FOURTH_LINE, 0);
    7432:	83 e0       	ldi	r24, 0x03	; 3
    7434:	60 e0       	ldi	r22, 0x00	; 0
    7436:	0e 94 92 39 	call	0x7324	; 0x7324 <LCD_enuGoToPosition>
        LCD_u8PosCounter++;
    743a:	80 91 30 02 	lds	r24, 0x0230
    743e:	8f 5f       	subi	r24, 0xFF	; 255
    7440:	80 93 30 02 	sts	0x0230, r24
    7444:	13 c0       	rjmp	.+38     	; 0x746c <LCD_vidCheckPosition+0x82>
    }
    else if (LCD_u8PosCounter == 80)
    7446:	80 91 30 02 	lds	r24, 0x0230
    744a:	80 35       	cpi	r24, 0x50	; 80
    744c:	51 f4       	brne	.+20     	; 0x7462 <LCD_vidCheckPosition+0x78>
    {
        LCD_inlenuSendCommand(LCD_Clear_Display);
    744e:	81 e0       	ldi	r24, 0x01	; 1
    7450:	0e 94 69 39 	call	0x72d2	; 0x72d2 <LCD_inlenuSendCommand>
        LCD_enuGoToPosition(LCD_FIRST_LINE, 0);
    7454:	80 e0       	ldi	r24, 0x00	; 0
    7456:	60 e0       	ldi	r22, 0x00	; 0
    7458:	0e 94 92 39 	call	0x7324	; 0x7324 <LCD_enuGoToPosition>
        LCD_u8PosCounter = 0;
    745c:	10 92 30 02 	sts	0x0230, r1
    7460:	05 c0       	rjmp	.+10     	; 0x746c <LCD_vidCheckPosition+0x82>
    }
    else
    {
        LCD_u8PosCounter++;
    7462:	80 91 30 02 	lds	r24, 0x0230
    7466:	8f 5f       	subi	r24, 0xFF	; 255
    7468:	80 93 30 02 	sts	0x0230, r24
    }
}
    746c:	cf 91       	pop	r28
    746e:	df 91       	pop	r29
    7470:	08 95       	ret

00007472 <LCD_vidClearScreen>:
 * @retval		: none
 * @note		: none
 ******************************************************************************
**/
void LCD_vidClearScreen(void)
{
    7472:	df 93       	push	r29
    7474:	cf 93       	push	r28
    7476:	cd b7       	in	r28, 0x3d	; 61
    7478:	de b7       	in	r29, 0x3e	; 62
	LCD_inlenuSendCommand(LCD_Clear_Display);
    747a:	81 e0       	ldi	r24, 0x01	; 1
    747c:	0e 94 69 39 	call	0x72d2	; 0x72d2 <LCD_inlenuSendCommand>
	LCD_u8PosCounter = 0;
    7480:	10 92 30 02 	sts	0x0230, r1
}
    7484:	cf 91       	pop	r28
    7486:	df 91       	pop	r29
    7488:	08 95       	ret

0000748a <LCD_enuWriteString>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuWriteString(u8 *Copy_pu8Str)
{
    748a:	df 93       	push	r29
    748c:	cf 93       	push	r28
    748e:	00 d0       	rcall	.+0      	; 0x7490 <LCD_enuWriteString+0x6>
    7490:	00 d0       	rcall	.+0      	; 0x7492 <LCD_enuWriteString+0x8>
    7492:	cd b7       	in	r28, 0x3d	; 61
    7494:	de b7       	in	r29, 0x3e	; 62
    7496:	9b 83       	std	Y+3, r25	; 0x03
    7498:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    749a:	81 e0       	ldi	r24, 0x01	; 1
    749c:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_pu8Str != NULL)
    749e:	8a 81       	ldd	r24, Y+2	; 0x02
    74a0:	9b 81       	ldd	r25, Y+3	; 0x03
    74a2:	00 97       	sbiw	r24, 0x00	; 0
    74a4:	e1 f0       	breq	.+56     	; 0x74de <LCD_enuWriteString+0x54>
    74a6:	11 c0       	rjmp	.+34     	; 0x74ca <LCD_enuWriteString+0x40>
	{
		while(*Copy_pu8Str != '\0')
		{
			Local_enuErrorState = LCD_enuDisplayChar(*Copy_pu8Str);
    74a8:	ea 81       	ldd	r30, Y+2	; 0x02
    74aa:	fb 81       	ldd	r31, Y+3	; 0x03
    74ac:	80 81       	ld	r24, Z
    74ae:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <LCD_enuDisplayChar>
    74b2:	89 83       	std	Y+1, r24	; 0x01
			if(Local_enuErrorState != ES_OK)
    74b4:	89 81       	ldd	r24, Y+1	; 0x01
    74b6:	88 23       	and	r24, r24
    74b8:	19 f0       	breq	.+6      	; 0x74c0 <LCD_enuWriteString+0x36>
				return Local_enuErrorState;
    74ba:	89 81       	ldd	r24, Y+1	; 0x01
    74bc:	8c 83       	std	Y+4, r24	; 0x04
    74be:	11 c0       	rjmp	.+34     	; 0x74e2 <LCD_enuWriteString+0x58>
			Copy_pu8Str++;
    74c0:	8a 81       	ldd	r24, Y+2	; 0x02
    74c2:	9b 81       	ldd	r25, Y+3	; 0x03
    74c4:	01 96       	adiw	r24, 0x01	; 1
    74c6:	9b 83       	std	Y+3, r25	; 0x03
    74c8:	8a 83       	std	Y+2, r24	; 0x02
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_pu8Str != NULL)
	{
		while(*Copy_pu8Str != '\0')
    74ca:	ea 81       	ldd	r30, Y+2	; 0x02
    74cc:	fb 81       	ldd	r31, Y+3	; 0x03
    74ce:	80 81       	ld	r24, Z
    74d0:	88 23       	and	r24, r24
    74d2:	51 f7       	brne	.-44     	; 0x74a8 <LCD_enuWriteString+0x1e>
			Local_enuErrorState = LCD_enuDisplayChar(*Copy_pu8Str);
			if(Local_enuErrorState != ES_OK)
				return Local_enuErrorState;
			Copy_pu8Str++;
		}
		Local_enuErrorState = ES_OK;
    74d4:	19 82       	std	Y+1, r1	; 0x01
	else
	{
		return ES_NULL_POINTER;
	}
	
	Local_enuErrorState = ES_OK;
    74d6:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    74d8:	89 81       	ldd	r24, Y+1	; 0x01
    74da:	8c 83       	std	Y+4, r24	; 0x04
    74dc:	02 c0       	rjmp	.+4      	; 0x74e2 <LCD_enuWriteString+0x58>
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		return ES_NULL_POINTER;
    74de:	82 e0       	ldi	r24, 0x02	; 2
    74e0:	8c 83       	std	Y+4, r24	; 0x04
    74e2:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	
	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
    74e4:	0f 90       	pop	r0
    74e6:	0f 90       	pop	r0
    74e8:	0f 90       	pop	r0
    74ea:	0f 90       	pop	r0
    74ec:	cf 91       	pop	r28
    74ee:	df 91       	pop	r29
    74f0:	08 95       	ret

000074f2 <LCD_enuWriteIntNumber>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuWriteIntNumber(s32 Copy_s32Number)
{
    74f2:	df 93       	push	r29
    74f4:	cf 93       	push	r28
    74f6:	cd b7       	in	r28, 0x3d	; 61
    74f8:	de b7       	in	r29, 0x3e	; 62
    74fa:	66 97       	sbiw	r28, 0x16	; 22
    74fc:	0f b6       	in	r0, 0x3f	; 63
    74fe:	f8 94       	cli
    7500:	de bf       	out	0x3e, r29	; 62
    7502:	0f be       	out	0x3f, r0	; 63
    7504:	cd bf       	out	0x3d, r28	; 61
    7506:	6b 8b       	std	Y+19, r22	; 0x13
    7508:	7c 8b       	std	Y+20, r23	; 0x14
    750a:	8d 8b       	std	Y+21, r24	; 0x15
    750c:	9e 8b       	std	Y+22, r25	; 0x16
	ES_t Local_enuErrorState = ES_NOK;
    750e:	81 e0       	ldi	r24, 0x01	; 1
    7510:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_As8Container[16];
	u8 Local_u8Iterator;
	
	sprintf(Local_As8Container, "%d", Copy_s32Number);
    7512:	8d b7       	in	r24, 0x3d	; 61
    7514:	9e b7       	in	r25, 0x3e	; 62
    7516:	08 97       	sbiw	r24, 0x08	; 8
    7518:	0f b6       	in	r0, 0x3f	; 63
    751a:	f8 94       	cli
    751c:	9e bf       	out	0x3e, r25	; 62
    751e:	0f be       	out	0x3f, r0	; 63
    7520:	8d bf       	out	0x3d, r24	; 61
    7522:	ed b7       	in	r30, 0x3d	; 61
    7524:	fe b7       	in	r31, 0x3e	; 62
    7526:	31 96       	adiw	r30, 0x01	; 1
    7528:	ce 01       	movw	r24, r28
    752a:	03 96       	adiw	r24, 0x03	; 3
    752c:	91 83       	std	Z+1, r25	; 0x01
    752e:	80 83       	st	Z, r24
    7530:	80 e6       	ldi	r24, 0x60	; 96
    7532:	90 e0       	ldi	r25, 0x00	; 0
    7534:	93 83       	std	Z+3, r25	; 0x03
    7536:	82 83       	std	Z+2, r24	; 0x02
    7538:	8b 89       	ldd	r24, Y+19	; 0x13
    753a:	9c 89       	ldd	r25, Y+20	; 0x14
    753c:	ad 89       	ldd	r26, Y+21	; 0x15
    753e:	be 89       	ldd	r27, Y+22	; 0x16
    7540:	84 83       	std	Z+4, r24	; 0x04
    7542:	95 83       	std	Z+5, r25	; 0x05
    7544:	a6 83       	std	Z+6, r26	; 0x06
    7546:	b7 83       	std	Z+7, r27	; 0x07
    7548:	0e 94 fe 43 	call	0x87fc	; 0x87fc <sprintf>
    754c:	8d b7       	in	r24, 0x3d	; 61
    754e:	9e b7       	in	r25, 0x3e	; 62
    7550:	08 96       	adiw	r24, 0x08	; 8
    7552:	0f b6       	in	r0, 0x3f	; 63
    7554:	f8 94       	cli
    7556:	9e bf       	out	0x3e, r25	; 62
    7558:	0f be       	out	0x3f, r0	; 63
    755a:	8d bf       	out	0x3d, r24	; 61
	
	for(Local_u8Iterator = 0; Local_As8Container[Local_u8Iterator] != '\0'; Local_u8Iterator++)
    755c:	19 82       	std	Y+1, r1	; 0x01
    755e:	0f c0       	rjmp	.+30     	; 0x757e <LCD_enuWriteIntNumber+0x8c>
	{
		Local_enuErrorState = LCD_enuDisplayChar(Local_As8Container[Local_u8Iterator]);
    7560:	89 81       	ldd	r24, Y+1	; 0x01
    7562:	28 2f       	mov	r18, r24
    7564:	30 e0       	ldi	r19, 0x00	; 0
    7566:	ce 01       	movw	r24, r28
    7568:	03 96       	adiw	r24, 0x03	; 3
    756a:	fc 01       	movw	r30, r24
    756c:	e2 0f       	add	r30, r18
    756e:	f3 1f       	adc	r31, r19
    7570:	80 81       	ld	r24, Z
    7572:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <LCD_enuDisplayChar>
    7576:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_As8Container[16];
	u8 Local_u8Iterator;
	
	sprintf(Local_As8Container, "%d", Copy_s32Number);
	
	for(Local_u8Iterator = 0; Local_As8Container[Local_u8Iterator] != '\0'; Local_u8Iterator++)
    7578:	89 81       	ldd	r24, Y+1	; 0x01
    757a:	8f 5f       	subi	r24, 0xFF	; 255
    757c:	89 83       	std	Y+1, r24	; 0x01
    757e:	89 81       	ldd	r24, Y+1	; 0x01
    7580:	28 2f       	mov	r18, r24
    7582:	30 e0       	ldi	r19, 0x00	; 0
    7584:	ce 01       	movw	r24, r28
    7586:	03 96       	adiw	r24, 0x03	; 3
    7588:	fc 01       	movw	r30, r24
    758a:	e2 0f       	add	r30, r18
    758c:	f3 1f       	adc	r31, r19
    758e:	80 81       	ld	r24, Z
    7590:	88 23       	and	r24, r24
    7592:	31 f7       	brne	.-52     	; 0x7560 <LCD_enuWriteIntNumber+0x6e>
	{
		Local_enuErrorState = LCD_enuDisplayChar(Local_As8Container[Local_u8Iterator]);
	}
	
	return Local_enuErrorState;
    7594:	8a 81       	ldd	r24, Y+2	; 0x02
}
    7596:	66 96       	adiw	r28, 0x16	; 22
    7598:	0f b6       	in	r0, 0x3f	; 63
    759a:	f8 94       	cli
    759c:	de bf       	out	0x3e, r29	; 62
    759e:	0f be       	out	0x3f, r0	; 63
    75a0:	cd bf       	out	0x3d, r28	; 61
    75a2:	cf 91       	pop	r28
    75a4:	df 91       	pop	r29
    75a6:	08 95       	ret

000075a8 <LCD_enuWriteFloatNumber>:

ES_t LCD_enuWriteFloatNumber(f32 Copy_f32Number)
{
    75a8:	df 93       	push	r29
    75aa:	cf 93       	push	r28
    75ac:	cd b7       	in	r28, 0x3d	; 61
    75ae:	de b7       	in	r29, 0x3e	; 62
    75b0:	2d 97       	sbiw	r28, 0x0d	; 13
    75b2:	0f b6       	in	r0, 0x3f	; 63
    75b4:	f8 94       	cli
    75b6:	de bf       	out	0x3e, r29	; 62
    75b8:	0f be       	out	0x3f, r0	; 63
    75ba:	cd bf       	out	0x3d, r28	; 61
    75bc:	6a 87       	std	Y+10, r22	; 0x0a
    75be:	7b 87       	std	Y+11, r23	; 0x0b
    75c0:	8c 87       	std	Y+12, r24	; 0x0c
    75c2:	9d 87       	std	Y+13, r25	; 0x0d
	ES_t Local_enuErrorState = ES_NOK;
    75c4:	81 e0       	ldi	r24, 0x01	; 1
    75c6:	89 87       	std	Y+9, r24	; 0x09
	
	f32 Local_f32FracNum = Copy_f32Number - (u32)Copy_f32Number;
    75c8:	6a 85       	ldd	r22, Y+10	; 0x0a
    75ca:	7b 85       	ldd	r23, Y+11	; 0x0b
    75cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    75ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    75d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    75d4:	dc 01       	movw	r26, r24
    75d6:	cb 01       	movw	r24, r22
    75d8:	bc 01       	movw	r22, r24
    75da:	cd 01       	movw	r24, r26
    75dc:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    75e0:	9b 01       	movw	r18, r22
    75e2:	ac 01       	movw	r20, r24
    75e4:	6a 85       	ldd	r22, Y+10	; 0x0a
    75e6:	7b 85       	ldd	r23, Y+11	; 0x0b
    75e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    75ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    75ec:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    75f0:	dc 01       	movw	r26, r24
    75f2:	cb 01       	movw	r24, r22
    75f4:	8d 83       	std	Y+5, r24	; 0x05
    75f6:	9e 83       	std	Y+6, r25	; 0x06
    75f8:	af 83       	std	Y+7, r26	; 0x07
    75fa:	b8 87       	std	Y+8, r27	; 0x08
	s32 Local_s32IntNum = Copy_f32Number - Local_f32FracNum;
    75fc:	6a 85       	ldd	r22, Y+10	; 0x0a
    75fe:	7b 85       	ldd	r23, Y+11	; 0x0b
    7600:	8c 85       	ldd	r24, Y+12	; 0x0c
    7602:	9d 85       	ldd	r25, Y+13	; 0x0d
    7604:	2d 81       	ldd	r18, Y+5	; 0x05
    7606:	3e 81       	ldd	r19, Y+6	; 0x06
    7608:	4f 81       	ldd	r20, Y+7	; 0x07
    760a:	58 85       	ldd	r21, Y+8	; 0x08
    760c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    7610:	dc 01       	movw	r26, r24
    7612:	cb 01       	movw	r24, r22
    7614:	bc 01       	movw	r22, r24
    7616:	cd 01       	movw	r24, r26
    7618:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    761c:	dc 01       	movw	r26, r24
    761e:	cb 01       	movw	r24, r22
    7620:	89 83       	std	Y+1, r24	; 0x01
    7622:	9a 83       	std	Y+2, r25	; 0x02
    7624:	ab 83       	std	Y+3, r26	; 0x03
    7626:	bc 83       	std	Y+4, r27	; 0x04
	LCD_enuWriteIntNumber(Local_s32IntNum);
    7628:	89 81       	ldd	r24, Y+1	; 0x01
    762a:	9a 81       	ldd	r25, Y+2	; 0x02
    762c:	ab 81       	ldd	r26, Y+3	; 0x03
    762e:	bc 81       	ldd	r27, Y+4	; 0x04
    7630:	bc 01       	movw	r22, r24
    7632:	cd 01       	movw	r24, r26
    7634:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <LCD_enuWriteIntNumber>
	LCD_enuDisplayChar('.');
    7638:	8e e2       	ldi	r24, 0x2E	; 46
    763a:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <LCD_enuDisplayChar>
	LCD_enuWriteIntNumber(Local_f32FracNum * 100000);
    763e:	6d 81       	ldd	r22, Y+5	; 0x05
    7640:	7e 81       	ldd	r23, Y+6	; 0x06
    7642:	8f 81       	ldd	r24, Y+7	; 0x07
    7644:	98 85       	ldd	r25, Y+8	; 0x08
    7646:	20 e0       	ldi	r18, 0x00	; 0
    7648:	30 e5       	ldi	r19, 0x50	; 80
    764a:	43 ec       	ldi	r20, 0xC3	; 195
    764c:	57 e4       	ldi	r21, 0x47	; 71
    764e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7652:	dc 01       	movw	r26, r24
    7654:	cb 01       	movw	r24, r22
    7656:	bc 01       	movw	r22, r24
    7658:	cd 01       	movw	r24, r26
    765a:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    765e:	dc 01       	movw	r26, r24
    7660:	cb 01       	movw	r24, r22
    7662:	bc 01       	movw	r22, r24
    7664:	cd 01       	movw	r24, r26
    7666:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <LCD_enuWriteIntNumber>
	
	return Local_enuErrorState;
    766a:	89 85       	ldd	r24, Y+9	; 0x09
}
    766c:	2d 96       	adiw	r28, 0x0d	; 13
    766e:	0f b6       	in	r0, 0x3f	; 63
    7670:	f8 94       	cli
    7672:	de bf       	out	0x3e, r29	; 62
    7674:	0f be       	out	0x3f, r0	; 63
    7676:	cd bf       	out	0x3d, r28	; 61
    7678:	cf 91       	pop	r28
    767a:	df 91       	pop	r29
    767c:	08 95       	ret

0000767e <LCD_enuCustomCharacter>:

ES_t LCD_enuCustomCharacter(u8 *Copy_ArrCustomChar)
{
    767e:	df 93       	push	r29
    7680:	cf 93       	push	r28
    7682:	00 d0       	rcall	.+0      	; 0x7684 <LCD_enuCustomCharacter+0x6>
    7684:	0f 92       	push	r0
    7686:	cd b7       	in	r28, 0x3d	; 61
    7688:	de b7       	in	r29, 0x3e	; 62
    768a:	9b 83       	std	Y+3, r25	; 0x03
    768c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    768e:	81 e0       	ldi	r24, 0x01	; 1
    7690:	89 83       	std	Y+1, r24	; 0x01
	
	LCD_inlenuSendCommand(64);
    7692:	80 e4       	ldi	r24, 0x40	; 64
    7694:	0e 94 69 39 	call	0x72d2	; 0x72d2 <LCD_inlenuSendCommand>
    7698:	0a c0       	rjmp	.+20     	; 0x76ae <LCD_enuCustomCharacter+0x30>
	
	while(*Copy_ArrCustomChar != 0)
	{
		LCD_enuDisplayChar(*Copy_ArrCustomChar);
    769a:	ea 81       	ldd	r30, Y+2	; 0x02
    769c:	fb 81       	ldd	r31, Y+3	; 0x03
    769e:	80 81       	ld	r24, Z
    76a0:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <LCD_enuDisplayChar>
		Copy_ArrCustomChar++;
    76a4:	8a 81       	ldd	r24, Y+2	; 0x02
    76a6:	9b 81       	ldd	r25, Y+3	; 0x03
    76a8:	01 96       	adiw	r24, 0x01	; 1
    76aa:	9b 83       	std	Y+3, r25	; 0x03
    76ac:	8a 83       	std	Y+2, r24	; 0x02
{
	ES_t Local_enuErrorState = ES_NOK;
	
	LCD_inlenuSendCommand(64);
	
	while(*Copy_ArrCustomChar != 0)
    76ae:	ea 81       	ldd	r30, Y+2	; 0x02
    76b0:	fb 81       	ldd	r31, Y+3	; 0x03
    76b2:	80 81       	ld	r24, Z
    76b4:	88 23       	and	r24, r24
    76b6:	89 f7       	brne	.-30     	; 0x769a <LCD_enuCustomCharacter+0x1c>
	{
		LCD_enuDisplayChar(*Copy_ArrCustomChar);
		Copy_ArrCustomChar++;
	}
	
	LCD_inlenuSendCommand(LCD_BEGIN_AT_FIRST_ROW);
    76b8:	80 e8       	ldi	r24, 0x80	; 128
    76ba:	0e 94 69 39 	call	0x72d2	; 0x72d2 <LCD_inlenuSendCommand>
	LCD_enuDisplayChar(0);
    76be:	80 e0       	ldi	r24, 0x00	; 0
    76c0:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <LCD_enuDisplayChar>
	
	return Local_enuErrorState;
    76c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    76c6:	0f 90       	pop	r0
    76c8:	0f 90       	pop	r0
    76ca:	0f 90       	pop	r0
    76cc:	cf 91       	pop	r28
    76ce:	df 91       	pop	r29
    76d0:	08 95       	ret

000076d2 <KEYPAD_enuInit>:
 * @retval		: ES_t --> it returns the error state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t KEYPAD_enuInit(void)
{
    76d2:	df 93       	push	r29
    76d4:	cf 93       	push	r28
    76d6:	0f 92       	push	r0
    76d8:	cd b7       	in	r28, 0x3d	; 61
    76da:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_u8ErrorState = ES_NOK;
    76dc:	81 e0       	ldi	r24, 0x01	; 1
    76de:	89 83       	std	Y+1, r24	; 0x01
	
	/* Configure Column pins as output high */
	/* Output */
	Local_u8ErrorState = DIO_enuSetPinDirection(KEYPAD_C1_PORT, KEYPAD_C1_PIN, DIO_u8OUTPUT);
    76e0:	82 e0       	ldi	r24, 0x02	; 2
    76e2:	60 e0       	ldi	r22, 0x00	; 0
    76e4:	41 e0       	ldi	r20, 0x01	; 1
    76e6:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    76ea:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinDirection(KEYPAD_C2_PORT, KEYPAD_C2_PIN, DIO_u8OUTPUT);
    76ec:	82 e0       	ldi	r24, 0x02	; 2
    76ee:	61 e0       	ldi	r22, 0x01	; 1
    76f0:	41 e0       	ldi	r20, 0x01	; 1
    76f2:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    76f6:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinDirection(KEYPAD_C3_PORT, KEYPAD_C3_PIN, DIO_u8OUTPUT);
    76f8:	82 e0       	ldi	r24, 0x02	; 2
    76fa:	62 e0       	ldi	r22, 0x02	; 2
    76fc:	41 e0       	ldi	r20, 0x01	; 1
    76fe:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    7702:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinDirection(KEYPAD_C4_PORT, KEYPAD_C4_PIN, DIO_u8OUTPUT);
    7704:	82 e0       	ldi	r24, 0x02	; 2
    7706:	63 e0       	ldi	r22, 0x03	; 3
    7708:	41 e0       	ldi	r20, 0x01	; 1
    770a:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    770e:	89 83       	std	Y+1, r24	; 0x01
	
	/* High */
	Local_u8ErrorState = DIO_enuSetPinVal(KEYPAD_C1_PORT, KEYPAD_C1_PIN, DIO_u8HIGH);
    7710:	82 e0       	ldi	r24, 0x02	; 2
    7712:	60 e0       	ldi	r22, 0x00	; 0
    7714:	41 e0       	ldi	r20, 0x01	; 1
    7716:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    771a:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinVal(KEYPAD_C2_PORT, KEYPAD_C2_PIN, DIO_u8HIGH);
    771c:	82 e0       	ldi	r24, 0x02	; 2
    771e:	61 e0       	ldi	r22, 0x01	; 1
    7720:	41 e0       	ldi	r20, 0x01	; 1
    7722:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    7726:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinVal(KEYPAD_C3_PORT, KEYPAD_C3_PIN, DIO_u8HIGH);
    7728:	82 e0       	ldi	r24, 0x02	; 2
    772a:	62 e0       	ldi	r22, 0x02	; 2
    772c:	41 e0       	ldi	r20, 0x01	; 1
    772e:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    7732:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinVal(KEYPAD_C4_PORT, KEYPAD_C4_PIN, DIO_u8HIGH);
    7734:	82 e0       	ldi	r24, 0x02	; 2
    7736:	63 e0       	ldi	r22, 0x03	; 3
    7738:	41 e0       	ldi	r20, 0x01	; 1
    773a:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    773e:	89 83       	std	Y+1, r24	; 0x01
	
	/* Configure Row pins as input pull-up */
	/* Input */
	Local_u8ErrorState = DIO_enuSetPinDirection(KEYPAD_R1_PORT, KEYPAD_R1_PIN, DIO_u8INPUT);
    7740:	82 e0       	ldi	r24, 0x02	; 2
    7742:	64 e0       	ldi	r22, 0x04	; 4
    7744:	40 e0       	ldi	r20, 0x00	; 0
    7746:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    774a:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinDirection(KEYPAD_R2_PORT, KEYPAD_R2_PIN, DIO_u8INPUT);
    774c:	82 e0       	ldi	r24, 0x02	; 2
    774e:	65 e0       	ldi	r22, 0x05	; 5
    7750:	40 e0       	ldi	r20, 0x00	; 0
    7752:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    7756:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinDirection(KEYPAD_R3_PORT, KEYPAD_R3_PIN, DIO_u8INPUT);
    7758:	82 e0       	ldi	r24, 0x02	; 2
    775a:	66 e0       	ldi	r22, 0x06	; 6
    775c:	40 e0       	ldi	r20, 0x00	; 0
    775e:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    7762:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinDirection(KEYPAD_R4_PORT, KEYPAD_R4_PIN, DIO_u8INPUT);
    7764:	82 e0       	ldi	r24, 0x02	; 2
    7766:	67 e0       	ldi	r22, 0x07	; 7
    7768:	40 e0       	ldi	r20, 0x00	; 0
    776a:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    776e:	89 83       	std	Y+1, r24	; 0x01
	
	/* Pull-UP */
	Local_u8ErrorState = DIO_enuSetPinVal(KEYPAD_R1_PORT, KEYPAD_R1_PIN, DIO_u8PULL_UP);
    7770:	82 e0       	ldi	r24, 0x02	; 2
    7772:	64 e0       	ldi	r22, 0x04	; 4
    7774:	41 e0       	ldi	r20, 0x01	; 1
    7776:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    777a:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinVal(KEYPAD_R2_PORT, KEYPAD_R2_PIN, DIO_u8PULL_UP);
    777c:	82 e0       	ldi	r24, 0x02	; 2
    777e:	65 e0       	ldi	r22, 0x05	; 5
    7780:	41 e0       	ldi	r20, 0x01	; 1
    7782:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    7786:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinVal(KEYPAD_R3_PORT, KEYPAD_R3_PIN, DIO_u8PULL_UP);
    7788:	82 e0       	ldi	r24, 0x02	; 2
    778a:	66 e0       	ldi	r22, 0x06	; 6
    778c:	41 e0       	ldi	r20, 0x01	; 1
    778e:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    7792:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinVal(KEYPAD_R4_PORT, KEYPAD_R4_PIN, DIO_u8PULL_UP);
    7794:	82 e0       	ldi	r24, 0x02	; 2
    7796:	67 e0       	ldi	r22, 0x07	; 7
    7798:	41 e0       	ldi	r20, 0x01	; 1
    779a:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    779e:	89 83       	std	Y+1, r24	; 0x01
	
	return Local_u8ErrorState;
    77a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    77a2:	0f 90       	pop	r0
    77a4:	cf 91       	pop	r28
    77a6:	df 91       	pop	r29
    77a8:	08 95       	ret

000077aa <KEYPAD_u8GetPressedKey>:
 * @retval		: it returns the Key pressed
 * @note		: none
 ******************************************************************************
**/
u8 KEYPAD_u8GetPressedKey(void)
{
    77aa:	df 93       	push	r29
    77ac:	cf 93       	push	r28
    77ae:	00 d0       	rcall	.+0      	; 0x77b0 <KEYPAD_u8GetPressedKey+0x6>
    77b0:	00 d0       	rcall	.+0      	; 0x77b2 <KEYPAD_u8GetPressedKey+0x8>
    77b2:	0f 92       	push	r0
    77b4:	cd b7       	in	r28, 0x3d	; 61
    77b6:	de b7       	in	r29, 0x3e	; 62
	
	/* array for Keypad characters */
	static u8 Local_KEYPAD_CHAR[ROW_NUM][COLUMN_NUM] = KEYPAD_CHARACTERS;
	
	u8 Local_u8ColumnIndex, Local_u8RowIndex, Local_u8PinState;
	u8 Local_u8PressedKey = KEYPAD_No_Key_Pressed;
    77b8:	8f ef       	ldi	r24, 0xFF	; 255
    77ba:	89 83       	std	Y+1, r24	; 0x01
	
	for(Local_u8ColumnIndex = 0; Local_u8ColumnIndex < COLUMN_NUM; Local_u8ColumnIndex++)
    77bc:	1b 82       	std	Y+3, r1	; 0x03
    77be:	7a c0       	rjmp	.+244    	; 0x78b4 <KEYPAD_u8GetPressedKey+0x10a>
	{
		/* Active the current column */
		DIO_enuSetPinVal(Local_Au8ColumnsPorts[Local_u8ColumnIndex], Local_Au8ColumnsPins[Local_u8ColumnIndex], DIO_u8LOW);
    77c0:	8b 81       	ldd	r24, Y+3	; 0x03
    77c2:	88 2f       	mov	r24, r24
    77c4:	90 e0       	ldi	r25, 0x00	; 0
    77c6:	fc 01       	movw	r30, r24
    77c8:	e0 51       	subi	r30, 0x10	; 16
    77ca:	fe 4f       	sbci	r31, 0xFE	; 254
    77cc:	20 81       	ld	r18, Z
    77ce:	8b 81       	ldd	r24, Y+3	; 0x03
    77d0:	88 2f       	mov	r24, r24
    77d2:	90 e0       	ldi	r25, 0x00	; 0
    77d4:	fc 01       	movw	r30, r24
    77d6:	e4 51       	subi	r30, 0x14	; 20
    77d8:	fe 4f       	sbci	r31, 0xFE	; 254
    77da:	90 81       	ld	r25, Z
    77dc:	82 2f       	mov	r24, r18
    77de:	69 2f       	mov	r22, r25
    77e0:	40 e0       	ldi	r20, 0x00	; 0
    77e2:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
		
		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUM; Local_u8RowIndex++)
    77e6:	1a 82       	std	Y+2, r1	; 0x02
    77e8:	4b c0       	rjmp	.+150    	; 0x7880 <KEYPAD_u8GetPressedKey+0xd6>
		{
			/* iterate on reading Row pins value */
			DIO_enuGetPinVal(Local_Au8RowsPorts[Local_u8RowIndex], Local_Au8RowsPins[Local_u8RowIndex], &Local_u8PinState);
    77ea:	8a 81       	ldd	r24, Y+2	; 0x02
    77ec:	88 2f       	mov	r24, r24
    77ee:	90 e0       	ldi	r25, 0x00	; 0
    77f0:	fc 01       	movw	r30, r24
    77f2:	e8 51       	subi	r30, 0x18	; 24
    77f4:	fe 4f       	sbci	r31, 0xFE	; 254
    77f6:	40 81       	ld	r20, Z
    77f8:	8a 81       	ldd	r24, Y+2	; 0x02
    77fa:	88 2f       	mov	r24, r24
    77fc:	90 e0       	ldi	r25, 0x00	; 0
    77fe:	fc 01       	movw	r30, r24
    7800:	ec 51       	subi	r30, 0x1C	; 28
    7802:	fe 4f       	sbci	r31, 0xFE	; 254
    7804:	90 81       	ld	r25, Z
    7806:	9e 01       	movw	r18, r28
    7808:	2c 5f       	subi	r18, 0xFC	; 252
    780a:	3f 4f       	sbci	r19, 0xFF	; 255
    780c:	84 2f       	mov	r24, r20
    780e:	69 2f       	mov	r22, r25
    7810:	a9 01       	movw	r20, r18
    7812:	0e 94 85 19 	call	0x330a	; 0x330a <DIO_enuGetPinVal>
			
			if(DIO_u8LOW == Local_u8PinState)
    7816:	8c 81       	ldd	r24, Y+4	; 0x04
    7818:	88 23       	and	r24, r24
    781a:	79 f5       	brne	.+94     	; 0x787a <KEYPAD_u8GetPressedKey+0xd0>
			{
				Local_u8PressedKey = Local_KEYPAD_CHAR[Local_u8RowIndex][Local_u8ColumnIndex];
    781c:	8a 81       	ldd	r24, Y+2	; 0x02
    781e:	48 2f       	mov	r20, r24
    7820:	50 e0       	ldi	r21, 0x00	; 0
    7822:	8b 81       	ldd	r24, Y+3	; 0x03
    7824:	28 2f       	mov	r18, r24
    7826:	30 e0       	ldi	r19, 0x00	; 0
    7828:	ca 01       	movw	r24, r20
    782a:	88 0f       	add	r24, r24
    782c:	99 1f       	adc	r25, r25
    782e:	88 0f       	add	r24, r24
    7830:	99 1f       	adc	r25, r25
    7832:	82 0f       	add	r24, r18
    7834:	93 1f       	adc	r25, r19
    7836:	fc 01       	movw	r30, r24
    7838:	ec 52       	subi	r30, 0x2C	; 44
    783a:	fe 4f       	sbci	r31, 0xFE	; 254
    783c:	80 81       	ld	r24, Z
    783e:	89 83       	std	Y+1, r24	; 0x01
    7840:	16 c0       	rjmp	.+44     	; 0x786e <KEYPAD_u8GetPressedKey+0xc4>
				
				/* single press */
				while(DIO_u8LOW == Local_u8PinState)
				{
					DIO_enuGetPinVal(Local_Au8RowsPorts[Local_u8RowIndex], Local_Au8RowsPins[Local_u8RowIndex], &Local_u8PinState);
    7842:	8a 81       	ldd	r24, Y+2	; 0x02
    7844:	88 2f       	mov	r24, r24
    7846:	90 e0       	ldi	r25, 0x00	; 0
    7848:	fc 01       	movw	r30, r24
    784a:	e8 51       	subi	r30, 0x18	; 24
    784c:	fe 4f       	sbci	r31, 0xFE	; 254
    784e:	40 81       	ld	r20, Z
    7850:	8a 81       	ldd	r24, Y+2	; 0x02
    7852:	88 2f       	mov	r24, r24
    7854:	90 e0       	ldi	r25, 0x00	; 0
    7856:	fc 01       	movw	r30, r24
    7858:	ec 51       	subi	r30, 0x1C	; 28
    785a:	fe 4f       	sbci	r31, 0xFE	; 254
    785c:	90 81       	ld	r25, Z
    785e:	9e 01       	movw	r18, r28
    7860:	2c 5f       	subi	r18, 0xFC	; 252
    7862:	3f 4f       	sbci	r19, 0xFF	; 255
    7864:	84 2f       	mov	r24, r20
    7866:	69 2f       	mov	r22, r25
    7868:	a9 01       	movw	r20, r18
    786a:	0e 94 85 19 	call	0x330a	; 0x330a <DIO_enuGetPinVal>
			if(DIO_u8LOW == Local_u8PinState)
			{
				Local_u8PressedKey = Local_KEYPAD_CHAR[Local_u8RowIndex][Local_u8ColumnIndex];
				
				/* single press */
				while(DIO_u8LOW == Local_u8PinState)
    786e:	8c 81       	ldd	r24, Y+4	; 0x04
    7870:	88 23       	and	r24, r24
    7872:	39 f3       	breq	.-50     	; 0x7842 <KEYPAD_u8GetPressedKey+0x98>
				{
					DIO_enuGetPinVal(Local_Au8RowsPorts[Local_u8RowIndex], Local_Au8RowsPins[Local_u8RowIndex], &Local_u8PinState);
				}
				return Local_u8PressedKey;
    7874:	89 81       	ldd	r24, Y+1	; 0x01
    7876:	8d 83       	std	Y+5, r24	; 0x05
    7878:	23 c0       	rjmp	.+70     	; 0x78c0 <KEYPAD_u8GetPressedKey+0x116>
	for(Local_u8ColumnIndex = 0; Local_u8ColumnIndex < COLUMN_NUM; Local_u8ColumnIndex++)
	{
		/* Active the current column */
		DIO_enuSetPinVal(Local_Au8ColumnsPorts[Local_u8ColumnIndex], Local_Au8ColumnsPins[Local_u8ColumnIndex], DIO_u8LOW);
		
		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUM; Local_u8RowIndex++)
    787a:	8a 81       	ldd	r24, Y+2	; 0x02
    787c:	8f 5f       	subi	r24, 0xFF	; 255
    787e:	8a 83       	std	Y+2, r24	; 0x02
    7880:	8a 81       	ldd	r24, Y+2	; 0x02
    7882:	84 30       	cpi	r24, 0x04	; 4
    7884:	08 f4       	brcc	.+2      	; 0x7888 <KEYPAD_u8GetPressedKey+0xde>
    7886:	b1 cf       	rjmp	.-158    	; 0x77ea <KEYPAD_u8GetPressedKey+0x40>
				return Local_u8PressedKey;
			}
		}
		
		/* Deactive the current column */
		DIO_enuSetPinVal(Local_Au8ColumnsPorts[Local_u8ColumnIndex], Local_Au8ColumnsPins[Local_u8ColumnIndex], DIO_u8HIGH);
    7888:	8b 81       	ldd	r24, Y+3	; 0x03
    788a:	88 2f       	mov	r24, r24
    788c:	90 e0       	ldi	r25, 0x00	; 0
    788e:	fc 01       	movw	r30, r24
    7890:	e0 51       	subi	r30, 0x10	; 16
    7892:	fe 4f       	sbci	r31, 0xFE	; 254
    7894:	20 81       	ld	r18, Z
    7896:	8b 81       	ldd	r24, Y+3	; 0x03
    7898:	88 2f       	mov	r24, r24
    789a:	90 e0       	ldi	r25, 0x00	; 0
    789c:	fc 01       	movw	r30, r24
    789e:	e4 51       	subi	r30, 0x14	; 20
    78a0:	fe 4f       	sbci	r31, 0xFE	; 254
    78a2:	90 81       	ld	r25, Z
    78a4:	82 2f       	mov	r24, r18
    78a6:	69 2f       	mov	r22, r25
    78a8:	41 e0       	ldi	r20, 0x01	; 1
    78aa:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
	static u8 Local_KEYPAD_CHAR[ROW_NUM][COLUMN_NUM] = KEYPAD_CHARACTERS;
	
	u8 Local_u8ColumnIndex, Local_u8RowIndex, Local_u8PinState;
	u8 Local_u8PressedKey = KEYPAD_No_Key_Pressed;
	
	for(Local_u8ColumnIndex = 0; Local_u8ColumnIndex < COLUMN_NUM; Local_u8ColumnIndex++)
    78ae:	8b 81       	ldd	r24, Y+3	; 0x03
    78b0:	8f 5f       	subi	r24, 0xFF	; 255
    78b2:	8b 83       	std	Y+3, r24	; 0x03
    78b4:	8b 81       	ldd	r24, Y+3	; 0x03
    78b6:	84 30       	cpi	r24, 0x04	; 4
    78b8:	08 f4       	brcc	.+2      	; 0x78bc <KEYPAD_u8GetPressedKey+0x112>
    78ba:	82 cf       	rjmp	.-252    	; 0x77c0 <KEYPAD_u8GetPressedKey+0x16>
		/* Deactive the current column */
		DIO_enuSetPinVal(Local_Au8ColumnsPorts[Local_u8ColumnIndex], Local_Au8ColumnsPins[Local_u8ColumnIndex], DIO_u8HIGH);
	}
	
	
	return Local_u8PressedKey;
    78bc:	89 81       	ldd	r24, Y+1	; 0x01
    78be:	8d 83       	std	Y+5, r24	; 0x05
    78c0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    78c2:	0f 90       	pop	r0
    78c4:	0f 90       	pop	r0
    78c6:	0f 90       	pop	r0
    78c8:	0f 90       	pop	r0
    78ca:	0f 90       	pop	r0
    78cc:	cf 91       	pop	r28
    78ce:	df 91       	pop	r29
    78d0:	08 95       	ret

000078d2 <DHT11_Init>:
// Global variables
DHT_Reading_t DHT_Reading;


void DHT11_Init(void)
{
    78d2:	df 93       	push	r29
    78d4:	cf 93       	push	r28
    78d6:	cd b7       	in	r28, 0x3d	; 61
    78d8:	de b7       	in	r29, 0x3e	; 62
    78da:	2e 97       	sbiw	r28, 0x0e	; 14
    78dc:	0f b6       	in	r0, 0x3f	; 63
    78de:	f8 94       	cli
    78e0:	de bf       	out	0x3e, r29	; 62
    78e2:	0f be       	out	0x3f, r0	; 63
    78e4:	cd bf       	out	0x3d, r28	; 61
	// Set pin direction as output
	DIO_enuSetPinDirection(DHT_PORT,DHT_PIN,DIO_u8OUTPUT);
    78e6:	83 e0       	ldi	r24, 0x03	; 3
    78e8:	60 e0       	ldi	r22, 0x00	; 0
    78ea:	41 e0       	ldi	r20, 0x01	; 1
    78ec:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
	// set pin value to 1 as the steady state of the bus
	DIO_enuSetPinVal(DHT_PORT,DHT_PIN,DIO_u8HIGH);
    78f0:	83 e0       	ldi	r24, 0x03	; 3
    78f2:	60 e0       	ldi	r22, 0x00	; 0
    78f4:	41 e0       	ldi	r20, 0x01	; 1
    78f6:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    78fa:	80 e0       	ldi	r24, 0x00	; 0
    78fc:	90 e0       	ldi	r25, 0x00	; 0
    78fe:	aa e7       	ldi	r26, 0x7A	; 122
    7900:	b4 e4       	ldi	r27, 0x44	; 68
    7902:	8b 87       	std	Y+11, r24	; 0x0b
    7904:	9c 87       	std	Y+12, r25	; 0x0c
    7906:	ad 87       	std	Y+13, r26	; 0x0d
    7908:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    790a:	6b 85       	ldd	r22, Y+11	; 0x0b
    790c:	7c 85       	ldd	r23, Y+12	; 0x0c
    790e:	8d 85       	ldd	r24, Y+13	; 0x0d
    7910:	9e 85       	ldd	r25, Y+14	; 0x0e
    7912:	20 e0       	ldi	r18, 0x00	; 0
    7914:	30 e0       	ldi	r19, 0x00	; 0
    7916:	4a ef       	ldi	r20, 0xFA	; 250
    7918:	54 e4       	ldi	r21, 0x44	; 68
    791a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    791e:	dc 01       	movw	r26, r24
    7920:	cb 01       	movw	r24, r22
    7922:	8f 83       	std	Y+7, r24	; 0x07
    7924:	98 87       	std	Y+8, r25	; 0x08
    7926:	a9 87       	std	Y+9, r26	; 0x09
    7928:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    792a:	6f 81       	ldd	r22, Y+7	; 0x07
    792c:	78 85       	ldd	r23, Y+8	; 0x08
    792e:	89 85       	ldd	r24, Y+9	; 0x09
    7930:	9a 85       	ldd	r25, Y+10	; 0x0a
    7932:	20 e0       	ldi	r18, 0x00	; 0
    7934:	30 e0       	ldi	r19, 0x00	; 0
    7936:	40 e8       	ldi	r20, 0x80	; 128
    7938:	5f e3       	ldi	r21, 0x3F	; 63
    793a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    793e:	88 23       	and	r24, r24
    7940:	2c f4       	brge	.+10     	; 0x794c <DHT11_Init+0x7a>
		__ticks = 1;
    7942:	81 e0       	ldi	r24, 0x01	; 1
    7944:	90 e0       	ldi	r25, 0x00	; 0
    7946:	9e 83       	std	Y+6, r25	; 0x06
    7948:	8d 83       	std	Y+5, r24	; 0x05
    794a:	3f c0       	rjmp	.+126    	; 0x79ca <DHT11_Init+0xf8>
	else if (__tmp > 65535)
    794c:	6f 81       	ldd	r22, Y+7	; 0x07
    794e:	78 85       	ldd	r23, Y+8	; 0x08
    7950:	89 85       	ldd	r24, Y+9	; 0x09
    7952:	9a 85       	ldd	r25, Y+10	; 0x0a
    7954:	20 e0       	ldi	r18, 0x00	; 0
    7956:	3f ef       	ldi	r19, 0xFF	; 255
    7958:	4f e7       	ldi	r20, 0x7F	; 127
    795a:	57 e4       	ldi	r21, 0x47	; 71
    795c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    7960:	18 16       	cp	r1, r24
    7962:	4c f5       	brge	.+82     	; 0x79b6 <DHT11_Init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7964:	6b 85       	ldd	r22, Y+11	; 0x0b
    7966:	7c 85       	ldd	r23, Y+12	; 0x0c
    7968:	8d 85       	ldd	r24, Y+13	; 0x0d
    796a:	9e 85       	ldd	r25, Y+14	; 0x0e
    796c:	20 e0       	ldi	r18, 0x00	; 0
    796e:	30 e0       	ldi	r19, 0x00	; 0
    7970:	40 e2       	ldi	r20, 0x20	; 32
    7972:	51 e4       	ldi	r21, 0x41	; 65
    7974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7978:	dc 01       	movw	r26, r24
    797a:	cb 01       	movw	r24, r22
    797c:	bc 01       	movw	r22, r24
    797e:	cd 01       	movw	r24, r26
    7980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7984:	dc 01       	movw	r26, r24
    7986:	cb 01       	movw	r24, r22
    7988:	9e 83       	std	Y+6, r25	; 0x06
    798a:	8d 83       	std	Y+5, r24	; 0x05
    798c:	0f c0       	rjmp	.+30     	; 0x79ac <DHT11_Init+0xda>
    798e:	88 ec       	ldi	r24, 0xC8	; 200
    7990:	90 e0       	ldi	r25, 0x00	; 0
    7992:	9c 83       	std	Y+4, r25	; 0x04
    7994:	8b 83       	std	Y+3, r24	; 0x03
    7996:	8b 81       	ldd	r24, Y+3	; 0x03
    7998:	9c 81       	ldd	r25, Y+4	; 0x04
    799a:	01 97       	sbiw	r24, 0x01	; 1
    799c:	f1 f7       	brne	.-4      	; 0x799a <DHT11_Init+0xc8>
    799e:	9c 83       	std	Y+4, r25	; 0x04
    79a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    79a2:	8d 81       	ldd	r24, Y+5	; 0x05
    79a4:	9e 81       	ldd	r25, Y+6	; 0x06
    79a6:	01 97       	sbiw	r24, 0x01	; 1
    79a8:	9e 83       	std	Y+6, r25	; 0x06
    79aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    79ac:	8d 81       	ldd	r24, Y+5	; 0x05
    79ae:	9e 81       	ldd	r25, Y+6	; 0x06
    79b0:	00 97       	sbiw	r24, 0x00	; 0
    79b2:	69 f7       	brne	.-38     	; 0x798e <DHT11_Init+0xbc>
    79b4:	14 c0       	rjmp	.+40     	; 0x79de <DHT11_Init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    79b6:	6f 81       	ldd	r22, Y+7	; 0x07
    79b8:	78 85       	ldd	r23, Y+8	; 0x08
    79ba:	89 85       	ldd	r24, Y+9	; 0x09
    79bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    79be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    79c2:	dc 01       	movw	r26, r24
    79c4:	cb 01       	movw	r24, r22
    79c6:	9e 83       	std	Y+6, r25	; 0x06
    79c8:	8d 83       	std	Y+5, r24	; 0x05
    79ca:	8d 81       	ldd	r24, Y+5	; 0x05
    79cc:	9e 81       	ldd	r25, Y+6	; 0x06
    79ce:	9a 83       	std	Y+2, r25	; 0x02
    79d0:	89 83       	std	Y+1, r24	; 0x01
    79d2:	89 81       	ldd	r24, Y+1	; 0x01
    79d4:	9a 81       	ldd	r25, Y+2	; 0x02
    79d6:	01 97       	sbiw	r24, 0x01	; 1
    79d8:	f1 f7       	brne	.-4      	; 0x79d6 <DHT11_Init+0x104>
    79da:	9a 83       	std	Y+2, r25	; 0x02
    79dc:	89 83       	std	Y+1, r24	; 0x01
	// delay 1 second in order to pass the unstable status.
	_delay_ms(1000);
}
    79de:	2e 96       	adiw	r28, 0x0e	; 14
    79e0:	0f b6       	in	r0, 0x3f	; 63
    79e2:	f8 94       	cli
    79e4:	de bf       	out	0x3e, r29	; 62
    79e6:	0f be       	out	0x3f, r0	; 63
    79e8:	cd bf       	out	0x3d, r28	; 61
    79ea:	cf 91       	pop	r28
    79ec:	df 91       	pop	r29
    79ee:	08 95       	ret

000079f0 <DHT_GetReadings>:

ES_t DHT_GetReadings(u8*Temp,u8*Humidity)
{
    79f0:	0f 93       	push	r16
    79f2:	1f 93       	push	r17
    79f4:	df 93       	push	r29
    79f6:	cf 93       	push	r28
    79f8:	cd b7       	in	r28, 0x3d	; 61
    79fa:	de b7       	in	r29, 0x3e	; 62
    79fc:	64 97       	sbiw	r28, 0x14	; 20
    79fe:	0f b6       	in	r0, 0x3f	; 63
    7a00:	f8 94       	cli
    7a02:	de bf       	out	0x3e, r29	; 62
    7a04:	0f be       	out	0x3f, r0	; 63
    7a06:	cd bf       	out	0x3d, r28	; 61
    7a08:	9a 8b       	std	Y+18, r25	; 0x12
    7a0a:	89 8b       	std	Y+17, r24	; 0x11
    7a0c:	7c 8b       	std	Y+20, r23	; 0x14
    7a0e:	6b 8b       	std	Y+19, r22	; 0x13
	ES_t Local_Status=ES_OK;
    7a10:	18 8a       	std	Y+16, r1	; 0x10
	// Set pin direction as output
	DIO_enuSetPinDirection(DHT_PORT,DHT_PIN,DIO_u8OUTPUT);
    7a12:	83 e0       	ldi	r24, 0x03	; 3
    7a14:	60 e0       	ldi	r22, 0x00	; 0
    7a16:	41 e0       	ldi	r20, 0x01	; 1
    7a18:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
	// set pin value to 1 as the steady state of the bus
	//Initiates the communication
	DIO_enuSetPinVal(DHT_PORT,DHT_PIN,DIO_u8LOW);
    7a1c:	83 e0       	ldi	r24, 0x03	; 3
    7a1e:	60 e0       	ldi	r22, 0x00	; 0
    7a20:	40 e0       	ldi	r20, 0x00	; 0
    7a22:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    7a26:	80 e0       	ldi	r24, 0x00	; 0
    7a28:	90 e0       	ldi	r25, 0x00	; 0
    7a2a:	a0 e9       	ldi	r26, 0x90	; 144
    7a2c:	b1 e4       	ldi	r27, 0x41	; 65
    7a2e:	8b 87       	std	Y+11, r24	; 0x0b
    7a30:	9c 87       	std	Y+12, r25	; 0x0c
    7a32:	ad 87       	std	Y+13, r26	; 0x0d
    7a34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7a36:	6b 85       	ldd	r22, Y+11	; 0x0b
    7a38:	7c 85       	ldd	r23, Y+12	; 0x0c
    7a3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    7a3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    7a3e:	20 e0       	ldi	r18, 0x00	; 0
    7a40:	30 e0       	ldi	r19, 0x00	; 0
    7a42:	4a ef       	ldi	r20, 0xFA	; 250
    7a44:	54 e4       	ldi	r21, 0x44	; 68
    7a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7a4a:	dc 01       	movw	r26, r24
    7a4c:	cb 01       	movw	r24, r22
    7a4e:	8f 83       	std	Y+7, r24	; 0x07
    7a50:	98 87       	std	Y+8, r25	; 0x08
    7a52:	a9 87       	std	Y+9, r26	; 0x09
    7a54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7a56:	6f 81       	ldd	r22, Y+7	; 0x07
    7a58:	78 85       	ldd	r23, Y+8	; 0x08
    7a5a:	89 85       	ldd	r24, Y+9	; 0x09
    7a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    7a5e:	20 e0       	ldi	r18, 0x00	; 0
    7a60:	30 e0       	ldi	r19, 0x00	; 0
    7a62:	40 e8       	ldi	r20, 0x80	; 128
    7a64:	5f e3       	ldi	r21, 0x3F	; 63
    7a66:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    7a6a:	88 23       	and	r24, r24
    7a6c:	2c f4       	brge	.+10     	; 0x7a78 <DHT_GetReadings+0x88>
		__ticks = 1;
    7a6e:	81 e0       	ldi	r24, 0x01	; 1
    7a70:	90 e0       	ldi	r25, 0x00	; 0
    7a72:	9e 83       	std	Y+6, r25	; 0x06
    7a74:	8d 83       	std	Y+5, r24	; 0x05
    7a76:	3f c0       	rjmp	.+126    	; 0x7af6 <DHT_GetReadings+0x106>
	else if (__tmp > 65535)
    7a78:	6f 81       	ldd	r22, Y+7	; 0x07
    7a7a:	78 85       	ldd	r23, Y+8	; 0x08
    7a7c:	89 85       	ldd	r24, Y+9	; 0x09
    7a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7a80:	20 e0       	ldi	r18, 0x00	; 0
    7a82:	3f ef       	ldi	r19, 0xFF	; 255
    7a84:	4f e7       	ldi	r20, 0x7F	; 127
    7a86:	57 e4       	ldi	r21, 0x47	; 71
    7a88:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    7a8c:	18 16       	cp	r1, r24
    7a8e:	4c f5       	brge	.+82     	; 0x7ae2 <DHT_GetReadings+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7a90:	6b 85       	ldd	r22, Y+11	; 0x0b
    7a92:	7c 85       	ldd	r23, Y+12	; 0x0c
    7a94:	8d 85       	ldd	r24, Y+13	; 0x0d
    7a96:	9e 85       	ldd	r25, Y+14	; 0x0e
    7a98:	20 e0       	ldi	r18, 0x00	; 0
    7a9a:	30 e0       	ldi	r19, 0x00	; 0
    7a9c:	40 e2       	ldi	r20, 0x20	; 32
    7a9e:	51 e4       	ldi	r21, 0x41	; 65
    7aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7aa4:	dc 01       	movw	r26, r24
    7aa6:	cb 01       	movw	r24, r22
    7aa8:	bc 01       	movw	r22, r24
    7aaa:	cd 01       	movw	r24, r26
    7aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7ab0:	dc 01       	movw	r26, r24
    7ab2:	cb 01       	movw	r24, r22
    7ab4:	9e 83       	std	Y+6, r25	; 0x06
    7ab6:	8d 83       	std	Y+5, r24	; 0x05
    7ab8:	0f c0       	rjmp	.+30     	; 0x7ad8 <DHT_GetReadings+0xe8>
    7aba:	88 ec       	ldi	r24, 0xC8	; 200
    7abc:	90 e0       	ldi	r25, 0x00	; 0
    7abe:	9c 83       	std	Y+4, r25	; 0x04
    7ac0:	8b 83       	std	Y+3, r24	; 0x03
    7ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    7ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    7ac6:	01 97       	sbiw	r24, 0x01	; 1
    7ac8:	f1 f7       	brne	.-4      	; 0x7ac6 <DHT_GetReadings+0xd6>
    7aca:	9c 83       	std	Y+4, r25	; 0x04
    7acc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7ace:	8d 81       	ldd	r24, Y+5	; 0x05
    7ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    7ad2:	01 97       	sbiw	r24, 0x01	; 1
    7ad4:	9e 83       	std	Y+6, r25	; 0x06
    7ad6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    7ada:	9e 81       	ldd	r25, Y+6	; 0x06
    7adc:	00 97       	sbiw	r24, 0x00	; 0
    7ade:	69 f7       	brne	.-38     	; 0x7aba <DHT_GetReadings+0xca>
    7ae0:	14 c0       	rjmp	.+40     	; 0x7b0a <DHT_GetReadings+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7ae2:	6f 81       	ldd	r22, Y+7	; 0x07
    7ae4:	78 85       	ldd	r23, Y+8	; 0x08
    7ae6:	89 85       	ldd	r24, Y+9	; 0x09
    7ae8:	9a 85       	ldd	r25, Y+10	; 0x0a
    7aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7aee:	dc 01       	movw	r26, r24
    7af0:	cb 01       	movw	r24, r22
    7af2:	9e 83       	std	Y+6, r25	; 0x06
    7af4:	8d 83       	std	Y+5, r24	; 0x05
    7af6:	8d 81       	ldd	r24, Y+5	; 0x05
    7af8:	9e 81       	ldd	r25, Y+6	; 0x06
    7afa:	9a 83       	std	Y+2, r25	; 0x02
    7afc:	89 83       	std	Y+1, r24	; 0x01
    7afe:	89 81       	ldd	r24, Y+1	; 0x01
    7b00:	9a 81       	ldd	r25, Y+2	; 0x02
    7b02:	01 97       	sbiw	r24, 0x01	; 1
    7b04:	f1 f7       	brne	.-4      	; 0x7b02 <DHT_GetReadings+0x112>
    7b06:	9a 83       	std	Y+2, r25	; 0x02
    7b08:	89 83       	std	Y+1, r24	; 0x01
	// Waits for at least 18ms to let DHT11 detects the signal
	_delay_ms(18);
	// set pin value to 1
	DIO_enuSetPinVal(DHT_PORT,DHT_PIN,DIO_u8HIGH);
    7b0a:	83 e0       	ldi	r24, 0x03	; 3
    7b0c:	60 e0       	ldi	r22, 0x00	; 0
    7b0e:	41 e0       	ldi	r20, 0x01	; 1
    7b10:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>

	// Set pin direction as input
	DIO_enuSetPinDirection(DHT_PORT,DHT_PIN,DIO_u8INPUT);
    7b14:	83 e0       	ldi	r24, 0x03	; 3
    7b16:	60 e0       	ldi	r22, 0x00	; 0
    7b18:	40 e0       	ldi	r20, 0x00	; 0
    7b1a:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>

	// Check the response from DHT11
	if (DHT11_CheckResponse() == 0)
    7b1e:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <DHT11_CheckResponse>
    7b22:	88 23       	and	r24, r24
    7b24:	19 f4       	brne	.+6      	; 0x7b2c <DHT_GetReadings+0x13c>
	{
		Local_Status=ES_NOK;      // No response
    7b26:	81 e0       	ldi	r24, 0x01	; 1
    7b28:	88 8b       	std	Y+16, r24	; 0x10
    7b2a:	22 c0       	rjmp	.+68     	; 0x7b70 <DHT_GetReadings+0x180>
	}
	else
	{
		// Read 5 bytes of data
		for (u8 i = 0; i < 5; i++)
    7b2c:	1f 86       	std	Y+15, r1	; 0x0f
    7b2e:	0c c0       	rjmp	.+24     	; 0x7b48 <DHT_GetReadings+0x158>
		{
			 DHT_Reading.arr[i] = DHT11_ReadByte();
    7b30:	8f 85       	ldd	r24, Y+15	; 0x0f
    7b32:	08 2f       	mov	r16, r24
    7b34:	10 e0       	ldi	r17, 0x00	; 0
    7b36:	0e 94 84 3f 	call	0x7f08	; 0x7f08 <DHT11_ReadByte>
    7b3a:	f8 01       	movw	r30, r16
    7b3c:	ef 5c       	subi	r30, 0xCF	; 207
    7b3e:	fd 4f       	sbci	r31, 0xFD	; 253
    7b40:	80 83       	st	Z, r24
		Local_Status=ES_NOK;      // No response
	}
	else
	{
		// Read 5 bytes of data
		for (u8 i = 0; i < 5; i++)
    7b42:	8f 85       	ldd	r24, Y+15	; 0x0f
    7b44:	8f 5f       	subi	r24, 0xFF	; 255
    7b46:	8f 87       	std	Y+15, r24	; 0x0f
    7b48:	8f 85       	ldd	r24, Y+15	; 0x0f
    7b4a:	85 30       	cpi	r24, 0x05	; 5
    7b4c:	88 f3       	brcs	.-30     	; 0x7b30 <DHT_GetReadings+0x140>
		{
			 DHT_Reading.arr[i] = DHT11_ReadByte();
		}
	    // Verify checksum
		if (DHT_Reading.arr[4] != (u8)((DHT_Reading.arr[0] + DHT_Reading.arr[1] + DHT_Reading.arr[2] + DHT_Reading.arr[3])) )
    7b4e:	20 91 35 02 	lds	r18, 0x0235
    7b52:	90 91 31 02 	lds	r25, 0x0231
    7b56:	80 91 32 02 	lds	r24, 0x0232
    7b5a:	98 0f       	add	r25, r24
    7b5c:	80 91 33 02 	lds	r24, 0x0233
    7b60:	98 0f       	add	r25, r24
    7b62:	80 91 34 02 	lds	r24, 0x0234
    7b66:	89 0f       	add	r24, r25
    7b68:	28 17       	cp	r18, r24
    7b6a:	11 f0       	breq	.+4      	; 0x7b70 <DHT_GetReadings+0x180>
		{
			 Local_Status=ES_NOK; // Checksum error
    7b6c:	81 e0       	ldi	r24, 0x01	; 1
    7b6e:	88 8b       	std	Y+16, r24	; 0x10
		}
	}

	*Temp = DHT_Reading.TempInt;
    7b70:	80 91 33 02 	lds	r24, 0x0233
    7b74:	e9 89       	ldd	r30, Y+17	; 0x11
    7b76:	fa 89       	ldd	r31, Y+18	; 0x12
    7b78:	80 83       	st	Z, r24
	*Humidity = DHT_Reading.humidityInt;
    7b7a:	80 91 31 02 	lds	r24, 0x0231
    7b7e:	eb 89       	ldd	r30, Y+19	; 0x13
    7b80:	fc 89       	ldd	r31, Y+20	; 0x14
    7b82:	80 83       	st	Z, r24

	return Local_Status;
    7b84:	88 89       	ldd	r24, Y+16	; 0x10

}
    7b86:	64 96       	adiw	r28, 0x14	; 20
    7b88:	0f b6       	in	r0, 0x3f	; 63
    7b8a:	f8 94       	cli
    7b8c:	de bf       	out	0x3e, r29	; 62
    7b8e:	0f be       	out	0x3f, r0	; 63
    7b90:	cd bf       	out	0x3d, r28	; 61
    7b92:	cf 91       	pop	r28
    7b94:	df 91       	pop	r29
    7b96:	1f 91       	pop	r17
    7b98:	0f 91       	pop	r16
    7b9a:	08 95       	ret

00007b9c <DHT11_CheckResponse>:


// Private function to check for response from DHT11
static u8 DHT11_CheckResponse(void)
{
    7b9c:	df 93       	push	r29
    7b9e:	cf 93       	push	r28
    7ba0:	cd b7       	in	r28, 0x3d	; 61
    7ba2:	de b7       	in	r29, 0x3e	; 62
    7ba4:	e2 97       	sbiw	r28, 0x32	; 50
    7ba6:	0f b6       	in	r0, 0x3f	; 63
    7ba8:	f8 94       	cli
    7baa:	de bf       	out	0x3e, r29	; 62
    7bac:	0f be       	out	0x3f, r0	; 63
    7bae:	cd bf       	out	0x3d, r28	; 61
	u8 Local_Response = 0,Local_PinValue;
    7bb0:	19 aa       	std	Y+49, r1	; 0x31
    7bb2:	80 e0       	ldi	r24, 0x00	; 0
    7bb4:	90 e0       	ldi	r25, 0x00	; 0
    7bb6:	a0 e2       	ldi	r26, 0x20	; 32
    7bb8:	b2 e4       	ldi	r27, 0x42	; 66
    7bba:	8d a7       	std	Y+45, r24	; 0x2d
    7bbc:	9e a7       	std	Y+46, r25	; 0x2e
    7bbe:	af a7       	std	Y+47, r26	; 0x2f
    7bc0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    7bc2:	6d a5       	ldd	r22, Y+45	; 0x2d
    7bc4:	7e a5       	ldd	r23, Y+46	; 0x2e
    7bc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    7bc8:	98 a9       	ldd	r25, Y+48	; 0x30
    7bca:	2b ea       	ldi	r18, 0xAB	; 171
    7bcc:	3a ea       	ldi	r19, 0xAA	; 170
    7bce:	4a e2       	ldi	r20, 0x2A	; 42
    7bd0:	50 e4       	ldi	r21, 0x40	; 64
    7bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7bd6:	dc 01       	movw	r26, r24
    7bd8:	cb 01       	movw	r24, r22
    7bda:	89 a7       	std	Y+41, r24	; 0x29
    7bdc:	9a a7       	std	Y+42, r25	; 0x2a
    7bde:	ab a7       	std	Y+43, r26	; 0x2b
    7be0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    7be2:	69 a5       	ldd	r22, Y+41	; 0x29
    7be4:	7a a5       	ldd	r23, Y+42	; 0x2a
    7be6:	8b a5       	ldd	r24, Y+43	; 0x2b
    7be8:	9c a5       	ldd	r25, Y+44	; 0x2c
    7bea:	20 e0       	ldi	r18, 0x00	; 0
    7bec:	30 e0       	ldi	r19, 0x00	; 0
    7bee:	40 e8       	ldi	r20, 0x80	; 128
    7bf0:	5f e3       	ldi	r21, 0x3F	; 63
    7bf2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    7bf6:	88 23       	and	r24, r24
    7bf8:	1c f4       	brge	.+6      	; 0x7c00 <DHT11_CheckResponse+0x64>
		__ticks = 1;
    7bfa:	81 e0       	ldi	r24, 0x01	; 1
    7bfc:	88 a7       	std	Y+40, r24	; 0x28
    7bfe:	91 c0       	rjmp	.+290    	; 0x7d22 <DHT11_CheckResponse+0x186>
	else if (__tmp > 255)
    7c00:	69 a5       	ldd	r22, Y+41	; 0x29
    7c02:	7a a5       	ldd	r23, Y+42	; 0x2a
    7c04:	8b a5       	ldd	r24, Y+43	; 0x2b
    7c06:	9c a5       	ldd	r25, Y+44	; 0x2c
    7c08:	20 e0       	ldi	r18, 0x00	; 0
    7c0a:	30 e0       	ldi	r19, 0x00	; 0
    7c0c:	4f e7       	ldi	r20, 0x7F	; 127
    7c0e:	53 e4       	ldi	r21, 0x43	; 67
    7c10:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    7c14:	18 16       	cp	r1, r24
    7c16:	0c f0       	brlt	.+2      	; 0x7c1a <DHT11_CheckResponse+0x7e>
    7c18:	7b c0       	rjmp	.+246    	; 0x7d10 <DHT11_CheckResponse+0x174>
	{
		_delay_ms(__us / 1000.0);
    7c1a:	6d a5       	ldd	r22, Y+45	; 0x2d
    7c1c:	7e a5       	ldd	r23, Y+46	; 0x2e
    7c1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    7c20:	98 a9       	ldd	r25, Y+48	; 0x30
    7c22:	20 e0       	ldi	r18, 0x00	; 0
    7c24:	30 e0       	ldi	r19, 0x00	; 0
    7c26:	4a e7       	ldi	r20, 0x7A	; 122
    7c28:	54 e4       	ldi	r21, 0x44	; 68
    7c2a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    7c2e:	dc 01       	movw	r26, r24
    7c30:	cb 01       	movw	r24, r22
    7c32:	8c a3       	std	Y+36, r24	; 0x24
    7c34:	9d a3       	std	Y+37, r25	; 0x25
    7c36:	ae a3       	std	Y+38, r26	; 0x26
    7c38:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7c3a:	6c a1       	ldd	r22, Y+36	; 0x24
    7c3c:	7d a1       	ldd	r23, Y+37	; 0x25
    7c3e:	8e a1       	ldd	r24, Y+38	; 0x26
    7c40:	9f a1       	ldd	r25, Y+39	; 0x27
    7c42:	20 e0       	ldi	r18, 0x00	; 0
    7c44:	30 e0       	ldi	r19, 0x00	; 0
    7c46:	4a ef       	ldi	r20, 0xFA	; 250
    7c48:	54 e4       	ldi	r21, 0x44	; 68
    7c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7c4e:	dc 01       	movw	r26, r24
    7c50:	cb 01       	movw	r24, r22
    7c52:	88 a3       	std	Y+32, r24	; 0x20
    7c54:	99 a3       	std	Y+33, r25	; 0x21
    7c56:	aa a3       	std	Y+34, r26	; 0x22
    7c58:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    7c5a:	68 a1       	ldd	r22, Y+32	; 0x20
    7c5c:	79 a1       	ldd	r23, Y+33	; 0x21
    7c5e:	8a a1       	ldd	r24, Y+34	; 0x22
    7c60:	9b a1       	ldd	r25, Y+35	; 0x23
    7c62:	20 e0       	ldi	r18, 0x00	; 0
    7c64:	30 e0       	ldi	r19, 0x00	; 0
    7c66:	40 e8       	ldi	r20, 0x80	; 128
    7c68:	5f e3       	ldi	r21, 0x3F	; 63
    7c6a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    7c6e:	88 23       	and	r24, r24
    7c70:	2c f4       	brge	.+10     	; 0x7c7c <DHT11_CheckResponse+0xe0>
		__ticks = 1;
    7c72:	81 e0       	ldi	r24, 0x01	; 1
    7c74:	90 e0       	ldi	r25, 0x00	; 0
    7c76:	9f 8f       	std	Y+31, r25	; 0x1f
    7c78:	8e 8f       	std	Y+30, r24	; 0x1e
    7c7a:	3f c0       	rjmp	.+126    	; 0x7cfa <DHT11_CheckResponse+0x15e>
	else if (__tmp > 65535)
    7c7c:	68 a1       	ldd	r22, Y+32	; 0x20
    7c7e:	79 a1       	ldd	r23, Y+33	; 0x21
    7c80:	8a a1       	ldd	r24, Y+34	; 0x22
    7c82:	9b a1       	ldd	r25, Y+35	; 0x23
    7c84:	20 e0       	ldi	r18, 0x00	; 0
    7c86:	3f ef       	ldi	r19, 0xFF	; 255
    7c88:	4f e7       	ldi	r20, 0x7F	; 127
    7c8a:	57 e4       	ldi	r21, 0x47	; 71
    7c8c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    7c90:	18 16       	cp	r1, r24
    7c92:	4c f5       	brge	.+82     	; 0x7ce6 <DHT11_CheckResponse+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7c94:	6c a1       	ldd	r22, Y+36	; 0x24
    7c96:	7d a1       	ldd	r23, Y+37	; 0x25
    7c98:	8e a1       	ldd	r24, Y+38	; 0x26
    7c9a:	9f a1       	ldd	r25, Y+39	; 0x27
    7c9c:	20 e0       	ldi	r18, 0x00	; 0
    7c9e:	30 e0       	ldi	r19, 0x00	; 0
    7ca0:	40 e2       	ldi	r20, 0x20	; 32
    7ca2:	51 e4       	ldi	r21, 0x41	; 65
    7ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7ca8:	dc 01       	movw	r26, r24
    7caa:	cb 01       	movw	r24, r22
    7cac:	bc 01       	movw	r22, r24
    7cae:	cd 01       	movw	r24, r26
    7cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7cb4:	dc 01       	movw	r26, r24
    7cb6:	cb 01       	movw	r24, r22
    7cb8:	9f 8f       	std	Y+31, r25	; 0x1f
    7cba:	8e 8f       	std	Y+30, r24	; 0x1e
    7cbc:	0f c0       	rjmp	.+30     	; 0x7cdc <DHT11_CheckResponse+0x140>
    7cbe:	88 ec       	ldi	r24, 0xC8	; 200
    7cc0:	90 e0       	ldi	r25, 0x00	; 0
    7cc2:	9d 8f       	std	Y+29, r25	; 0x1d
    7cc4:	8c 8f       	std	Y+28, r24	; 0x1c
    7cc6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7cc8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    7cca:	01 97       	sbiw	r24, 0x01	; 1
    7ccc:	f1 f7       	brne	.-4      	; 0x7cca <DHT11_CheckResponse+0x12e>
    7cce:	9d 8f       	std	Y+29, r25	; 0x1d
    7cd0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7cd2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7cd4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7cd6:	01 97       	sbiw	r24, 0x01	; 1
    7cd8:	9f 8f       	std	Y+31, r25	; 0x1f
    7cda:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7cdc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7cde:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7ce0:	00 97       	sbiw	r24, 0x00	; 0
    7ce2:	69 f7       	brne	.-38     	; 0x7cbe <DHT11_CheckResponse+0x122>
    7ce4:	24 c0       	rjmp	.+72     	; 0x7d2e <DHT11_CheckResponse+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7ce6:	68 a1       	ldd	r22, Y+32	; 0x20
    7ce8:	79 a1       	ldd	r23, Y+33	; 0x21
    7cea:	8a a1       	ldd	r24, Y+34	; 0x22
    7cec:	9b a1       	ldd	r25, Y+35	; 0x23
    7cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7cf2:	dc 01       	movw	r26, r24
    7cf4:	cb 01       	movw	r24, r22
    7cf6:	9f 8f       	std	Y+31, r25	; 0x1f
    7cf8:	8e 8f       	std	Y+30, r24	; 0x1e
    7cfa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7cfc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7cfe:	9b 8f       	std	Y+27, r25	; 0x1b
    7d00:	8a 8f       	std	Y+26, r24	; 0x1a
    7d02:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7d04:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7d06:	01 97       	sbiw	r24, 0x01	; 1
    7d08:	f1 f7       	brne	.-4      	; 0x7d06 <DHT11_CheckResponse+0x16a>
    7d0a:	9b 8f       	std	Y+27, r25	; 0x1b
    7d0c:	8a 8f       	std	Y+26, r24	; 0x1a
    7d0e:	0f c0       	rjmp	.+30     	; 0x7d2e <DHT11_CheckResponse+0x192>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    7d10:	69 a5       	ldd	r22, Y+41	; 0x29
    7d12:	7a a5       	ldd	r23, Y+42	; 0x2a
    7d14:	8b a5       	ldd	r24, Y+43	; 0x2b
    7d16:	9c a5       	ldd	r25, Y+44	; 0x2c
    7d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7d1c:	dc 01       	movw	r26, r24
    7d1e:	cb 01       	movw	r24, r22
    7d20:	88 a7       	std	Y+40, r24	; 0x28
    7d22:	88 a5       	ldd	r24, Y+40	; 0x28
    7d24:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    7d26:	89 8d       	ldd	r24, Y+25	; 0x19
    7d28:	8a 95       	dec	r24
    7d2a:	f1 f7       	brne	.-4      	; 0x7d28 <DHT11_CheckResponse+0x18c>
    7d2c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(40);

	DIO_enuGetPinVal(DHT_PORT,DHT_PIN,&Local_PinValue);
    7d2e:	9e 01       	movw	r18, r28
    7d30:	2e 5c       	subi	r18, 0xCE	; 206
    7d32:	3f 4f       	sbci	r19, 0xFF	; 255
    7d34:	83 e0       	ldi	r24, 0x03	; 3
    7d36:	60 e0       	ldi	r22, 0x00	; 0
    7d38:	a9 01       	movw	r20, r18
    7d3a:	0e 94 85 19 	call	0x330a	; 0x330a <DIO_enuGetPinVal>

	if (Local_PinValue == DIO_u8LOW)
    7d3e:	8a a9       	ldd	r24, Y+50	; 0x32
    7d40:	88 23       	and	r24, r24
    7d42:	09 f0       	breq	.+2      	; 0x7d46 <DHT11_CheckResponse+0x1aa>
    7d44:	d7 c0       	rjmp	.+430    	; 0x7ef4 <DHT11_CheckResponse+0x358>
    7d46:	80 e0       	ldi	r24, 0x00	; 0
    7d48:	90 e0       	ldi	r25, 0x00	; 0
    7d4a:	a0 ea       	ldi	r26, 0xA0	; 160
    7d4c:	b2 e4       	ldi	r27, 0x42	; 66
    7d4e:	8d 8b       	std	Y+21, r24	; 0x15
    7d50:	9e 8b       	std	Y+22, r25	; 0x16
    7d52:	af 8b       	std	Y+23, r26	; 0x17
    7d54:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    7d56:	6d 89       	ldd	r22, Y+21	; 0x15
    7d58:	7e 89       	ldd	r23, Y+22	; 0x16
    7d5a:	8f 89       	ldd	r24, Y+23	; 0x17
    7d5c:	98 8d       	ldd	r25, Y+24	; 0x18
    7d5e:	2b ea       	ldi	r18, 0xAB	; 171
    7d60:	3a ea       	ldi	r19, 0xAA	; 170
    7d62:	4a e2       	ldi	r20, 0x2A	; 42
    7d64:	50 e4       	ldi	r21, 0x40	; 64
    7d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7d6a:	dc 01       	movw	r26, r24
    7d6c:	cb 01       	movw	r24, r22
    7d6e:	89 8b       	std	Y+17, r24	; 0x11
    7d70:	9a 8b       	std	Y+18, r25	; 0x12
    7d72:	ab 8b       	std	Y+19, r26	; 0x13
    7d74:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    7d76:	69 89       	ldd	r22, Y+17	; 0x11
    7d78:	7a 89       	ldd	r23, Y+18	; 0x12
    7d7a:	8b 89       	ldd	r24, Y+19	; 0x13
    7d7c:	9c 89       	ldd	r25, Y+20	; 0x14
    7d7e:	20 e0       	ldi	r18, 0x00	; 0
    7d80:	30 e0       	ldi	r19, 0x00	; 0
    7d82:	40 e8       	ldi	r20, 0x80	; 128
    7d84:	5f e3       	ldi	r21, 0x3F	; 63
    7d86:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    7d8a:	88 23       	and	r24, r24
    7d8c:	1c f4       	brge	.+6      	; 0x7d94 <DHT11_CheckResponse+0x1f8>
		__ticks = 1;
    7d8e:	81 e0       	ldi	r24, 0x01	; 1
    7d90:	88 8b       	std	Y+16, r24	; 0x10
    7d92:	91 c0       	rjmp	.+290    	; 0x7eb6 <DHT11_CheckResponse+0x31a>
	else if (__tmp > 255)
    7d94:	69 89       	ldd	r22, Y+17	; 0x11
    7d96:	7a 89       	ldd	r23, Y+18	; 0x12
    7d98:	8b 89       	ldd	r24, Y+19	; 0x13
    7d9a:	9c 89       	ldd	r25, Y+20	; 0x14
    7d9c:	20 e0       	ldi	r18, 0x00	; 0
    7d9e:	30 e0       	ldi	r19, 0x00	; 0
    7da0:	4f e7       	ldi	r20, 0x7F	; 127
    7da2:	53 e4       	ldi	r21, 0x43	; 67
    7da4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    7da8:	18 16       	cp	r1, r24
    7daa:	0c f0       	brlt	.+2      	; 0x7dae <DHT11_CheckResponse+0x212>
    7dac:	7b c0       	rjmp	.+246    	; 0x7ea4 <DHT11_CheckResponse+0x308>
	{
		_delay_ms(__us / 1000.0);
    7dae:	6d 89       	ldd	r22, Y+21	; 0x15
    7db0:	7e 89       	ldd	r23, Y+22	; 0x16
    7db2:	8f 89       	ldd	r24, Y+23	; 0x17
    7db4:	98 8d       	ldd	r25, Y+24	; 0x18
    7db6:	20 e0       	ldi	r18, 0x00	; 0
    7db8:	30 e0       	ldi	r19, 0x00	; 0
    7dba:	4a e7       	ldi	r20, 0x7A	; 122
    7dbc:	54 e4       	ldi	r21, 0x44	; 68
    7dbe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    7dc2:	dc 01       	movw	r26, r24
    7dc4:	cb 01       	movw	r24, r22
    7dc6:	8c 87       	std	Y+12, r24	; 0x0c
    7dc8:	9d 87       	std	Y+13, r25	; 0x0d
    7dca:	ae 87       	std	Y+14, r26	; 0x0e
    7dcc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7dce:	6c 85       	ldd	r22, Y+12	; 0x0c
    7dd0:	7d 85       	ldd	r23, Y+13	; 0x0d
    7dd2:	8e 85       	ldd	r24, Y+14	; 0x0e
    7dd4:	9f 85       	ldd	r25, Y+15	; 0x0f
    7dd6:	20 e0       	ldi	r18, 0x00	; 0
    7dd8:	30 e0       	ldi	r19, 0x00	; 0
    7dda:	4a ef       	ldi	r20, 0xFA	; 250
    7ddc:	54 e4       	ldi	r21, 0x44	; 68
    7dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7de2:	dc 01       	movw	r26, r24
    7de4:	cb 01       	movw	r24, r22
    7de6:	88 87       	std	Y+8, r24	; 0x08
    7de8:	99 87       	std	Y+9, r25	; 0x09
    7dea:	aa 87       	std	Y+10, r26	; 0x0a
    7dec:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    7dee:	68 85       	ldd	r22, Y+8	; 0x08
    7df0:	79 85       	ldd	r23, Y+9	; 0x09
    7df2:	8a 85       	ldd	r24, Y+10	; 0x0a
    7df4:	9b 85       	ldd	r25, Y+11	; 0x0b
    7df6:	20 e0       	ldi	r18, 0x00	; 0
    7df8:	30 e0       	ldi	r19, 0x00	; 0
    7dfa:	40 e8       	ldi	r20, 0x80	; 128
    7dfc:	5f e3       	ldi	r21, 0x3F	; 63
    7dfe:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    7e02:	88 23       	and	r24, r24
    7e04:	2c f4       	brge	.+10     	; 0x7e10 <DHT11_CheckResponse+0x274>
		__ticks = 1;
    7e06:	81 e0       	ldi	r24, 0x01	; 1
    7e08:	90 e0       	ldi	r25, 0x00	; 0
    7e0a:	9f 83       	std	Y+7, r25	; 0x07
    7e0c:	8e 83       	std	Y+6, r24	; 0x06
    7e0e:	3f c0       	rjmp	.+126    	; 0x7e8e <DHT11_CheckResponse+0x2f2>
	else if (__tmp > 65535)
    7e10:	68 85       	ldd	r22, Y+8	; 0x08
    7e12:	79 85       	ldd	r23, Y+9	; 0x09
    7e14:	8a 85       	ldd	r24, Y+10	; 0x0a
    7e16:	9b 85       	ldd	r25, Y+11	; 0x0b
    7e18:	20 e0       	ldi	r18, 0x00	; 0
    7e1a:	3f ef       	ldi	r19, 0xFF	; 255
    7e1c:	4f e7       	ldi	r20, 0x7F	; 127
    7e1e:	57 e4       	ldi	r21, 0x47	; 71
    7e20:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    7e24:	18 16       	cp	r1, r24
    7e26:	4c f5       	brge	.+82     	; 0x7e7a <DHT11_CheckResponse+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7e28:	6c 85       	ldd	r22, Y+12	; 0x0c
    7e2a:	7d 85       	ldd	r23, Y+13	; 0x0d
    7e2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    7e2e:	9f 85       	ldd	r25, Y+15	; 0x0f
    7e30:	20 e0       	ldi	r18, 0x00	; 0
    7e32:	30 e0       	ldi	r19, 0x00	; 0
    7e34:	40 e2       	ldi	r20, 0x20	; 32
    7e36:	51 e4       	ldi	r21, 0x41	; 65
    7e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7e3c:	dc 01       	movw	r26, r24
    7e3e:	cb 01       	movw	r24, r22
    7e40:	bc 01       	movw	r22, r24
    7e42:	cd 01       	movw	r24, r26
    7e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7e48:	dc 01       	movw	r26, r24
    7e4a:	cb 01       	movw	r24, r22
    7e4c:	9f 83       	std	Y+7, r25	; 0x07
    7e4e:	8e 83       	std	Y+6, r24	; 0x06
    7e50:	0f c0       	rjmp	.+30     	; 0x7e70 <DHT11_CheckResponse+0x2d4>
    7e52:	88 ec       	ldi	r24, 0xC8	; 200
    7e54:	90 e0       	ldi	r25, 0x00	; 0
    7e56:	9d 83       	std	Y+5, r25	; 0x05
    7e58:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    7e5a:	8c 81       	ldd	r24, Y+4	; 0x04
    7e5c:	9d 81       	ldd	r25, Y+5	; 0x05
    7e5e:	01 97       	sbiw	r24, 0x01	; 1
    7e60:	f1 f7       	brne	.-4      	; 0x7e5e <DHT11_CheckResponse+0x2c2>
    7e62:	9d 83       	std	Y+5, r25	; 0x05
    7e64:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7e66:	8e 81       	ldd	r24, Y+6	; 0x06
    7e68:	9f 81       	ldd	r25, Y+7	; 0x07
    7e6a:	01 97       	sbiw	r24, 0x01	; 1
    7e6c:	9f 83       	std	Y+7, r25	; 0x07
    7e6e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7e70:	8e 81       	ldd	r24, Y+6	; 0x06
    7e72:	9f 81       	ldd	r25, Y+7	; 0x07
    7e74:	00 97       	sbiw	r24, 0x00	; 0
    7e76:	69 f7       	brne	.-38     	; 0x7e52 <DHT11_CheckResponse+0x2b6>
    7e78:	24 c0       	rjmp	.+72     	; 0x7ec2 <DHT11_CheckResponse+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7e7a:	68 85       	ldd	r22, Y+8	; 0x08
    7e7c:	79 85       	ldd	r23, Y+9	; 0x09
    7e7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    7e80:	9b 85       	ldd	r25, Y+11	; 0x0b
    7e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7e86:	dc 01       	movw	r26, r24
    7e88:	cb 01       	movw	r24, r22
    7e8a:	9f 83       	std	Y+7, r25	; 0x07
    7e8c:	8e 83       	std	Y+6, r24	; 0x06
    7e8e:	8e 81       	ldd	r24, Y+6	; 0x06
    7e90:	9f 81       	ldd	r25, Y+7	; 0x07
    7e92:	9b 83       	std	Y+3, r25	; 0x03
    7e94:	8a 83       	std	Y+2, r24	; 0x02
    7e96:	8a 81       	ldd	r24, Y+2	; 0x02
    7e98:	9b 81       	ldd	r25, Y+3	; 0x03
    7e9a:	01 97       	sbiw	r24, 0x01	; 1
    7e9c:	f1 f7       	brne	.-4      	; 0x7e9a <DHT11_CheckResponse+0x2fe>
    7e9e:	9b 83       	std	Y+3, r25	; 0x03
    7ea0:	8a 83       	std	Y+2, r24	; 0x02
    7ea2:	0f c0       	rjmp	.+30     	; 0x7ec2 <DHT11_CheckResponse+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    7ea4:	69 89       	ldd	r22, Y+17	; 0x11
    7ea6:	7a 89       	ldd	r23, Y+18	; 0x12
    7ea8:	8b 89       	ldd	r24, Y+19	; 0x13
    7eaa:	9c 89       	ldd	r25, Y+20	; 0x14
    7eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7eb0:	dc 01       	movw	r26, r24
    7eb2:	cb 01       	movw	r24, r22
    7eb4:	88 8b       	std	Y+16, r24	; 0x10
    7eb6:	88 89       	ldd	r24, Y+16	; 0x10
    7eb8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    7eba:	89 81       	ldd	r24, Y+1	; 0x01
    7ebc:	8a 95       	dec	r24
    7ebe:	f1 f7       	brne	.-4      	; 0x7ebc <DHT11_CheckResponse+0x320>
    7ec0:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_us(80);
		DIO_enuGetPinVal(DHT_PORT,DHT_PIN,&Local_PinValue);
    7ec2:	9e 01       	movw	r18, r28
    7ec4:	2e 5c       	subi	r18, 0xCE	; 206
    7ec6:	3f 4f       	sbci	r19, 0xFF	; 255
    7ec8:	83 e0       	ldi	r24, 0x03	; 3
    7eca:	60 e0       	ldi	r22, 0x00	; 0
    7ecc:	a9 01       	movw	r20, r18
    7ece:	0e 94 85 19 	call	0x330a	; 0x330a <DIO_enuGetPinVal>
		if (Local_PinValue == DIO_u8HIGH)
    7ed2:	8a a9       	ldd	r24, Y+50	; 0x32
    7ed4:	81 30       	cpi	r24, 0x01	; 1
    7ed6:	59 f4       	brne	.+22     	; 0x7eee <DHT11_CheckResponse+0x352>
		{
			Local_Response = 1;
    7ed8:	81 e0       	ldi	r24, 0x01	; 1
    7eda:	89 ab       	std	Y+49, r24	; 0x31
    7edc:	08 c0       	rjmp	.+16     	; 0x7eee <DHT11_CheckResponse+0x352>
		}
		while (Local_PinValue == DIO_u8HIGH)
		{
			DIO_enuGetPinVal(DHT_PORT,DHT_PIN,&Local_PinValue);
    7ede:	9e 01       	movw	r18, r28
    7ee0:	2e 5c       	subi	r18, 0xCE	; 206
    7ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    7ee4:	83 e0       	ldi	r24, 0x03	; 3
    7ee6:	60 e0       	ldi	r22, 0x00	; 0
    7ee8:	a9 01       	movw	r20, r18
    7eea:	0e 94 85 19 	call	0x330a	; 0x330a <DIO_enuGetPinVal>
		DIO_enuGetPinVal(DHT_PORT,DHT_PIN,&Local_PinValue);
		if (Local_PinValue == DIO_u8HIGH)
		{
			Local_Response = 1;
		}
		while (Local_PinValue == DIO_u8HIGH)
    7eee:	8a a9       	ldd	r24, Y+50	; 0x32
    7ef0:	81 30       	cpi	r24, 0x01	; 1
    7ef2:	a9 f3       	breq	.-22     	; 0x7ede <DHT11_CheckResponse+0x342>
		{
			DIO_enuGetPinVal(DHT_PORT,DHT_PIN,&Local_PinValue);
		}
	}
	return Local_Response;
    7ef4:	89 a9       	ldd	r24, Y+49	; 0x31
}
    7ef6:	e2 96       	adiw	r28, 0x32	; 50
    7ef8:	0f b6       	in	r0, 0x3f	; 63
    7efa:	f8 94       	cli
    7efc:	de bf       	out	0x3e, r29	; 62
    7efe:	0f be       	out	0x3f, r0	; 63
    7f00:	cd bf       	out	0x3d, r28	; 61
    7f02:	cf 91       	pop	r28
    7f04:	df 91       	pop	r29
    7f06:	08 95       	ret

00007f08 <DHT11_ReadByte>:

// Private function to read a byte from DHT11
static u8 DHT11_ReadByte(void)
{
    7f08:	df 93       	push	r29
    7f0a:	cf 93       	push	r28
    7f0c:	cd b7       	in	r28, 0x3d	; 61
    7f0e:	de b7       	in	r29, 0x3e	; 62
    7f10:	6b 97       	sbiw	r28, 0x1b	; 27
    7f12:	0f b6       	in	r0, 0x3f	; 63
    7f14:	f8 94       	cli
    7f16:	de bf       	out	0x3e, r29	; 62
    7f18:	0f be       	out	0x3f, r0	; 63
    7f1a:	cd bf       	out	0x3d, r28	; 61
	u8 Local_Data = 0,Local_PinValue;
    7f1c:	1a 8e       	std	Y+26, r1	; 0x1a
	for (u8 i = 0; i < 8; i++)
    7f1e:	19 8e       	std	Y+25, r1	; 0x19
    7f20:	0f c1       	rjmp	.+542    	; 0x8140 <DHT11_ReadByte+0x238>
	{

		while (Local_PinValue == DIO_u8LOW) // Wait for pin to go high
		{
			DIO_enuGetPinVal(DHT_PORT,DHT_PIN,&Local_PinValue);
    7f22:	9e 01       	movw	r18, r28
    7f24:	25 5e       	subi	r18, 0xE5	; 229
    7f26:	3f 4f       	sbci	r19, 0xFF	; 255
    7f28:	83 e0       	ldi	r24, 0x03	; 3
    7f2a:	60 e0       	ldi	r22, 0x00	; 0
    7f2c:	a9 01       	movw	r20, r18
    7f2e:	0e 94 85 19 	call	0x330a	; 0x330a <DIO_enuGetPinVal>
{
	u8 Local_Data = 0,Local_PinValue;
	for (u8 i = 0; i < 8; i++)
	{

		while (Local_PinValue == DIO_u8LOW) // Wait for pin to go high
    7f32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7f34:	88 23       	and	r24, r24
    7f36:	a9 f3       	breq	.-22     	; 0x7f22 <DHT11_ReadByte+0x1a>
    7f38:	80 e0       	ldi	r24, 0x00	; 0
    7f3a:	90 e0       	ldi	r25, 0x00	; 0
    7f3c:	a0 ef       	ldi	r26, 0xF0	; 240
    7f3e:	b1 e4       	ldi	r27, 0x41	; 65
    7f40:	8d 8b       	std	Y+21, r24	; 0x15
    7f42:	9e 8b       	std	Y+22, r25	; 0x16
    7f44:	af 8b       	std	Y+23, r26	; 0x17
    7f46:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    7f48:	6d 89       	ldd	r22, Y+21	; 0x15
    7f4a:	7e 89       	ldd	r23, Y+22	; 0x16
    7f4c:	8f 89       	ldd	r24, Y+23	; 0x17
    7f4e:	98 8d       	ldd	r25, Y+24	; 0x18
    7f50:	2b ea       	ldi	r18, 0xAB	; 171
    7f52:	3a ea       	ldi	r19, 0xAA	; 170
    7f54:	4a e2       	ldi	r20, 0x2A	; 42
    7f56:	50 e4       	ldi	r21, 0x40	; 64
    7f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7f5c:	dc 01       	movw	r26, r24
    7f5e:	cb 01       	movw	r24, r22
    7f60:	89 8b       	std	Y+17, r24	; 0x11
    7f62:	9a 8b       	std	Y+18, r25	; 0x12
    7f64:	ab 8b       	std	Y+19, r26	; 0x13
    7f66:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    7f68:	69 89       	ldd	r22, Y+17	; 0x11
    7f6a:	7a 89       	ldd	r23, Y+18	; 0x12
    7f6c:	8b 89       	ldd	r24, Y+19	; 0x13
    7f6e:	9c 89       	ldd	r25, Y+20	; 0x14
    7f70:	20 e0       	ldi	r18, 0x00	; 0
    7f72:	30 e0       	ldi	r19, 0x00	; 0
    7f74:	40 e8       	ldi	r20, 0x80	; 128
    7f76:	5f e3       	ldi	r21, 0x3F	; 63
    7f78:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    7f7c:	88 23       	and	r24, r24
    7f7e:	1c f4       	brge	.+6      	; 0x7f86 <DHT11_ReadByte+0x7e>
		__ticks = 1;
    7f80:	81 e0       	ldi	r24, 0x01	; 1
    7f82:	88 8b       	std	Y+16, r24	; 0x10
    7f84:	91 c0       	rjmp	.+290    	; 0x80a8 <DHT11_ReadByte+0x1a0>
	else if (__tmp > 255)
    7f86:	69 89       	ldd	r22, Y+17	; 0x11
    7f88:	7a 89       	ldd	r23, Y+18	; 0x12
    7f8a:	8b 89       	ldd	r24, Y+19	; 0x13
    7f8c:	9c 89       	ldd	r25, Y+20	; 0x14
    7f8e:	20 e0       	ldi	r18, 0x00	; 0
    7f90:	30 e0       	ldi	r19, 0x00	; 0
    7f92:	4f e7       	ldi	r20, 0x7F	; 127
    7f94:	53 e4       	ldi	r21, 0x43	; 67
    7f96:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    7f9a:	18 16       	cp	r1, r24
    7f9c:	0c f0       	brlt	.+2      	; 0x7fa0 <DHT11_ReadByte+0x98>
    7f9e:	7b c0       	rjmp	.+246    	; 0x8096 <DHT11_ReadByte+0x18e>
	{
		_delay_ms(__us / 1000.0);
    7fa0:	6d 89       	ldd	r22, Y+21	; 0x15
    7fa2:	7e 89       	ldd	r23, Y+22	; 0x16
    7fa4:	8f 89       	ldd	r24, Y+23	; 0x17
    7fa6:	98 8d       	ldd	r25, Y+24	; 0x18
    7fa8:	20 e0       	ldi	r18, 0x00	; 0
    7faa:	30 e0       	ldi	r19, 0x00	; 0
    7fac:	4a e7       	ldi	r20, 0x7A	; 122
    7fae:	54 e4       	ldi	r21, 0x44	; 68
    7fb0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    7fb4:	dc 01       	movw	r26, r24
    7fb6:	cb 01       	movw	r24, r22
    7fb8:	8c 87       	std	Y+12, r24	; 0x0c
    7fba:	9d 87       	std	Y+13, r25	; 0x0d
    7fbc:	ae 87       	std	Y+14, r26	; 0x0e
    7fbe:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7fc0:	6c 85       	ldd	r22, Y+12	; 0x0c
    7fc2:	7d 85       	ldd	r23, Y+13	; 0x0d
    7fc4:	8e 85       	ldd	r24, Y+14	; 0x0e
    7fc6:	9f 85       	ldd	r25, Y+15	; 0x0f
    7fc8:	20 e0       	ldi	r18, 0x00	; 0
    7fca:	30 e0       	ldi	r19, 0x00	; 0
    7fcc:	4a ef       	ldi	r20, 0xFA	; 250
    7fce:	54 e4       	ldi	r21, 0x44	; 68
    7fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7fd4:	dc 01       	movw	r26, r24
    7fd6:	cb 01       	movw	r24, r22
    7fd8:	88 87       	std	Y+8, r24	; 0x08
    7fda:	99 87       	std	Y+9, r25	; 0x09
    7fdc:	aa 87       	std	Y+10, r26	; 0x0a
    7fde:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    7fe0:	68 85       	ldd	r22, Y+8	; 0x08
    7fe2:	79 85       	ldd	r23, Y+9	; 0x09
    7fe4:	8a 85       	ldd	r24, Y+10	; 0x0a
    7fe6:	9b 85       	ldd	r25, Y+11	; 0x0b
    7fe8:	20 e0       	ldi	r18, 0x00	; 0
    7fea:	30 e0       	ldi	r19, 0x00	; 0
    7fec:	40 e8       	ldi	r20, 0x80	; 128
    7fee:	5f e3       	ldi	r21, 0x3F	; 63
    7ff0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    7ff4:	88 23       	and	r24, r24
    7ff6:	2c f4       	brge	.+10     	; 0x8002 <DHT11_ReadByte+0xfa>
		__ticks = 1;
    7ff8:	81 e0       	ldi	r24, 0x01	; 1
    7ffa:	90 e0       	ldi	r25, 0x00	; 0
    7ffc:	9f 83       	std	Y+7, r25	; 0x07
    7ffe:	8e 83       	std	Y+6, r24	; 0x06
    8000:	3f c0       	rjmp	.+126    	; 0x8080 <DHT11_ReadByte+0x178>
	else if (__tmp > 65535)
    8002:	68 85       	ldd	r22, Y+8	; 0x08
    8004:	79 85       	ldd	r23, Y+9	; 0x09
    8006:	8a 85       	ldd	r24, Y+10	; 0x0a
    8008:	9b 85       	ldd	r25, Y+11	; 0x0b
    800a:	20 e0       	ldi	r18, 0x00	; 0
    800c:	3f ef       	ldi	r19, 0xFF	; 255
    800e:	4f e7       	ldi	r20, 0x7F	; 127
    8010:	57 e4       	ldi	r21, 0x47	; 71
    8012:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    8016:	18 16       	cp	r1, r24
    8018:	4c f5       	brge	.+82     	; 0x806c <DHT11_ReadByte+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    801a:	6c 85       	ldd	r22, Y+12	; 0x0c
    801c:	7d 85       	ldd	r23, Y+13	; 0x0d
    801e:	8e 85       	ldd	r24, Y+14	; 0x0e
    8020:	9f 85       	ldd	r25, Y+15	; 0x0f
    8022:	20 e0       	ldi	r18, 0x00	; 0
    8024:	30 e0       	ldi	r19, 0x00	; 0
    8026:	40 e2       	ldi	r20, 0x20	; 32
    8028:	51 e4       	ldi	r21, 0x41	; 65
    802a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    802e:	dc 01       	movw	r26, r24
    8030:	cb 01       	movw	r24, r22
    8032:	bc 01       	movw	r22, r24
    8034:	cd 01       	movw	r24, r26
    8036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    803a:	dc 01       	movw	r26, r24
    803c:	cb 01       	movw	r24, r22
    803e:	9f 83       	std	Y+7, r25	; 0x07
    8040:	8e 83       	std	Y+6, r24	; 0x06
    8042:	0f c0       	rjmp	.+30     	; 0x8062 <DHT11_ReadByte+0x15a>
    8044:	88 ec       	ldi	r24, 0xC8	; 200
    8046:	90 e0       	ldi	r25, 0x00	; 0
    8048:	9d 83       	std	Y+5, r25	; 0x05
    804a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    804c:	8c 81       	ldd	r24, Y+4	; 0x04
    804e:	9d 81       	ldd	r25, Y+5	; 0x05
    8050:	01 97       	sbiw	r24, 0x01	; 1
    8052:	f1 f7       	brne	.-4      	; 0x8050 <DHT11_ReadByte+0x148>
    8054:	9d 83       	std	Y+5, r25	; 0x05
    8056:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8058:	8e 81       	ldd	r24, Y+6	; 0x06
    805a:	9f 81       	ldd	r25, Y+7	; 0x07
    805c:	01 97       	sbiw	r24, 0x01	; 1
    805e:	9f 83       	std	Y+7, r25	; 0x07
    8060:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8062:	8e 81       	ldd	r24, Y+6	; 0x06
    8064:	9f 81       	ldd	r25, Y+7	; 0x07
    8066:	00 97       	sbiw	r24, 0x00	; 0
    8068:	69 f7       	brne	.-38     	; 0x8044 <DHT11_ReadByte+0x13c>
    806a:	24 c0       	rjmp	.+72     	; 0x80b4 <DHT11_ReadByte+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    806c:	68 85       	ldd	r22, Y+8	; 0x08
    806e:	79 85       	ldd	r23, Y+9	; 0x09
    8070:	8a 85       	ldd	r24, Y+10	; 0x0a
    8072:	9b 85       	ldd	r25, Y+11	; 0x0b
    8074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8078:	dc 01       	movw	r26, r24
    807a:	cb 01       	movw	r24, r22
    807c:	9f 83       	std	Y+7, r25	; 0x07
    807e:	8e 83       	std	Y+6, r24	; 0x06
    8080:	8e 81       	ldd	r24, Y+6	; 0x06
    8082:	9f 81       	ldd	r25, Y+7	; 0x07
    8084:	9b 83       	std	Y+3, r25	; 0x03
    8086:	8a 83       	std	Y+2, r24	; 0x02
    8088:	8a 81       	ldd	r24, Y+2	; 0x02
    808a:	9b 81       	ldd	r25, Y+3	; 0x03
    808c:	01 97       	sbiw	r24, 0x01	; 1
    808e:	f1 f7       	brne	.-4      	; 0x808c <DHT11_ReadByte+0x184>
    8090:	9b 83       	std	Y+3, r25	; 0x03
    8092:	8a 83       	std	Y+2, r24	; 0x02
    8094:	0f c0       	rjmp	.+30     	; 0x80b4 <DHT11_ReadByte+0x1ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    8096:	69 89       	ldd	r22, Y+17	; 0x11
    8098:	7a 89       	ldd	r23, Y+18	; 0x12
    809a:	8b 89       	ldd	r24, Y+19	; 0x13
    809c:	9c 89       	ldd	r25, Y+20	; 0x14
    809e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    80a2:	dc 01       	movw	r26, r24
    80a4:	cb 01       	movw	r24, r22
    80a6:	88 8b       	std	Y+16, r24	; 0x10
    80a8:	88 89       	ldd	r24, Y+16	; 0x10
    80aa:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    80ac:	89 81       	ldd	r24, Y+1	; 0x01
    80ae:	8a 95       	dec	r24
    80b0:	f1 f7       	brne	.-4      	; 0x80ae <DHT11_ReadByte+0x1a6>
    80b2:	89 83       	std	Y+1, r24	; 0x01
		{
			DIO_enuGetPinVal(DHT_PORT,DHT_PIN,&Local_PinValue);
		}
		_delay_us(30); // Wait for 30 us

		DIO_enuGetPinVal(DHT_PORT,DHT_PIN,&Local_PinValue);
    80b4:	9e 01       	movw	r18, r28
    80b6:	25 5e       	subi	r18, 0xE5	; 229
    80b8:	3f 4f       	sbci	r19, 0xFF	; 255
    80ba:	83 e0       	ldi	r24, 0x03	; 3
    80bc:	60 e0       	ldi	r22, 0x00	; 0
    80be:	a9 01       	movw	r20, r18
    80c0:	0e 94 85 19 	call	0x330a	; 0x330a <DIO_enuGetPinVal>
		if (Local_PinValue == DIO_u8HIGH)
    80c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    80c6:	81 30       	cpi	r24, 0x01	; 1
    80c8:	b1 f4       	brne	.+44     	; 0x80f6 <DHT11_ReadByte+0x1ee>
		{
			Local_Data |= (1 << (7 - i));
    80ca:	89 8d       	ldd	r24, Y+25	; 0x19
    80cc:	28 2f       	mov	r18, r24
    80ce:	30 e0       	ldi	r19, 0x00	; 0
    80d0:	87 e0       	ldi	r24, 0x07	; 7
    80d2:	90 e0       	ldi	r25, 0x00	; 0
    80d4:	ac 01       	movw	r20, r24
    80d6:	42 1b       	sub	r20, r18
    80d8:	53 0b       	sbc	r21, r19
    80da:	9a 01       	movw	r18, r20
    80dc:	81 e0       	ldi	r24, 0x01	; 1
    80de:	90 e0       	ldi	r25, 0x00	; 0
    80e0:	02 2e       	mov	r0, r18
    80e2:	02 c0       	rjmp	.+4      	; 0x80e8 <DHT11_ReadByte+0x1e0>
    80e4:	88 0f       	add	r24, r24
    80e6:	99 1f       	adc	r25, r25
    80e8:	0a 94       	dec	r0
    80ea:	e2 f7       	brpl	.-8      	; 0x80e4 <DHT11_ReadByte+0x1dc>
    80ec:	98 2f       	mov	r25, r24
    80ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    80f0:	89 2b       	or	r24, r25
    80f2:	8a 8f       	std	Y+26, r24	; 0x1a
    80f4:	1f c0       	rjmp	.+62     	; 0x8134 <DHT11_ReadByte+0x22c>
		}
		else
		{
			Local_Data &= (~(1 << (7 - i)));
    80f6:	89 8d       	ldd	r24, Y+25	; 0x19
    80f8:	28 2f       	mov	r18, r24
    80fa:	30 e0       	ldi	r19, 0x00	; 0
    80fc:	87 e0       	ldi	r24, 0x07	; 7
    80fe:	90 e0       	ldi	r25, 0x00	; 0
    8100:	ac 01       	movw	r20, r24
    8102:	42 1b       	sub	r20, r18
    8104:	53 0b       	sbc	r21, r19
    8106:	9a 01       	movw	r18, r20
    8108:	81 e0       	ldi	r24, 0x01	; 1
    810a:	90 e0       	ldi	r25, 0x00	; 0
    810c:	02 2e       	mov	r0, r18
    810e:	02 c0       	rjmp	.+4      	; 0x8114 <DHT11_ReadByte+0x20c>
    8110:	88 0f       	add	r24, r24
    8112:	99 1f       	adc	r25, r25
    8114:	0a 94       	dec	r0
    8116:	e2 f7       	brpl	.-8      	; 0x8110 <DHT11_ReadByte+0x208>
    8118:	98 2f       	mov	r25, r24
    811a:	90 95       	com	r25
    811c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    811e:	89 23       	and	r24, r25
    8120:	8a 8f       	std	Y+26, r24	; 0x1a
    8122:	08 c0       	rjmp	.+16     	; 0x8134 <DHT11_ReadByte+0x22c>
		}
		while (Local_PinValue == DIO_u8HIGH) // Wait for pin to go low
		{
			DIO_enuGetPinVal(DHT_PORT,DHT_PIN,&Local_PinValue);
    8124:	9e 01       	movw	r18, r28
    8126:	25 5e       	subi	r18, 0xE5	; 229
    8128:	3f 4f       	sbci	r19, 0xFF	; 255
    812a:	83 e0       	ldi	r24, 0x03	; 3
    812c:	60 e0       	ldi	r22, 0x00	; 0
    812e:	a9 01       	movw	r20, r18
    8130:	0e 94 85 19 	call	0x330a	; 0x330a <DIO_enuGetPinVal>
		}
		else
		{
			Local_Data &= (~(1 << (7 - i)));
		}
		while (Local_PinValue == DIO_u8HIGH) // Wait for pin to go low
    8134:	8b 8d       	ldd	r24, Y+27	; 0x1b
    8136:	81 30       	cpi	r24, 0x01	; 1
    8138:	a9 f3       	breq	.-22     	; 0x8124 <DHT11_ReadByte+0x21c>

// Private function to read a byte from DHT11
static u8 DHT11_ReadByte(void)
{
	u8 Local_Data = 0,Local_PinValue;
	for (u8 i = 0; i < 8; i++)
    813a:	89 8d       	ldd	r24, Y+25	; 0x19
    813c:	8f 5f       	subi	r24, 0xFF	; 255
    813e:	89 8f       	std	Y+25, r24	; 0x19
    8140:	89 8d       	ldd	r24, Y+25	; 0x19
    8142:	88 30       	cpi	r24, 0x08	; 8
    8144:	08 f4       	brcc	.+2      	; 0x8148 <DHT11_ReadByte+0x240>
    8146:	f5 ce       	rjmp	.-534    	; 0x7f32 <DHT11_ReadByte+0x2a>
		while (Local_PinValue == DIO_u8HIGH) // Wait for pin to go low
		{
			DIO_enuGetPinVal(DHT_PORT,DHT_PIN,&Local_PinValue);
		}
	}
	return Local_Data;
    8148:	8a 8d       	ldd	r24, Y+26	; 0x1a
}
    814a:	6b 96       	adiw	r28, 0x1b	; 27
    814c:	0f b6       	in	r0, 0x3f	; 63
    814e:	f8 94       	cli
    8150:	de bf       	out	0x3e, r29	; 62
    8152:	0f be       	out	0x3f, r0	; 63
    8154:	cd bf       	out	0x3d, r28	; 61
    8156:	cf 91       	pop	r28
    8158:	df 91       	pop	r29
    815a:	08 95       	ret

0000815c <DC_MOTOR_enuInit>:
#include "DC_MOTOR_config.h"

extern DC_MOTOR_t DC_MOTOR_AstrDcMotorConfig[DC_MOTOR_NUM];

ES_t DC_MOTOR_enuInit(DC_MOTOR_t *Copy_pAstrDcMotorConfig)
{
    815c:	df 93       	push	r29
    815e:	cf 93       	push	r28
    8160:	00 d0       	rcall	.+0      	; 0x8162 <DC_MOTOR_enuInit+0x6>
    8162:	00 d0       	rcall	.+0      	; 0x8164 <DC_MOTOR_enuInit+0x8>
    8164:	cd b7       	in	r28, 0x3d	; 61
    8166:	de b7       	in	r29, 0x3e	; 62
    8168:	9c 83       	std	Y+4, r25	; 0x04
    816a:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    816c:	81 e0       	ldi	r24, 0x01	; 1
    816e:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_pAstrDcMotorConfig != NULL)
    8170:	8b 81       	ldd	r24, Y+3	; 0x03
    8172:	9c 81       	ldd	r25, Y+4	; 0x04
    8174:	00 97       	sbiw	r24, 0x00	; 0
    8176:	09 f4       	brne	.+2      	; 0x817a <DC_MOTOR_enuInit+0x1e>
    8178:	4d c0       	rjmp	.+154    	; 0x8214 <DC_MOTOR_enuInit+0xb8>
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < DC_MOTOR_NUM; Local_u8Iterator++)
    817a:	19 82       	std	Y+1, r1	; 0x01
    817c:	45 c0       	rjmp	.+138    	; 0x8208 <DC_MOTOR_enuInit+0xac>
		{
			DIO_enuSetPinDirection(Copy_pAstrDcMotorConfig[Local_u8Iterator].DC_MOTOR_u8In1PortID,Copy_pAstrDcMotorConfig[Local_u8Iterator].DC_MOTOR_u8In1PinID,DIO_u8OUTPUT);
    817e:	89 81       	ldd	r24, Y+1	; 0x01
    8180:	88 2f       	mov	r24, r24
    8182:	90 e0       	ldi	r25, 0x00	; 0
    8184:	9c 01       	movw	r18, r24
    8186:	22 0f       	add	r18, r18
    8188:	33 1f       	adc	r19, r19
    818a:	22 0f       	add	r18, r18
    818c:	33 1f       	adc	r19, r19
    818e:	8b 81       	ldd	r24, Y+3	; 0x03
    8190:	9c 81       	ldd	r25, Y+4	; 0x04
    8192:	fc 01       	movw	r30, r24
    8194:	e2 0f       	add	r30, r18
    8196:	f3 1f       	adc	r31, r19
    8198:	40 81       	ld	r20, Z
    819a:	89 81       	ldd	r24, Y+1	; 0x01
    819c:	88 2f       	mov	r24, r24
    819e:	90 e0       	ldi	r25, 0x00	; 0
    81a0:	9c 01       	movw	r18, r24
    81a2:	22 0f       	add	r18, r18
    81a4:	33 1f       	adc	r19, r19
    81a6:	22 0f       	add	r18, r18
    81a8:	33 1f       	adc	r19, r19
    81aa:	8b 81       	ldd	r24, Y+3	; 0x03
    81ac:	9c 81       	ldd	r25, Y+4	; 0x04
    81ae:	fc 01       	movw	r30, r24
    81b0:	e2 0f       	add	r30, r18
    81b2:	f3 1f       	adc	r31, r19
    81b4:	91 81       	ldd	r25, Z+1	; 0x01
    81b6:	84 2f       	mov	r24, r20
    81b8:	69 2f       	mov	r22, r25
    81ba:	41 e0       	ldi	r20, 0x01	; 1
    81bc:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
			DIO_enuSetPinDirection(Copy_pAstrDcMotorConfig[Local_u8Iterator].DC_MOTOR_u8In2PortID,Copy_pAstrDcMotorConfig[Local_u8Iterator].DC_MOTOR_u8In2PinID,DIO_u8OUTPUT);
    81c0:	89 81       	ldd	r24, Y+1	; 0x01
    81c2:	88 2f       	mov	r24, r24
    81c4:	90 e0       	ldi	r25, 0x00	; 0
    81c6:	9c 01       	movw	r18, r24
    81c8:	22 0f       	add	r18, r18
    81ca:	33 1f       	adc	r19, r19
    81cc:	22 0f       	add	r18, r18
    81ce:	33 1f       	adc	r19, r19
    81d0:	8b 81       	ldd	r24, Y+3	; 0x03
    81d2:	9c 81       	ldd	r25, Y+4	; 0x04
    81d4:	fc 01       	movw	r30, r24
    81d6:	e2 0f       	add	r30, r18
    81d8:	f3 1f       	adc	r31, r19
    81da:	42 81       	ldd	r20, Z+2	; 0x02
    81dc:	89 81       	ldd	r24, Y+1	; 0x01
    81de:	88 2f       	mov	r24, r24
    81e0:	90 e0       	ldi	r25, 0x00	; 0
    81e2:	9c 01       	movw	r18, r24
    81e4:	22 0f       	add	r18, r18
    81e6:	33 1f       	adc	r19, r19
    81e8:	22 0f       	add	r18, r18
    81ea:	33 1f       	adc	r19, r19
    81ec:	8b 81       	ldd	r24, Y+3	; 0x03
    81ee:	9c 81       	ldd	r25, Y+4	; 0x04
    81f0:	fc 01       	movw	r30, r24
    81f2:	e2 0f       	add	r30, r18
    81f4:	f3 1f       	adc	r31, r19
    81f6:	93 81       	ldd	r25, Z+3	; 0x03
    81f8:	84 2f       	mov	r24, r20
    81fa:	69 2f       	mov	r22, r25
    81fc:	41 e0       	ldi	r20, 0x01	; 1
    81fe:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
	ES_t Local_enuErrorState = ES_NOK;

	if(Copy_pAstrDcMotorConfig != NULL)
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < DC_MOTOR_NUM; Local_u8Iterator++)
    8202:	89 81       	ldd	r24, Y+1	; 0x01
    8204:	8f 5f       	subi	r24, 0xFF	; 255
    8206:	89 83       	std	Y+1, r24	; 0x01
    8208:	89 81       	ldd	r24, Y+1	; 0x01
    820a:	88 23       	and	r24, r24
    820c:	09 f4       	brne	.+2      	; 0x8210 <DC_MOTOR_enuInit+0xb4>
    820e:	b7 cf       	rjmp	.-146    	; 0x817e <DC_MOTOR_enuInit+0x22>
		{
			DIO_enuSetPinDirection(Copy_pAstrDcMotorConfig[Local_u8Iterator].DC_MOTOR_u8In1PortID,Copy_pAstrDcMotorConfig[Local_u8Iterator].DC_MOTOR_u8In1PinID,DIO_u8OUTPUT);
			DIO_enuSetPinDirection(Copy_pAstrDcMotorConfig[Local_u8Iterator].DC_MOTOR_u8In2PortID,Copy_pAstrDcMotorConfig[Local_u8Iterator].DC_MOTOR_u8In2PinID,DIO_u8OUTPUT);
		}

		Local_enuErrorState = ES_OK;
    8210:	1a 82       	std	Y+2, r1	; 0x02
    8212:	02 c0       	rjmp	.+4      	; 0x8218 <DC_MOTOR_enuInit+0xbc>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    8214:	82 e0       	ldi	r24, 0x02	; 2
    8216:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    8218:	8a 81       	ldd	r24, Y+2	; 0x02
}
    821a:	0f 90       	pop	r0
    821c:	0f 90       	pop	r0
    821e:	0f 90       	pop	r0
    8220:	0f 90       	pop	r0
    8222:	cf 91       	pop	r28
    8224:	df 91       	pop	r29
    8226:	08 95       	ret

00008228 <DC_MOTOR_enuOnCW>:


ES_t DC_MOTOR_enuOnCW(u8 Copy_u8DcMotorID)
{
    8228:	df 93       	push	r29
    822a:	cf 93       	push	r28
    822c:	00 d0       	rcall	.+0      	; 0x822e <DC_MOTOR_enuOnCW+0x6>
    822e:	cd b7       	in	r28, 0x3d	; 61
    8230:	de b7       	in	r29, 0x3e	; 62
    8232:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    8234:	81 e0       	ldi	r24, 0x01	; 1
    8236:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8DcMotorID < DC_MOTOR_NUM)
    8238:	8a 81       	ldd	r24, Y+2	; 0x02
    823a:	88 23       	and	r24, r24
    823c:	c9 f5       	brne	.+114    	; 0x82b0 <DC_MOTOR_enuOnCW+0x88>
	{
		DIO_enuSetPinVal(DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In1PortID,DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In1PinID,DIO_u8HIGH);
    823e:	8a 81       	ldd	r24, Y+2	; 0x02
    8240:	88 2f       	mov	r24, r24
    8242:	90 e0       	ldi	r25, 0x00	; 0
    8244:	88 0f       	add	r24, r24
    8246:	99 1f       	adc	r25, r25
    8248:	88 0f       	add	r24, r24
    824a:	99 1f       	adc	r25, r25
    824c:	fc 01       	movw	r30, r24
    824e:	ec 50       	subi	r30, 0x0C	; 12
    8250:	fe 4f       	sbci	r31, 0xFE	; 254
    8252:	20 81       	ld	r18, Z
    8254:	8a 81       	ldd	r24, Y+2	; 0x02
    8256:	88 2f       	mov	r24, r24
    8258:	90 e0       	ldi	r25, 0x00	; 0
    825a:	88 0f       	add	r24, r24
    825c:	99 1f       	adc	r25, r25
    825e:	88 0f       	add	r24, r24
    8260:	99 1f       	adc	r25, r25
    8262:	fc 01       	movw	r30, r24
    8264:	eb 50       	subi	r30, 0x0B	; 11
    8266:	fe 4f       	sbci	r31, 0xFE	; 254
    8268:	90 81       	ld	r25, Z
    826a:	82 2f       	mov	r24, r18
    826c:	69 2f       	mov	r22, r25
    826e:	41 e0       	ldi	r20, 0x01	; 1
    8270:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
		DIO_enuSetPinVal(DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In2PortID,DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In2PinID,DIO_u8LOW);
    8274:	8a 81       	ldd	r24, Y+2	; 0x02
    8276:	88 2f       	mov	r24, r24
    8278:	90 e0       	ldi	r25, 0x00	; 0
    827a:	88 0f       	add	r24, r24
    827c:	99 1f       	adc	r25, r25
    827e:	01 96       	adiw	r24, 0x01	; 1
    8280:	88 0f       	add	r24, r24
    8282:	99 1f       	adc	r25, r25
    8284:	fc 01       	movw	r30, r24
    8286:	ec 50       	subi	r30, 0x0C	; 12
    8288:	fe 4f       	sbci	r31, 0xFE	; 254
    828a:	20 81       	ld	r18, Z
    828c:	8a 81       	ldd	r24, Y+2	; 0x02
    828e:	88 2f       	mov	r24, r24
    8290:	90 e0       	ldi	r25, 0x00	; 0
    8292:	88 0f       	add	r24, r24
    8294:	99 1f       	adc	r25, r25
    8296:	88 0f       	add	r24, r24
    8298:	99 1f       	adc	r25, r25
    829a:	fc 01       	movw	r30, r24
    829c:	e9 50       	subi	r30, 0x09	; 9
    829e:	fe 4f       	sbci	r31, 0xFE	; 254
    82a0:	90 81       	ld	r25, Z
    82a2:	82 2f       	mov	r24, r18
    82a4:	69 2f       	mov	r22, r25
    82a6:	40 e0       	ldi	r20, 0x00	; 0
    82a8:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
		Local_enuErrorState = ES_OK;
    82ac:	19 82       	std	Y+1, r1	; 0x01
    82ae:	02 c0       	rjmp	.+4      	; 0x82b4 <DC_MOTOR_enuOnCW+0x8c>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    82b0:	83 e0       	ldi	r24, 0x03	; 3
    82b2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    82b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    82b6:	0f 90       	pop	r0
    82b8:	0f 90       	pop	r0
    82ba:	cf 91       	pop	r28
    82bc:	df 91       	pop	r29
    82be:	08 95       	ret

000082c0 <DC_MOTOR_enuOnCCW>:

ES_t DC_MOTOR_enuOnCCW(u8 Copy_u8DcMotorID)
{
    82c0:	df 93       	push	r29
    82c2:	cf 93       	push	r28
    82c4:	00 d0       	rcall	.+0      	; 0x82c6 <DC_MOTOR_enuOnCCW+0x6>
    82c6:	cd b7       	in	r28, 0x3d	; 61
    82c8:	de b7       	in	r29, 0x3e	; 62
    82ca:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    82cc:	81 e0       	ldi	r24, 0x01	; 1
    82ce:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8DcMotorID < DC_MOTOR_NUM)
    82d0:	8a 81       	ldd	r24, Y+2	; 0x02
    82d2:	88 23       	and	r24, r24
    82d4:	c9 f5       	brne	.+114    	; 0x8348 <DC_MOTOR_enuOnCCW+0x88>
	{
		DIO_enuSetPinVal(DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In1PortID,DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In1PinID,DIO_u8LOW);
    82d6:	8a 81       	ldd	r24, Y+2	; 0x02
    82d8:	88 2f       	mov	r24, r24
    82da:	90 e0       	ldi	r25, 0x00	; 0
    82dc:	88 0f       	add	r24, r24
    82de:	99 1f       	adc	r25, r25
    82e0:	88 0f       	add	r24, r24
    82e2:	99 1f       	adc	r25, r25
    82e4:	fc 01       	movw	r30, r24
    82e6:	ec 50       	subi	r30, 0x0C	; 12
    82e8:	fe 4f       	sbci	r31, 0xFE	; 254
    82ea:	20 81       	ld	r18, Z
    82ec:	8a 81       	ldd	r24, Y+2	; 0x02
    82ee:	88 2f       	mov	r24, r24
    82f0:	90 e0       	ldi	r25, 0x00	; 0
    82f2:	88 0f       	add	r24, r24
    82f4:	99 1f       	adc	r25, r25
    82f6:	88 0f       	add	r24, r24
    82f8:	99 1f       	adc	r25, r25
    82fa:	fc 01       	movw	r30, r24
    82fc:	eb 50       	subi	r30, 0x0B	; 11
    82fe:	fe 4f       	sbci	r31, 0xFE	; 254
    8300:	90 81       	ld	r25, Z
    8302:	82 2f       	mov	r24, r18
    8304:	69 2f       	mov	r22, r25
    8306:	40 e0       	ldi	r20, 0x00	; 0
    8308:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
		DIO_enuSetPinVal(DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In2PortID,DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In2PinID,DIO_u8HIGH);
    830c:	8a 81       	ldd	r24, Y+2	; 0x02
    830e:	88 2f       	mov	r24, r24
    8310:	90 e0       	ldi	r25, 0x00	; 0
    8312:	88 0f       	add	r24, r24
    8314:	99 1f       	adc	r25, r25
    8316:	01 96       	adiw	r24, 0x01	; 1
    8318:	88 0f       	add	r24, r24
    831a:	99 1f       	adc	r25, r25
    831c:	fc 01       	movw	r30, r24
    831e:	ec 50       	subi	r30, 0x0C	; 12
    8320:	fe 4f       	sbci	r31, 0xFE	; 254
    8322:	20 81       	ld	r18, Z
    8324:	8a 81       	ldd	r24, Y+2	; 0x02
    8326:	88 2f       	mov	r24, r24
    8328:	90 e0       	ldi	r25, 0x00	; 0
    832a:	88 0f       	add	r24, r24
    832c:	99 1f       	adc	r25, r25
    832e:	88 0f       	add	r24, r24
    8330:	99 1f       	adc	r25, r25
    8332:	fc 01       	movw	r30, r24
    8334:	e9 50       	subi	r30, 0x09	; 9
    8336:	fe 4f       	sbci	r31, 0xFE	; 254
    8338:	90 81       	ld	r25, Z
    833a:	82 2f       	mov	r24, r18
    833c:	69 2f       	mov	r22, r25
    833e:	41 e0       	ldi	r20, 0x01	; 1
    8340:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
		Local_enuErrorState = ES_OK;
    8344:	19 82       	std	Y+1, r1	; 0x01
    8346:	02 c0       	rjmp	.+4      	; 0x834c <DC_MOTOR_enuOnCCW+0x8c>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    8348:	83 e0       	ldi	r24, 0x03	; 3
    834a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    834c:	89 81       	ldd	r24, Y+1	; 0x01
}
    834e:	0f 90       	pop	r0
    8350:	0f 90       	pop	r0
    8352:	cf 91       	pop	r28
    8354:	df 91       	pop	r29
    8356:	08 95       	ret

00008358 <DC_MOTOR_enuOff>:

ES_t DC_MOTOR_enuOff(u8 Copy_u8DcMotorID)
{
    8358:	df 93       	push	r29
    835a:	cf 93       	push	r28
    835c:	00 d0       	rcall	.+0      	; 0x835e <DC_MOTOR_enuOff+0x6>
    835e:	cd b7       	in	r28, 0x3d	; 61
    8360:	de b7       	in	r29, 0x3e	; 62
    8362:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    8364:	81 e0       	ldi	r24, 0x01	; 1
    8366:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8DcMotorID < DC_MOTOR_NUM)
    8368:	8a 81       	ldd	r24, Y+2	; 0x02
    836a:	88 23       	and	r24, r24
    836c:	c9 f5       	brne	.+114    	; 0x83e0 <DC_MOTOR_enuOff+0x88>
	{
		DIO_enuSetPinVal(DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In1PortID,DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In1PinID,DIO_u8LOW);
    836e:	8a 81       	ldd	r24, Y+2	; 0x02
    8370:	88 2f       	mov	r24, r24
    8372:	90 e0       	ldi	r25, 0x00	; 0
    8374:	88 0f       	add	r24, r24
    8376:	99 1f       	adc	r25, r25
    8378:	88 0f       	add	r24, r24
    837a:	99 1f       	adc	r25, r25
    837c:	fc 01       	movw	r30, r24
    837e:	ec 50       	subi	r30, 0x0C	; 12
    8380:	fe 4f       	sbci	r31, 0xFE	; 254
    8382:	20 81       	ld	r18, Z
    8384:	8a 81       	ldd	r24, Y+2	; 0x02
    8386:	88 2f       	mov	r24, r24
    8388:	90 e0       	ldi	r25, 0x00	; 0
    838a:	88 0f       	add	r24, r24
    838c:	99 1f       	adc	r25, r25
    838e:	88 0f       	add	r24, r24
    8390:	99 1f       	adc	r25, r25
    8392:	fc 01       	movw	r30, r24
    8394:	eb 50       	subi	r30, 0x0B	; 11
    8396:	fe 4f       	sbci	r31, 0xFE	; 254
    8398:	90 81       	ld	r25, Z
    839a:	82 2f       	mov	r24, r18
    839c:	69 2f       	mov	r22, r25
    839e:	40 e0       	ldi	r20, 0x00	; 0
    83a0:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
		DIO_enuSetPinVal(DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In2PortID,DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In2PinID,DIO_u8LOW);
    83a4:	8a 81       	ldd	r24, Y+2	; 0x02
    83a6:	88 2f       	mov	r24, r24
    83a8:	90 e0       	ldi	r25, 0x00	; 0
    83aa:	88 0f       	add	r24, r24
    83ac:	99 1f       	adc	r25, r25
    83ae:	01 96       	adiw	r24, 0x01	; 1
    83b0:	88 0f       	add	r24, r24
    83b2:	99 1f       	adc	r25, r25
    83b4:	fc 01       	movw	r30, r24
    83b6:	ec 50       	subi	r30, 0x0C	; 12
    83b8:	fe 4f       	sbci	r31, 0xFE	; 254
    83ba:	20 81       	ld	r18, Z
    83bc:	8a 81       	ldd	r24, Y+2	; 0x02
    83be:	88 2f       	mov	r24, r24
    83c0:	90 e0       	ldi	r25, 0x00	; 0
    83c2:	88 0f       	add	r24, r24
    83c4:	99 1f       	adc	r25, r25
    83c6:	88 0f       	add	r24, r24
    83c8:	99 1f       	adc	r25, r25
    83ca:	fc 01       	movw	r30, r24
    83cc:	e9 50       	subi	r30, 0x09	; 9
    83ce:	fe 4f       	sbci	r31, 0xFE	; 254
    83d0:	90 81       	ld	r25, Z
    83d2:	82 2f       	mov	r24, r18
    83d4:	69 2f       	mov	r22, r25
    83d6:	40 e0       	ldi	r20, 0x00	; 0
    83d8:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
		Local_enuErrorState = ES_OK;
    83dc:	19 82       	std	Y+1, r1	; 0x01
    83de:	02 c0       	rjmp	.+4      	; 0x83e4 <DC_MOTOR_enuOff+0x8c>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    83e0:	83 e0       	ldi	r24, 0x03	; 3
    83e2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    83e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    83e6:	0f 90       	pop	r0
    83e8:	0f 90       	pop	r0
    83ea:	cf 91       	pop	r28
    83ec:	df 91       	pop	r29
    83ee:	08 95       	ret

000083f0 <DC_MOTOR_SetSpeed>:

/*Speed 0:100*/
ES_t DC_MOTOR_SetSpeed(u8 Copy_u8DcMotorID, u8 Copy_u8DcMotorSpeed)
{
    83f0:	df 93       	push	r29
    83f2:	cf 93       	push	r28
    83f4:	00 d0       	rcall	.+0      	; 0x83f6 <DC_MOTOR_SetSpeed+0x6>
    83f6:	0f 92       	push	r0
    83f8:	cd b7       	in	r28, 0x3d	; 61
    83fa:	de b7       	in	r29, 0x3e	; 62
    83fc:	8a 83       	std	Y+2, r24	; 0x02
    83fe:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    8400:	81 e0       	ldi	r24, 0x01	; 1
    8402:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8DcMotorID < DC_MOTOR_NUM && Copy_u8DcMotorSpeed <= 100)
    8404:	8a 81       	ldd	r24, Y+2	; 0x02
    8406:	88 23       	and	r24, r24
    8408:	71 f4       	brne	.+28     	; 0x8426 <DC_MOTOR_SetSpeed+0x36>
    840a:	8b 81       	ldd	r24, Y+3	; 0x03
    840c:	85 36       	cpi	r24, 0x65	; 101
    840e:	58 f4       	brcc	.+22     	; 0x8426 <DC_MOTOR_SetSpeed+0x36>
	{
		DIO_enuSetPinDirection(DIO_u8PORTB, DIO_u8PIN3, DIO_u8OUTPUT);
    8410:	81 e0       	ldi	r24, 0x01	; 1
    8412:	63 e0       	ldi	r22, 0x03	; 3
    8414:	41 e0       	ldi	r20, 0x01	; 1
    8416:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
		TIMER0_enuInit();
    841a:	0e 94 ba 0b 	call	0x1774	; 0x1774 <TIMER0_enuInit>
		TIMER0_enuGeneratePWM(Copy_u8DcMotorSpeed);
    841e:	8b 81       	ldd	r24, Y+3	; 0x03
    8420:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <TIMER0_enuGeneratePWM>
    8424:	02 c0       	rjmp	.+4      	; 0x842a <DC_MOTOR_SetSpeed+0x3a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    8426:	83 e0       	ldi	r24, 0x03	; 3
    8428:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    842a:	89 81       	ldd	r24, Y+1	; 0x01
}
    842c:	0f 90       	pop	r0
    842e:	0f 90       	pop	r0
    8430:	0f 90       	pop	r0
    8432:	cf 91       	pop	r28
    8434:	df 91       	pop	r29
    8436:	08 95       	ret

00008438 <BUZZER_enuInit>:
#include "BUZZER_config.h"

extern BUZZER_t BUZZER_AstrBuzzerConfig[BUZZER_NUM];

ES_t BUZZER_enuInit(BUZZER_t *Copy_pAstrBuzzerConfig)
{
    8438:	df 93       	push	r29
    843a:	cf 93       	push	r28
    843c:	00 d0       	rcall	.+0      	; 0x843e <BUZZER_enuInit+0x6>
    843e:	00 d0       	rcall	.+0      	; 0x8440 <BUZZER_enuInit+0x8>
    8440:	cd b7       	in	r28, 0x3d	; 61
    8442:	de b7       	in	r29, 0x3e	; 62
    8444:	9c 83       	std	Y+4, r25	; 0x04
    8446:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    8448:	81 e0       	ldi	r24, 0x01	; 1
    844a:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_pAstrBuzzerConfig != NULL)
    844c:	8b 81       	ldd	r24, Y+3	; 0x03
    844e:	9c 81       	ldd	r25, Y+4	; 0x04
    8450:	00 97       	sbiw	r24, 0x00	; 0
    8452:	09 f4       	brne	.+2      	; 0x8456 <BUZZER_enuInit+0x1e>
    8454:	93 c0       	rjmp	.+294    	; 0x857c <BUZZER_enuInit+0x144>
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < BUZZER_NUM; Local_u8Iterator++)
    8456:	19 82       	std	Y+1, r1	; 0x01
    8458:	8c c0       	rjmp	.+280    	; 0x8572 <BUZZER_enuInit+0x13a>
		{
			DIO_enuSetPinDirection(Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8PortID, Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8PinID, DIO_u8OUTPUT);
    845a:	89 81       	ldd	r24, Y+1	; 0x01
    845c:	28 2f       	mov	r18, r24
    845e:	30 e0       	ldi	r19, 0x00	; 0
    8460:	c9 01       	movw	r24, r18
    8462:	88 0f       	add	r24, r24
    8464:	99 1f       	adc	r25, r25
    8466:	28 0f       	add	r18, r24
    8468:	39 1f       	adc	r19, r25
    846a:	8b 81       	ldd	r24, Y+3	; 0x03
    846c:	9c 81       	ldd	r25, Y+4	; 0x04
    846e:	fc 01       	movw	r30, r24
    8470:	e2 0f       	add	r30, r18
    8472:	f3 1f       	adc	r31, r19
    8474:	40 81       	ld	r20, Z
    8476:	89 81       	ldd	r24, Y+1	; 0x01
    8478:	28 2f       	mov	r18, r24
    847a:	30 e0       	ldi	r19, 0x00	; 0
    847c:	c9 01       	movw	r24, r18
    847e:	88 0f       	add	r24, r24
    8480:	99 1f       	adc	r25, r25
    8482:	28 0f       	add	r18, r24
    8484:	39 1f       	adc	r19, r25
    8486:	8b 81       	ldd	r24, Y+3	; 0x03
    8488:	9c 81       	ldd	r25, Y+4	; 0x04
    848a:	fc 01       	movw	r30, r24
    848c:	e2 0f       	add	r30, r18
    848e:	f3 1f       	adc	r31, r19
    8490:	91 81       	ldd	r25, Z+1	; 0x01
    8492:	84 2f       	mov	r24, r20
    8494:	69 2f       	mov	r22, r25
    8496:	41 e0       	ldi	r20, 0x01	; 1
    8498:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
			if(Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8InitState == BUZZER_u8ON)
    849c:	89 81       	ldd	r24, Y+1	; 0x01
    849e:	28 2f       	mov	r18, r24
    84a0:	30 e0       	ldi	r19, 0x00	; 0
    84a2:	c9 01       	movw	r24, r18
    84a4:	88 0f       	add	r24, r24
    84a6:	99 1f       	adc	r25, r25
    84a8:	28 0f       	add	r18, r24
    84aa:	39 1f       	adc	r19, r25
    84ac:	8b 81       	ldd	r24, Y+3	; 0x03
    84ae:	9c 81       	ldd	r25, Y+4	; 0x04
    84b0:	fc 01       	movw	r30, r24
    84b2:	e2 0f       	add	r30, r18
    84b4:	f3 1f       	adc	r31, r19
    84b6:	82 81       	ldd	r24, Z+2	; 0x02
    84b8:	8a 30       	cpi	r24, 0x0A	; 10
    84ba:	19 f5       	brne	.+70     	; 0x8502 <BUZZER_enuInit+0xca>
			{
				Local_enuErrorState = DIO_enuSetPinVal(Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8PortID, Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8PinID, DIO_u8HIGH);
    84bc:	89 81       	ldd	r24, Y+1	; 0x01
    84be:	28 2f       	mov	r18, r24
    84c0:	30 e0       	ldi	r19, 0x00	; 0
    84c2:	c9 01       	movw	r24, r18
    84c4:	88 0f       	add	r24, r24
    84c6:	99 1f       	adc	r25, r25
    84c8:	28 0f       	add	r18, r24
    84ca:	39 1f       	adc	r19, r25
    84cc:	8b 81       	ldd	r24, Y+3	; 0x03
    84ce:	9c 81       	ldd	r25, Y+4	; 0x04
    84d0:	fc 01       	movw	r30, r24
    84d2:	e2 0f       	add	r30, r18
    84d4:	f3 1f       	adc	r31, r19
    84d6:	40 81       	ld	r20, Z
    84d8:	89 81       	ldd	r24, Y+1	; 0x01
    84da:	28 2f       	mov	r18, r24
    84dc:	30 e0       	ldi	r19, 0x00	; 0
    84de:	c9 01       	movw	r24, r18
    84e0:	88 0f       	add	r24, r24
    84e2:	99 1f       	adc	r25, r25
    84e4:	28 0f       	add	r18, r24
    84e6:	39 1f       	adc	r19, r25
    84e8:	8b 81       	ldd	r24, Y+3	; 0x03
    84ea:	9c 81       	ldd	r25, Y+4	; 0x04
    84ec:	fc 01       	movw	r30, r24
    84ee:	e2 0f       	add	r30, r18
    84f0:	f3 1f       	adc	r31, r19
    84f2:	91 81       	ldd	r25, Z+1	; 0x01
    84f4:	84 2f       	mov	r24, r20
    84f6:	69 2f       	mov	r22, r25
    84f8:	41 e0       	ldi	r20, 0x01	; 1
    84fa:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    84fe:	8a 83       	std	Y+2, r24	; 0x02
    8500:	35 c0       	rjmp	.+106    	; 0x856c <BUZZER_enuInit+0x134>
			}
			else if(Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8InitState == BUZZER_u8OFF)
    8502:	89 81       	ldd	r24, Y+1	; 0x01
    8504:	28 2f       	mov	r18, r24
    8506:	30 e0       	ldi	r19, 0x00	; 0
    8508:	c9 01       	movw	r24, r18
    850a:	88 0f       	add	r24, r24
    850c:	99 1f       	adc	r25, r25
    850e:	28 0f       	add	r18, r24
    8510:	39 1f       	adc	r19, r25
    8512:	8b 81       	ldd	r24, Y+3	; 0x03
    8514:	9c 81       	ldd	r25, Y+4	; 0x04
    8516:	fc 01       	movw	r30, r24
    8518:	e2 0f       	add	r30, r18
    851a:	f3 1f       	adc	r31, r19
    851c:	82 81       	ldd	r24, Z+2	; 0x02
    851e:	8b 30       	cpi	r24, 0x0B	; 11
    8520:	19 f5       	brne	.+70     	; 0x8568 <BUZZER_enuInit+0x130>
			{
				Local_enuErrorState = DIO_enuSetPinVal(Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8PortID, Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8PinID, DIO_u8LOW);
    8522:	89 81       	ldd	r24, Y+1	; 0x01
    8524:	28 2f       	mov	r18, r24
    8526:	30 e0       	ldi	r19, 0x00	; 0
    8528:	c9 01       	movw	r24, r18
    852a:	88 0f       	add	r24, r24
    852c:	99 1f       	adc	r25, r25
    852e:	28 0f       	add	r18, r24
    8530:	39 1f       	adc	r19, r25
    8532:	8b 81       	ldd	r24, Y+3	; 0x03
    8534:	9c 81       	ldd	r25, Y+4	; 0x04
    8536:	fc 01       	movw	r30, r24
    8538:	e2 0f       	add	r30, r18
    853a:	f3 1f       	adc	r31, r19
    853c:	40 81       	ld	r20, Z
    853e:	89 81       	ldd	r24, Y+1	; 0x01
    8540:	28 2f       	mov	r18, r24
    8542:	30 e0       	ldi	r19, 0x00	; 0
    8544:	c9 01       	movw	r24, r18
    8546:	88 0f       	add	r24, r24
    8548:	99 1f       	adc	r25, r25
    854a:	28 0f       	add	r18, r24
    854c:	39 1f       	adc	r19, r25
    854e:	8b 81       	ldd	r24, Y+3	; 0x03
    8550:	9c 81       	ldd	r25, Y+4	; 0x04
    8552:	fc 01       	movw	r30, r24
    8554:	e2 0f       	add	r30, r18
    8556:	f3 1f       	adc	r31, r19
    8558:	91 81       	ldd	r25, Z+1	; 0x01
    855a:	84 2f       	mov	r24, r20
    855c:	69 2f       	mov	r22, r25
    855e:	40 e0       	ldi	r20, 0x00	; 0
    8560:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    8564:	8a 83       	std	Y+2, r24	; 0x02
    8566:	02 c0       	rjmp	.+4      	; 0x856c <BUZZER_enuInit+0x134>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    8568:	83 e0       	ldi	r24, 0x03	; 3
    856a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;

	if(Copy_pAstrBuzzerConfig != NULL)
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < BUZZER_NUM; Local_u8Iterator++)
    856c:	89 81       	ldd	r24, Y+1	; 0x01
    856e:	8f 5f       	subi	r24, 0xFF	; 255
    8570:	89 83       	std	Y+1, r24	; 0x01
    8572:	89 81       	ldd	r24, Y+1	; 0x01
    8574:	82 30       	cpi	r24, 0x02	; 2
    8576:	08 f4       	brcc	.+2      	; 0x857a <BUZZER_enuInit+0x142>
    8578:	70 cf       	rjmp	.-288    	; 0x845a <BUZZER_enuInit+0x22>
    857a:	02 c0       	rjmp	.+4      	; 0x8580 <BUZZER_enuInit+0x148>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    857c:	82 e0       	ldi	r24, 0x02	; 2
    857e:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    8580:	8a 81       	ldd	r24, Y+2	; 0x02
}
    8582:	0f 90       	pop	r0
    8584:	0f 90       	pop	r0
    8586:	0f 90       	pop	r0
    8588:	0f 90       	pop	r0
    858a:	cf 91       	pop	r28
    858c:	df 91       	pop	r29
    858e:	08 95       	ret

00008590 <BUZZER_enuTurnON>:

ES_t BUZZER_enuTurnON(u8 Copy_u8BuzzerID)
{
    8590:	df 93       	push	r29
    8592:	cf 93       	push	r28
    8594:	00 d0       	rcall	.+0      	; 0x8596 <BUZZER_enuTurnON+0x6>
    8596:	cd b7       	in	r28, 0x3d	; 61
    8598:	de b7       	in	r29, 0x3e	; 62
    859a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    859c:	81 e0       	ldi	r24, 0x01	; 1
    859e:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8BuzzerID < BUZZER_NUM)
    85a0:	8a 81       	ldd	r24, Y+2	; 0x02
    85a2:	82 30       	cpi	r24, 0x02	; 2
    85a4:	e0 f5       	brcc	.+120    	; 0x861e <BUZZER_enuTurnON+0x8e>
	{
		DIO_enuSetPinDirection(BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PortID, BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PinID, DIO_u8OUTPUT);
    85a6:	8a 81       	ldd	r24, Y+2	; 0x02
    85a8:	28 2f       	mov	r18, r24
    85aa:	30 e0       	ldi	r19, 0x00	; 0
    85ac:	c9 01       	movw	r24, r18
    85ae:	88 0f       	add	r24, r24
    85b0:	99 1f       	adc	r25, r25
    85b2:	82 0f       	add	r24, r18
    85b4:	93 1f       	adc	r25, r19
    85b6:	fc 01       	movw	r30, r24
    85b8:	e8 50       	subi	r30, 0x08	; 8
    85ba:	fe 4f       	sbci	r31, 0xFE	; 254
    85bc:	40 81       	ld	r20, Z
    85be:	8a 81       	ldd	r24, Y+2	; 0x02
    85c0:	28 2f       	mov	r18, r24
    85c2:	30 e0       	ldi	r19, 0x00	; 0
    85c4:	c9 01       	movw	r24, r18
    85c6:	88 0f       	add	r24, r24
    85c8:	99 1f       	adc	r25, r25
    85ca:	82 0f       	add	r24, r18
    85cc:	93 1f       	adc	r25, r19
    85ce:	fc 01       	movw	r30, r24
    85d0:	e7 50       	subi	r30, 0x07	; 7
    85d2:	fe 4f       	sbci	r31, 0xFE	; 254
    85d4:	90 81       	ld	r25, Z
    85d6:	84 2f       	mov	r24, r20
    85d8:	69 2f       	mov	r22, r25
    85da:	41 e0       	ldi	r20, 0x01	; 1
    85dc:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
		Local_enuErrorState = DIO_enuSetPinVal(BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PortID, BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PinID, DIO_u8HIGH);
    85e0:	8a 81       	ldd	r24, Y+2	; 0x02
    85e2:	28 2f       	mov	r18, r24
    85e4:	30 e0       	ldi	r19, 0x00	; 0
    85e6:	c9 01       	movw	r24, r18
    85e8:	88 0f       	add	r24, r24
    85ea:	99 1f       	adc	r25, r25
    85ec:	82 0f       	add	r24, r18
    85ee:	93 1f       	adc	r25, r19
    85f0:	fc 01       	movw	r30, r24
    85f2:	e8 50       	subi	r30, 0x08	; 8
    85f4:	fe 4f       	sbci	r31, 0xFE	; 254
    85f6:	40 81       	ld	r20, Z
    85f8:	8a 81       	ldd	r24, Y+2	; 0x02
    85fa:	28 2f       	mov	r18, r24
    85fc:	30 e0       	ldi	r19, 0x00	; 0
    85fe:	c9 01       	movw	r24, r18
    8600:	88 0f       	add	r24, r24
    8602:	99 1f       	adc	r25, r25
    8604:	82 0f       	add	r24, r18
    8606:	93 1f       	adc	r25, r19
    8608:	fc 01       	movw	r30, r24
    860a:	e7 50       	subi	r30, 0x07	; 7
    860c:	fe 4f       	sbci	r31, 0xFE	; 254
    860e:	90 81       	ld	r25, Z
    8610:	84 2f       	mov	r24, r20
    8612:	69 2f       	mov	r22, r25
    8614:	41 e0       	ldi	r20, 0x01	; 1
    8616:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    861a:	89 83       	std	Y+1, r24	; 0x01
    861c:	02 c0       	rjmp	.+4      	; 0x8622 <BUZZER_enuTurnON+0x92>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    861e:	83 e0       	ldi	r24, 0x03	; 3
    8620:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    8622:	89 81       	ldd	r24, Y+1	; 0x01
}
    8624:	0f 90       	pop	r0
    8626:	0f 90       	pop	r0
    8628:	cf 91       	pop	r28
    862a:	df 91       	pop	r29
    862c:	08 95       	ret

0000862e <BUZZER_enuTurnOFF>:

ES_t BUZZER_enuTurnOFF(u8 Copy_u8BuzzerID)
{
    862e:	df 93       	push	r29
    8630:	cf 93       	push	r28
    8632:	00 d0       	rcall	.+0      	; 0x8634 <BUZZER_enuTurnOFF+0x6>
    8634:	cd b7       	in	r28, 0x3d	; 61
    8636:	de b7       	in	r29, 0x3e	; 62
    8638:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    863a:	81 e0       	ldi	r24, 0x01	; 1
    863c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8BuzzerID < BUZZER_NUM)
    863e:	8a 81       	ldd	r24, Y+2	; 0x02
    8640:	82 30       	cpi	r24, 0x02	; 2
    8642:	e0 f5       	brcc	.+120    	; 0x86bc <BUZZER_enuTurnOFF+0x8e>
	{
		DIO_enuSetPinDirection(BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PortID, BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PinID, DIO_u8OUTPUT);
    8644:	8a 81       	ldd	r24, Y+2	; 0x02
    8646:	28 2f       	mov	r18, r24
    8648:	30 e0       	ldi	r19, 0x00	; 0
    864a:	c9 01       	movw	r24, r18
    864c:	88 0f       	add	r24, r24
    864e:	99 1f       	adc	r25, r25
    8650:	82 0f       	add	r24, r18
    8652:	93 1f       	adc	r25, r19
    8654:	fc 01       	movw	r30, r24
    8656:	e8 50       	subi	r30, 0x08	; 8
    8658:	fe 4f       	sbci	r31, 0xFE	; 254
    865a:	40 81       	ld	r20, Z
    865c:	8a 81       	ldd	r24, Y+2	; 0x02
    865e:	28 2f       	mov	r18, r24
    8660:	30 e0       	ldi	r19, 0x00	; 0
    8662:	c9 01       	movw	r24, r18
    8664:	88 0f       	add	r24, r24
    8666:	99 1f       	adc	r25, r25
    8668:	82 0f       	add	r24, r18
    866a:	93 1f       	adc	r25, r19
    866c:	fc 01       	movw	r30, r24
    866e:	e7 50       	subi	r30, 0x07	; 7
    8670:	fe 4f       	sbci	r31, 0xFE	; 254
    8672:	90 81       	ld	r25, Z
    8674:	84 2f       	mov	r24, r20
    8676:	69 2f       	mov	r22, r25
    8678:	41 e0       	ldi	r20, 0x01	; 1
    867a:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
		Local_enuErrorState = DIO_enuSetPinVal(BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PortID, BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PinID, DIO_u8LOW);
    867e:	8a 81       	ldd	r24, Y+2	; 0x02
    8680:	28 2f       	mov	r18, r24
    8682:	30 e0       	ldi	r19, 0x00	; 0
    8684:	c9 01       	movw	r24, r18
    8686:	88 0f       	add	r24, r24
    8688:	99 1f       	adc	r25, r25
    868a:	82 0f       	add	r24, r18
    868c:	93 1f       	adc	r25, r19
    868e:	fc 01       	movw	r30, r24
    8690:	e8 50       	subi	r30, 0x08	; 8
    8692:	fe 4f       	sbci	r31, 0xFE	; 254
    8694:	40 81       	ld	r20, Z
    8696:	8a 81       	ldd	r24, Y+2	; 0x02
    8698:	28 2f       	mov	r18, r24
    869a:	30 e0       	ldi	r19, 0x00	; 0
    869c:	c9 01       	movw	r24, r18
    869e:	88 0f       	add	r24, r24
    86a0:	99 1f       	adc	r25, r25
    86a2:	82 0f       	add	r24, r18
    86a4:	93 1f       	adc	r25, r19
    86a6:	fc 01       	movw	r30, r24
    86a8:	e7 50       	subi	r30, 0x07	; 7
    86aa:	fe 4f       	sbci	r31, 0xFE	; 254
    86ac:	90 81       	ld	r25, Z
    86ae:	84 2f       	mov	r24, r20
    86b0:	69 2f       	mov	r22, r25
    86b2:	40 e0       	ldi	r20, 0x00	; 0
    86b4:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    86b8:	89 83       	std	Y+1, r24	; 0x01
    86ba:	02 c0       	rjmp	.+4      	; 0x86c0 <BUZZER_enuTurnOFF+0x92>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    86bc:	83 e0       	ldi	r24, 0x03	; 3
    86be:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    86c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    86c2:	0f 90       	pop	r0
    86c4:	0f 90       	pop	r0
    86c6:	cf 91       	pop	r28
    86c8:	df 91       	pop	r29
    86ca:	08 95       	ret

000086cc <main>:
**/
#define F_CPU 1000000UL


int main(void)
{
    86cc:	df 93       	push	r29
    86ce:	cf 93       	push	r28
    86d0:	cd b7       	in	r28, 0x3d	; 61
    86d2:	de b7       	in	r29, 0x3e	; 62
    86d4:	ff cf       	rjmp	.-2      	; 0x86d4 <main+0x8>

000086d6 <__mulsi3>:
    86d6:	62 9f       	mul	r22, r18
    86d8:	d0 01       	movw	r26, r0
    86da:	73 9f       	mul	r23, r19
    86dc:	f0 01       	movw	r30, r0
    86de:	82 9f       	mul	r24, r18
    86e0:	e0 0d       	add	r30, r0
    86e2:	f1 1d       	adc	r31, r1
    86e4:	64 9f       	mul	r22, r20
    86e6:	e0 0d       	add	r30, r0
    86e8:	f1 1d       	adc	r31, r1
    86ea:	92 9f       	mul	r25, r18
    86ec:	f0 0d       	add	r31, r0
    86ee:	83 9f       	mul	r24, r19
    86f0:	f0 0d       	add	r31, r0
    86f2:	74 9f       	mul	r23, r20
    86f4:	f0 0d       	add	r31, r0
    86f6:	65 9f       	mul	r22, r21
    86f8:	f0 0d       	add	r31, r0
    86fa:	99 27       	eor	r25, r25
    86fc:	72 9f       	mul	r23, r18
    86fe:	b0 0d       	add	r27, r0
    8700:	e1 1d       	adc	r30, r1
    8702:	f9 1f       	adc	r31, r25
    8704:	63 9f       	mul	r22, r19
    8706:	b0 0d       	add	r27, r0
    8708:	e1 1d       	adc	r30, r1
    870a:	f9 1f       	adc	r31, r25
    870c:	bd 01       	movw	r22, r26
    870e:	cf 01       	movw	r24, r30
    8710:	11 24       	eor	r1, r1
    8712:	08 95       	ret

00008714 <__divmodsi4>:
    8714:	97 fb       	bst	r25, 7
    8716:	09 2e       	mov	r0, r25
    8718:	05 26       	eor	r0, r21
    871a:	0e d0       	rcall	.+28     	; 0x8738 <__divmodsi4_neg1>
    871c:	57 fd       	sbrc	r21, 7
    871e:	04 d0       	rcall	.+8      	; 0x8728 <__divmodsi4_neg2>
    8720:	14 d0       	rcall	.+40     	; 0x874a <__udivmodsi4>
    8722:	0a d0       	rcall	.+20     	; 0x8738 <__divmodsi4_neg1>
    8724:	00 1c       	adc	r0, r0
    8726:	38 f4       	brcc	.+14     	; 0x8736 <__divmodsi4_exit>

00008728 <__divmodsi4_neg2>:
    8728:	50 95       	com	r21
    872a:	40 95       	com	r20
    872c:	30 95       	com	r19
    872e:	21 95       	neg	r18
    8730:	3f 4f       	sbci	r19, 0xFF	; 255
    8732:	4f 4f       	sbci	r20, 0xFF	; 255
    8734:	5f 4f       	sbci	r21, 0xFF	; 255

00008736 <__divmodsi4_exit>:
    8736:	08 95       	ret

00008738 <__divmodsi4_neg1>:
    8738:	f6 f7       	brtc	.-4      	; 0x8736 <__divmodsi4_exit>
    873a:	90 95       	com	r25
    873c:	80 95       	com	r24
    873e:	70 95       	com	r23
    8740:	61 95       	neg	r22
    8742:	7f 4f       	sbci	r23, 0xFF	; 255
    8744:	8f 4f       	sbci	r24, 0xFF	; 255
    8746:	9f 4f       	sbci	r25, 0xFF	; 255
    8748:	08 95       	ret

0000874a <__udivmodsi4>:
    874a:	a1 e2       	ldi	r26, 0x21	; 33
    874c:	1a 2e       	mov	r1, r26
    874e:	aa 1b       	sub	r26, r26
    8750:	bb 1b       	sub	r27, r27
    8752:	fd 01       	movw	r30, r26
    8754:	0d c0       	rjmp	.+26     	; 0x8770 <__udivmodsi4_ep>

00008756 <__udivmodsi4_loop>:
    8756:	aa 1f       	adc	r26, r26
    8758:	bb 1f       	adc	r27, r27
    875a:	ee 1f       	adc	r30, r30
    875c:	ff 1f       	adc	r31, r31
    875e:	a2 17       	cp	r26, r18
    8760:	b3 07       	cpc	r27, r19
    8762:	e4 07       	cpc	r30, r20
    8764:	f5 07       	cpc	r31, r21
    8766:	20 f0       	brcs	.+8      	; 0x8770 <__udivmodsi4_ep>
    8768:	a2 1b       	sub	r26, r18
    876a:	b3 0b       	sbc	r27, r19
    876c:	e4 0b       	sbc	r30, r20
    876e:	f5 0b       	sbc	r31, r21

00008770 <__udivmodsi4_ep>:
    8770:	66 1f       	adc	r22, r22
    8772:	77 1f       	adc	r23, r23
    8774:	88 1f       	adc	r24, r24
    8776:	99 1f       	adc	r25, r25
    8778:	1a 94       	dec	r1
    877a:	69 f7       	brne	.-38     	; 0x8756 <__udivmodsi4_loop>
    877c:	60 95       	com	r22
    877e:	70 95       	com	r23
    8780:	80 95       	com	r24
    8782:	90 95       	com	r25
    8784:	9b 01       	movw	r18, r22
    8786:	ac 01       	movw	r20, r24
    8788:	bd 01       	movw	r22, r26
    878a:	cf 01       	movw	r24, r30
    878c:	08 95       	ret

0000878e <__prologue_saves__>:
    878e:	2f 92       	push	r2
    8790:	3f 92       	push	r3
    8792:	4f 92       	push	r4
    8794:	5f 92       	push	r5
    8796:	6f 92       	push	r6
    8798:	7f 92       	push	r7
    879a:	8f 92       	push	r8
    879c:	9f 92       	push	r9
    879e:	af 92       	push	r10
    87a0:	bf 92       	push	r11
    87a2:	cf 92       	push	r12
    87a4:	df 92       	push	r13
    87a6:	ef 92       	push	r14
    87a8:	ff 92       	push	r15
    87aa:	0f 93       	push	r16
    87ac:	1f 93       	push	r17
    87ae:	cf 93       	push	r28
    87b0:	df 93       	push	r29
    87b2:	cd b7       	in	r28, 0x3d	; 61
    87b4:	de b7       	in	r29, 0x3e	; 62
    87b6:	ca 1b       	sub	r28, r26
    87b8:	db 0b       	sbc	r29, r27
    87ba:	0f b6       	in	r0, 0x3f	; 63
    87bc:	f8 94       	cli
    87be:	de bf       	out	0x3e, r29	; 62
    87c0:	0f be       	out	0x3f, r0	; 63
    87c2:	cd bf       	out	0x3d, r28	; 61
    87c4:	09 94       	ijmp

000087c6 <__epilogue_restores__>:
    87c6:	2a 88       	ldd	r2, Y+18	; 0x12
    87c8:	39 88       	ldd	r3, Y+17	; 0x11
    87ca:	48 88       	ldd	r4, Y+16	; 0x10
    87cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    87ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    87d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    87d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    87d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    87d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    87d8:	b9 84       	ldd	r11, Y+9	; 0x09
    87da:	c8 84       	ldd	r12, Y+8	; 0x08
    87dc:	df 80       	ldd	r13, Y+7	; 0x07
    87de:	ee 80       	ldd	r14, Y+6	; 0x06
    87e0:	fd 80       	ldd	r15, Y+5	; 0x05
    87e2:	0c 81       	ldd	r16, Y+4	; 0x04
    87e4:	1b 81       	ldd	r17, Y+3	; 0x03
    87e6:	aa 81       	ldd	r26, Y+2	; 0x02
    87e8:	b9 81       	ldd	r27, Y+1	; 0x01
    87ea:	ce 0f       	add	r28, r30
    87ec:	d1 1d       	adc	r29, r1
    87ee:	0f b6       	in	r0, 0x3f	; 63
    87f0:	f8 94       	cli
    87f2:	de bf       	out	0x3e, r29	; 62
    87f4:	0f be       	out	0x3f, r0	; 63
    87f6:	cd bf       	out	0x3d, r28	; 61
    87f8:	ed 01       	movw	r28, r26
    87fa:	08 95       	ret

000087fc <sprintf>:
    87fc:	ae e0       	ldi	r26, 0x0E	; 14
    87fe:	b0 e0       	ldi	r27, 0x00	; 0
    8800:	e4 e0       	ldi	r30, 0x04	; 4
    8802:	f4 e4       	ldi	r31, 0x44	; 68
    8804:	0c 94 d5 43 	jmp	0x87aa	; 0x87aa <__prologue_saves__+0x1c>
    8808:	0d 89       	ldd	r16, Y+21	; 0x15
    880a:	1e 89       	ldd	r17, Y+22	; 0x16
    880c:	86 e0       	ldi	r24, 0x06	; 6
    880e:	8c 83       	std	Y+4, r24	; 0x04
    8810:	1a 83       	std	Y+2, r17	; 0x02
    8812:	09 83       	std	Y+1, r16	; 0x01
    8814:	8f ef       	ldi	r24, 0xFF	; 255
    8816:	9f e7       	ldi	r25, 0x7F	; 127
    8818:	9e 83       	std	Y+6, r25	; 0x06
    881a:	8d 83       	std	Y+5, r24	; 0x05
    881c:	9e 01       	movw	r18, r28
    881e:	27 5e       	subi	r18, 0xE7	; 231
    8820:	3f 4f       	sbci	r19, 0xFF	; 255
    8822:	ce 01       	movw	r24, r28
    8824:	01 96       	adiw	r24, 0x01	; 1
    8826:	6f 89       	ldd	r22, Y+23	; 0x17
    8828:	78 8d       	ldd	r23, Y+24	; 0x18
    882a:	a9 01       	movw	r20, r18
    882c:	0e 94 22 44 	call	0x8844	; 0x8844 <vfprintf>
    8830:	2f 81       	ldd	r18, Y+7	; 0x07
    8832:	38 85       	ldd	r19, Y+8	; 0x08
    8834:	02 0f       	add	r16, r18
    8836:	13 1f       	adc	r17, r19
    8838:	f8 01       	movw	r30, r16
    883a:	10 82       	st	Z, r1
    883c:	2e 96       	adiw	r28, 0x0e	; 14
    883e:	e4 e0       	ldi	r30, 0x04	; 4
    8840:	0c 94 f1 43 	jmp	0x87e2	; 0x87e2 <__epilogue_restores__+0x1c>

00008844 <vfprintf>:
    8844:	ab e0       	ldi	r26, 0x0B	; 11
    8846:	b0 e0       	ldi	r27, 0x00	; 0
    8848:	e8 e2       	ldi	r30, 0x28	; 40
    884a:	f4 e4       	ldi	r31, 0x44	; 68
    884c:	0c 94 c7 43 	jmp	0x878e	; 0x878e <__prologue_saves__>
    8850:	3c 01       	movw	r6, r24
    8852:	2b 01       	movw	r4, r22
    8854:	5a 01       	movw	r10, r20
    8856:	fc 01       	movw	r30, r24
    8858:	17 82       	std	Z+7, r1	; 0x07
    885a:	16 82       	std	Z+6, r1	; 0x06
    885c:	83 81       	ldd	r24, Z+3	; 0x03
    885e:	81 fd       	sbrc	r24, 1
    8860:	03 c0       	rjmp	.+6      	; 0x8868 <vfprintf+0x24>
    8862:	6f ef       	ldi	r22, 0xFF	; 255
    8864:	7f ef       	ldi	r23, 0xFF	; 255
    8866:	c6 c1       	rjmp	.+908    	; 0x8bf4 <vfprintf+0x3b0>
    8868:	9a e0       	ldi	r25, 0x0A	; 10
    886a:	89 2e       	mov	r8, r25
    886c:	1e 01       	movw	r2, r28
    886e:	08 94       	sec
    8870:	21 1c       	adc	r2, r1
    8872:	31 1c       	adc	r3, r1
    8874:	f3 01       	movw	r30, r6
    8876:	23 81       	ldd	r18, Z+3	; 0x03
    8878:	f2 01       	movw	r30, r4
    887a:	23 fd       	sbrc	r18, 3
    887c:	85 91       	lpm	r24, Z+
    887e:	23 ff       	sbrs	r18, 3
    8880:	81 91       	ld	r24, Z+
    8882:	2f 01       	movw	r4, r30
    8884:	88 23       	and	r24, r24
    8886:	09 f4       	brne	.+2      	; 0x888a <vfprintf+0x46>
    8888:	b2 c1       	rjmp	.+868    	; 0x8bee <vfprintf+0x3aa>
    888a:	85 32       	cpi	r24, 0x25	; 37
    888c:	39 f4       	brne	.+14     	; 0x889c <vfprintf+0x58>
    888e:	23 fd       	sbrc	r18, 3
    8890:	85 91       	lpm	r24, Z+
    8892:	23 ff       	sbrs	r18, 3
    8894:	81 91       	ld	r24, Z+
    8896:	2f 01       	movw	r4, r30
    8898:	85 32       	cpi	r24, 0x25	; 37
    889a:	29 f4       	brne	.+10     	; 0x88a6 <vfprintf+0x62>
    889c:	90 e0       	ldi	r25, 0x00	; 0
    889e:	b3 01       	movw	r22, r6
    88a0:	0e 94 15 46 	call	0x8c2a	; 0x8c2a <fputc>
    88a4:	e7 cf       	rjmp	.-50     	; 0x8874 <vfprintf+0x30>
    88a6:	98 2f       	mov	r25, r24
    88a8:	ff 24       	eor	r15, r15
    88aa:	ee 24       	eor	r14, r14
    88ac:	99 24       	eor	r9, r9
    88ae:	ff e1       	ldi	r31, 0x1F	; 31
    88b0:	ff 15       	cp	r31, r15
    88b2:	d0 f0       	brcs	.+52     	; 0x88e8 <vfprintf+0xa4>
    88b4:	9b 32       	cpi	r25, 0x2B	; 43
    88b6:	69 f0       	breq	.+26     	; 0x88d2 <vfprintf+0x8e>
    88b8:	9c 32       	cpi	r25, 0x2C	; 44
    88ba:	28 f4       	brcc	.+10     	; 0x88c6 <vfprintf+0x82>
    88bc:	90 32       	cpi	r25, 0x20	; 32
    88be:	59 f0       	breq	.+22     	; 0x88d6 <vfprintf+0x92>
    88c0:	93 32       	cpi	r25, 0x23	; 35
    88c2:	91 f4       	brne	.+36     	; 0x88e8 <vfprintf+0xa4>
    88c4:	0e c0       	rjmp	.+28     	; 0x88e2 <vfprintf+0x9e>
    88c6:	9d 32       	cpi	r25, 0x2D	; 45
    88c8:	49 f0       	breq	.+18     	; 0x88dc <vfprintf+0x98>
    88ca:	90 33       	cpi	r25, 0x30	; 48
    88cc:	69 f4       	brne	.+26     	; 0x88e8 <vfprintf+0xa4>
    88ce:	41 e0       	ldi	r20, 0x01	; 1
    88d0:	24 c0       	rjmp	.+72     	; 0x891a <vfprintf+0xd6>
    88d2:	52 e0       	ldi	r21, 0x02	; 2
    88d4:	f5 2a       	or	r15, r21
    88d6:	84 e0       	ldi	r24, 0x04	; 4
    88d8:	f8 2a       	or	r15, r24
    88da:	28 c0       	rjmp	.+80     	; 0x892c <vfprintf+0xe8>
    88dc:	98 e0       	ldi	r25, 0x08	; 8
    88de:	f9 2a       	or	r15, r25
    88e0:	25 c0       	rjmp	.+74     	; 0x892c <vfprintf+0xe8>
    88e2:	e0 e1       	ldi	r30, 0x10	; 16
    88e4:	fe 2a       	or	r15, r30
    88e6:	22 c0       	rjmp	.+68     	; 0x892c <vfprintf+0xe8>
    88e8:	f7 fc       	sbrc	r15, 7
    88ea:	29 c0       	rjmp	.+82     	; 0x893e <vfprintf+0xfa>
    88ec:	89 2f       	mov	r24, r25
    88ee:	80 53       	subi	r24, 0x30	; 48
    88f0:	8a 30       	cpi	r24, 0x0A	; 10
    88f2:	70 f4       	brcc	.+28     	; 0x8910 <vfprintf+0xcc>
    88f4:	f6 fe       	sbrs	r15, 6
    88f6:	05 c0       	rjmp	.+10     	; 0x8902 <vfprintf+0xbe>
    88f8:	98 9c       	mul	r9, r8
    88fa:	90 2c       	mov	r9, r0
    88fc:	11 24       	eor	r1, r1
    88fe:	98 0e       	add	r9, r24
    8900:	15 c0       	rjmp	.+42     	; 0x892c <vfprintf+0xe8>
    8902:	e8 9c       	mul	r14, r8
    8904:	e0 2c       	mov	r14, r0
    8906:	11 24       	eor	r1, r1
    8908:	e8 0e       	add	r14, r24
    890a:	f0 e2       	ldi	r31, 0x20	; 32
    890c:	ff 2a       	or	r15, r31
    890e:	0e c0       	rjmp	.+28     	; 0x892c <vfprintf+0xe8>
    8910:	9e 32       	cpi	r25, 0x2E	; 46
    8912:	29 f4       	brne	.+10     	; 0x891e <vfprintf+0xda>
    8914:	f6 fc       	sbrc	r15, 6
    8916:	6b c1       	rjmp	.+726    	; 0x8bee <vfprintf+0x3aa>
    8918:	40 e4       	ldi	r20, 0x40	; 64
    891a:	f4 2a       	or	r15, r20
    891c:	07 c0       	rjmp	.+14     	; 0x892c <vfprintf+0xe8>
    891e:	9c 36       	cpi	r25, 0x6C	; 108
    8920:	19 f4       	brne	.+6      	; 0x8928 <vfprintf+0xe4>
    8922:	50 e8       	ldi	r21, 0x80	; 128
    8924:	f5 2a       	or	r15, r21
    8926:	02 c0       	rjmp	.+4      	; 0x892c <vfprintf+0xe8>
    8928:	98 36       	cpi	r25, 0x68	; 104
    892a:	49 f4       	brne	.+18     	; 0x893e <vfprintf+0xfa>
    892c:	f2 01       	movw	r30, r4
    892e:	23 fd       	sbrc	r18, 3
    8930:	95 91       	lpm	r25, Z+
    8932:	23 ff       	sbrs	r18, 3
    8934:	91 91       	ld	r25, Z+
    8936:	2f 01       	movw	r4, r30
    8938:	99 23       	and	r25, r25
    893a:	09 f0       	breq	.+2      	; 0x893e <vfprintf+0xfa>
    893c:	b8 cf       	rjmp	.-144    	; 0x88ae <vfprintf+0x6a>
    893e:	89 2f       	mov	r24, r25
    8940:	85 54       	subi	r24, 0x45	; 69
    8942:	83 30       	cpi	r24, 0x03	; 3
    8944:	18 f0       	brcs	.+6      	; 0x894c <vfprintf+0x108>
    8946:	80 52       	subi	r24, 0x20	; 32
    8948:	83 30       	cpi	r24, 0x03	; 3
    894a:	38 f4       	brcc	.+14     	; 0x895a <vfprintf+0x116>
    894c:	44 e0       	ldi	r20, 0x04	; 4
    894e:	50 e0       	ldi	r21, 0x00	; 0
    8950:	a4 0e       	add	r10, r20
    8952:	b5 1e       	adc	r11, r21
    8954:	5f e3       	ldi	r21, 0x3F	; 63
    8956:	59 83       	std	Y+1, r21	; 0x01
    8958:	0f c0       	rjmp	.+30     	; 0x8978 <vfprintf+0x134>
    895a:	93 36       	cpi	r25, 0x63	; 99
    895c:	31 f0       	breq	.+12     	; 0x896a <vfprintf+0x126>
    895e:	93 37       	cpi	r25, 0x73	; 115
    8960:	79 f0       	breq	.+30     	; 0x8980 <vfprintf+0x13c>
    8962:	93 35       	cpi	r25, 0x53	; 83
    8964:	09 f0       	breq	.+2      	; 0x8968 <vfprintf+0x124>
    8966:	56 c0       	rjmp	.+172    	; 0x8a14 <vfprintf+0x1d0>
    8968:	20 c0       	rjmp	.+64     	; 0x89aa <vfprintf+0x166>
    896a:	f5 01       	movw	r30, r10
    896c:	80 81       	ld	r24, Z
    896e:	89 83       	std	Y+1, r24	; 0x01
    8970:	42 e0       	ldi	r20, 0x02	; 2
    8972:	50 e0       	ldi	r21, 0x00	; 0
    8974:	a4 0e       	add	r10, r20
    8976:	b5 1e       	adc	r11, r21
    8978:	61 01       	movw	r12, r2
    897a:	01 e0       	ldi	r16, 0x01	; 1
    897c:	10 e0       	ldi	r17, 0x00	; 0
    897e:	12 c0       	rjmp	.+36     	; 0x89a4 <vfprintf+0x160>
    8980:	f5 01       	movw	r30, r10
    8982:	c0 80       	ld	r12, Z
    8984:	d1 80       	ldd	r13, Z+1	; 0x01
    8986:	f6 fc       	sbrc	r15, 6
    8988:	03 c0       	rjmp	.+6      	; 0x8990 <vfprintf+0x14c>
    898a:	6f ef       	ldi	r22, 0xFF	; 255
    898c:	7f ef       	ldi	r23, 0xFF	; 255
    898e:	02 c0       	rjmp	.+4      	; 0x8994 <vfprintf+0x150>
    8990:	69 2d       	mov	r22, r9
    8992:	70 e0       	ldi	r23, 0x00	; 0
    8994:	42 e0       	ldi	r20, 0x02	; 2
    8996:	50 e0       	ldi	r21, 0x00	; 0
    8998:	a4 0e       	add	r10, r20
    899a:	b5 1e       	adc	r11, r21
    899c:	c6 01       	movw	r24, r12
    899e:	0e 94 0a 46 	call	0x8c14	; 0x8c14 <strnlen>
    89a2:	8c 01       	movw	r16, r24
    89a4:	5f e7       	ldi	r21, 0x7F	; 127
    89a6:	f5 22       	and	r15, r21
    89a8:	14 c0       	rjmp	.+40     	; 0x89d2 <vfprintf+0x18e>
    89aa:	f5 01       	movw	r30, r10
    89ac:	c0 80       	ld	r12, Z
    89ae:	d1 80       	ldd	r13, Z+1	; 0x01
    89b0:	f6 fc       	sbrc	r15, 6
    89b2:	03 c0       	rjmp	.+6      	; 0x89ba <vfprintf+0x176>
    89b4:	6f ef       	ldi	r22, 0xFF	; 255
    89b6:	7f ef       	ldi	r23, 0xFF	; 255
    89b8:	02 c0       	rjmp	.+4      	; 0x89be <vfprintf+0x17a>
    89ba:	69 2d       	mov	r22, r9
    89bc:	70 e0       	ldi	r23, 0x00	; 0
    89be:	42 e0       	ldi	r20, 0x02	; 2
    89c0:	50 e0       	ldi	r21, 0x00	; 0
    89c2:	a4 0e       	add	r10, r20
    89c4:	b5 1e       	adc	r11, r21
    89c6:	c6 01       	movw	r24, r12
    89c8:	0e 94 ff 45 	call	0x8bfe	; 0x8bfe <strnlen_P>
    89cc:	8c 01       	movw	r16, r24
    89ce:	50 e8       	ldi	r21, 0x80	; 128
    89d0:	f5 2a       	or	r15, r21
    89d2:	f3 fe       	sbrs	r15, 3
    89d4:	07 c0       	rjmp	.+14     	; 0x89e4 <vfprintf+0x1a0>
    89d6:	1a c0       	rjmp	.+52     	; 0x8a0c <vfprintf+0x1c8>
    89d8:	80 e2       	ldi	r24, 0x20	; 32
    89da:	90 e0       	ldi	r25, 0x00	; 0
    89dc:	b3 01       	movw	r22, r6
    89de:	0e 94 15 46 	call	0x8c2a	; 0x8c2a <fputc>
    89e2:	ea 94       	dec	r14
    89e4:	8e 2d       	mov	r24, r14
    89e6:	90 e0       	ldi	r25, 0x00	; 0
    89e8:	08 17       	cp	r16, r24
    89ea:	19 07       	cpc	r17, r25
    89ec:	a8 f3       	brcs	.-22     	; 0x89d8 <vfprintf+0x194>
    89ee:	0e c0       	rjmp	.+28     	; 0x8a0c <vfprintf+0x1c8>
    89f0:	f6 01       	movw	r30, r12
    89f2:	f7 fc       	sbrc	r15, 7
    89f4:	85 91       	lpm	r24, Z+
    89f6:	f7 fe       	sbrs	r15, 7
    89f8:	81 91       	ld	r24, Z+
    89fa:	6f 01       	movw	r12, r30
    89fc:	90 e0       	ldi	r25, 0x00	; 0
    89fe:	b3 01       	movw	r22, r6
    8a00:	0e 94 15 46 	call	0x8c2a	; 0x8c2a <fputc>
    8a04:	e1 10       	cpse	r14, r1
    8a06:	ea 94       	dec	r14
    8a08:	01 50       	subi	r16, 0x01	; 1
    8a0a:	10 40       	sbci	r17, 0x00	; 0
    8a0c:	01 15       	cp	r16, r1
    8a0e:	11 05       	cpc	r17, r1
    8a10:	79 f7       	brne	.-34     	; 0x89f0 <vfprintf+0x1ac>
    8a12:	ea c0       	rjmp	.+468    	; 0x8be8 <vfprintf+0x3a4>
    8a14:	94 36       	cpi	r25, 0x64	; 100
    8a16:	11 f0       	breq	.+4      	; 0x8a1c <vfprintf+0x1d8>
    8a18:	99 36       	cpi	r25, 0x69	; 105
    8a1a:	69 f5       	brne	.+90     	; 0x8a76 <vfprintf+0x232>
    8a1c:	f7 fe       	sbrs	r15, 7
    8a1e:	08 c0       	rjmp	.+16     	; 0x8a30 <vfprintf+0x1ec>
    8a20:	f5 01       	movw	r30, r10
    8a22:	20 81       	ld	r18, Z
    8a24:	31 81       	ldd	r19, Z+1	; 0x01
    8a26:	42 81       	ldd	r20, Z+2	; 0x02
    8a28:	53 81       	ldd	r21, Z+3	; 0x03
    8a2a:	84 e0       	ldi	r24, 0x04	; 4
    8a2c:	90 e0       	ldi	r25, 0x00	; 0
    8a2e:	0a c0       	rjmp	.+20     	; 0x8a44 <vfprintf+0x200>
    8a30:	f5 01       	movw	r30, r10
    8a32:	80 81       	ld	r24, Z
    8a34:	91 81       	ldd	r25, Z+1	; 0x01
    8a36:	9c 01       	movw	r18, r24
    8a38:	44 27       	eor	r20, r20
    8a3a:	37 fd       	sbrc	r19, 7
    8a3c:	40 95       	com	r20
    8a3e:	54 2f       	mov	r21, r20
    8a40:	82 e0       	ldi	r24, 0x02	; 2
    8a42:	90 e0       	ldi	r25, 0x00	; 0
    8a44:	a8 0e       	add	r10, r24
    8a46:	b9 1e       	adc	r11, r25
    8a48:	9f e6       	ldi	r25, 0x6F	; 111
    8a4a:	f9 22       	and	r15, r25
    8a4c:	57 ff       	sbrs	r21, 7
    8a4e:	09 c0       	rjmp	.+18     	; 0x8a62 <vfprintf+0x21e>
    8a50:	50 95       	com	r21
    8a52:	40 95       	com	r20
    8a54:	30 95       	com	r19
    8a56:	21 95       	neg	r18
    8a58:	3f 4f       	sbci	r19, 0xFF	; 255
    8a5a:	4f 4f       	sbci	r20, 0xFF	; 255
    8a5c:	5f 4f       	sbci	r21, 0xFF	; 255
    8a5e:	e0 e8       	ldi	r30, 0x80	; 128
    8a60:	fe 2a       	or	r15, r30
    8a62:	ca 01       	movw	r24, r20
    8a64:	b9 01       	movw	r22, r18
    8a66:	a1 01       	movw	r20, r2
    8a68:	2a e0       	ldi	r18, 0x0A	; 10
    8a6a:	30 e0       	ldi	r19, 0x00	; 0
    8a6c:	0e 94 41 46 	call	0x8c82	; 0x8c82 <__ultoa_invert>
    8a70:	d8 2e       	mov	r13, r24
    8a72:	d2 18       	sub	r13, r2
    8a74:	40 c0       	rjmp	.+128    	; 0x8af6 <vfprintf+0x2b2>
    8a76:	95 37       	cpi	r25, 0x75	; 117
    8a78:	29 f4       	brne	.+10     	; 0x8a84 <vfprintf+0x240>
    8a7a:	1f 2d       	mov	r17, r15
    8a7c:	1f 7e       	andi	r17, 0xEF	; 239
    8a7e:	2a e0       	ldi	r18, 0x0A	; 10
    8a80:	30 e0       	ldi	r19, 0x00	; 0
    8a82:	1d c0       	rjmp	.+58     	; 0x8abe <vfprintf+0x27a>
    8a84:	1f 2d       	mov	r17, r15
    8a86:	19 7f       	andi	r17, 0xF9	; 249
    8a88:	9f 36       	cpi	r25, 0x6F	; 111
    8a8a:	61 f0       	breq	.+24     	; 0x8aa4 <vfprintf+0x260>
    8a8c:	90 37       	cpi	r25, 0x70	; 112
    8a8e:	20 f4       	brcc	.+8      	; 0x8a98 <vfprintf+0x254>
    8a90:	98 35       	cpi	r25, 0x58	; 88
    8a92:	09 f0       	breq	.+2      	; 0x8a96 <vfprintf+0x252>
    8a94:	ac c0       	rjmp	.+344    	; 0x8bee <vfprintf+0x3aa>
    8a96:	0f c0       	rjmp	.+30     	; 0x8ab6 <vfprintf+0x272>
    8a98:	90 37       	cpi	r25, 0x70	; 112
    8a9a:	39 f0       	breq	.+14     	; 0x8aaa <vfprintf+0x266>
    8a9c:	98 37       	cpi	r25, 0x78	; 120
    8a9e:	09 f0       	breq	.+2      	; 0x8aa2 <vfprintf+0x25e>
    8aa0:	a6 c0       	rjmp	.+332    	; 0x8bee <vfprintf+0x3aa>
    8aa2:	04 c0       	rjmp	.+8      	; 0x8aac <vfprintf+0x268>
    8aa4:	28 e0       	ldi	r18, 0x08	; 8
    8aa6:	30 e0       	ldi	r19, 0x00	; 0
    8aa8:	0a c0       	rjmp	.+20     	; 0x8abe <vfprintf+0x27a>
    8aaa:	10 61       	ori	r17, 0x10	; 16
    8aac:	14 fd       	sbrc	r17, 4
    8aae:	14 60       	ori	r17, 0x04	; 4
    8ab0:	20 e1       	ldi	r18, 0x10	; 16
    8ab2:	30 e0       	ldi	r19, 0x00	; 0
    8ab4:	04 c0       	rjmp	.+8      	; 0x8abe <vfprintf+0x27a>
    8ab6:	14 fd       	sbrc	r17, 4
    8ab8:	16 60       	ori	r17, 0x06	; 6
    8aba:	20 e1       	ldi	r18, 0x10	; 16
    8abc:	32 e0       	ldi	r19, 0x02	; 2
    8abe:	17 ff       	sbrs	r17, 7
    8ac0:	08 c0       	rjmp	.+16     	; 0x8ad2 <vfprintf+0x28e>
    8ac2:	f5 01       	movw	r30, r10
    8ac4:	60 81       	ld	r22, Z
    8ac6:	71 81       	ldd	r23, Z+1	; 0x01
    8ac8:	82 81       	ldd	r24, Z+2	; 0x02
    8aca:	93 81       	ldd	r25, Z+3	; 0x03
    8acc:	44 e0       	ldi	r20, 0x04	; 4
    8ace:	50 e0       	ldi	r21, 0x00	; 0
    8ad0:	08 c0       	rjmp	.+16     	; 0x8ae2 <vfprintf+0x29e>
    8ad2:	f5 01       	movw	r30, r10
    8ad4:	80 81       	ld	r24, Z
    8ad6:	91 81       	ldd	r25, Z+1	; 0x01
    8ad8:	bc 01       	movw	r22, r24
    8ada:	80 e0       	ldi	r24, 0x00	; 0
    8adc:	90 e0       	ldi	r25, 0x00	; 0
    8ade:	42 e0       	ldi	r20, 0x02	; 2
    8ae0:	50 e0       	ldi	r21, 0x00	; 0
    8ae2:	a4 0e       	add	r10, r20
    8ae4:	b5 1e       	adc	r11, r21
    8ae6:	a1 01       	movw	r20, r2
    8ae8:	0e 94 41 46 	call	0x8c82	; 0x8c82 <__ultoa_invert>
    8aec:	d8 2e       	mov	r13, r24
    8aee:	d2 18       	sub	r13, r2
    8af0:	8f e7       	ldi	r24, 0x7F	; 127
    8af2:	f8 2e       	mov	r15, r24
    8af4:	f1 22       	and	r15, r17
    8af6:	f6 fe       	sbrs	r15, 6
    8af8:	0b c0       	rjmp	.+22     	; 0x8b10 <vfprintf+0x2cc>
    8afa:	5e ef       	ldi	r21, 0xFE	; 254
    8afc:	f5 22       	and	r15, r21
    8afe:	d9 14       	cp	r13, r9
    8b00:	38 f4       	brcc	.+14     	; 0x8b10 <vfprintf+0x2cc>
    8b02:	f4 fe       	sbrs	r15, 4
    8b04:	07 c0       	rjmp	.+14     	; 0x8b14 <vfprintf+0x2d0>
    8b06:	f2 fc       	sbrc	r15, 2
    8b08:	05 c0       	rjmp	.+10     	; 0x8b14 <vfprintf+0x2d0>
    8b0a:	8f ee       	ldi	r24, 0xEF	; 239
    8b0c:	f8 22       	and	r15, r24
    8b0e:	02 c0       	rjmp	.+4      	; 0x8b14 <vfprintf+0x2d0>
    8b10:	1d 2d       	mov	r17, r13
    8b12:	01 c0       	rjmp	.+2      	; 0x8b16 <vfprintf+0x2d2>
    8b14:	19 2d       	mov	r17, r9
    8b16:	f4 fe       	sbrs	r15, 4
    8b18:	0d c0       	rjmp	.+26     	; 0x8b34 <vfprintf+0x2f0>
    8b1a:	fe 01       	movw	r30, r28
    8b1c:	ed 0d       	add	r30, r13
    8b1e:	f1 1d       	adc	r31, r1
    8b20:	80 81       	ld	r24, Z
    8b22:	80 33       	cpi	r24, 0x30	; 48
    8b24:	19 f4       	brne	.+6      	; 0x8b2c <vfprintf+0x2e8>
    8b26:	99 ee       	ldi	r25, 0xE9	; 233
    8b28:	f9 22       	and	r15, r25
    8b2a:	08 c0       	rjmp	.+16     	; 0x8b3c <vfprintf+0x2f8>
    8b2c:	1f 5f       	subi	r17, 0xFF	; 255
    8b2e:	f2 fe       	sbrs	r15, 2
    8b30:	05 c0       	rjmp	.+10     	; 0x8b3c <vfprintf+0x2f8>
    8b32:	03 c0       	rjmp	.+6      	; 0x8b3a <vfprintf+0x2f6>
    8b34:	8f 2d       	mov	r24, r15
    8b36:	86 78       	andi	r24, 0x86	; 134
    8b38:	09 f0       	breq	.+2      	; 0x8b3c <vfprintf+0x2f8>
    8b3a:	1f 5f       	subi	r17, 0xFF	; 255
    8b3c:	0f 2d       	mov	r16, r15
    8b3e:	f3 fc       	sbrc	r15, 3
    8b40:	14 c0       	rjmp	.+40     	; 0x8b6a <vfprintf+0x326>
    8b42:	f0 fe       	sbrs	r15, 0
    8b44:	0f c0       	rjmp	.+30     	; 0x8b64 <vfprintf+0x320>
    8b46:	1e 15       	cp	r17, r14
    8b48:	10 f0       	brcs	.+4      	; 0x8b4e <vfprintf+0x30a>
    8b4a:	9d 2c       	mov	r9, r13
    8b4c:	0b c0       	rjmp	.+22     	; 0x8b64 <vfprintf+0x320>
    8b4e:	9d 2c       	mov	r9, r13
    8b50:	9e 0c       	add	r9, r14
    8b52:	91 1a       	sub	r9, r17
    8b54:	1e 2d       	mov	r17, r14
    8b56:	06 c0       	rjmp	.+12     	; 0x8b64 <vfprintf+0x320>
    8b58:	80 e2       	ldi	r24, 0x20	; 32
    8b5a:	90 e0       	ldi	r25, 0x00	; 0
    8b5c:	b3 01       	movw	r22, r6
    8b5e:	0e 94 15 46 	call	0x8c2a	; 0x8c2a <fputc>
    8b62:	1f 5f       	subi	r17, 0xFF	; 255
    8b64:	1e 15       	cp	r17, r14
    8b66:	c0 f3       	brcs	.-16     	; 0x8b58 <vfprintf+0x314>
    8b68:	04 c0       	rjmp	.+8      	; 0x8b72 <vfprintf+0x32e>
    8b6a:	1e 15       	cp	r17, r14
    8b6c:	10 f4       	brcc	.+4      	; 0x8b72 <vfprintf+0x32e>
    8b6e:	e1 1a       	sub	r14, r17
    8b70:	01 c0       	rjmp	.+2      	; 0x8b74 <vfprintf+0x330>
    8b72:	ee 24       	eor	r14, r14
    8b74:	04 ff       	sbrs	r16, 4
    8b76:	0f c0       	rjmp	.+30     	; 0x8b96 <vfprintf+0x352>
    8b78:	80 e3       	ldi	r24, 0x30	; 48
    8b7a:	90 e0       	ldi	r25, 0x00	; 0
    8b7c:	b3 01       	movw	r22, r6
    8b7e:	0e 94 15 46 	call	0x8c2a	; 0x8c2a <fputc>
    8b82:	02 ff       	sbrs	r16, 2
    8b84:	1d c0       	rjmp	.+58     	; 0x8bc0 <vfprintf+0x37c>
    8b86:	01 fd       	sbrc	r16, 1
    8b88:	03 c0       	rjmp	.+6      	; 0x8b90 <vfprintf+0x34c>
    8b8a:	88 e7       	ldi	r24, 0x78	; 120
    8b8c:	90 e0       	ldi	r25, 0x00	; 0
    8b8e:	0e c0       	rjmp	.+28     	; 0x8bac <vfprintf+0x368>
    8b90:	88 e5       	ldi	r24, 0x58	; 88
    8b92:	90 e0       	ldi	r25, 0x00	; 0
    8b94:	0b c0       	rjmp	.+22     	; 0x8bac <vfprintf+0x368>
    8b96:	80 2f       	mov	r24, r16
    8b98:	86 78       	andi	r24, 0x86	; 134
    8b9a:	91 f0       	breq	.+36     	; 0x8bc0 <vfprintf+0x37c>
    8b9c:	01 ff       	sbrs	r16, 1
    8b9e:	02 c0       	rjmp	.+4      	; 0x8ba4 <vfprintf+0x360>
    8ba0:	8b e2       	ldi	r24, 0x2B	; 43
    8ba2:	01 c0       	rjmp	.+2      	; 0x8ba6 <vfprintf+0x362>
    8ba4:	80 e2       	ldi	r24, 0x20	; 32
    8ba6:	f7 fc       	sbrc	r15, 7
    8ba8:	8d e2       	ldi	r24, 0x2D	; 45
    8baa:	90 e0       	ldi	r25, 0x00	; 0
    8bac:	b3 01       	movw	r22, r6
    8bae:	0e 94 15 46 	call	0x8c2a	; 0x8c2a <fputc>
    8bb2:	06 c0       	rjmp	.+12     	; 0x8bc0 <vfprintf+0x37c>
    8bb4:	80 e3       	ldi	r24, 0x30	; 48
    8bb6:	90 e0       	ldi	r25, 0x00	; 0
    8bb8:	b3 01       	movw	r22, r6
    8bba:	0e 94 15 46 	call	0x8c2a	; 0x8c2a <fputc>
    8bbe:	9a 94       	dec	r9
    8bc0:	d9 14       	cp	r13, r9
    8bc2:	c0 f3       	brcs	.-16     	; 0x8bb4 <vfprintf+0x370>
    8bc4:	da 94       	dec	r13
    8bc6:	f1 01       	movw	r30, r2
    8bc8:	ed 0d       	add	r30, r13
    8bca:	f1 1d       	adc	r31, r1
    8bcc:	80 81       	ld	r24, Z
    8bce:	90 e0       	ldi	r25, 0x00	; 0
    8bd0:	b3 01       	movw	r22, r6
    8bd2:	0e 94 15 46 	call	0x8c2a	; 0x8c2a <fputc>
    8bd6:	dd 20       	and	r13, r13
    8bd8:	a9 f7       	brne	.-22     	; 0x8bc4 <vfprintf+0x380>
    8bda:	06 c0       	rjmp	.+12     	; 0x8be8 <vfprintf+0x3a4>
    8bdc:	80 e2       	ldi	r24, 0x20	; 32
    8bde:	90 e0       	ldi	r25, 0x00	; 0
    8be0:	b3 01       	movw	r22, r6
    8be2:	0e 94 15 46 	call	0x8c2a	; 0x8c2a <fputc>
    8be6:	ea 94       	dec	r14
    8be8:	ee 20       	and	r14, r14
    8bea:	c1 f7       	brne	.-16     	; 0x8bdc <vfprintf+0x398>
    8bec:	43 ce       	rjmp	.-890    	; 0x8874 <vfprintf+0x30>
    8bee:	f3 01       	movw	r30, r6
    8bf0:	66 81       	ldd	r22, Z+6	; 0x06
    8bf2:	77 81       	ldd	r23, Z+7	; 0x07
    8bf4:	cb 01       	movw	r24, r22
    8bf6:	2b 96       	adiw	r28, 0x0b	; 11
    8bf8:	e2 e1       	ldi	r30, 0x12	; 18
    8bfa:	0c 94 e3 43 	jmp	0x87c6	; 0x87c6 <__epilogue_restores__>

00008bfe <strnlen_P>:
    8bfe:	fc 01       	movw	r30, r24
    8c00:	05 90       	lpm	r0, Z+
    8c02:	61 50       	subi	r22, 0x01	; 1
    8c04:	70 40       	sbci	r23, 0x00	; 0
    8c06:	01 10       	cpse	r0, r1
    8c08:	d8 f7       	brcc	.-10     	; 0x8c00 <strnlen_P+0x2>
    8c0a:	80 95       	com	r24
    8c0c:	90 95       	com	r25
    8c0e:	8e 0f       	add	r24, r30
    8c10:	9f 1f       	adc	r25, r31
    8c12:	08 95       	ret

00008c14 <strnlen>:
    8c14:	fc 01       	movw	r30, r24
    8c16:	61 50       	subi	r22, 0x01	; 1
    8c18:	70 40       	sbci	r23, 0x00	; 0
    8c1a:	01 90       	ld	r0, Z+
    8c1c:	01 10       	cpse	r0, r1
    8c1e:	d8 f7       	brcc	.-10     	; 0x8c16 <strnlen+0x2>
    8c20:	80 95       	com	r24
    8c22:	90 95       	com	r25
    8c24:	8e 0f       	add	r24, r30
    8c26:	9f 1f       	adc	r25, r31
    8c28:	08 95       	ret

00008c2a <fputc>:
    8c2a:	0f 93       	push	r16
    8c2c:	1f 93       	push	r17
    8c2e:	cf 93       	push	r28
    8c30:	df 93       	push	r29
    8c32:	8c 01       	movw	r16, r24
    8c34:	eb 01       	movw	r28, r22
    8c36:	8b 81       	ldd	r24, Y+3	; 0x03
    8c38:	81 ff       	sbrs	r24, 1
    8c3a:	1b c0       	rjmp	.+54     	; 0x8c72 <fputc+0x48>
    8c3c:	82 ff       	sbrs	r24, 2
    8c3e:	0d c0       	rjmp	.+26     	; 0x8c5a <fputc+0x30>
    8c40:	2e 81       	ldd	r18, Y+6	; 0x06
    8c42:	3f 81       	ldd	r19, Y+7	; 0x07
    8c44:	8c 81       	ldd	r24, Y+4	; 0x04
    8c46:	9d 81       	ldd	r25, Y+5	; 0x05
    8c48:	28 17       	cp	r18, r24
    8c4a:	39 07       	cpc	r19, r25
    8c4c:	64 f4       	brge	.+24     	; 0x8c66 <fputc+0x3c>
    8c4e:	e8 81       	ld	r30, Y
    8c50:	f9 81       	ldd	r31, Y+1	; 0x01
    8c52:	01 93       	st	Z+, r16
    8c54:	f9 83       	std	Y+1, r31	; 0x01
    8c56:	e8 83       	st	Y, r30
    8c58:	06 c0       	rjmp	.+12     	; 0x8c66 <fputc+0x3c>
    8c5a:	e8 85       	ldd	r30, Y+8	; 0x08
    8c5c:	f9 85       	ldd	r31, Y+9	; 0x09
    8c5e:	80 2f       	mov	r24, r16
    8c60:	09 95       	icall
    8c62:	89 2b       	or	r24, r25
    8c64:	31 f4       	brne	.+12     	; 0x8c72 <fputc+0x48>
    8c66:	8e 81       	ldd	r24, Y+6	; 0x06
    8c68:	9f 81       	ldd	r25, Y+7	; 0x07
    8c6a:	01 96       	adiw	r24, 0x01	; 1
    8c6c:	9f 83       	std	Y+7, r25	; 0x07
    8c6e:	8e 83       	std	Y+6, r24	; 0x06
    8c70:	02 c0       	rjmp	.+4      	; 0x8c76 <fputc+0x4c>
    8c72:	0f ef       	ldi	r16, 0xFF	; 255
    8c74:	1f ef       	ldi	r17, 0xFF	; 255
    8c76:	c8 01       	movw	r24, r16
    8c78:	df 91       	pop	r29
    8c7a:	cf 91       	pop	r28
    8c7c:	1f 91       	pop	r17
    8c7e:	0f 91       	pop	r16
    8c80:	08 95       	ret

00008c82 <__ultoa_invert>:
    8c82:	fa 01       	movw	r30, r20
    8c84:	aa 27       	eor	r26, r26
    8c86:	28 30       	cpi	r18, 0x08	; 8
    8c88:	51 f1       	breq	.+84     	; 0x8cde <__ultoa_invert+0x5c>
    8c8a:	20 31       	cpi	r18, 0x10	; 16
    8c8c:	81 f1       	breq	.+96     	; 0x8cee <__ultoa_invert+0x6c>
    8c8e:	e8 94       	clt
    8c90:	6f 93       	push	r22
    8c92:	6e 7f       	andi	r22, 0xFE	; 254
    8c94:	6e 5f       	subi	r22, 0xFE	; 254
    8c96:	7f 4f       	sbci	r23, 0xFF	; 255
    8c98:	8f 4f       	sbci	r24, 0xFF	; 255
    8c9a:	9f 4f       	sbci	r25, 0xFF	; 255
    8c9c:	af 4f       	sbci	r26, 0xFF	; 255
    8c9e:	b1 e0       	ldi	r27, 0x01	; 1
    8ca0:	3e d0       	rcall	.+124    	; 0x8d1e <__ultoa_invert+0x9c>
    8ca2:	b4 e0       	ldi	r27, 0x04	; 4
    8ca4:	3c d0       	rcall	.+120    	; 0x8d1e <__ultoa_invert+0x9c>
    8ca6:	67 0f       	add	r22, r23
    8ca8:	78 1f       	adc	r23, r24
    8caa:	89 1f       	adc	r24, r25
    8cac:	9a 1f       	adc	r25, r26
    8cae:	a1 1d       	adc	r26, r1
    8cb0:	68 0f       	add	r22, r24
    8cb2:	79 1f       	adc	r23, r25
    8cb4:	8a 1f       	adc	r24, r26
    8cb6:	91 1d       	adc	r25, r1
    8cb8:	a1 1d       	adc	r26, r1
    8cba:	6a 0f       	add	r22, r26
    8cbc:	71 1d       	adc	r23, r1
    8cbe:	81 1d       	adc	r24, r1
    8cc0:	91 1d       	adc	r25, r1
    8cc2:	a1 1d       	adc	r26, r1
    8cc4:	20 d0       	rcall	.+64     	; 0x8d06 <__ultoa_invert+0x84>
    8cc6:	09 f4       	brne	.+2      	; 0x8cca <__ultoa_invert+0x48>
    8cc8:	68 94       	set
    8cca:	3f 91       	pop	r19
    8ccc:	2a e0       	ldi	r18, 0x0A	; 10
    8cce:	26 9f       	mul	r18, r22
    8cd0:	11 24       	eor	r1, r1
    8cd2:	30 19       	sub	r19, r0
    8cd4:	30 5d       	subi	r19, 0xD0	; 208
    8cd6:	31 93       	st	Z+, r19
    8cd8:	de f6       	brtc	.-74     	; 0x8c90 <__ultoa_invert+0xe>
    8cda:	cf 01       	movw	r24, r30
    8cdc:	08 95       	ret
    8cde:	46 2f       	mov	r20, r22
    8ce0:	47 70       	andi	r20, 0x07	; 7
    8ce2:	40 5d       	subi	r20, 0xD0	; 208
    8ce4:	41 93       	st	Z+, r20
    8ce6:	b3 e0       	ldi	r27, 0x03	; 3
    8ce8:	0f d0       	rcall	.+30     	; 0x8d08 <__ultoa_invert+0x86>
    8cea:	c9 f7       	brne	.-14     	; 0x8cde <__ultoa_invert+0x5c>
    8cec:	f6 cf       	rjmp	.-20     	; 0x8cda <__ultoa_invert+0x58>
    8cee:	46 2f       	mov	r20, r22
    8cf0:	4f 70       	andi	r20, 0x0F	; 15
    8cf2:	40 5d       	subi	r20, 0xD0	; 208
    8cf4:	4a 33       	cpi	r20, 0x3A	; 58
    8cf6:	18 f0       	brcs	.+6      	; 0x8cfe <__ultoa_invert+0x7c>
    8cf8:	49 5d       	subi	r20, 0xD9	; 217
    8cfa:	31 fd       	sbrc	r19, 1
    8cfc:	40 52       	subi	r20, 0x20	; 32
    8cfe:	41 93       	st	Z+, r20
    8d00:	02 d0       	rcall	.+4      	; 0x8d06 <__ultoa_invert+0x84>
    8d02:	a9 f7       	brne	.-22     	; 0x8cee <__ultoa_invert+0x6c>
    8d04:	ea cf       	rjmp	.-44     	; 0x8cda <__ultoa_invert+0x58>
    8d06:	b4 e0       	ldi	r27, 0x04	; 4
    8d08:	a6 95       	lsr	r26
    8d0a:	97 95       	ror	r25
    8d0c:	87 95       	ror	r24
    8d0e:	77 95       	ror	r23
    8d10:	67 95       	ror	r22
    8d12:	ba 95       	dec	r27
    8d14:	c9 f7       	brne	.-14     	; 0x8d08 <__ultoa_invert+0x86>
    8d16:	00 97       	sbiw	r24, 0x00	; 0
    8d18:	61 05       	cpc	r22, r1
    8d1a:	71 05       	cpc	r23, r1
    8d1c:	08 95       	ret
    8d1e:	9b 01       	movw	r18, r22
    8d20:	ac 01       	movw	r20, r24
    8d22:	0a 2e       	mov	r0, r26
    8d24:	06 94       	lsr	r0
    8d26:	57 95       	ror	r21
    8d28:	47 95       	ror	r20
    8d2a:	37 95       	ror	r19
    8d2c:	27 95       	ror	r18
    8d2e:	ba 95       	dec	r27
    8d30:	c9 f7       	brne	.-14     	; 0x8d24 <__ultoa_invert+0xa2>
    8d32:	62 0f       	add	r22, r18
    8d34:	73 1f       	adc	r23, r19
    8d36:	84 1f       	adc	r24, r20
    8d38:	95 1f       	adc	r25, r21
    8d3a:	a0 1d       	adc	r26, r0
    8d3c:	08 95       	ret

00008d3e <_exit>:
    8d3e:	f8 94       	cli

00008d40 <__stop_program>:
    8d40:	ff cf       	rjmp	.-2      	; 0x8d40 <__stop_program>
