
Automated_Greenhouse_Monitoring_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000833e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019e  00800060  0000833e  000083d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000033  008001fe  008001fe  00008570  2**0
                  ALLOC
  3 .stab         000096a8  00000000  00000000  00008570  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003efb  00000000  00000000  00011c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00015b13  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  00015cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  00015ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  0001856d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  00019a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0001acf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0001aed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  0001b1d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001bb80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8c 15 	jmp	0x2b18	; 0x2b18 <__vector_1>
       8:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__vector_2>
       c:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__vector_10>
      2c:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e3       	ldi	r30, 0x3E	; 62
      68:	f3 e8       	ldi	r31, 0x83	; 131
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3f       	cpi	r26, 0xFE	; 254
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae ef       	ldi	r26, 0xFE	; 254
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 33       	cpi	r26, 0x31	; 49
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c0 3e 	call	0x7d80	; 0x7d80 <main>
      8a:	0c 94 9d 41 	jmp	0x833a	; 0x833a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c5 3e 	jmp	0x7d8a	; 0x7d8a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e6       	ldi	r26, 0x63	; 99
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e1 3e 	jmp	0x7dc2	; 0x7dc2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d1 3e 	jmp	0x7da2	; 0x7da2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ed 3e 	jmp	0x7dda	; 0x7dda <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d1 3e 	jmp	0x7da2	; 0x7da2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ed 3e 	jmp	0x7dda	; 0x7dda <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c5 3e 	jmp	0x7d8a	; 0x7d8a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e6       	ldi	r24, 0x63	; 99
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e1 3e 	jmp	0x7dc2	; 0x7dc2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cd 3e 	jmp	0x7d9a	; 0x7d9a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e6       	ldi	r22, 0x63	; 99
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e9 3e 	jmp	0x7dd2	; 0x7dd2 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d1 3e 	jmp	0x7da2	; 0x7da2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ed 3e 	jmp	0x7dda	; 0x7dda <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d1 3e 	jmp	0x7da2	; 0x7da2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ed 3e 	jmp	0x7dda	; 0x7dda <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d1 3e 	jmp	0x7da2	; 0x7da2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ed 3e 	jmp	0x7dda	; 0x7dda <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d1 3e 	jmp	0x7da2	; 0x7da2 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 ed 3e 	jmp	0x7dda	; 0x7dda <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 d5 3e 	jmp	0x7daa	; 0x7daa <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 f1 3e 	jmp	0x7de2	; 0x7de2 <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 cd 3e 	jmp	0x7d9a	; 0x7d9a <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 e9 3e 	jmp	0x7dd2	; 0x7dd2 <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	e5 59       	subi	r30, 0x95	; 149
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <USART_enuInit>:
#include "USART_priv.h"
#include "USART_config.h"


ES_t USART_enuInit(void)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <USART_enuInit+0x6>
     e94:	00 d0       	rcall	.+0      	; 0xe96 <USART_enuInit+0x8>
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8UCSRAvalue = 0;
     e9e:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u16UBRRvalue = 0;
     ea0:	1a 82       	std	Y+2, r1	; 0x02
     ea2:	19 82       	std	Y+1, r1	; 0x01
	
	#if USART_SPEED == NORMAL_SPEED
	UCSRA &= ~(MASK_BIT << U2X);
     ea4:	ab e2       	ldi	r26, 0x2B	; 43
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	eb e2       	ldi	r30, 0x2B	; 43
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	8d 7f       	andi	r24, 0xFD	; 253
     eb0:	8c 93       	st	X, r24
	#if USART_MODE == TRANSMITTER
	UCSRB |= (MASK_BIT << TXEN);
	#elif USART_MODE == RECEIVER
	UCSRB |= (MASK_BIT << RXEN);
	#elif USART_MODE == TRANSCEIVER
	UCSRB |= (MASK_BIT << TXEN);
     eb2:	aa e2       	ldi	r26, 0x2A	; 42
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	ea e2       	ldi	r30, 0x2A	; 42
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	88 60       	ori	r24, 0x08	; 8
     ebe:	8c 93       	st	X, r24
	UCSRB |= (MASK_BIT << RXEN);
     ec0:	aa e2       	ldi	r26, 0x2A	; 42
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	ea e2       	ldi	r30, 0x2A	; 42
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	80 61       	ori	r24, 0x10	; 16
     ecc:	8c 93       	st	X, r24
	#elif USART_DATA_LENGTH == SEVEN_DATA_LENGTH
	Local_u8UCSRAvalue &= ~(MASK_BIT << UCSZ0);
	Local_u8UCSRAvalue |=  (MASK_BIT << UCSZ1);
	UCSRB &= ~(MASK_BIT << UCSZ2);
	#elif USART_DATA_LENGTH == EIGHT_DATA_LENGTH
	Local_u8UCSRAvalue |=  (MASK_BIT << UCSZ0);
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	82 60       	ori	r24, 0x02	; 2
     ed2:	8b 83       	std	Y+3, r24	; 0x03
	Local_u8UCSRAvalue |=  (MASK_BIT << UCSZ1);
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	84 60       	ori	r24, 0x04	; 4
     ed8:	8b 83       	std	Y+3, r24	; 0x03
	UCSRB &= ~(MASK_BIT << UCSZ2);
     eda:	aa e2       	ldi	r26, 0x2A	; 42
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	ea e2       	ldi	r30, 0x2A	; 42
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	8b 7f       	andi	r24, 0xFB	; 251
     ee6:	8c 93       	st	X, r24
	#else
	#error "USART DATA LENGTH has a wrong configuration"
	#endif
	
	#if TRANSMITTION_MODE == ASYNCHRONOUS
	Local_u8UCSRAvalue &= ~(MASK_BIT << UMSEL);
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	8f 7b       	andi	r24, 0xBF	; 191
     eec:	8b 83       	std	Y+3, r24	; 0x03
	#else
	#error "USART TRANSMITTION MODE has a wrong configuration"
	#endif
	
	#if PARITY_STATE == NO_PARITY
	Local_u8UCSRAvalue &= ~(MASK_BIT << UPM0);
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	8f 7e       	andi	r24, 0xEF	; 239
     ef2:	8b 83       	std	Y+3, r24	; 0x03
	Local_u8UCSRAvalue &= ~(MASK_BIT << UPM1);
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	8f 7d       	andi	r24, 0xDF	; 223
     ef8:	8b 83       	std	Y+3, r24	; 0x03
	#else
	#error "USART PARITY has a wrong configuration"
	#endif
	
	#if NO_STOP_BITS == ONE_STOP_BITS
	Local_u8UCSRAvalue &= ~(MASK_BIT << USBS);
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	87 7f       	andi	r24, 0xF7	; 247
     efe:	8b 83       	std	Y+3, r24	; 0x03
	Local_u8UCSRAvalue |=  (MASK_BIT << USBS);
	#else
	#error "USART STOP BITS has a wrong configuration"
	#endif
	
	Local_u8UCSRAvalue |= (MASK_BIT << URSEL);
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	80 68       	ori	r24, 0x80	; 128
     f04:	8b 83       	std	Y+3, r24	; 0x03
	UCSRC = Local_u8UCSRAvalue;
     f06:	e0 e4       	ldi	r30, 0x40	; 64
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	80 83       	st	Z, r24
	
	
	Local_u16UBRRvalue = (u16)CALCULATE_BAUDRATE(USART_BAUD_RATE);
     f0e:	83 e3       	ldi	r24, 0x33	; 51
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	9a 83       	std	Y+2, r25	; 0x02
     f14:	89 83       	std	Y+1, r24	; 0x01
	
	Local_u16UBRRvalue &= ~(MASK_BIT << 15);
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	9a 81       	ldd	r25, Y+2	; 0x02
     f1a:	9f 77       	andi	r25, 0x7F	; 127
     f1c:	9a 83       	std	Y+2, r25	; 0x02
     f1e:	89 83       	std	Y+1, r24	; 0x01
	UBRRL = (u8)Local_u16UBRRvalue;
     f20:	e9 e2       	ldi	r30, 0x29	; 41
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	80 83       	st	Z, r24
	UBRRH = (Local_u16UBRRvalue >> 8);
     f28:	e0 e4       	ldi	r30, 0x40	; 64
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	9a 81       	ldd	r25, Y+2	; 0x02
     f30:	89 2f       	mov	r24, r25
     f32:	99 27       	eor	r25, r25
     f34:	80 83       	st	Z, r24
	
	Local_enuErrorState = ES_OK;
     f36:	1c 82       	std	Y+4, r1	; 0x04
	
	return Local_enuErrorState;
     f38:	8c 81       	ldd	r24, Y+4	; 0x04
}
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <USART_enuSendCharacter>:

ES_t USART_enuSendCharacter(u8 Copy_u8SendedChar)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <USART_enuSendCharacter+0x6>
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	89 83       	std	Y+1, r24	; 0x01
	
	while(!((UCSRA >> UDRE) & 1));
     f58:	eb e2       	ldi	r30, 0x2B	; 43
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	82 95       	swap	r24
     f60:	86 95       	lsr	r24
     f62:	87 70       	andi	r24, 0x07	; 7
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	81 70       	andi	r24, 0x01	; 1
     f6a:	90 70       	andi	r25, 0x00	; 0
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	a1 f3       	breq	.-24     	; 0xf58 <USART_enuSendCharacter+0x10>
	UDR = Copy_u8SendedChar;
     f70:	ec e2       	ldi	r30, 0x2C	; 44
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	80 83       	st	Z, r24
	
	Local_enuErrorState = ES_OK;
     f78:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret

00000f86 <USART_enuReceiveCharacter>:

ES_t USART_enuReceiveCharacter(u8 *Copy_Pu8ReceivedChar)
{
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <USART_enuReceiveCharacter+0x6>
     f8c:	0f 92       	push	r0
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	9b 83       	std	Y+3, r25	; 0x03
     f94:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_Pu8ReceivedChar != NULL)
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	9b 81       	ldd	r25, Y+3	; 0x03
     f9e:	00 97       	sbiw	r24, 0x00	; 0
     fa0:	69 f0       	breq	.+26     	; 0xfbc <USART_enuReceiveCharacter+0x36>
	{
		while(!((UCSRA >> RXC) & 1));
     fa2:	eb e2       	ldi	r30, 0x2B	; 43
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	88 23       	and	r24, r24
     faa:	dc f7       	brge	.-10     	; 0xfa2 <USART_enuReceiveCharacter+0x1c>
		*Copy_Pu8ReceivedChar = UDR;
     fac:	ec e2       	ldi	r30, 0x2C	; 44
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	ea 81       	ldd	r30, Y+2	; 0x02
     fb4:	fb 81       	ldd	r31, Y+3	; 0x03
     fb6:	80 83       	st	Z, r24
		
		Local_enuErrorState = ES_OK;
     fb8:	19 82       	std	Y+1, r1	; 0x01
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <USART_enuReceiveCharacter+0x3a>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     fbc:	82 e0       	ldi	r24, 0x02	; 2
     fbe:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
}
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <USART_enuSendString>:

ES_t USART_enuSendString(u8 *Copy_Pu8SendedString)
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <USART_enuSendString+0x6>
     fd4:	0f 92       	push	r0
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	9b 83       	std	Y+3, r25	; 0x03
     fdc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_Pu8SendedString != NULL)
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	9b 81       	ldd	r25, Y+3	; 0x03
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	f9 f0       	breq	.+62     	; 0x1028 <USART_enuSendString+0x5a>
     fea:	17 c0       	rjmp	.+46     	; 0x101a <USART_enuSendString+0x4c>
	{
		while(*Copy_Pu8SendedString != '\0')
		{
			while(!((UCSRA >> UDRE) & 1));
     fec:	eb e2       	ldi	r30, 0x2B	; 43
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	82 95       	swap	r24
     ff4:	86 95       	lsr	r24
     ff6:	87 70       	andi	r24, 0x07	; 7
     ff8:	88 2f       	mov	r24, r24
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	81 70       	andi	r24, 0x01	; 1
     ffe:	90 70       	andi	r25, 0x00	; 0
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	a1 f3       	breq	.-24     	; 0xfec <USART_enuSendString+0x1e>
			UDR = *Copy_Pu8SendedString;
    1004:	ac e2       	ldi	r26, 0x2C	; 44
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	ea 81       	ldd	r30, Y+2	; 0x02
    100a:	fb 81       	ldd	r31, Y+3	; 0x03
    100c:	80 81       	ld	r24, Z
    100e:	8c 93       	st	X, r24
			Copy_Pu8SendedString++;
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	9b 81       	ldd	r25, Y+3	; 0x03
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	9b 83       	std	Y+3, r25	; 0x03
    1018:	8a 83       	std	Y+2, r24	; 0x02
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_Pu8SendedString != NULL)
	{
		while(*Copy_Pu8SendedString != '\0')
    101a:	ea 81       	ldd	r30, Y+2	; 0x02
    101c:	fb 81       	ldd	r31, Y+3	; 0x03
    101e:	80 81       	ld	r24, Z
    1020:	88 23       	and	r24, r24
    1022:	21 f7       	brne	.-56     	; 0xfec <USART_enuSendString+0x1e>
			while(!((UCSRA >> UDRE) & 1));
			UDR = *Copy_Pu8SendedString;
			Copy_Pu8SendedString++;
		}
		
		Local_enuErrorState = ES_OK;
    1024:	19 82       	std	Y+1, r1	; 0x01
    1026:	02 c0       	rjmp	.+4      	; 0x102c <USART_enuSendString+0x5e>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1028:	82 e0       	ldi	r24, 0x02	; 2
    102a:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    102c:	89 81       	ldd	r24, Y+1	; 0x01
}
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <USART_enuReceiveStringUntilEnter>:

/* we will stop receive string (end of string) when we press 'Enter' --> (\r = 13), \n */
ES_t USART_enuReceiveStringUntilEnter(u8 *Copy_Pu8ReceivedString)
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	00 d0       	rcall	.+0      	; 0x1040 <USART_enuReceiveStringUntilEnter+0x6>
    1040:	00 d0       	rcall	.+0      	; 0x1042 <USART_enuReceiveStringUntilEnter+0x8>
    1042:	0f 92       	push	r0
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	9d 83       	std	Y+5, r25	; 0x05
    104a:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	8b 83       	std	Y+3, r24	; 0x03
	
	u8 Local_u8String = 0, Local_u8CharIndex = 0;
    1050:	1a 82       	std	Y+2, r1	; 0x02
    1052:	19 82       	std	Y+1, r1	; 0x01
	
	if(Copy_Pu8ReceivedString != NULL)
    1054:	8c 81       	ldd	r24, Y+4	; 0x04
    1056:	9d 81       	ldd	r25, Y+5	; 0x05
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	41 f1       	breq	.+80     	; 0x10ac <USART_enuReceiveStringUntilEnter+0x72>
	{
		while(1)
		{
			while(!((UCSRA >> RXC) & 1));
    105c:	eb e2       	ldi	r30, 0x2B	; 43
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	88 23       	and	r24, r24
    1064:	dc f7       	brge	.-10     	; 0x105c <USART_enuReceiveStringUntilEnter+0x22>
			Local_u8String = UDR;
    1066:	ec e2       	ldi	r30, 0x2C	; 44
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	8a 83       	std	Y+2, r24	; 0x02
			
			if(Local_u8String == '\r' || Local_u8String == '\n')
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	8d 30       	cpi	r24, 0x0D	; 13
    1072:	19 f0       	breq	.+6      	; 0x107a <USART_enuReceiveStringUntilEnter+0x40>
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	8a 30       	cpi	r24, 0x0A	; 10
    1078:	51 f4       	brne	.+20     	; 0x108e <USART_enuReceiveStringUntilEnter+0x54>
			{
				Copy_Pu8ReceivedString[Local_u8CharIndex] = '\0';
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	8c 81       	ldd	r24, Y+4	; 0x04
    1082:	9d 81       	ldd	r25, Y+5	; 0x05
    1084:	fc 01       	movw	r30, r24
    1086:	e2 0f       	add	r30, r18
    1088:	f3 1f       	adc	r31, r19
    108a:	10 82       	st	Z, r1
    108c:	11 c0       	rjmp	.+34     	; 0x10b0 <USART_enuReceiveStringUntilEnter+0x76>
				break;
			}
			else
			{
				Copy_Pu8ReceivedString[Local_u8CharIndex++] = Local_u8String;
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	8c 81       	ldd	r24, Y+4	; 0x04
    1096:	9d 81       	ldd	r25, Y+5	; 0x05
    1098:	fc 01       	movw	r30, r24
    109a:	e2 0f       	add	r30, r18
    109c:	f3 1f       	adc	r31, r19
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	8f 5f       	subi	r24, 0xFF	; 255
    10a6:	89 83       	std	Y+1, r24	; 0x01
			}
			
			Local_enuErrorState = ES_OK;
    10a8:	1b 82       	std	Y+3, r1	; 0x03
    10aa:	d8 cf       	rjmp	.-80     	; 0x105c <USART_enuReceiveStringUntilEnter+0x22>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    10ac:	82 e0       	ldi	r24, 0x02	; 2
    10ae:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return Local_enuErrorState;
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <USART_enuReceiveStringWithKey>:


ES_t USART_enuReceiveStringWithKey(u8 *Copy_Pu8ReceivedString)
{
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <USART_enuReceiveStringWithKey+0x6>
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <USART_enuReceiveStringWithKey+0x8>
    10ca:	00 d0       	rcall	.+0      	; 0x10cc <USART_enuReceiveStringWithKey+0xa>
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	9e 83       	std	Y+6, r25	; 0x06
    10d2:	8d 83       	std	Y+5, r24	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	8c 83       	std	Y+4, r24	; 0x04
	
	u8 Local_u8String = 0, Local_u8CharIndex = 0;
    10d8:	1b 82       	std	Y+3, r1	; 0x03
    10da:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8StringKey = 0;
    10dc:	19 82       	std	Y+1, r1	; 0x01
	
	if(Copy_Pu8ReceivedString != NULL)
    10de:	8d 81       	ldd	r24, Y+5	; 0x05
    10e0:	9e 81       	ldd	r25, Y+6	; 0x06
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	79 f1       	breq	.+94     	; 0x1144 <USART_enuReceiveStringWithKey+0x82>
	{
		while(!((UCSRA >> RXC) & 1));
    10e6:	eb e2       	ldi	r30, 0x2B	; 43
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	88 23       	and	r24, r24
    10ee:	dc f7       	brge	.-10     	; 0x10e6 <USART_enuReceiveStringWithKey+0x24>
		Local_u8StringKey = UDR;
    10f0:	ec e2       	ldi	r30, 0x2C	; 44
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	89 83       	std	Y+1, r24	; 0x01
		
		while(1)
		{
			while(!((UCSRA >> RXC) & 1));
    10f8:	eb e2       	ldi	r30, 0x2B	; 43
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	88 23       	and	r24, r24
    1100:	dc f7       	brge	.-10     	; 0x10f8 <USART_enuReceiveStringWithKey+0x36>
			Local_u8String = UDR;
    1102:	ec e2       	ldi	r30, 0x2C	; 44
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	8b 83       	std	Y+3, r24	; 0x03
			
			if(Local_u8String == Local_u8StringKey)
    110a:	9b 81       	ldd	r25, Y+3	; 0x03
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	98 17       	cp	r25, r24
    1110:	51 f4       	brne	.+20     	; 0x1126 <USART_enuReceiveStringWithKey+0x64>
			{
				Copy_Pu8ReceivedString[Local_u8CharIndex] = '\0';
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	8d 81       	ldd	r24, Y+5	; 0x05
    111a:	9e 81       	ldd	r25, Y+6	; 0x06
    111c:	fc 01       	movw	r30, r24
    111e:	e2 0f       	add	r30, r18
    1120:	f3 1f       	adc	r31, r19
    1122:	10 82       	st	Z, r1
    1124:	11 c0       	rjmp	.+34     	; 0x1148 <USART_enuReceiveStringWithKey+0x86>
				break;
			}
			else
			{
				Copy_Pu8ReceivedString[Local_u8CharIndex++] = Local_u8String;
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	fc 01       	movw	r30, r24
    1132:	e2 0f       	add	r30, r18
    1134:	f3 1f       	adc	r31, r19
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	80 83       	st	Z, r24
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	8f 5f       	subi	r24, 0xFF	; 255
    113e:	8a 83       	std	Y+2, r24	; 0x02
			}
			
			Local_enuErrorState = ES_OK;
    1140:	1c 82       	std	Y+4, r1	; 0x04
    1142:	da cf       	rjmp	.-76     	; 0x10f8 <USART_enuReceiveStringWithKey+0x36>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1144:	82 e0       	ldi	r24, 0x02	; 2
    1146:	8c 83       	std	Y+4, r24	; 0x04
	}
	
	return Local_enuErrorState;
    1148:	8c 81       	ldd	r24, Y+4	; 0x04
    114a:	26 96       	adiw	r28, 0x06	; 6
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	de bf       	out	0x3e, r29	; 62
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	cd bf       	out	0x3d, r28	; 61
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <TIMER1_enuInit>:
#include "TIMER1_config.h"

#include "../interrupt.h"

ES_t TIMER1_enuInit(void)
{
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	0f 92       	push	r0
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	89 83       	std	Y+1, r24	; 0x01
	
	/* Mask the four bits of Waveform Generation Mode */
	TCCR1A &= 0xFC;
    116a:	af e4       	ldi	r26, 0x4F	; 79
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	ef e4       	ldi	r30, 0x4F	; 79
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	8c 7f       	andi	r24, 0xFC	; 252
    1176:	8c 93       	st	X, r24
	TCCR1B &= 0xE7;
    1178:	ae e4       	ldi	r26, 0x4E	; 78
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	ee e4       	ldi	r30, 0x4E	; 78
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	87 7e       	andi	r24, 0xE7	; 231
    1184:	8c 93       	st	X, r24
	TCCR1A &= ~(MASK_BIT << WGM10);
	TCCR1A &= ~(MASK_BIT << WGM11);
	TCCR1B |=  (MASK_BIT << WGM12);
	TCCR1B &= ~(MASK_BIT << WGM13);
	#elif TIMER1_MODE == TIMER1_FAST_PWM_8B
	TCCR1A |=  (MASK_BIT << WGM10);
    1186:	af e4       	ldi	r26, 0x4F	; 79
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	ef e4       	ldi	r30, 0x4F	; 79
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	81 60       	ori	r24, 0x01	; 1
    1192:	8c 93       	st	X, r24
	TCCR1A &= ~(MASK_BIT << WGM11);
    1194:	af e4       	ldi	r26, 0x4F	; 79
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	ef e4       	ldi	r30, 0x4F	; 79
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	8d 7f       	andi	r24, 0xFD	; 253
    11a0:	8c 93       	st	X, r24
	TCCR1B |=  (MASK_BIT << WGM12);
    11a2:	ae e4       	ldi	r26, 0x4E	; 78
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	ee e4       	ldi	r30, 0x4E	; 78
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	88 60       	ori	r24, 0x08	; 8
    11ae:	8c 93       	st	X, r24
	TCCR1B &= ~(MASK_BIT << WGM13);
    11b0:	ae e4       	ldi	r26, 0x4E	; 78
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	ee e4       	ldi	r30, 0x4E	; 78
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	8f 7e       	andi	r24, 0xEF	; 239
    11bc:	8c 93       	st	X, r24
	#else
	#error "Timer1 Mode has a wrong configuration"
	#endif
	
	/* Mask the three bits of Timer1 Prescaler */
	TCCR1B &= 0xF8;
    11be:	ae e4       	ldi	r26, 0x4E	; 78
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	ee e4       	ldi	r30, 0x4E	; 78
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	88 7f       	andi	r24, 0xF8	; 248
    11ca:	8c 93       	st	X, r24
	#elif TIMER1_PRES == PRES_8
	TCCR1B &= ~(MASK_BIT << CS10);
	TCCR1B |=  (MASK_BIT << CS11);
	TCCR1B &= ~(MASK_BIT << CS12);
	#elif TIMER1_PRES == PRES_64
	TCCR1B |=  (MASK_BIT << CS10);
    11cc:	ae e4       	ldi	r26, 0x4E	; 78
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ee e4       	ldi	r30, 0x4E	; 78
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	81 60       	ori	r24, 0x01	; 1
    11d8:	8c 93       	st	X, r24
	TCCR1B |=  (MASK_BIT << CS11);
    11da:	ae e4       	ldi	r26, 0x4E	; 78
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	ee e4       	ldi	r30, 0x4E	; 78
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	82 60       	ori	r24, 0x02	; 2
    11e6:	8c 93       	st	X, r24
	TCCR1B &= ~(MASK_BIT << CS12);
    11e8:	ae e4       	ldi	r26, 0x4E	; 78
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	ee e4       	ldi	r30, 0x4E	; 78
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	8b 7f       	andi	r24, 0xFB	; 251
    11f4:	8c 93       	st	X, r24
	#error "Timer1 Prescaler has a wrong configuration"
	#endif
	
	

	return Local_enuErrorState;	
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11f8:	0f 90       	pop	r0
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <TIMER1_enuDelayMilliSecondSyn>:

ES_t TIMER1_enuDelayMilliSecondSyn(u32 Copy_u32DelayTime_ms)
{
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	00 d0       	rcall	.+0      	; 0x1206 <TIMER1_enuDelayMilliSecondSyn+0x6>
    1206:	00 d0       	rcall	.+0      	; 0x1208 <TIMER1_enuDelayMilliSecondSyn+0x8>
    1208:	0f 92       	push	r0
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	6a 83       	std	Y+2, r22	; 0x02
    1210:	7b 83       	std	Y+3, r23	; 0x03
    1212:	8c 83       	std	Y+4, r24	; 0x04
    1214:	9d 83       	std	Y+5, r25	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    121a:	89 81       	ldd	r24, Y+1	; 0x01
}
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <TIMER1_enuDelayMilliSecondASyn>:

ES_t TIMER1_enuDelayMilliSecondASyn(u32 Copy_u32DelayTime_ms, void (*Copy_PFunApp)(void *), void *Copy_PParameterApp)
{
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	29 97       	sbiw	r28, 0x09	; 9
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
    1240:	6a 83       	std	Y+2, r22	; 0x02
    1242:	7b 83       	std	Y+3, r23	; 0x03
    1244:	8c 83       	std	Y+4, r24	; 0x04
    1246:	9d 83       	std	Y+5, r25	; 0x05
    1248:	5f 83       	std	Y+7, r21	; 0x07
    124a:	4e 83       	std	Y+6, r20	; 0x06
    124c:	39 87       	std	Y+9, r19	; 0x09
    124e:	28 87       	std	Y+8, r18	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    1254:	89 81       	ldd	r24, Y+1	; 0x01
}
    1256:	29 96       	adiw	r28, 0x09	; 9
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	de bf       	out	0x3e, r29	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	cd bf       	out	0x3d, r28	; 61
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <TIMER1_enuSetPreload>:

ES_t TIMER1_enuSetPreload(u8 Copy_u8PreloadValue)
{
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	00 d0       	rcall	.+0      	; 0x126e <TIMER1_enuSetPreload+0x6>
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    1278:	89 81       	ldd	r24, Y+1	; 0x01
}
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <TIMER1_enuSetOutputCompareRegisterChannelA>:

ES_t TIMER1_enuSetOutputCompareRegisterChannelA(u8 Copy_u8OCRValue)
{
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	00 d0       	rcall	.+0      	; 0x128a <TIMER1_enuSetOutputCompareRegisterChannelA+0x6>
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    1294:	89 81       	ldd	r24, Y+1	; 0x01
}
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <TIMER1_enuSetOutputCompareRegisterChannelB>:

ES_t TIMER1_enuSetOutputCompareRegisterChannelB(u8 Copy_u8OCRValue)
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <TIMER1_enuSetOutputCompareRegisterChannelB+0x6>
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <TIMER1_enuSetCALLBACK_OVF>:

ES_t TIMER1_enuSetCALLBACK_OVF(void (*Copy_PFunApp)(void *), void *Copy_PParameterApp)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <TIMER1_enuSetCALLBACK_OVF+0x6>
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <TIMER1_enuSetCALLBACK_OVF+0x8>
    12c4:	0f 92       	push	r0
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	9b 83       	std	Y+3, r25	; 0x03
    12cc:	8a 83       	std	Y+2, r24	; 0x02
    12ce:	7d 83       	std	Y+5, r23	; 0x05
    12d0:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <TIMER1_enuSetCALLBACK_CTC_ChannelA>:

ES_t TIMER1_enuSetCALLBACK_CTC_ChannelA(void (*Copy_PFunApp)(void *), void *Copy_PParameterApp)
{
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <TIMER1_enuSetCALLBACK_CTC_ChannelA+0x6>
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <TIMER1_enuSetCALLBACK_CTC_ChannelA+0x8>
    12f0:	0f 92       	push	r0
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	9b 83       	std	Y+3, r25	; 0x03
    12f8:	8a 83       	std	Y+2, r24	; 0x02
    12fa:	7d 83       	std	Y+5, r23	; 0x05
    12fc:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    1302:	89 81       	ldd	r24, Y+1	; 0x01
}
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <TIMER1_enuSetCALLBACK_CTC_ChannelB>:

ES_t TIMER1_enuSetCALLBACK_CTC_ChannelB(void (*Copy_PFunApp)(void *), void *Copy_PParameterApp)
{
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	00 d0       	rcall	.+0      	; 0x131a <TIMER1_enuSetCALLBACK_CTC_ChannelB+0x6>
    131a:	00 d0       	rcall	.+0      	; 0x131c <TIMER1_enuSetCALLBACK_CTC_ChannelB+0x8>
    131c:	0f 92       	push	r0
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	9b 83       	std	Y+3, r25	; 0x03
    1324:	8a 83       	std	Y+2, r24	; 0x02
    1326:	7d 83       	std	Y+5, r23	; 0x05
    1328:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    132e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	08 95       	ret

00001340 <TIMER1_enuSetCALLBACK_ICU>:

ES_t TIMER1_enuSetCALLBACK_ICU(void (*Copy_PFunApp)(void *), void *Copy_PParameterApp)
{
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	00 d0       	rcall	.+0      	; 0x1346 <TIMER1_enuSetCALLBACK_ICU+0x6>
    1346:	00 d0       	rcall	.+0      	; 0x1348 <TIMER1_enuSetCALLBACK_ICU+0x8>
    1348:	0f 92       	push	r0
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	9b 83       	std	Y+3, r25	; 0x03
    1350:	8a 83       	std	Y+2, r24	; 0x02
    1352:	7d 83       	std	Y+5, r23	; 0x05
    1354:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    135a:	89 81       	ldd	r24, Y+1	; 0x01
}
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <TIMER1_enuEnableOVFInterrupt>:

ES_t TIMER1_enuEnableOVFInterrupt(void)
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	0f 92       	push	r0
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    137a:	89 81       	ldd	r24, Y+1	; 0x01
}
    137c:	0f 90       	pop	r0
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <TIMER1_enuEnableCTCInterruptChannelA>:

ES_t TIMER1_enuEnableCTCInterruptChannelA(void)
{
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	0f 92       	push	r0
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    1392:	89 81       	ldd	r24, Y+1	; 0x01
}
    1394:	0f 90       	pop	r0
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <TIMER1_enuEnableCTCInterruptChannelB>:

ES_t TIMER1_enuEnableCTCInterruptChannelB(void)
{
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	0f 92       	push	r0
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ac:	0f 90       	pop	r0
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <TIMER1_enuPrepareICU>:
EDGE_STATE_t ICU_enuEdgeDetect = FAILLING_DETECT;
ICU_STATE_t ICU_enuState = start;
u16 TimeOn = 0, TimeTotal = 0;

ES_t TIMER1_enuPrepareICU(EDGE_STATE_t Copy_enuEdgeState, NOISE_CANCELER_STATE_t Copy_enuNoiseCancelerState)
{
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <TIMER1_enuPrepareICU+0x6>
    13ba:	0f 92       	push	r0
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	8a 83       	std	Y+2, r24	; 0x02
    13c2:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	89 83       	std	Y+1, r24	; 0x01

	/* Mask the three bits of Timer1 Prescaler */
	TCCR1B &= 0xF8;
    13c8:	ae e4       	ldi	r26, 0x4E	; 78
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	ee e4       	ldi	r30, 0x4E	; 78
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	88 7f       	andi	r24, 0xF8	; 248
    13d4:	8c 93       	st	X, r24
	#elif TIMER1_PRES == PRES_8
	TCCR1B &= ~(MASK_BIT << CS10);
	TCCR1B |=  (MASK_BIT << CS11);
	TCCR1B &= ~(MASK_BIT << CS12);
	#elif TIMER1_PRES == PRES_64
	TCCR1B |=  (MASK_BIT << CS10);
    13d6:	ae e4       	ldi	r26, 0x4E	; 78
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	ee e4       	ldi	r30, 0x4E	; 78
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	81 60       	ori	r24, 0x01	; 1
    13e2:	8c 93       	st	X, r24
	TCCR1B |=  (MASK_BIT << CS11);
    13e4:	ae e4       	ldi	r26, 0x4E	; 78
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	ee e4       	ldi	r30, 0x4E	; 78
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	82 60       	ori	r24, 0x02	; 2
    13f0:	8c 93       	st	X, r24
	TCCR1B &= ~(MASK_BIT << CS12);
    13f2:	ae e4       	ldi	r26, 0x4E	; 78
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	ee e4       	ldi	r30, 0x4E	; 78
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	8b 7f       	andi	r24, 0xFB	; 251
    13fe:	8c 93       	st	X, r24
	TCCR1B |=  (MASK_BIT << CS12);
	#else
	#error "Timer1 Prescaler has a wrong configuration"
	#endif
	
	ICU_enuEdgeDetect = Copy_enuEdgeState;
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	80 93 fe 01 	sts	0x01FE, r24
	if(Copy_enuEdgeState == FAILLING_DETECT)
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	88 23       	and	r24, r24
    140a:	41 f4       	brne	.+16     	; 0x141c <TIMER1_enuPrepareICU+0x68>
	{
		TCCR1B &= ~(MASK_BIT << ICES1);
    140c:	ae e4       	ldi	r26, 0x4E	; 78
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	ee e4       	ldi	r30, 0x4E	; 78
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	8f 7b       	andi	r24, 0xBF	; 191
    1418:	8c 93       	st	X, r24
    141a:	0a c0       	rjmp	.+20     	; 0x1430 <TIMER1_enuPrepareICU+0x7c>
	}
	else if (Copy_enuEdgeState == RISING_DETECT)
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	81 30       	cpi	r24, 0x01	; 1
    1420:	39 f4       	brne	.+14     	; 0x1430 <TIMER1_enuPrepareICU+0x7c>
	{
		TCCR1B |=  (MASK_BIT << ICES1);
    1422:	ae e4       	ldi	r26, 0x4E	; 78
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	ee e4       	ldi	r30, 0x4E	; 78
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	80 64       	ori	r24, 0x40	; 64
    142e:	8c 93       	st	X, r24
	}
	
	if(Copy_enuNoiseCancelerState == DISABLE_NOISE_CANCELER)
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	88 23       	and	r24, r24
    1434:	41 f4       	brne	.+16     	; 0x1446 <TIMER1_enuPrepareICU+0x92>
	{
		TCCR1B &= ~(MASK_BIT << ICNC1);
    1436:	ae e4       	ldi	r26, 0x4E	; 78
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	ee e4       	ldi	r30, 0x4E	; 78
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	8f 77       	andi	r24, 0x7F	; 127
    1442:	8c 93       	st	X, r24
    1444:	0a c0       	rjmp	.+20     	; 0x145a <TIMER1_enuPrepareICU+0xa6>
	}
	else if (Copy_enuNoiseCancelerState == ENABLE_NOISE_CANCELER)
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	39 f4       	brne	.+14     	; 0x145a <TIMER1_enuPrepareICU+0xa6>
	{
		TCCR1B |=  (MASK_BIT << ICNC1);
    144c:	ae e4       	ldi	r26, 0x4E	; 78
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	ee e4       	ldi	r30, 0x4E	; 78
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	80 68       	ori	r24, 0x80	; 128
    1458:	8c 93       	st	X, r24
	}

	/* put 0 at the registers as initial value */
	ICR1H = 0;
    145a:	e7 e4       	ldi	r30, 0x47	; 71
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	10 82       	st	Z, r1
	ICR1L = 0;
    1460:	e6 e4       	ldi	r30, 0x46	; 70
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	10 82       	st	Z, r1
	TCNT1H = 0;
    1466:	ed e4       	ldi	r30, 0x4D	; 77
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	10 82       	st	Z, r1
	TCNT1L = 0;
    146c:	ec e4       	ldi	r30, 0x4C	; 76
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	10 82       	st	Z, r1
	
	Local_enuErrorState = ES_OK;
    1472:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    1474:	89 81       	ldd	r24, Y+1	; 0x01
}
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <TIMER1_enuCalculateICUResults>:

ES_t TIMER1_enuCalculateICUResults(f32 *Copy_Pf32Frequency, f32 *Copy_Pf32DutyCycle)
{
    1482:	ef 92       	push	r14
    1484:	ff 92       	push	r15
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	29 97       	sbiw	r28, 0x09	; 9
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	9f 83       	std	Y+7, r25	; 0x07
    14a0:	8e 83       	std	Y+6, r24	; 0x06
    14a2:	79 87       	std	Y+9, r23	; 0x09
    14a4:	68 87       	std	Y+8, r22	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	8d 83       	std	Y+5, r24	; 0x05
	
	f32 Local_f32Time = 0;
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	a0 e0       	ldi	r26, 0x00	; 0
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	9a 83       	std	Y+2, r25	; 0x02
    14b6:	ab 83       	std	Y+3, r26	; 0x03
    14b8:	bc 83       	std	Y+4, r27	; 0x04

	if(Copy_Pf32DutyCycle != NULL && Copy_Pf32Frequency != NULL)
    14ba:	88 85       	ldd	r24, Y+8	; 0x08
    14bc:	99 85       	ldd	r25, Y+9	; 0x09
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <TIMER1_enuCalculateICUResults+0x42>
    14c2:	75 c0       	rjmp	.+234    	; 0x15ae <TIMER1_enuCalculateICUResults+0x12c>
    14c4:	8e 81       	ldd	r24, Y+6	; 0x06
    14c6:	9f 81       	ldd	r25, Y+7	; 0x07
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	09 f4       	brne	.+2      	; 0x14ce <TIMER1_enuCalculateICUResults+0x4c>
    14cc:	70 c0       	rjmp	.+224    	; 0x15ae <TIMER1_enuCalculateICUResults+0x12c>
	{
		if(ICU_enuState == Off)
    14ce:	80 91 ff 01 	lds	r24, 0x01FF
    14d2:	83 30       	cpi	r24, 0x03	; 3
    14d4:	09 f0       	breq	.+2      	; 0x14d8 <TIMER1_enuCalculateICUResults+0x56>
    14d6:	6d c0       	rjmp	.+218    	; 0x15b2 <TIMER1_enuCalculateICUResults+0x130>
		{
			*Copy_Pf32DutyCycle = (f32)(TimeOn * 100.0 / TimeTotal);
    14d8:	80 91 00 02 	lds	r24, 0x0200
    14dc:	90 91 01 02 	lds	r25, 0x0201
    14e0:	cc 01       	movw	r24, r24
    14e2:	a0 e0       	ldi	r26, 0x00	; 0
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	bc 01       	movw	r22, r24
    14e8:	cd 01       	movw	r24, r26
    14ea:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	bc 01       	movw	r22, r24
    14f4:	cd 01       	movw	r24, r26
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	48 ec       	ldi	r20, 0xC8	; 200
    14fc:	52 e4       	ldi	r21, 0x42	; 66
    14fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	7c 01       	movw	r14, r24
    1508:	8d 01       	movw	r16, r26
    150a:	80 91 02 02 	lds	r24, 0x0202
    150e:	90 91 03 02 	lds	r25, 0x0203
    1512:	cc 01       	movw	r24, r24
    1514:	a0 e0       	ldi	r26, 0x00	; 0
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	bc 01       	movw	r22, r24
    151a:	cd 01       	movw	r24, r26
    151c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1520:	9b 01       	movw	r18, r22
    1522:	ac 01       	movw	r20, r24
    1524:	c8 01       	movw	r24, r16
    1526:	b7 01       	movw	r22, r14
    1528:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	e8 85       	ldd	r30, Y+8	; 0x08
    1532:	f9 85       	ldd	r31, Y+9	; 0x09
    1534:	80 83       	st	Z, r24
    1536:	91 83       	std	Z+1, r25	; 0x01
    1538:	a2 83       	std	Z+2, r26	; 0x02
    153a:	b3 83       	std	Z+3, r27	; 0x03
			Local_f32Time = ((f32)((TimeTotal * TIMER1_PRES) / (F_SYSTEM * 1000.0)));
    153c:	80 91 02 02 	lds	r24, 0x0202
    1540:	90 91 03 02 	lds	r25, 0x0203
    1544:	00 24       	eor	r0, r0
    1546:	96 95       	lsr	r25
    1548:	87 95       	ror	r24
    154a:	07 94       	ror	r0
    154c:	96 95       	lsr	r25
    154e:	87 95       	ror	r24
    1550:	07 94       	ror	r0
    1552:	98 2f       	mov	r25, r24
    1554:	80 2d       	mov	r24, r0
    1556:	cc 01       	movw	r24, r24
    1558:	a0 e0       	ldi	r26, 0x00	; 0
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	bc 01       	movw	r22, r24
    155e:	cd 01       	movw	r24, r26
    1560:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	bc 01       	movw	r22, r24
    156a:	cd 01       	movw	r24, r26
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	34 e2       	ldi	r19, 0x24	; 36
    1570:	44 e7       	ldi	r20, 0x74	; 116
    1572:	59 e4       	ldi	r21, 0x49	; 73
    1574:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	89 83       	std	Y+1, r24	; 0x01
    157e:	9a 83       	std	Y+2, r25	; 0x02
    1580:	ab 83       	std	Y+3, r26	; 0x03
    1582:	bc 83       	std	Y+4, r27	; 0x04
			*Copy_Pf32Frequency = ((f32)(1.0 / Local_f32Time));
    1584:	60 e0       	ldi	r22, 0x00	; 0
    1586:	70 e0       	ldi	r23, 0x00	; 0
    1588:	80 e8       	ldi	r24, 0x80	; 128
    158a:	9f e3       	ldi	r25, 0x3F	; 63
    158c:	29 81       	ldd	r18, Y+1	; 0x01
    158e:	3a 81       	ldd	r19, Y+2	; 0x02
    1590:	4b 81       	ldd	r20, Y+3	; 0x03
    1592:	5c 81       	ldd	r21, Y+4	; 0x04
    1594:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	ee 81       	ldd	r30, Y+6	; 0x06
    159e:	ff 81       	ldd	r31, Y+7	; 0x07
    15a0:	80 83       	st	Z, r24
    15a2:	91 83       	std	Z+1, r25	; 0x01
    15a4:	a2 83       	std	Z+2, r26	; 0x02
    15a6:	b3 83       	std	Z+3, r27	; 0x03
			
			ICU_enuState = start;
    15a8:	10 92 ff 01 	sts	0x01FF, r1
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <TIMER1_enuCalculateICUResults+0x130>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    15ae:	82 e0       	ldi	r24, 0x02	; 2
    15b0:	8d 83       	std	Y+5, r24	; 0x05
	}

	return Local_enuErrorState;
    15b2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    15b4:	29 96       	adiw	r28, 0x09	; 9
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	f8 94       	cli
    15ba:	de bf       	out	0x3e, r29	; 62
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	cd bf       	out	0x3d, r28	; 61
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	1f 91       	pop	r17
    15c6:	0f 91       	pop	r16
    15c8:	ff 90       	pop	r15
    15ca:	ef 90       	pop	r14
    15cc:	08 95       	ret

000015ce <TIMER1_enuEnableInputCaptureUnitInterrupt>:


ES_t TIMER1_enuEnableInputCaptureUnitInterrupt(void)
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	0f 92       	push	r0
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	89 83       	std	Y+1, r24	; 0x01

	TIMSK |= (MASK_BIT << TICIE1);
    15dc:	a9 e5       	ldi	r26, 0x59	; 89
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e9 e5       	ldi	r30, 0x59	; 89
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	80 62       	ori	r24, 0x20	; 32
    15e8:	8c 93       	st	X, r24

	Local_enuErrorState = ES_OK;
    15ea:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ee:	0f 90       	pop	r0
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <__vector_6>:

ISR(VECT_TIMER1_ICU)
{
    15f6:	1f 92       	push	r1
    15f8:	0f 92       	push	r0
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	0f 92       	push	r0
    15fe:	11 24       	eor	r1, r1
    1600:	2f 93       	push	r18
    1602:	3f 93       	push	r19
    1604:	8f 93       	push	r24
    1606:	9f 93       	push	r25
    1608:	af 93       	push	r26
    160a:	bf 93       	push	r27
    160c:	ef 93       	push	r30
    160e:	ff 93       	push	r31
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	00 d0       	rcall	.+0      	; 0x1616 <__vector_6+0x20>
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
	if(ICU_enuState == start)
    161a:	80 91 ff 01 	lds	r24, 0x01FF
    161e:	88 23       	and	r24, r24
    1620:	89 f5       	brne	.+98     	; 0x1684 <__vector_6+0x8e>
	{
		/* put 0 at the registers as initial value */
		ICR1H = 0;
    1622:	e7 e4       	ldi	r30, 0x47	; 71
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	10 82       	st	Z, r1
		ICR1L = 0;
    1628:	e6 e4       	ldi	r30, 0x46	; 70
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	10 82       	st	Z, r1
		TCNT1H = 0;
    162e:	ed e4       	ldi	r30, 0x4D	; 77
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	10 82       	st	Z, r1
		TCNT1L = 0;
    1634:	ec e4       	ldi	r30, 0x4C	; 76
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	10 82       	st	Z, r1
		
		ICU_enuEdgeDetect = !ICU_enuEdgeDetect;
    163a:	80 91 fe 01 	lds	r24, 0x01FE
    163e:	1a 82       	std	Y+2, r1	; 0x02
    1640:	88 23       	and	r24, r24
    1642:	11 f4       	brne	.+4      	; 0x1648 <__vector_6+0x52>
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	8a 83       	std	Y+2, r24	; 0x02
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	80 93 fe 01 	sts	0x01FE, r24
		if(ICU_enuEdgeDetect == FAILLING_DETECT)
    164e:	80 91 fe 01 	lds	r24, 0x01FE
    1652:	88 23       	and	r24, r24
    1654:	41 f4       	brne	.+16     	; 0x1666 <__vector_6+0x70>
		{
			TCCR1B &= ~(MASK_BIT << ICES1);
    1656:	ae e4       	ldi	r26, 0x4E	; 78
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	ee e4       	ldi	r30, 0x4E	; 78
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	8f 7b       	andi	r24, 0xBF	; 191
    1662:	8c 93       	st	X, r24
    1664:	0b c0       	rjmp	.+22     	; 0x167c <__vector_6+0x86>
		}
		else if (ICU_enuEdgeDetect == RISING_DETECT)
    1666:	80 91 fe 01 	lds	r24, 0x01FE
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	39 f4       	brne	.+14     	; 0x167c <__vector_6+0x86>
		{
			TCCR1B |=  (MASK_BIT << ICES1);
    166e:	ae e4       	ldi	r26, 0x4E	; 78
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	ee e4       	ldi	r30, 0x4E	; 78
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	80 64       	ori	r24, 0x40	; 64
    167a:	8c 93       	st	X, r24
		}
		
		ICU_enuState = Ton;
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	80 93 ff 01 	sts	0x01FF, r24
    1682:	67 c0       	rjmp	.+206    	; 0x1752 <__vector_6+0x15c>
	}
	else if(ICU_enuState == Ton)
    1684:	80 91 ff 01 	lds	r24, 0x01FF
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	09 f0       	breq	.+2      	; 0x168e <__vector_6+0x98>
    168c:	40 c0       	rjmp	.+128    	; 0x170e <__vector_6+0x118>
	{
		TimeOn = ICR1L;
    168e:	e6 e4       	ldi	r30, 0x46	; 70
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	88 2f       	mov	r24, r24
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	90 93 01 02 	sts	0x0201, r25
    169c:	80 93 00 02 	sts	0x0200, r24
		TimeOn |= ((u16)(ICR1H << 8));
    16a0:	e7 e4       	ldi	r30, 0x47	; 71
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	88 2f       	mov	r24, r24
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	98 2f       	mov	r25, r24
    16ac:	88 27       	eor	r24, r24
    16ae:	9c 01       	movw	r18, r24
    16b0:	80 91 00 02 	lds	r24, 0x0200
    16b4:	90 91 01 02 	lds	r25, 0x0201
    16b8:	82 2b       	or	r24, r18
    16ba:	93 2b       	or	r25, r19
    16bc:	90 93 01 02 	sts	0x0201, r25
    16c0:	80 93 00 02 	sts	0x0200, r24
		
		ICU_enuEdgeDetect = !ICU_enuEdgeDetect;
    16c4:	80 91 fe 01 	lds	r24, 0x01FE
    16c8:	19 82       	std	Y+1, r1	; 0x01
    16ca:	88 23       	and	r24, r24
    16cc:	11 f4       	brne	.+4      	; 0x16d2 <__vector_6+0xdc>
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	89 83       	std	Y+1, r24	; 0x01
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	80 93 fe 01 	sts	0x01FE, r24
		if(ICU_enuEdgeDetect == FAILLING_DETECT)
    16d8:	80 91 fe 01 	lds	r24, 0x01FE
    16dc:	88 23       	and	r24, r24
    16de:	41 f4       	brne	.+16     	; 0x16f0 <__vector_6+0xfa>
		{
			TCCR1B &= ~(MASK_BIT << ICES1);
    16e0:	ae e4       	ldi	r26, 0x4E	; 78
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	ee e4       	ldi	r30, 0x4E	; 78
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	8f 7b       	andi	r24, 0xBF	; 191
    16ec:	8c 93       	st	X, r24
    16ee:	0b c0       	rjmp	.+22     	; 0x1706 <__vector_6+0x110>
		}
		else if (ICU_enuEdgeDetect == RISING_DETECT)
    16f0:	80 91 fe 01 	lds	r24, 0x01FE
    16f4:	81 30       	cpi	r24, 0x01	; 1
    16f6:	39 f4       	brne	.+14     	; 0x1706 <__vector_6+0x110>
		{
			TCCR1B |=  (MASK_BIT << ICES1);
    16f8:	ae e4       	ldi	r26, 0x4E	; 78
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	ee e4       	ldi	r30, 0x4E	; 78
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	80 64       	ori	r24, 0x40	; 64
    1704:	8c 93       	st	X, r24
		}
		
		ICU_enuState = Ttotal;
    1706:	82 e0       	ldi	r24, 0x02	; 2
    1708:	80 93 ff 01 	sts	0x01FF, r24
    170c:	22 c0       	rjmp	.+68     	; 0x1752 <__vector_6+0x15c>
	}
	else if(ICU_enuState == Ttotal)
    170e:	80 91 ff 01 	lds	r24, 0x01FF
    1712:	82 30       	cpi	r24, 0x02	; 2
    1714:	f1 f4       	brne	.+60     	; 0x1752 <__vector_6+0x15c>
	{
		TimeTotal = ICR1L;
    1716:	e6 e4       	ldi	r30, 0x46	; 70
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	88 2f       	mov	r24, r24
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	90 93 03 02 	sts	0x0203, r25
    1724:	80 93 02 02 	sts	0x0202, r24
		TimeTotal |= ((u16)(ICR1H << 8));
    1728:	e7 e4       	ldi	r30, 0x47	; 71
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	88 2f       	mov	r24, r24
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	98 2f       	mov	r25, r24
    1734:	88 27       	eor	r24, r24
    1736:	9c 01       	movw	r18, r24
    1738:	80 91 02 02 	lds	r24, 0x0202
    173c:	90 91 03 02 	lds	r25, 0x0203
    1740:	82 2b       	or	r24, r18
    1742:	93 2b       	or	r25, r19
    1744:	90 93 03 02 	sts	0x0203, r25
    1748:	80 93 02 02 	sts	0x0202, r24
		
		ICU_enuState = Off;
    174c:	83 e0       	ldi	r24, 0x03	; 3
    174e:	80 93 ff 01 	sts	0x01FF, r24
	}
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	ff 91       	pop	r31
    175c:	ef 91       	pop	r30
    175e:	bf 91       	pop	r27
    1760:	af 91       	pop	r26
    1762:	9f 91       	pop	r25
    1764:	8f 91       	pop	r24
    1766:	3f 91       	pop	r19
    1768:	2f 91       	pop	r18
    176a:	0f 90       	pop	r0
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	0f 90       	pop	r0
    1770:	1f 90       	pop	r1
    1772:	18 95       	reti

00001774 <TIMER0_enuInit>:
u8 TIMER0_PRELOAD = 0;
u32 TIMER0_NUM_OVF = 0;
f32 TIMER0_f32OC0Value = 0;

ES_t TIMER0_enuInit(void)
{
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	0f 92       	push	r0
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	89 83       	std	Y+1, r24	; 0x01
	
	/* Mask the two bits of Wave Generation Mode */
	TCCR0 &= WGM_MASK;
    1782:	a3 e5       	ldi	r26, 0x53	; 83
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e3 e5       	ldi	r30, 0x53	; 83
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	87 7b       	andi	r24, 0xB7	; 183
    178e:	8c 93       	st	X, r24
	
	#if TIMER0_MODE == OVF
	TCCR0 &= ~(MASK_BIT << WGM00);
    1790:	a3 e5       	ldi	r26, 0x53	; 83
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e3 e5       	ldi	r30, 0x53	; 83
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	8f 7b       	andi	r24, 0xBF	; 191
    179c:	8c 93       	st	X, r24
	TCCR0 &= ~(MASK_BIT << WGM01);
    179e:	a3 e5       	ldi	r26, 0x53	; 83
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e3 e5       	ldi	r30, 0x53	; 83
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	87 7f       	andi	r24, 0xF7	; 247
    17aa:	8c 93       	st	X, r24
	#else
	#error "Timer0 Mode has a wrong configuration"
	#endif
	
	/* Mask the three bits of Timer0 Prescaler */
	TCCR0 &= PRESCALER_MASK;
    17ac:	a3 e5       	ldi	r26, 0x53	; 83
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e3 e5       	ldi	r30, 0x53	; 83
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	88 7f       	andi	r24, 0xF8	; 248
    17b8:	8c 93       	st	X, r24
	#elif TIMER0_PRES == PRES_256
	TCCR0 &= ~(MASK_BIT << CS00);
	TCCR0 &= ~(MASK_BIT << CS01);
	TCCR0 |=  (MASK_BIT << CS02);
	#elif TIMER0_PRES == PRES_1024
	TCCR0 |=  (MASK_BIT << CS00);
    17ba:	a3 e5       	ldi	r26, 0x53	; 83
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e3 e5       	ldi	r30, 0x53	; 83
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	81 60       	ori	r24, 0x01	; 1
    17c6:	8c 93       	st	X, r24
	TCCR0 &= ~(MASK_BIT << CS01);
    17c8:	a3 e5       	ldi	r26, 0x53	; 83
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e3 e5       	ldi	r30, 0x53	; 83
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	8d 7f       	andi	r24, 0xFD	; 253
    17d4:	8c 93       	st	X, r24
	TCCR0 |=  (MASK_BIT << CS02);
    17d6:	a3 e5       	ldi	r26, 0x53	; 83
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e3 e5       	ldi	r30, 0x53	; 83
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	84 60       	ori	r24, 0x04	; 4
    17e2:	8c 93       	st	X, r24
	#else
	#error "Timer0 Prescaler has a wrong configuration"
	#endif
	
	/* Mask the two bits of Output Compare Pin (OC0) */
	TCCR0 &= COM_OC0_MASK;
    17e4:	a3 e5       	ldi	r26, 0x53	; 83
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e3 e5       	ldi	r30, 0x53	; 83
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	8f 7c       	andi	r24, 0xCF	; 207
    17f0:	8c 93       	st	X, r24
	
	#if OC0_MODE == DISCONNECTED
	TCCR0 &= ~(MASK_BIT << COM00);
    17f2:	a3 e5       	ldi	r26, 0x53	; 83
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e3 e5       	ldi	r30, 0x53	; 83
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	8f 7e       	andi	r24, 0xEF	; 239
    17fe:	8c 93       	st	X, r24
	TCCR0 &= ~(MASK_BIT << COM01);
    1800:	a3 e5       	ldi	r26, 0x53	; 83
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e3 e5       	ldi	r30, 0x53	; 83
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	8f 7d       	andi	r24, 0xDF	; 223
    180c:	8c 93       	st	X, r24
	TCCR0 |=  (MASK_BIT << COM01);
	#else
	#error "OC0 has a wrong configuration"
	#endif
	
	Local_enuErrorState = ES_OK;
    180e:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    1810:	89 81       	ldd	r24, Y+1	; 0x01
}
    1812:	0f 90       	pop	r0
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <TIMER0_enuDelayMilliSecondSyn>:

ES_t TIMER0_enuDelayMilliSecondSyn(u32 Copy_u32DelayTime_ms)
{
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	66 97       	sbiw	r28, 0x16	; 22
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	6b 8b       	std	Y+19, r22	; 0x13
    1830:	7c 8b       	std	Y+20, r23	; 0x14
    1832:	8d 8b       	std	Y+21, r24	; 0x15
    1834:	9e 8b       	std	Y+22, r25	; 0x16
	ES_t Local_enuErrorState = ES_NOK;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	8a 8b       	std	Y+18, r24	; 0x12
	
	f32 Local_f32TimeOverFlow = 256.0 * TIMER0_PRES / F_SYSTEM;
    183a:	8f e6       	ldi	r24, 0x6F	; 111
    183c:	92 e1       	ldi	r25, 0x12	; 18
    183e:	a3 e8       	ldi	r26, 0x83	; 131
    1840:	b3 e4       	ldi	r27, 0x43	; 67
    1842:	8e 87       	std	Y+14, r24	; 0x0e
    1844:	9f 87       	std	Y+15, r25	; 0x0f
    1846:	a8 8b       	std	Y+16, r26	; 0x10
    1848:	b9 8b       	std	Y+17, r27	; 0x11
	f32 Local_f32Num_OVF_FLOAT = (f32)Copy_u32DelayTime_ms / Local_f32TimeOverFlow;
    184a:	6b 89       	ldd	r22, Y+19	; 0x13
    184c:	7c 89       	ldd	r23, Y+20	; 0x14
    184e:	8d 89       	ldd	r24, Y+21	; 0x15
    1850:	9e 89       	ldd	r25, Y+22	; 0x16
    1852:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	bc 01       	movw	r22, r24
    185c:	cd 01       	movw	r24, r26
    185e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1860:	3f 85       	ldd	r19, Y+15	; 0x0f
    1862:	48 89       	ldd	r20, Y+16	; 0x10
    1864:	59 89       	ldd	r21, Y+17	; 0x11
    1866:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	8a 87       	std	Y+10, r24	; 0x0a
    1870:	9b 87       	std	Y+11, r25	; 0x0b
    1872:	ac 87       	std	Y+12, r26	; 0x0c
    1874:	bd 87       	std	Y+13, r27	; 0x0d
	
	if((Local_f32Num_OVF_FLOAT - (u32)Local_f32Num_OVF_FLOAT) != 0.0)
    1876:	6a 85       	ldd	r22, Y+10	; 0x0a
    1878:	7b 85       	ldd	r23, Y+11	; 0x0b
    187a:	8c 85       	ldd	r24, Y+12	; 0x0c
    187c:	9d 85       	ldd	r25, Y+13	; 0x0d
    187e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	bc 01       	movw	r22, r24
    1888:	cd 01       	movw	r24, r26
    188a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    188e:	9b 01       	movw	r18, r22
    1890:	ac 01       	movw	r20, r24
    1892:	6a 85       	ldd	r22, Y+10	; 0x0a
    1894:	7b 85       	ldd	r23, Y+11	; 0x0b
    1896:	8c 85       	ldd	r24, Y+12	; 0x0c
    1898:	9d 85       	ldd	r25, Y+13	; 0x0d
    189a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	bc 01       	movw	r22, r24
    18a4:	cd 01       	movw	r24, r26
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e0       	ldi	r20, 0x00	; 0
    18ac:	50 e0       	ldi	r21, 0x00	; 0
    18ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    18b2:	88 23       	and	r24, r24
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <TIMER0_enuDelayMilliSecondSyn+0x9e>
    18b6:	6f c0       	rjmp	.+222    	; 0x1996 <TIMER0_enuDelayMilliSecondSyn+0x17c>
	{
		u32 Local_u32Num_OVF_INT = (u32)Local_f32Num_OVF_FLOAT + 1;
    18b8:	6a 85       	ldd	r22, Y+10	; 0x0a
    18ba:	7b 85       	ldd	r23, Y+11	; 0x0b
    18bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    18be:	9d 85       	ldd	r25, Y+13	; 0x0d
    18c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	01 96       	adiw	r24, 0x01	; 1
    18ca:	a1 1d       	adc	r26, r1
    18cc:	b1 1d       	adc	r27, r1
    18ce:	8e 83       	std	Y+6, r24	; 0x06
    18d0:	9f 83       	std	Y+7, r25	; 0x07
    18d2:	a8 87       	std	Y+8, r26	; 0x08
    18d4:	b9 87       	std	Y+9, r27	; 0x09
		Local_f32Num_OVF_FLOAT = Local_f32Num_OVF_FLOAT - (u32)Local_f32Num_OVF_FLOAT;
    18d6:	6a 85       	ldd	r22, Y+10	; 0x0a
    18d8:	7b 85       	ldd	r23, Y+11	; 0x0b
    18da:	8c 85       	ldd	r24, Y+12	; 0x0c
    18dc:	9d 85       	ldd	r25, Y+13	; 0x0d
    18de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	bc 01       	movw	r22, r24
    18e8:	cd 01       	movw	r24, r26
    18ea:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    18ee:	9b 01       	movw	r18, r22
    18f0:	ac 01       	movw	r20, r24
    18f2:	6a 85       	ldd	r22, Y+10	; 0x0a
    18f4:	7b 85       	ldd	r23, Y+11	; 0x0b
    18f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    18f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    18fa:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	8a 87       	std	Y+10, r24	; 0x0a
    1904:	9b 87       	std	Y+11, r25	; 0x0b
    1906:	ac 87       	std	Y+12, r26	; 0x0c
    1908:	bd 87       	std	Y+13, r27	; 0x0d
		u8 Local_u32PreLoad = 256 - (256 * Local_f32Num_OVF_FLOAT);
    190a:	6a 85       	ldd	r22, Y+10	; 0x0a
    190c:	7b 85       	ldd	r23, Y+11	; 0x0b
    190e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1910:	9d 85       	ldd	r25, Y+13	; 0x0d
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	40 e8       	ldi	r20, 0x80	; 128
    1918:	53 ec       	ldi	r21, 0xC3	; 195
    191a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	bc 01       	movw	r22, r24
    1924:	cd 01       	movw	r24, r26
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e8       	ldi	r20, 0x80	; 128
    192c:	53 e4       	ldi	r21, 0x43	; 67
    192e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	bc 01       	movw	r22, r24
    1938:	cd 01       	movw	r24, r26
    193a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	8d 83       	std	Y+5, r24	; 0x05
		TCNT0 = Local_u32PreLoad;
    1944:	e2 e5       	ldi	r30, 0x52	; 82
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	8d 81       	ldd	r24, Y+5	; 0x05
    194a:	80 83       	st	Z, r24
    194c:	1b c0       	rjmp	.+54     	; 0x1984 <TIMER0_enuDelayMilliSecondSyn+0x16a>
		while(Local_u32Num_OVF_INT)
		{
			while(!((TIFR >> TOV0) & MASK_BIT));
    194e:	e8 e5       	ldi	r30, 0x58	; 88
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	88 2f       	mov	r24, r24
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	81 70       	andi	r24, 0x01	; 1
    195a:	90 70       	andi	r25, 0x00	; 0
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	b9 f3       	breq	.-18     	; 0x194e <TIMER0_enuDelayMilliSecondSyn+0x134>
			TIFR |= (MASK_BIT << TOV0);
    1960:	a8 e5       	ldi	r26, 0x58	; 88
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e8 e5       	ldi	r30, 0x58	; 88
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	81 60       	ori	r24, 0x01	; 1
    196c:	8c 93       	st	X, r24
			Local_u32Num_OVF_INT--;
    196e:	8e 81       	ldd	r24, Y+6	; 0x06
    1970:	9f 81       	ldd	r25, Y+7	; 0x07
    1972:	a8 85       	ldd	r26, Y+8	; 0x08
    1974:	b9 85       	ldd	r27, Y+9	; 0x09
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	a1 09       	sbc	r26, r1
    197a:	b1 09       	sbc	r27, r1
    197c:	8e 83       	std	Y+6, r24	; 0x06
    197e:	9f 83       	std	Y+7, r25	; 0x07
    1980:	a8 87       	std	Y+8, r26	; 0x08
    1982:	b9 87       	std	Y+9, r27	; 0x09
	{
		u32 Local_u32Num_OVF_INT = (u32)Local_f32Num_OVF_FLOAT + 1;
		Local_f32Num_OVF_FLOAT = Local_f32Num_OVF_FLOAT - (u32)Local_f32Num_OVF_FLOAT;
		u8 Local_u32PreLoad = 256 - (256 * Local_f32Num_OVF_FLOAT);
		TCNT0 = Local_u32PreLoad;
		while(Local_u32Num_OVF_INT)
    1984:	8e 81       	ldd	r24, Y+6	; 0x06
    1986:	9f 81       	ldd	r25, Y+7	; 0x07
    1988:	a8 85       	ldd	r26, Y+8	; 0x08
    198a:	b9 85       	ldd	r27, Y+9	; 0x09
    198c:	00 97       	sbiw	r24, 0x00	; 0
    198e:	a1 05       	cpc	r26, r1
    1990:	b1 05       	cpc	r27, r1
    1992:	e9 f6       	brne	.-70     	; 0x194e <TIMER0_enuDelayMilliSecondSyn+0x134>
    1994:	30 c0       	rjmp	.+96     	; 0x19f6 <TIMER0_enuDelayMilliSecondSyn+0x1dc>
			Local_u32Num_OVF_INT--;
		}	
	}
	else
	{
		u32 Local_u32Num_OVF_INT = (u32)Local_f32TimeOverFlow;
    1996:	6e 85       	ldd	r22, Y+14	; 0x0e
    1998:	7f 85       	ldd	r23, Y+15	; 0x0f
    199a:	88 89       	ldd	r24, Y+16	; 0x10
    199c:	99 89       	ldd	r25, Y+17	; 0x11
    199e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	89 83       	std	Y+1, r24	; 0x01
    19a8:	9a 83       	std	Y+2, r25	; 0x02
    19aa:	ab 83       	std	Y+3, r26	; 0x03
    19ac:	bc 83       	std	Y+4, r27	; 0x04
    19ae:	1b c0       	rjmp	.+54     	; 0x19e6 <TIMER0_enuDelayMilliSecondSyn+0x1cc>
		while(Local_u32Num_OVF_INT)
		{
			while(!((TIFR >> TOV0) & MASK_BIT));
    19b0:	e8 e5       	ldi	r30, 0x58	; 88
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	88 2f       	mov	r24, r24
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	81 70       	andi	r24, 0x01	; 1
    19bc:	90 70       	andi	r25, 0x00	; 0
    19be:	00 97       	sbiw	r24, 0x00	; 0
    19c0:	b9 f3       	breq	.-18     	; 0x19b0 <TIMER0_enuDelayMilliSecondSyn+0x196>
			TIFR |= (MASK_BIT << TOV0);
    19c2:	a8 e5       	ldi	r26, 0x58	; 88
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	e8 e5       	ldi	r30, 0x58	; 88
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	81 60       	ori	r24, 0x01	; 1
    19ce:	8c 93       	st	X, r24
			Local_u32Num_OVF_INT--;
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	9a 81       	ldd	r25, Y+2	; 0x02
    19d4:	ab 81       	ldd	r26, Y+3	; 0x03
    19d6:	bc 81       	ldd	r27, Y+4	; 0x04
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	a1 09       	sbc	r26, r1
    19dc:	b1 09       	sbc	r27, r1
    19de:	89 83       	std	Y+1, r24	; 0x01
    19e0:	9a 83       	std	Y+2, r25	; 0x02
    19e2:	ab 83       	std	Y+3, r26	; 0x03
    19e4:	bc 83       	std	Y+4, r27	; 0x04
		}	
	}
	else
	{
		u32 Local_u32Num_OVF_INT = (u32)Local_f32TimeOverFlow;
		while(Local_u32Num_OVF_INT)
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
    19e8:	9a 81       	ldd	r25, Y+2	; 0x02
    19ea:	ab 81       	ldd	r26, Y+3	; 0x03
    19ec:	bc 81       	ldd	r27, Y+4	; 0x04
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	a1 05       	cpc	r26, r1
    19f2:	b1 05       	cpc	r27, r1
    19f4:	e9 f6       	brne	.-70     	; 0x19b0 <TIMER0_enuDelayMilliSecondSyn+0x196>
			TIFR |= (MASK_BIT << TOV0);
			Local_u32Num_OVF_INT--;
		}
	}
	
	Local_enuErrorState = ES_OK;
    19f6:	1a 8a       	std	Y+18, r1	; 0x12
	return Local_enuErrorState;
    19f8:	8a 89       	ldd	r24, Y+18	; 0x12
}
    19fa:	66 96       	adiw	r28, 0x16	; 22
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	08 95       	ret

00001a0c <TIMER0_enuDelayMilliSecondASyn>:

ES_t TIMER0_enuDelayMilliSecondASyn(u32 Copy_u32DelayTime_ms, void (*Copy_PFunApp)(void *), void *Copy_PParameterApp)
{
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	66 97       	sbiw	r28, 0x16	; 22
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	6f 87       	std	Y+15, r22	; 0x0f
    1a22:	78 8b       	std	Y+16, r23	; 0x10
    1a24:	89 8b       	std	Y+17, r24	; 0x11
    1a26:	9a 8b       	std	Y+18, r25	; 0x12
    1a28:	5c 8b       	std	Y+20, r21	; 0x14
    1a2a:	4b 8b       	std	Y+19, r20	; 0x13
    1a2c:	3e 8b       	std	Y+22, r19	; 0x16
    1a2e:	2d 8b       	std	Y+21, r18	; 0x15
	ES_t Local_enuErrorState = ES_NOK;
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	8e 87       	std	Y+14, r24	; 0x0e
	
	TIMSK &= ~(MASK_BIT << TOIE0);
    1a34:	a9 e5       	ldi	r26, 0x59	; 89
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	e9 e5       	ldi	r30, 0x59	; 89
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	8e 7f       	andi	r24, 0xFE	; 254
    1a40:	8c 93       	st	X, r24
	
	f32 Local_f32TimeOverFlow = 256.0 * TIMER0_PRES / F_SYSTEM;
    1a42:	8f e6       	ldi	r24, 0x6F	; 111
    1a44:	92 e1       	ldi	r25, 0x12	; 18
    1a46:	a3 e8       	ldi	r26, 0x83	; 131
    1a48:	b3 e4       	ldi	r27, 0x43	; 67
    1a4a:	8a 87       	std	Y+10, r24	; 0x0a
    1a4c:	9b 87       	std	Y+11, r25	; 0x0b
    1a4e:	ac 87       	std	Y+12, r26	; 0x0c
    1a50:	bd 87       	std	Y+13, r27	; 0x0d
	f32 Local_f32Num_OVF_FLOAT = (f32)Copy_u32DelayTime_ms / Local_f32TimeOverFlow;
    1a52:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a54:	78 89       	ldd	r23, Y+16	; 0x10
    1a56:	89 89       	ldd	r24, Y+17	; 0x11
    1a58:	9a 89       	ldd	r25, Y+18	; 0x12
    1a5a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	bc 01       	movw	r22, r24
    1a64:	cd 01       	movw	r24, r26
    1a66:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a68:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a6a:	4c 85       	ldd	r20, Y+12	; 0x0c
    1a6c:	5d 85       	ldd	r21, Y+13	; 0x0d
    1a6e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	8e 83       	std	Y+6, r24	; 0x06
    1a78:	9f 83       	std	Y+7, r25	; 0x07
    1a7a:	a8 87       	std	Y+8, r26	; 0x08
    1a7c:	b9 87       	std	Y+9, r27	; 0x09
	
	if((Local_f32Num_OVF_FLOAT - (u32)Local_f32Num_OVF_FLOAT) != 0.0)
    1a7e:	6e 81       	ldd	r22, Y+6	; 0x06
    1a80:	7f 81       	ldd	r23, Y+7	; 0x07
    1a82:	88 85       	ldd	r24, Y+8	; 0x08
    1a84:	99 85       	ldd	r25, Y+9	; 0x09
    1a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	bc 01       	movw	r22, r24
    1a90:	cd 01       	movw	r24, r26
    1a92:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1a96:	9b 01       	movw	r18, r22
    1a98:	ac 01       	movw	r20, r24
    1a9a:	6e 81       	ldd	r22, Y+6	; 0x06
    1a9c:	7f 81       	ldd	r23, Y+7	; 0x07
    1a9e:	88 85       	ldd	r24, Y+8	; 0x08
    1aa0:	99 85       	ldd	r25, Y+9	; 0x09
    1aa2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	bc 01       	movw	r22, r24
    1aac:	cd 01       	movw	r24, r26
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e0       	ldi	r20, 0x00	; 0
    1ab4:	50 e0       	ldi	r21, 0x00	; 0
    1ab6:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    1aba:	88 23       	and	r24, r24
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <TIMER0_enuDelayMilliSecondASyn+0xb4>
    1abe:	5b c0       	rjmp	.+182    	; 0x1b76 <TIMER0_enuDelayMilliSecondASyn+0x16a>
	{
		u32 Local_u32Num_OVF_INT = (u32)Local_f32Num_OVF_FLOAT + 1;
    1ac0:	6e 81       	ldd	r22, Y+6	; 0x06
    1ac2:	7f 81       	ldd	r23, Y+7	; 0x07
    1ac4:	88 85       	ldd	r24, Y+8	; 0x08
    1ac6:	99 85       	ldd	r25, Y+9	; 0x09
    1ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	01 96       	adiw	r24, 0x01	; 1
    1ad2:	a1 1d       	adc	r26, r1
    1ad4:	b1 1d       	adc	r27, r1
    1ad6:	8a 83       	std	Y+2, r24	; 0x02
    1ad8:	9b 83       	std	Y+3, r25	; 0x03
    1ada:	ac 83       	std	Y+4, r26	; 0x04
    1adc:	bd 83       	std	Y+5, r27	; 0x05
		Local_f32Num_OVF_FLOAT = Local_f32Num_OVF_FLOAT - (u32)Local_f32Num_OVF_FLOAT;
    1ade:	6e 81       	ldd	r22, Y+6	; 0x06
    1ae0:	7f 81       	ldd	r23, Y+7	; 0x07
    1ae2:	88 85       	ldd	r24, Y+8	; 0x08
    1ae4:	99 85       	ldd	r25, Y+9	; 0x09
    1ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	bc 01       	movw	r22, r24
    1af0:	cd 01       	movw	r24, r26
    1af2:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1af6:	9b 01       	movw	r18, r22
    1af8:	ac 01       	movw	r20, r24
    1afa:	6e 81       	ldd	r22, Y+6	; 0x06
    1afc:	7f 81       	ldd	r23, Y+7	; 0x07
    1afe:	88 85       	ldd	r24, Y+8	; 0x08
    1b00:	99 85       	ldd	r25, Y+9	; 0x09
    1b02:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	8e 83       	std	Y+6, r24	; 0x06
    1b0c:	9f 83       	std	Y+7, r25	; 0x07
    1b0e:	a8 87       	std	Y+8, r26	; 0x08
    1b10:	b9 87       	std	Y+9, r27	; 0x09
		u8 Local_u32PreLoad = 256 - (256 * Local_f32Num_OVF_FLOAT);
    1b12:	6e 81       	ldd	r22, Y+6	; 0x06
    1b14:	7f 81       	ldd	r23, Y+7	; 0x07
    1b16:	88 85       	ldd	r24, Y+8	; 0x08
    1b18:	99 85       	ldd	r25, Y+9	; 0x09
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e8       	ldi	r20, 0x80	; 128
    1b20:	53 ec       	ldi	r21, 0xC3	; 195
    1b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	bc 01       	movw	r22, r24
    1b2c:	cd 01       	movw	r24, r26
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	40 e8       	ldi	r20, 0x80	; 128
    1b34:	53 e4       	ldi	r21, 0x43	; 67
    1b36:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	bc 01       	movw	r22, r24
    1b40:	cd 01       	movw	r24, r26
    1b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	89 83       	std	Y+1, r24	; 0x01
		TIMER0_NUM_OVF = Local_u32Num_OVF_INT;
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b50:	ac 81       	ldd	r26, Y+4	; 0x04
    1b52:	bd 81       	ldd	r27, Y+5	; 0x05
    1b54:	80 93 0d 02 	sts	0x020D, r24
    1b58:	90 93 0e 02 	sts	0x020E, r25
    1b5c:	a0 93 0f 02 	sts	0x020F, r26
    1b60:	b0 93 10 02 	sts	0x0210, r27
		TIMER0_PRELOAD = Local_u32PreLoad;
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	80 93 0c 02 	sts	0x020C, r24
		TCNT0 = Local_u32PreLoad;
    1b6a:	e2 e5       	ldi	r30, 0x52	; 82
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    1b72:	1e 86       	std	Y+14, r1	; 0x0e
    1b74:	11 c0       	rjmp	.+34     	; 0x1b98 <TIMER0_enuDelayMilliSecondASyn+0x18c>
	}
	else
	{
		TIMER0_NUM_OVF = (u32)Local_f32Num_OVF_FLOAT;
    1b76:	6e 81       	ldd	r22, Y+6	; 0x06
    1b78:	7f 81       	ldd	r23, Y+7	; 0x07
    1b7a:	88 85       	ldd	r24, Y+8	; 0x08
    1b7c:	99 85       	ldd	r25, Y+9	; 0x09
    1b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	80 93 0d 02 	sts	0x020D, r24
    1b8a:	90 93 0e 02 	sts	0x020E, r25
    1b8e:	a0 93 0f 02 	sts	0x020F, r26
    1b92:	b0 93 10 02 	sts	0x0210, r27
		Local_enuErrorState = ES_OK;
    1b96:	1e 86       	std	Y+14, r1	; 0x0e
	}
	
	if(Copy_PFunApp != NULL)
    1b98:	8b 89       	ldd	r24, Y+19	; 0x13
    1b9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	71 f0       	breq	.+28     	; 0x1bbc <TIMER0_enuDelayMilliSecondASyn+0x1b0>
	{
		TIMER0_PFunISRfun_OVF = Copy_PFunApp;
    1ba0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba4:	90 93 05 02 	sts	0x0205, r25
    1ba8:	80 93 04 02 	sts	0x0204, r24
		TIMER0_PvidISRparameter_OVF = Copy_PParameterApp;
    1bac:	8d 89       	ldd	r24, Y+21	; 0x15
    1bae:	9e 89       	ldd	r25, Y+22	; 0x16
    1bb0:	90 93 07 02 	sts	0x0207, r25
    1bb4:	80 93 06 02 	sts	0x0206, r24
		Local_enuErrorState = ES_OK;
    1bb8:	1e 86       	std	Y+14, r1	; 0x0e
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <TIMER0_enuDelayMilliSecondASyn+0x1b4>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1bbc:	82 e0       	ldi	r24, 0x02	; 2
    1bbe:	8e 87       	std	Y+14, r24	; 0x0e
	}
	
	TIMSK |= (MASK_BIT << TOIE0);
    1bc0:	a9 e5       	ldi	r26, 0x59	; 89
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	e9 e5       	ldi	r30, 0x59	; 89
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	81 60       	ori	r24, 0x01	; 1
    1bcc:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    1bce:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    1bd0:	66 96       	adiw	r28, 0x16	; 22
    1bd2:	0f b6       	in	r0, 0x3f	; 63
    1bd4:	f8 94       	cli
    1bd6:	de bf       	out	0x3e, r29	; 62
    1bd8:	0f be       	out	0x3f, r0	; 63
    1bda:	cd bf       	out	0x3d, r28	; 61
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <TIMER0_enuGeneratePWM>:

ES_t TIMER0_enuGeneratePWM(u8 Copy_u8DutyCycle)
{
    1be2:	0f 93       	push	r16
    1be4:	1f 93       	push	r17
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <TIMER0_enuGeneratePWM+0xa>
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	89 83       	std	Y+1, r24	; 0x01
	#else
	#error "OC0 has a wrong configuration"
	#endif
	#endif
	
	OCR0 = TIMER0_f32OC0Value;	
    1bf6:	0c e5       	ldi	r16, 0x5C	; 92
    1bf8:	10 e0       	ldi	r17, 0x00	; 0
    1bfa:	80 91 11 02 	lds	r24, 0x0211
    1bfe:	90 91 12 02 	lds	r25, 0x0212
    1c02:	a0 91 13 02 	lds	r26, 0x0213
    1c06:	b0 91 14 02 	lds	r27, 0x0214
    1c0a:	bc 01       	movw	r22, r24
    1c0c:	cd 01       	movw	r24, r26
    1c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	f8 01       	movw	r30, r16
    1c18:	80 83       	st	Z, r24
	
	return Local_enuErrorState;
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	cf 91       	pop	r28
    1c22:	df 91       	pop	r29
    1c24:	1f 91       	pop	r17
    1c26:	0f 91       	pop	r16
    1c28:	08 95       	ret

00001c2a <TIMER0_enuSetOutputCompareRegister>:

ES_t TIMER0_enuSetOutputCompareRegister(u8 Copy_u8OCRValue)
{
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	00 d0       	rcall	.+0      	; 0x1c30 <TIMER0_enuSetOutputCompareRegister+0x6>
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	89 83       	std	Y+1, r24	; 0x01
	
	OCR0 = Copy_u8OCRValue;
    1c3a:	ec e5       	ldi	r30, 0x5C	; 92
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	80 83       	st	Z, r24
	Local_enuErrorState = ES_OK;
    1c42:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <TIMER0_enuSetPreload>:

ES_t TIMER0_enuSetPreload(u8 Copy_u8PreloadValue)
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <TIMER0_enuSetPreload+0x6>
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	89 83       	std	Y+1, r24	; 0x01
	
	TCNT0 = Copy_u8PreloadValue;
    1c60:	e2 e5       	ldi	r30, 0x52	; 82
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	80 83       	st	Z, r24
	Local_enuErrorState = ES_OK;
    1c68:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret

00001c76 <TIMER0_enuSetCALLBACK_CTC>:

ES_t TIMER0_enuSetCALLBACK_CTC(void (*Copy_PFunApp)(void *), void *Copy_PParameterApp)
{
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	00 d0       	rcall	.+0      	; 0x1c7c <TIMER0_enuSetCALLBACK_CTC+0x6>
    1c7c:	00 d0       	rcall	.+0      	; 0x1c7e <TIMER0_enuSetCALLBACK_CTC+0x8>
    1c7e:	0f 92       	push	r0
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	9b 83       	std	Y+3, r25	; 0x03
    1c86:	8a 83       	std	Y+2, r24	; 0x02
    1c88:	7d 83       	std	Y+5, r23	; 0x05
    1c8a:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_PFunApp != NULL)
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	9b 81       	ldd	r25, Y+3	; 0x03
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	71 f0       	breq	.+28     	; 0x1cb4 <TIMER0_enuSetCALLBACK_CTC+0x3e>
	{
		TIMER0_PFunISRfun_CTC = Copy_PFunApp;
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c9c:	90 93 09 02 	sts	0x0209, r25
    1ca0:	80 93 08 02 	sts	0x0208, r24
		TIMER0_PvidISRparameter_CTC = Copy_PParameterApp;
    1ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca8:	90 93 0b 02 	sts	0x020B, r25
    1cac:	80 93 0a 02 	sts	0x020A, r24
		Local_enuErrorState = ES_OK;
    1cb0:	19 82       	std	Y+1, r1	; 0x01
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <TIMER0_enuSetCALLBACK_CTC+0x42>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1cb4:	82 e0       	ldi	r24, 0x02	; 2
    1cb6:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	cf 91       	pop	r28
    1cc6:	df 91       	pop	r29
    1cc8:	08 95       	ret

00001cca <TIMER0_enuEnableOVFInterrupt>:

ES_t TIMER0_enuEnableOVFInterrupt(void)
{
    1cca:	df 93       	push	r29
    1ccc:	cf 93       	push	r28
    1cce:	0f 92       	push	r0
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	89 83       	std	Y+1, r24	; 0x01
	
	TIMSK |= (MASK_BIT << TOIE0);
    1cd8:	a9 e5       	ldi	r26, 0x59	; 89
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	e9 e5       	ldi	r30, 0x59	; 89
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	81 60       	ori	r24, 0x01	; 1
    1ce4:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    1ce6:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cea:	0f 90       	pop	r0
    1cec:	cf 91       	pop	r28
    1cee:	df 91       	pop	r29
    1cf0:	08 95       	ret

00001cf2 <TIMER0_enuEnableCTCInterrupt>:

ES_t TIMER0_enuEnableCTCInterrupt(void)
{
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	0f 92       	push	r0
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	89 83       	std	Y+1, r24	; 0x01
	
	TIMSK |= (MASK_BIT << OCIE0);
    1d00:	a9 e5       	ldi	r26, 0x59	; 89
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e9 e5       	ldi	r30, 0x59	; 89
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	82 60       	ori	r24, 0x02	; 2
    1d0c:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    1d0e:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d12:	0f 90       	pop	r0
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <__vector_11>:

ISR(VECT_TIMER0_OVF)
{
    1d1a:	1f 92       	push	r1
    1d1c:	0f 92       	push	r0
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	0f 92       	push	r0
    1d22:	11 24       	eor	r1, r1
    1d24:	2f 93       	push	r18
    1d26:	3f 93       	push	r19
    1d28:	4f 93       	push	r20
    1d2a:	5f 93       	push	r21
    1d2c:	6f 93       	push	r22
    1d2e:	7f 93       	push	r23
    1d30:	8f 93       	push	r24
    1d32:	9f 93       	push	r25
    1d34:	af 93       	push	r26
    1d36:	bf 93       	push	r27
    1d38:	ef 93       	push	r30
    1d3a:	ff 93       	push	r31
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_PFunISRfun_OVF != NULL)
    1d44:	80 91 04 02 	lds	r24, 0x0204
    1d48:	90 91 05 02 	lds	r25, 0x0205
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <__vector_11+0x38>
    1d50:	3e c0       	rjmp	.+124    	; 0x1dce <__vector_11+0xb4>
	{
		static u32 Local_u32Counter = 0;
		Local_u32Counter++;
    1d52:	80 91 15 02 	lds	r24, 0x0215
    1d56:	90 91 16 02 	lds	r25, 0x0216
    1d5a:	a0 91 17 02 	lds	r26, 0x0217
    1d5e:	b0 91 18 02 	lds	r27, 0x0218
    1d62:	01 96       	adiw	r24, 0x01	; 1
    1d64:	a1 1d       	adc	r26, r1
    1d66:	b1 1d       	adc	r27, r1
    1d68:	80 93 15 02 	sts	0x0215, r24
    1d6c:	90 93 16 02 	sts	0x0216, r25
    1d70:	a0 93 17 02 	sts	0x0217, r26
    1d74:	b0 93 18 02 	sts	0x0218, r27
		if(Local_u32Counter == TIMER0_NUM_OVF)
    1d78:	20 91 15 02 	lds	r18, 0x0215
    1d7c:	30 91 16 02 	lds	r19, 0x0216
    1d80:	40 91 17 02 	lds	r20, 0x0217
    1d84:	50 91 18 02 	lds	r21, 0x0218
    1d88:	80 91 0d 02 	lds	r24, 0x020D
    1d8c:	90 91 0e 02 	lds	r25, 0x020E
    1d90:	a0 91 0f 02 	lds	r26, 0x020F
    1d94:	b0 91 10 02 	lds	r27, 0x0210
    1d98:	28 17       	cp	r18, r24
    1d9a:	39 07       	cpc	r19, r25
    1d9c:	4a 07       	cpc	r20, r26
    1d9e:	5b 07       	cpc	r21, r27
    1da0:	b1 f4       	brne	.+44     	; 0x1dce <__vector_11+0xb4>
		{
			TCNT0 = TIMER0_PRELOAD;
    1da2:	e2 e5       	ldi	r30, 0x52	; 82
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 91 0c 02 	lds	r24, 0x020C
    1daa:	80 83       	st	Z, r24
			TIMER0_PFunISRfun_OVF((void *)TIMER0_PvidISRparameter_OVF);
    1dac:	e0 91 04 02 	lds	r30, 0x0204
    1db0:	f0 91 05 02 	lds	r31, 0x0205
    1db4:	80 91 06 02 	lds	r24, 0x0206
    1db8:	90 91 07 02 	lds	r25, 0x0207
    1dbc:	09 95       	icall
			Local_u32Counter = 0;
    1dbe:	10 92 15 02 	sts	0x0215, r1
    1dc2:	10 92 16 02 	sts	0x0216, r1
    1dc6:	10 92 17 02 	sts	0x0217, r1
    1dca:	10 92 18 02 	sts	0x0218, r1
		}
	}
}
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	ff 91       	pop	r31
    1dd4:	ef 91       	pop	r30
    1dd6:	bf 91       	pop	r27
    1dd8:	af 91       	pop	r26
    1dda:	9f 91       	pop	r25
    1ddc:	8f 91       	pop	r24
    1dde:	7f 91       	pop	r23
    1de0:	6f 91       	pop	r22
    1de2:	5f 91       	pop	r21
    1de4:	4f 91       	pop	r20
    1de6:	3f 91       	pop	r19
    1de8:	2f 91       	pop	r18
    1dea:	0f 90       	pop	r0
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	0f 90       	pop	r0
    1df0:	1f 90       	pop	r1
    1df2:	18 95       	reti

00001df4 <__vector_10>:

ISR(VECT_TIMER0_CTC)
{
    1df4:	1f 92       	push	r1
    1df6:	0f 92       	push	r0
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	0f 92       	push	r0
    1dfc:	11 24       	eor	r1, r1
    1dfe:	2f 93       	push	r18
    1e00:	3f 93       	push	r19
    1e02:	4f 93       	push	r20
    1e04:	5f 93       	push	r21
    1e06:	6f 93       	push	r22
    1e08:	7f 93       	push	r23
    1e0a:	8f 93       	push	r24
    1e0c:	9f 93       	push	r25
    1e0e:	af 93       	push	r26
    1e10:	bf 93       	push	r27
    1e12:	ef 93       	push	r30
    1e14:	ff 93       	push	r31
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_PFunISRfun_CTC != NULL)
    1e1e:	80 91 08 02 	lds	r24, 0x0208
    1e22:	90 91 09 02 	lds	r25, 0x0209
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	49 f0       	breq	.+18     	; 0x1e3c <__vector_10+0x48>
	{
		TIMER0_PFunISRfun_CTC((void *)TIMER0_PvidISRparameter_CTC);
    1e2a:	e0 91 08 02 	lds	r30, 0x0208
    1e2e:	f0 91 09 02 	lds	r31, 0x0209
    1e32:	80 91 0a 02 	lds	r24, 0x020A
    1e36:	90 91 0b 02 	lds	r25, 0x020B
    1e3a:	09 95       	icall
	}
    1e3c:	cf 91       	pop	r28
    1e3e:	df 91       	pop	r29
    1e40:	ff 91       	pop	r31
    1e42:	ef 91       	pop	r30
    1e44:	bf 91       	pop	r27
    1e46:	af 91       	pop	r26
    1e48:	9f 91       	pop	r25
    1e4a:	8f 91       	pop	r24
    1e4c:	7f 91       	pop	r23
    1e4e:	6f 91       	pop	r22
    1e50:	5f 91       	pop	r21
    1e52:	4f 91       	pop	r20
    1e54:	3f 91       	pop	r19
    1e56:	2f 91       	pop	r18
    1e58:	0f 90       	pop	r0
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	0f 90       	pop	r0
    1e5e:	1f 90       	pop	r1
    1e60:	18 95       	reti

00001e62 <SPI_enuInit>:

volatile static void (* SPI_PappFunc)(void *) = NULL;
volatile static void *SPI_PappParameter = NULL;

ES_t SPI_enuInit()
{
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	0f 92       	push	r0
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	89 83       	std	Y+1, r24	; 0x01
	
	#if SPI_STATE == ENABLE_SPI
	SPCR |=  (MASK_BIT << SPE);
    1e70:	ad e2       	ldi	r26, 0x2D	; 45
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	ed e2       	ldi	r30, 0x2D	; 45
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	80 64       	ori	r24, 0x40	; 64
    1e7c:	8c 93       	st	X, r24
	#endif
	
	#if SPI_DORD == LSB_FIRST
	SPCR |=  (MASK_BIT << DORD);
	#elif SPI_DORD == MSB_FIRST
	SPCR &= ~(MASK_BIT << DORD);
    1e7e:	ad e2       	ldi	r26, 0x2D	; 45
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	ed e2       	ldi	r30, 0x2D	; 45
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	8f 7d       	andi	r24, 0xDF	; 223
    1e8a:	8c 93       	st	X, r24
	#else
	#error "SPI DATA ORDER has a wrong configuration"
	#endif
	
	#if SPI_MODE == MASTER
	SPCR |=  (MASK_BIT << MSTR);
    1e8c:	ad e2       	ldi	r26, 0x2D	; 45
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	ed e2       	ldi	r30, 0x2D	; 45
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	80 61       	ori	r24, 0x10	; 16
    1e98:	8c 93       	st	X, r24
	#endif
	
	#if SPI_CPOL == IDLE_HIGH
	SPCR |=  (MASK_BIT << CPOL);
	#elif SPI_CPOL == IDLE_LOW
	SPCR &= ~(MASK_BIT << CPOL);
    1e9a:	ad e2       	ldi	r26, 0x2D	; 45
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	ed e2       	ldi	r30, 0x2D	; 45
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	87 7f       	andi	r24, 0xF7	; 247
    1ea6:	8c 93       	st	X, r24
	#else
	#error "SPI CLOCK POLARITY has a wrong configuration"
	#endif
	
	#if SPI_CPHA == READ_FIRST
	SPCR &= ~(MASK_BIT << CPHA);
    1ea8:	ad e2       	ldi	r26, 0x2D	; 45
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	ed e2       	ldi	r30, 0x2D	; 45
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	8b 7f       	andi	r24, 0xFB	; 251
    1eb4:	8c 93       	st	X, r24
	#else
	#error "SPI CLOCK PHASE has a wrong configuration"
	#endif
	
	#if SPI_SPEED == NORMAL_SPEED
	SPSR &= ~(MASK_BIT << SPI2X);
    1eb6:	ae e2       	ldi	r26, 0x2E	; 46
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	ee e2       	ldi	r30, 0x2E	; 46
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	8e 7f       	andi	r24, 0xFE	; 254
    1ec2:	8c 93       	st	X, r24
		SPCR |=  (MASK_BIT << SPR1);
		#else
		#error "SPI FREQUENCY at 64 Prescaler has a wrong configuration"
		#endif
	#elif ((SPI_FREQUENCY == F_DIVIDED_128) && (SPI_SPEED == NORMAL_SPEED))
	SPCR |=  (MASK_BIT << SPR0);
    1ec4:	ad e2       	ldi	r26, 0x2D	; 45
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	ed e2       	ldi	r30, 0x2D	; 45
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	81 60       	ori	r24, 0x01	; 1
    1ed0:	8c 93       	st	X, r24
	SPCR |=  (MASK_BIT << SPR1);
    1ed2:	ad e2       	ldi	r26, 0x2D	; 45
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	ed e2       	ldi	r30, 0x2D	; 45
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	82 60       	ori	r24, 0x02	; 2
    1ede:	8c 93       	st	X, r24
	SPCR |=  (MASK_BIT << SPR1);
	#else
	#error "SPI FREQUENCY has a wrong configuration"
	#endif
	
	Local_enuErrorState = ES_OK;
    1ee0:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ee4:	0f 90       	pop	r0
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <SPI_enuSendData_Master>:


ES_t SPI_enuSendData_Master(u8 Copy_u8MasterData, u8 *Copy_pu8SlaveData)
{
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	00 d0       	rcall	.+0      	; 0x1ef2 <SPI_enuSendData_Master+0x6>
    1ef2:	00 d0       	rcall	.+0      	; 0x1ef4 <SPI_enuSendData_Master+0x8>
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
    1ef8:	8a 83       	std	Y+2, r24	; 0x02
    1efa:	7c 83       	std	Y+4, r23	; 0x04
    1efc:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_pu8SlaveData != NULL)
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	9c 81       	ldd	r25, Y+4	; 0x04
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	89 f0       	breq	.+34     	; 0x1f2c <SPI_enuSendData_Master+0x40>
	{
		SPDR = Copy_u8MasterData;
    1f0a:	ef e2       	ldi	r30, 0x2F	; 47
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	80 83       	st	Z, r24
		while(!((SPSR >> SPIF) & 1));
    1f12:	ee e2       	ldi	r30, 0x2E	; 46
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	88 23       	and	r24, r24
    1f1a:	dc f7       	brge	.-10     	; 0x1f12 <SPI_enuSendData_Master+0x26>
		*Copy_pu8SlaveData = SPDR;
    1f1c:	ef e2       	ldi	r30, 0x2F	; 47
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	eb 81       	ldd	r30, Y+3	; 0x03
    1f24:	fc 81       	ldd	r31, Y+4	; 0x04
    1f26:	80 83       	st	Z, r24
		
		Local_enuErrorState = ES_OK;	
    1f28:	19 82       	std	Y+1, r1	; 0x01
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <SPI_enuSendData_Master+0x44>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1f2c:	82 e0       	ldi	r24, 0x02	; 2
    1f2e:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	08 95       	ret

00001f40 <SPI_enuReceiveData_Master>:

ES_t SPI_enuReceiveData_Master(u8 *Copy_pu8MasterData, u8 Copy_u8SlaveData)
{
    1f40:	df 93       	push	r29
    1f42:	cf 93       	push	r28
    1f44:	00 d0       	rcall	.+0      	; 0x1f46 <SPI_enuReceiveData_Master+0x6>
    1f46:	00 d0       	rcall	.+0      	; 0x1f48 <SPI_enuReceiveData_Master+0x8>
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
    1f4c:	9b 83       	std	Y+3, r25	; 0x03
    1f4e:	8a 83       	std	Y+2, r24	; 0x02
    1f50:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_pu8MasterData != NULL)
    1f56:	8a 81       	ldd	r24, Y+2	; 0x02
    1f58:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5a:	00 97       	sbiw	r24, 0x00	; 0
    1f5c:	89 f0       	breq	.+34     	; 0x1f80 <SPI_enuReceiveData_Master+0x40>
	{
		SPDR = Copy_u8SlaveData;
    1f5e:	ef e2       	ldi	r30, 0x2F	; 47
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	8c 81       	ldd	r24, Y+4	; 0x04
    1f64:	80 83       	st	Z, r24
		while(!((SPSR >> SPIF) & 1));
    1f66:	ee e2       	ldi	r30, 0x2E	; 46
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	88 23       	and	r24, r24
    1f6e:	dc f7       	brge	.-10     	; 0x1f66 <SPI_enuReceiveData_Master+0x26>
		*Copy_pu8MasterData = SPDR;
    1f70:	ef e2       	ldi	r30, 0x2F	; 47
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	ea 81       	ldd	r30, Y+2	; 0x02
    1f78:	fb 81       	ldd	r31, Y+3	; 0x03
    1f7a:	80 83       	st	Z, r24
		
		Local_enuErrorState = ES_OK;
    1f7c:	19 82       	std	Y+1, r1	; 0x01
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <SPI_enuReceiveData_Master+0x44>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1f80:	82 e0       	ldi	r24, 0x02	; 2
    1f82:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	cf 91       	pop	r28
    1f90:	df 91       	pop	r29
    1f92:	08 95       	ret

00001f94 <SPI_enuEnableInterrupt>:

ES_t SPI_enuEnableInterrupt()
{
    1f94:	df 93       	push	r29
    1f96:	cf 93       	push	r28
    1f98:	0f 92       	push	r0
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	89 83       	std	Y+1, r24	; 0x01
	
	SPCR |= (MASK_BIT << SPIE);
    1fa2:	ad e2       	ldi	r26, 0x2D	; 45
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	ed e2       	ldi	r30, 0x2D	; 45
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	80 68       	ori	r24, 0x80	; 128
    1fae:	8c 93       	st	X, r24
	
	Local_enuErrorState = ES_OK;
    1fb0:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fb4:	0f 90       	pop	r0
    1fb6:	cf 91       	pop	r28
    1fb8:	df 91       	pop	r29
    1fba:	08 95       	ret

00001fbc <SPI_enuCallBackFunc>:


ES_t SPI_enuCallBackFunc(void (* Copy_pAppFunc)(void *), void *Copy_pAppParameter)
{
    1fbc:	df 93       	push	r29
    1fbe:	cf 93       	push	r28
    1fc0:	00 d0       	rcall	.+0      	; 0x1fc2 <SPI_enuCallBackFunc+0x6>
    1fc2:	00 d0       	rcall	.+0      	; 0x1fc4 <SPI_enuCallBackFunc+0x8>
    1fc4:	0f 92       	push	r0
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	9b 83       	std	Y+3, r25	; 0x03
    1fcc:	8a 83       	std	Y+2, r24	; 0x02
    1fce:	7d 83       	std	Y+5, r23	; 0x05
    1fd0:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_pAppFunc != NULL)
    1fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd8:	9b 81       	ldd	r25, Y+3	; 0x03
    1fda:	00 97       	sbiw	r24, 0x00	; 0
    1fdc:	71 f0       	breq	.+28     	; 0x1ffa <SPI_enuCallBackFunc+0x3e>
	{
		SPI_PappFunc = Copy_pAppFunc;
    1fde:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe2:	90 93 1a 02 	sts	0x021A, r25
    1fe6:	80 93 19 02 	sts	0x0219, r24
		SPI_PappParameter = Copy_pAppParameter;
    1fea:	8c 81       	ldd	r24, Y+4	; 0x04
    1fec:	9d 81       	ldd	r25, Y+5	; 0x05
    1fee:	90 93 1c 02 	sts	0x021C, r25
    1ff2:	80 93 1b 02 	sts	0x021B, r24
		Local_enuErrorState = ES_OK;
    1ff6:	19 82       	std	Y+1, r1	; 0x01
    1ff8:	02 c0       	rjmp	.+4      	; 0x1ffe <SPI_enuCallBackFunc+0x42>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1ffa:	82 e0       	ldi	r24, 0x02	; 2
    1ffc:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	08 95       	ret

00002010 <VECT_SPI>:

ISR(VECT_SPI)
{
    2010:	1f 92       	push	r1
    2012:	0f 92       	push	r0
    2014:	0f b6       	in	r0, 0x3f	; 63
    2016:	0f 92       	push	r0
    2018:	11 24       	eor	r1, r1
    201a:	2f 93       	push	r18
    201c:	3f 93       	push	r19
    201e:	4f 93       	push	r20
    2020:	5f 93       	push	r21
    2022:	6f 93       	push	r22
    2024:	7f 93       	push	r23
    2026:	8f 93       	push	r24
    2028:	9f 93       	push	r25
    202a:	af 93       	push	r26
    202c:	bf 93       	push	r27
    202e:	ef 93       	push	r30
    2030:	ff 93       	push	r31
    2032:	df 93       	push	r29
    2034:	cf 93       	push	r28
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
	if(SPI_PappFunc != NULL)
    203a:	80 91 19 02 	lds	r24, 0x0219
    203e:	90 91 1a 02 	lds	r25, 0x021A
    2042:	00 97       	sbiw	r24, 0x00	; 0
    2044:	49 f0       	breq	.+18     	; 0x2058 <VECT_SPI+0x48>
	{
		SPI_PappFunc((void *)SPI_PappParameter);
    2046:	e0 91 19 02 	lds	r30, 0x0219
    204a:	f0 91 1a 02 	lds	r31, 0x021A
    204e:	80 91 1b 02 	lds	r24, 0x021B
    2052:	90 91 1c 02 	lds	r25, 0x021C
    2056:	09 95       	icall
	}
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	ff 91       	pop	r31
    205e:	ef 91       	pop	r30
    2060:	bf 91       	pop	r27
    2062:	af 91       	pop	r26
    2064:	9f 91       	pop	r25
    2066:	8f 91       	pop	r24
    2068:	7f 91       	pop	r23
    206a:	6f 91       	pop	r22
    206c:	5f 91       	pop	r21
    206e:	4f 91       	pop	r20
    2070:	3f 91       	pop	r19
    2072:	2f 91       	pop	r18
    2074:	0f 90       	pop	r0
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	0f 90       	pop	r0
    207a:	1f 90       	pop	r1
    207c:	18 95       	reti

0000207e <I2C_enuInitMaster>:
#include "I2C_Priv.h"



ES_t I2C_enuInitMaster	(void)
{
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	0f 92       	push	r0
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	89 83       	std	Y+1, r24	; 0x01

#if I2C_PRESCALER == I2C_PRESCALER_1
	SET_I2C_PRESCALER_1;
    208c:	a1 e2       	ldi	r26, 0x21	; 33
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	e1 e2       	ldi	r30, 0x21	; 33
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	8c 7f       	andi	r24, 0xFC	; 252
    2098:	8c 93       	st	X, r24
	SET_TWBR_VALUE;
    209a:	e0 e2       	ldi	r30, 0x20	; 32
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	8f ed       	ldi	r24, 0xDF	; 223
    20a0:	80 83       	st	Z, r24
	SET_I2C_ENABLE;
    20a2:	a6 e5       	ldi	r26, 0x56	; 86
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	e6 e5       	ldi	r30, 0x56	; 86
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	84 60       	ori	r24, 0x04	; 4
    20ae:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    20b0:	19 82       	std	Y+1, r1	; 0x01

#else
#error"The Selection of I2C_PRESCALER is Wrong"
#endif

	return Local_enuErrorState ;
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    20b4:	0f 90       	pop	r0
    20b6:	cf 91       	pop	r28
    20b8:	df 91       	pop	r29
    20ba:	08 95       	ret

000020bc <I2C_enuInitSlave>:



ES_t I2C_enuInitSlave	(void)
{
    20bc:	df 93       	push	r29
    20be:	cf 93       	push	r28
    20c0:	0f 92       	push	r0
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	89 83       	std	Y+1, r24	; 0x01

	SET_ECU_ADDRESS;
    20ca:	e2 e2       	ldi	r30, 0x22	; 34
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	82 e0       	ldi	r24, 0x02	; 2
    20d0:	80 83       	st	Z, r24
	SET_I2C_ENABLE;
    20d2:	a6 e5       	ldi	r26, 0x56	; 86
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	e6 e5       	ldi	r30, 0x56	; 86
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	84 60       	ori	r24, 0x04	; 4
    20de:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    20e0:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    20e4:	0f 90       	pop	r0
    20e6:	cf 91       	pop	r28
    20e8:	df 91       	pop	r29
    20ea:	08 95       	ret

000020ec <I2C_enuStartCondition>:



ES_t I2C_enuStartCondition	(void)
{
    20ec:	df 93       	push	r29
    20ee:	cf 93       	push	r28
    20f0:	0f 92       	push	r0
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	89 83       	std	Y+1, r24	; 0x01

	SET_START_CONDITION;
    20fa:	a6 e5       	ldi	r26, 0x56	; 86
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e6 e5       	ldi	r30, 0x56	; 86
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	80 62       	ori	r24, 0x20	; 32
    2106:	8c 93       	st	X, r24
	CLEAR_FLAG;
    2108:	a6 e5       	ldi	r26, 0x56	; 86
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e6 e5       	ldi	r30, 0x56	; 86
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	80 68       	ori	r24, 0x80	; 128
    2114:	8c 93       	st	X, r24
	while (WAIT_FLAG);
    2116:	e6 e5       	ldi	r30, 0x56	; 86
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	88 23       	and	r24, r24
    211e:	dc f7       	brge	.-10     	; 0x2116 <I2C_enuStartCondition+0x2a>
	if (START_CONDITION_TRANSMIT)
    2120:	e1 e2       	ldi	r30, 0x21	; 33
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	88 2f       	mov	r24, r24
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	88 7f       	andi	r24, 0xF8	; 248
    212c:	90 70       	andi	r25, 0x00	; 0
    212e:	88 30       	cpi	r24, 0x08	; 8
    2130:	91 05       	cpc	r25, r1
    2132:	09 f4       	brne	.+2      	; 0x2136 <I2C_enuStartCondition+0x4a>
		Local_enuErrorState = ES_OK;
    2134:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    2136:	89 81       	ldd	r24, Y+1	; 0x01
}
    2138:	0f 90       	pop	r0
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <I2C_enuRepeatStartCondition>:




ES_t I2C_enuRepeatStartCondition	(void)
{
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	0f 92       	push	r0
    2146:	cd b7       	in	r28, 0x3d	; 61
    2148:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	89 83       	std	Y+1, r24	; 0x01

	SET_START_CONDITION;
    214e:	a6 e5       	ldi	r26, 0x56	; 86
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	e6 e5       	ldi	r30, 0x56	; 86
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	80 62       	ori	r24, 0x20	; 32
    215a:	8c 93       	st	X, r24
	CLEAR_FLAG;
    215c:	a6 e5       	ldi	r26, 0x56	; 86
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	e6 e5       	ldi	r30, 0x56	; 86
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	80 68       	ori	r24, 0x80	; 128
    2168:	8c 93       	st	X, r24
	while (WAIT_FLAG);
    216a:	e6 e5       	ldi	r30, 0x56	; 86
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	88 23       	and	r24, r24
    2172:	dc f7       	brge	.-10     	; 0x216a <I2C_enuRepeatStartCondition+0x2a>
	if (REPEAT_START_CONDITION_TRANSMIT)
    2174:	e1 e2       	ldi	r30, 0x21	; 33
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	88 2f       	mov	r24, r24
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	88 7f       	andi	r24, 0xF8	; 248
    2180:	90 70       	andi	r25, 0x00	; 0
    2182:	80 31       	cpi	r24, 0x10	; 16
    2184:	91 05       	cpc	r25, r1
    2186:	09 f4       	brne	.+2      	; 0x218a <I2C_enuRepeatStartCondition+0x4a>
		Local_enuErrorState = ES_OK;
    2188:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    218a:	89 81       	ldd	r24, Y+1	; 0x01
}
    218c:	0f 90       	pop	r0
    218e:	cf 91       	pop	r28
    2190:	df 91       	pop	r29
    2192:	08 95       	ret

00002194 <I2C_enuStopCondition>:



ES_t I2C_enuStopCondition	(void)
{
    2194:	df 93       	push	r29
    2196:	cf 93       	push	r28
    2198:	0f 92       	push	r0
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	89 83       	std	Y+1, r24	; 0x01

	SET_STOP_CONDITION;
    21a2:	a6 e5       	ldi	r26, 0x56	; 86
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e6 e5       	ldi	r30, 0x56	; 86
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	80 61       	ori	r24, 0x10	; 16
    21ae:	8c 93       	st	X, r24
	CLEAR_FLAG;
    21b0:	a6 e5       	ldi	r26, 0x56	; 86
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e6 e5       	ldi	r30, 0x56	; 86
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	80 68       	ori	r24, 0x80	; 128
    21bc:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    21be:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    21c2:	0f 90       	pop	r0
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <I2C_enuSendSlaveAddress>:



ES_t I2C_enuSendSlaveAddress	(u8 Copy_u8SlaveAddress , u8 Copy_u8Action)
{
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	00 d0       	rcall	.+0      	; 0x21d0 <I2C_enuSendSlaveAddress+0x6>
    21d0:	0f 92       	push	r0
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
    21d6:	8a 83       	std	Y+2, r24	; 0x02
    21d8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	89 83       	std	Y+1, r24	; 0x01


	if (Copy_u8SlaveAddress <= I2C_MAX_SLAVES) SET_SLAVE_ADDRESS(Copy_u8SlaveAddress);
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	88 23       	and	r24, r24
    21e2:	2c f0       	brlt	.+10     	; 0x21ee <I2C_enuSendSlaveAddress+0x24>
    21e4:	e3 e2       	ldi	r30, 0x23	; 35
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	88 0f       	add	r24, r24
    21ec:	80 83       	st	Z, r24
	if (Copy_u8Action <= I2C_ONE)              SET_SLAVE_ACTION (Copy_u8Action);
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	82 30       	cpi	r24, 0x02	; 2
    21f2:	40 f4       	brcc	.+16     	; 0x2204 <I2C_enuSendSlaveAddress+0x3a>
    21f4:	a3 e2       	ldi	r26, 0x23	; 35
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	e3 e2       	ldi	r30, 0x23	; 35
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	90 81       	ld	r25, Z
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	89 2b       	or	r24, r25
    2202:	8c 93       	st	X, r24
	CLEAR_START_CONDITION;
    2204:	a6 e5       	ldi	r26, 0x56	; 86
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	e6 e5       	ldi	r30, 0x56	; 86
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	8f 7d       	andi	r24, 0xDF	; 223
    2210:	8c 93       	st	X, r24
	CLEAR_FLAG;
    2212:	a6 e5       	ldi	r26, 0x56	; 86
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e6 e5       	ldi	r30, 0x56	; 86
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	80 68       	ori	r24, 0x80	; 128
    221e:	8c 93       	st	X, r24
	while (WAIT_FLAG);
    2220:	e6 e5       	ldi	r30, 0x56	; 86
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	88 23       	and	r24, r24
    2228:	dc f7       	brge	.-10     	; 0x2220 <I2C_enuSendSlaveAddress+0x56>
	if (SLA_WRITE_TRANSMIT)
    222a:	e1 e2       	ldi	r30, 0x21	; 33
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	88 2f       	mov	r24, r24
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	88 7f       	andi	r24, 0xF8	; 248
    2236:	90 70       	andi	r25, 0x00	; 0
    2238:	88 31       	cpi	r24, 0x18	; 24
    223a:	91 05       	cpc	r25, r1
    223c:	11 f4       	brne	.+4      	; 0x2242 <I2C_enuSendSlaveAddress+0x78>
		Local_enuErrorState = ES_OK;
    223e:	19 82       	std	Y+1, r1	; 0x01
    2240:	0b c0       	rjmp	.+22     	; 0x2258 <I2C_enuSendSlaveAddress+0x8e>

	else if (SLA_READ_TRANSMIT)
    2242:	e1 e2       	ldi	r30, 0x21	; 33
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	88 2f       	mov	r24, r24
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	88 7f       	andi	r24, 0xF8	; 248
    224e:	90 70       	andi	r25, 0x00	; 0
    2250:	80 34       	cpi	r24, 0x40	; 64
    2252:	91 05       	cpc	r25, r1
    2254:	09 f4       	brne	.+2      	; 0x2258 <I2C_enuSendSlaveAddress+0x8e>
		Local_enuErrorState = ES_OK;
    2256:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    2258:	89 81       	ldd	r24, Y+1	; 0x01
}
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	0f 90       	pop	r0
    2260:	cf 91       	pop	r28
    2262:	df 91       	pop	r29
    2264:	08 95       	ret

00002266 <I2C_enuSlaveCheckItsAdress>:



ES_t I2C_enuSlaveCheckItsAdress (void)
{
    2266:	df 93       	push	r29
    2268:	cf 93       	push	r28
    226a:	0f 92       	push	r0
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	89 83       	std	Y+1, r24	; 0x01

	SET_ACKNOWLEDGE;
    2274:	a6 e5       	ldi	r26, 0x56	; 86
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e6 e5       	ldi	r30, 0x56	; 86
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	80 64       	ori	r24, 0x40	; 64
    2280:	8c 93       	st	X, r24
	CLEAR_FLAG;
    2282:	a6 e5       	ldi	r26, 0x56	; 86
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	e6 e5       	ldi	r30, 0x56	; 86
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	80 68       	ori	r24, 0x80	; 128
    228e:	8c 93       	st	X, r24
	while (WAIT_FLAG);
    2290:	e6 e5       	ldi	r30, 0x56	; 86
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	80 81       	ld	r24, Z
    2296:	88 23       	and	r24, r24
    2298:	dc f7       	brge	.-10     	; 0x2290 <I2C_enuSlaveCheckItsAdress+0x2a>
	if (SLAVE_WRITE_RECIEVE_ADDRESS)
    229a:	e1 e2       	ldi	r30, 0x21	; 33
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	88 2f       	mov	r24, r24
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	88 7f       	andi	r24, 0xF8	; 248
    22a6:	90 70       	andi	r25, 0x00	; 0
    22a8:	80 36       	cpi	r24, 0x60	; 96
    22aa:	91 05       	cpc	r25, r1
    22ac:	11 f4       	brne	.+4      	; 0x22b2 <I2C_enuSlaveCheckItsAdress+0x4c>
		Local_enuErrorState = ES_OK;
    22ae:	19 82       	std	Y+1, r1	; 0x01
    22b0:	0b c0       	rjmp	.+22     	; 0x22c8 <I2C_enuSlaveCheckItsAdress+0x62>
	else if(SLAVE_READ_RECIEVE_ADDRESS)
    22b2:	e1 e2       	ldi	r30, 0x21	; 33
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	88 2f       	mov	r24, r24
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	88 7f       	andi	r24, 0xF8	; 248
    22be:	90 70       	andi	r25, 0x00	; 0
    22c0:	88 3a       	cpi	r24, 0xA8	; 168
    22c2:	91 05       	cpc	r25, r1
    22c4:	09 f4       	brne	.+2      	; 0x22c8 <I2C_enuSlaveCheckItsAdress+0x62>
		Local_enuErrorState = ES_OK;
    22c6:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    22ca:	0f 90       	pop	r0
    22cc:	cf 91       	pop	r28
    22ce:	df 91       	pop	r29
    22d0:	08 95       	ret

000022d2 <I2C_enuMasterSendData>:




ES_t I2C_enuMasterSendData	(u8 Copy_u8Data)
{
    22d2:	df 93       	push	r29
    22d4:	cf 93       	push	r28
    22d6:	00 d0       	rcall	.+0      	; 0x22d8 <I2C_enuMasterSendData+0x6>
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
    22dc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	89 83       	std	Y+1, r24	; 0x01

	TWDR=Copy_u8Data;
    22e2:	e3 e2       	ldi	r30, 0x23	; 35
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	8a 81       	ldd	r24, Y+2	; 0x02
    22e8:	80 83       	st	Z, r24
	CLEAR_FLAG;
    22ea:	a6 e5       	ldi	r26, 0x56	; 86
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	e6 e5       	ldi	r30, 0x56	; 86
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	80 68       	ori	r24, 0x80	; 128
    22f6:	8c 93       	st	X, r24
	while (WAIT_FLAG);
    22f8:	e6 e5       	ldi	r30, 0x56	; 86
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	88 23       	and	r24, r24
    2300:	dc f7       	brge	.-10     	; 0x22f8 <I2C_enuMasterSendData+0x26>
	if (MASTER_DATA_TRANSMIT)
    2302:	e1 e2       	ldi	r30, 0x21	; 33
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	88 2f       	mov	r24, r24
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	88 7f       	andi	r24, 0xF8	; 248
    230e:	90 70       	andi	r25, 0x00	; 0
    2310:	88 32       	cpi	r24, 0x28	; 40
    2312:	91 05       	cpc	r25, r1
    2314:	09 f4       	brne	.+2      	; 0x2318 <I2C_enuMasterSendData+0x46>
		Local_enuErrorState = ES_OK;
    2316:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    2318:	89 81       	ldd	r24, Y+1	; 0x01
}
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	08 95       	ret

00002324 <I2C_enuSlaveRecieveData>:


ES_t I2C_enuSlaveRecieveData	(u8 * Copy_Pu8Data)
{
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	00 d0       	rcall	.+0      	; 0x232a <I2C_enuSlaveRecieveData+0x6>
    232a:	0f 92       	push	r0
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	9b 83       	std	Y+3, r25	; 0x03
    2332:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	89 83       	std	Y+1, r24	; 0x01

	CLEAR_FLAG;
    2338:	a6 e5       	ldi	r26, 0x56	; 86
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	e6 e5       	ldi	r30, 0x56	; 86
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	80 68       	ori	r24, 0x80	; 128
    2344:	8c 93       	st	X, r24
	while (WAIT_FLAG);
    2346:	e6 e5       	ldi	r30, 0x56	; 86
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	88 23       	and	r24, r24
    234e:	dc f7       	brge	.-10     	; 0x2346 <I2C_enuSlaveRecieveData+0x22>
	if (SLAVE_DATA_RECIEVED)
    2350:	e1 e2       	ldi	r30, 0x21	; 33
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	88 2f       	mov	r24, r24
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	88 7f       	andi	r24, 0xF8	; 248
    235c:	90 70       	andi	r25, 0x00	; 0
    235e:	80 38       	cpi	r24, 0x80	; 128
    2360:	91 05       	cpc	r25, r1
    2362:	39 f4       	brne	.+14     	; 0x2372 <I2C_enuSlaveRecieveData+0x4e>
	{
		*Copy_Pu8Data=TWDR; //RECIEVE_DATA
    2364:	e3 e2       	ldi	r30, 0x23	; 35
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	ea 81       	ldd	r30, Y+2	; 0x02
    236c:	fb 81       	ldd	r31, Y+3	; 0x03
    236e:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    2370:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
    2372:	89 81       	ldd	r24, Y+1	; 0x01
}
    2374:	0f 90       	pop	r0
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <GIE_enuGloable_Interrupt_Enable>:
#include "../../LIB/Error_States.h"

#include "GIE_priv.h"

ES_t GIE_enuGloable_Interrupt_Enable(void)
{
    2380:	df 93       	push	r29
    2382:	cf 93       	push	r28
    2384:	0f 92       	push	r0
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	89 83       	std	Y+1, r24	; 0x01
	
	SREG &= ~(MASK_BIT << GIE_I);
    238e:	af e5       	ldi	r26, 0x5F	; 95
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	ef e5       	ldi	r30, 0x5F	; 95
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	8f 77       	andi	r24, 0x7F	; 127
    239a:	8c 93       	st	X, r24
	SREG |= (MASK_BIT << GIE_I);
    239c:	af e5       	ldi	r26, 0x5F	; 95
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	ef e5       	ldi	r30, 0x5F	; 95
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	80 68       	ori	r24, 0x80	; 128
    23a8:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    23aa:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    23ae:	0f 90       	pop	r0
    23b0:	cf 91       	pop	r28
    23b2:	df 91       	pop	r29
    23b4:	08 95       	ret

000023b6 <GIE_enuGloable_Interrupt_Disable>:

ES_t GIE_enuGloable_Interrupt_Disable(void)
{
    23b6:	df 93       	push	r29
    23b8:	cf 93       	push	r28
    23ba:	0f 92       	push	r0
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	89 83       	std	Y+1, r24	; 0x01
	
	SREG &= ~(MASK_BIT << GIE_I);
    23c4:	af e5       	ldi	r26, 0x5F	; 95
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	ef e5       	ldi	r30, 0x5F	; 95
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	8f 77       	andi	r24, 0x7F	; 127
    23d0:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    23d2:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
    23d6:	0f 90       	pop	r0
    23d8:	cf 91       	pop	r28
    23da:	df 91       	pop	r29
    23dc:	08 95       	ret

000023de <EXTI_enuInit>:
/* array of pointers to the parameters of the function that will be executed when the interrupt is happen */
static volatile void *EXTI_APvidGenericParameters[MAX_NUM_EXTI] = {NULL, NULL, NULL};
	

ES_t EXTI_enuInit(EXTI_Configuration_t *Copy_PEXTI_Config)
{
    23de:	df 93       	push	r29
    23e0:	cf 93       	push	r28
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	2c 97       	sbiw	r28, 0x0c	; 12
    23e8:	0f b6       	in	r0, 0x3f	; 63
    23ea:	f8 94       	cli
    23ec:	de bf       	out	0x3e, r29	; 62
    23ee:	0f be       	out	0x3f, r0	; 63
    23f0:	cd bf       	out	0x3d, r28	; 61
    23f2:	9c 83       	std	Y+4, r25	; 0x04
    23f4:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	8a 83       	std	Y+2, r24	; 0x02
	
	if(Copy_PEXTI_Config != NULL)
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	9c 81       	ldd	r25, Y+4	; 0x04
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	09 f4       	brne	.+2      	; 0x2404 <EXTI_enuInit+0x26>
    2402:	7d c1       	rjmp	.+762    	; 0x26fe <EXTI_enuInit+0x320>
	{
		u8 Local_u8Iterator = 0;
    2404:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8Iterator = 0; Local_u8Iterator < MAX_NUM_EXTI; Local_u8Iterator++)
    2406:	19 82       	std	Y+1, r1	; 0x01
    2408:	75 c1       	rjmp	.+746    	; 0x26f4 <EXTI_enuInit+0x316>
		{
			switch(Copy_PEXTI_Config[Local_u8Iterator].EXTI_id)
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	28 2f       	mov	r18, r24
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	c9 01       	movw	r24, r18
    2412:	88 0f       	add	r24, r24
    2414:	99 1f       	adc	r25, r25
    2416:	28 0f       	add	r18, r24
    2418:	39 1f       	adc	r19, r25
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	9c 81       	ldd	r25, Y+4	; 0x04
    241e:	fc 01       	movw	r30, r24
    2420:	e2 0f       	add	r30, r18
    2422:	f3 1f       	adc	r31, r19
    2424:	80 81       	ld	r24, Z
    2426:	28 2f       	mov	r18, r24
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	3c 87       	std	Y+12, r19	; 0x0c
    242c:	2b 87       	std	Y+11, r18	; 0x0b
    242e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2430:	9c 85       	ldd	r25, Y+12	; 0x0c
    2432:	81 30       	cpi	r24, 0x01	; 1
    2434:	91 05       	cpc	r25, r1
    2436:	09 f4       	brne	.+2      	; 0x243a <EXTI_enuInit+0x5c>
    2438:	8e c0       	rjmp	.+284    	; 0x2556 <EXTI_enuInit+0x178>
    243a:	2b 85       	ldd	r18, Y+11	; 0x0b
    243c:	3c 85       	ldd	r19, Y+12	; 0x0c
    243e:	22 30       	cpi	r18, 0x02	; 2
    2440:	31 05       	cpc	r19, r1
    2442:	09 f4       	brne	.+2      	; 0x2446 <EXTI_enuInit+0x68>
    2444:	0b c1       	rjmp	.+534    	; 0x265c <EXTI_enuInit+0x27e>
    2446:	8b 85       	ldd	r24, Y+11	; 0x0b
    2448:	9c 85       	ldd	r25, Y+12	; 0x0c
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	09 f0       	breq	.+2      	; 0x2450 <EXTI_enuInit+0x72>
    244e:	4d c1       	rjmp	.+666    	; 0x26ea <EXTI_enuInit+0x30c>
			{
				case EXTI0:
				if(Copy_PEXTI_Config[Local_u8Iterator].EXTI_state == ENABLED)
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	28 2f       	mov	r18, r24
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	c9 01       	movw	r24, r18
    2458:	88 0f       	add	r24, r24
    245a:	99 1f       	adc	r25, r25
    245c:	28 0f       	add	r18, r24
    245e:	39 1f       	adc	r19, r25
    2460:	8b 81       	ldd	r24, Y+3	; 0x03
    2462:	9c 81       	ldd	r25, Y+4	; 0x04
    2464:	fc 01       	movw	r30, r24
    2466:	e2 0f       	add	r30, r18
    2468:	f3 1f       	adc	r31, r19
    246a:	81 81       	ldd	r24, Z+1	; 0x01
    246c:	88 23       	and	r24, r24
    246e:	09 f0       	breq	.+2      	; 0x2472 <EXTI_enuInit+0x94>
    2470:	3e c1       	rjmp	.+636    	; 0x26ee <EXTI_enuInit+0x310>
				{
					//Masking the 2 bits --> ISC00, ISC01
					MCUCR &= ~(3 << 0);
    2472:	a5 e5       	ldi	r26, 0x55	; 85
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	e5 e5       	ldi	r30, 0x55	; 85
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	80 81       	ld	r24, Z
    247c:	8c 7f       	andi	r24, 0xFC	; 252
    247e:	8c 93       	st	X, r24
					switch(Copy_PEXTI_Config[Local_u8Iterator].EXTI_control_state)
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	28 2f       	mov	r18, r24
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	c9 01       	movw	r24, r18
    2488:	88 0f       	add	r24, r24
    248a:	99 1f       	adc	r25, r25
    248c:	28 0f       	add	r18, r24
    248e:	39 1f       	adc	r19, r25
    2490:	8b 81       	ldd	r24, Y+3	; 0x03
    2492:	9c 81       	ldd	r25, Y+4	; 0x04
    2494:	fc 01       	movw	r30, r24
    2496:	e2 0f       	add	r30, r18
    2498:	f3 1f       	adc	r31, r19
    249a:	82 81       	ldd	r24, Z+2	; 0x02
    249c:	28 2f       	mov	r18, r24
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	3a 87       	std	Y+10, r19	; 0x0a
    24a2:	29 87       	std	Y+9, r18	; 0x09
    24a4:	89 85       	ldd	r24, Y+9	; 0x09
    24a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a8:	81 30       	cpi	r24, 0x01	; 1
    24aa:	91 05       	cpc	r25, r1
    24ac:	21 f1       	breq	.+72     	; 0x24f6 <EXTI_enuInit+0x118>
    24ae:	29 85       	ldd	r18, Y+9	; 0x09
    24b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    24b2:	22 30       	cpi	r18, 0x02	; 2
    24b4:	31 05       	cpc	r19, r1
    24b6:	2c f4       	brge	.+10     	; 0x24c2 <EXTI_enuInit+0xe4>
    24b8:	89 85       	ldd	r24, Y+9	; 0x09
    24ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    24bc:	00 97       	sbiw	r24, 0x00	; 0
    24be:	61 f0       	breq	.+24     	; 0x24d8 <EXTI_enuInit+0xfa>
    24c0:	47 c0       	rjmp	.+142    	; 0x2550 <EXTI_enuInit+0x172>
    24c2:	29 85       	ldd	r18, Y+9	; 0x09
    24c4:	3a 85       	ldd	r19, Y+10	; 0x0a
    24c6:	22 30       	cpi	r18, 0x02	; 2
    24c8:	31 05       	cpc	r19, r1
    24ca:	21 f1       	breq	.+72     	; 0x2514 <EXTI_enuInit+0x136>
    24cc:	89 85       	ldd	r24, Y+9	; 0x09
    24ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d0:	83 30       	cpi	r24, 0x03	; 3
    24d2:	91 05       	cpc	r25, r1
    24d4:	71 f1       	breq	.+92     	; 0x2532 <EXTI_enuInit+0x154>
    24d6:	3c c0       	rjmp	.+120    	; 0x2550 <EXTI_enuInit+0x172>
					{
						case LOW_LEVEL:
						MCUCR &= ~(MASK_BIT << ISC00);
    24d8:	a5 e5       	ldi	r26, 0x55	; 85
    24da:	b0 e0       	ldi	r27, 0x00	; 0
    24dc:	e5 e5       	ldi	r30, 0x55	; 85
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	80 81       	ld	r24, Z
    24e2:	8e 7f       	andi	r24, 0xFE	; 254
    24e4:	8c 93       	st	X, r24
						MCUCR &= ~(MASK_BIT << ISC01);
    24e6:	a5 e5       	ldi	r26, 0x55	; 85
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	e5 e5       	ldi	r30, 0x55	; 85
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	8d 7f       	andi	r24, 0xFD	; 253
    24f2:	8c 93       	st	X, r24
    24f4:	fc c0       	rjmp	.+504    	; 0x26ee <EXTI_enuInit+0x310>
						break;
						
						case LOGICAL:
						MCUCR |= (MASK_BIT << ISC00);
    24f6:	a5 e5       	ldi	r26, 0x55	; 85
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	e5 e5       	ldi	r30, 0x55	; 85
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	81 60       	ori	r24, 0x01	; 1
    2502:	8c 93       	st	X, r24
						MCUCR &= ~(MASK_BIT << ISC01);
    2504:	a5 e5       	ldi	r26, 0x55	; 85
    2506:	b0 e0       	ldi	r27, 0x00	; 0
    2508:	e5 e5       	ldi	r30, 0x55	; 85
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	80 81       	ld	r24, Z
    250e:	8d 7f       	andi	r24, 0xFD	; 253
    2510:	8c 93       	st	X, r24
    2512:	ed c0       	rjmp	.+474    	; 0x26ee <EXTI_enuInit+0x310>
						break;
						
						case FAILLING:
						MCUCR &= ~(MASK_BIT << ISC00);
    2514:	a5 e5       	ldi	r26, 0x55	; 85
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	e5 e5       	ldi	r30, 0x55	; 85
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	8e 7f       	andi	r24, 0xFE	; 254
    2520:	8c 93       	st	X, r24
						MCUCR |= (MASK_BIT << ISC01);
    2522:	a5 e5       	ldi	r26, 0x55	; 85
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	e5 e5       	ldi	r30, 0x55	; 85
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	82 60       	ori	r24, 0x02	; 2
    252e:	8c 93       	st	X, r24
    2530:	de c0       	rjmp	.+444    	; 0x26ee <EXTI_enuInit+0x310>
						break;
						
						case RISING:
						MCUCR |= (MASK_BIT << ISC00);
    2532:	a5 e5       	ldi	r26, 0x55	; 85
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	e5 e5       	ldi	r30, 0x55	; 85
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	81 60       	ori	r24, 0x01	; 1
    253e:	8c 93       	st	X, r24
						MCUCR |= (MASK_BIT << ISC01);
    2540:	a5 e5       	ldi	r26, 0x55	; 85
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	e5 e5       	ldi	r30, 0x55	; 85
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	82 60       	ori	r24, 0x02	; 2
    254c:	8c 93       	st	X, r24
    254e:	cf c0       	rjmp	.+414    	; 0x26ee <EXTI_enuInit+0x310>
						break;
						
						default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
    2550:	83 e0       	ldi	r24, 0x03	; 3
    2552:	8a 83       	std	Y+2, r24	; 0x02
    2554:	cc c0       	rjmp	.+408    	; 0x26ee <EXTI_enuInit+0x310>
					}
				}
				break;
				
				case EXTI1:
				if(Copy_PEXTI_Config[Local_u8Iterator].EXTI_state == ENABLED)
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	28 2f       	mov	r18, r24
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	c9 01       	movw	r24, r18
    255e:	88 0f       	add	r24, r24
    2560:	99 1f       	adc	r25, r25
    2562:	28 0f       	add	r18, r24
    2564:	39 1f       	adc	r19, r25
    2566:	8b 81       	ldd	r24, Y+3	; 0x03
    2568:	9c 81       	ldd	r25, Y+4	; 0x04
    256a:	fc 01       	movw	r30, r24
    256c:	e2 0f       	add	r30, r18
    256e:	f3 1f       	adc	r31, r19
    2570:	81 81       	ldd	r24, Z+1	; 0x01
    2572:	88 23       	and	r24, r24
    2574:	09 f0       	breq	.+2      	; 0x2578 <EXTI_enuInit+0x19a>
    2576:	bb c0       	rjmp	.+374    	; 0x26ee <EXTI_enuInit+0x310>
				{
					//Masking the 2 bits --> ISC10, ISC11
					MCUCR &= ~(3 << 2);
    2578:	a5 e5       	ldi	r26, 0x55	; 85
    257a:	b0 e0       	ldi	r27, 0x00	; 0
    257c:	e5 e5       	ldi	r30, 0x55	; 85
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	80 81       	ld	r24, Z
    2582:	83 7f       	andi	r24, 0xF3	; 243
    2584:	8c 93       	st	X, r24
					switch(Copy_PEXTI_Config[Local_u8Iterator].EXTI_control_state)
    2586:	89 81       	ldd	r24, Y+1	; 0x01
    2588:	28 2f       	mov	r18, r24
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	c9 01       	movw	r24, r18
    258e:	88 0f       	add	r24, r24
    2590:	99 1f       	adc	r25, r25
    2592:	28 0f       	add	r18, r24
    2594:	39 1f       	adc	r19, r25
    2596:	8b 81       	ldd	r24, Y+3	; 0x03
    2598:	9c 81       	ldd	r25, Y+4	; 0x04
    259a:	fc 01       	movw	r30, r24
    259c:	e2 0f       	add	r30, r18
    259e:	f3 1f       	adc	r31, r19
    25a0:	82 81       	ldd	r24, Z+2	; 0x02
    25a2:	28 2f       	mov	r18, r24
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	38 87       	std	Y+8, r19	; 0x08
    25a8:	2f 83       	std	Y+7, r18	; 0x07
    25aa:	8f 81       	ldd	r24, Y+7	; 0x07
    25ac:	98 85       	ldd	r25, Y+8	; 0x08
    25ae:	81 30       	cpi	r24, 0x01	; 1
    25b0:	91 05       	cpc	r25, r1
    25b2:	21 f1       	breq	.+72     	; 0x25fc <EXTI_enuInit+0x21e>
    25b4:	2f 81       	ldd	r18, Y+7	; 0x07
    25b6:	38 85       	ldd	r19, Y+8	; 0x08
    25b8:	22 30       	cpi	r18, 0x02	; 2
    25ba:	31 05       	cpc	r19, r1
    25bc:	2c f4       	brge	.+10     	; 0x25c8 <EXTI_enuInit+0x1ea>
    25be:	8f 81       	ldd	r24, Y+7	; 0x07
    25c0:	98 85       	ldd	r25, Y+8	; 0x08
    25c2:	00 97       	sbiw	r24, 0x00	; 0
    25c4:	61 f0       	breq	.+24     	; 0x25de <EXTI_enuInit+0x200>
    25c6:	47 c0       	rjmp	.+142    	; 0x2656 <EXTI_enuInit+0x278>
    25c8:	2f 81       	ldd	r18, Y+7	; 0x07
    25ca:	38 85       	ldd	r19, Y+8	; 0x08
    25cc:	22 30       	cpi	r18, 0x02	; 2
    25ce:	31 05       	cpc	r19, r1
    25d0:	21 f1       	breq	.+72     	; 0x261a <EXTI_enuInit+0x23c>
    25d2:	8f 81       	ldd	r24, Y+7	; 0x07
    25d4:	98 85       	ldd	r25, Y+8	; 0x08
    25d6:	83 30       	cpi	r24, 0x03	; 3
    25d8:	91 05       	cpc	r25, r1
    25da:	71 f1       	breq	.+92     	; 0x2638 <EXTI_enuInit+0x25a>
    25dc:	3c c0       	rjmp	.+120    	; 0x2656 <EXTI_enuInit+0x278>
					{
						case LOW_LEVEL:
						MCUCR &= ~(MASK_BIT << ISC10);
    25de:	a5 e5       	ldi	r26, 0x55	; 85
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	e5 e5       	ldi	r30, 0x55	; 85
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	8b 7f       	andi	r24, 0xFB	; 251
    25ea:	8c 93       	st	X, r24
						MCUCR &= ~(MASK_BIT << ISC11);
    25ec:	a5 e5       	ldi	r26, 0x55	; 85
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	e5 e5       	ldi	r30, 0x55	; 85
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	87 7f       	andi	r24, 0xF7	; 247
    25f8:	8c 93       	st	X, r24
    25fa:	79 c0       	rjmp	.+242    	; 0x26ee <EXTI_enuInit+0x310>
						break;
						
						case LOGICAL:
						MCUCR |= (MASK_BIT << ISC10);
    25fc:	a5 e5       	ldi	r26, 0x55	; 85
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	e5 e5       	ldi	r30, 0x55	; 85
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	84 60       	ori	r24, 0x04	; 4
    2608:	8c 93       	st	X, r24
						MCUCR &= ~(MASK_BIT << ISC11);
    260a:	a5 e5       	ldi	r26, 0x55	; 85
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	e5 e5       	ldi	r30, 0x55	; 85
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	87 7f       	andi	r24, 0xF7	; 247
    2616:	8c 93       	st	X, r24
    2618:	6a c0       	rjmp	.+212    	; 0x26ee <EXTI_enuInit+0x310>
						break;
						
						case FAILLING:
						MCUCR &= ~(MASK_BIT << ISC10);
    261a:	a5 e5       	ldi	r26, 0x55	; 85
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	e5 e5       	ldi	r30, 0x55	; 85
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	8b 7f       	andi	r24, 0xFB	; 251
    2626:	8c 93       	st	X, r24
						MCUCR |= (MASK_BIT << ISC11);
    2628:	a5 e5       	ldi	r26, 0x55	; 85
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	e5 e5       	ldi	r30, 0x55	; 85
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	88 60       	ori	r24, 0x08	; 8
    2634:	8c 93       	st	X, r24
    2636:	5b c0       	rjmp	.+182    	; 0x26ee <EXTI_enuInit+0x310>
						break;
						
						case RISING:
						MCUCR |= (MASK_BIT << ISC10);
    2638:	a5 e5       	ldi	r26, 0x55	; 85
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	e5 e5       	ldi	r30, 0x55	; 85
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 81       	ld	r24, Z
    2642:	84 60       	ori	r24, 0x04	; 4
    2644:	8c 93       	st	X, r24
						MCUCR |= (MASK_BIT << ISC11);
    2646:	a5 e5       	ldi	r26, 0x55	; 85
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	e5 e5       	ldi	r30, 0x55	; 85
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	80 81       	ld	r24, Z
    2650:	88 60       	ori	r24, 0x08	; 8
    2652:	8c 93       	st	X, r24
    2654:	4c c0       	rjmp	.+152    	; 0x26ee <EXTI_enuInit+0x310>
						break;
						
						default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
    2656:	83 e0       	ldi	r24, 0x03	; 3
    2658:	8a 83       	std	Y+2, r24	; 0x02
    265a:	49 c0       	rjmp	.+146    	; 0x26ee <EXTI_enuInit+0x310>
					}
				}
				break;
				
				case EXTI2:
				if(Copy_PEXTI_Config[Local_u8Iterator].EXTI_state == ENABLED)
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	28 2f       	mov	r18, r24
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	c9 01       	movw	r24, r18
    2664:	88 0f       	add	r24, r24
    2666:	99 1f       	adc	r25, r25
    2668:	28 0f       	add	r18, r24
    266a:	39 1f       	adc	r19, r25
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	9c 81       	ldd	r25, Y+4	; 0x04
    2670:	fc 01       	movw	r30, r24
    2672:	e2 0f       	add	r30, r18
    2674:	f3 1f       	adc	r31, r19
    2676:	81 81       	ldd	r24, Z+1	; 0x01
    2678:	88 23       	and	r24, r24
    267a:	c9 f5       	brne	.+114    	; 0x26ee <EXTI_enuInit+0x310>
				{
					//Masking the bit --> ISC2
					MCUCSR &= ~(1 << 6);
    267c:	a4 e5       	ldi	r26, 0x54	; 84
    267e:	b0 e0       	ldi	r27, 0x00	; 0
    2680:	e4 e5       	ldi	r30, 0x54	; 84
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	80 81       	ld	r24, Z
    2686:	8f 7b       	andi	r24, 0xBF	; 191
    2688:	8c 93       	st	X, r24
					switch(Copy_PEXTI_Config[Local_u8Iterator].EXTI_control_state)
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	28 2f       	mov	r18, r24
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	c9 01       	movw	r24, r18
    2692:	88 0f       	add	r24, r24
    2694:	99 1f       	adc	r25, r25
    2696:	28 0f       	add	r18, r24
    2698:	39 1f       	adc	r19, r25
    269a:	8b 81       	ldd	r24, Y+3	; 0x03
    269c:	9c 81       	ldd	r25, Y+4	; 0x04
    269e:	fc 01       	movw	r30, r24
    26a0:	e2 0f       	add	r30, r18
    26a2:	f3 1f       	adc	r31, r19
    26a4:	82 81       	ldd	r24, Z+2	; 0x02
    26a6:	28 2f       	mov	r18, r24
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	3e 83       	std	Y+6, r19	; 0x06
    26ac:	2d 83       	std	Y+5, r18	; 0x05
    26ae:	8d 81       	ldd	r24, Y+5	; 0x05
    26b0:	9e 81       	ldd	r25, Y+6	; 0x06
    26b2:	82 30       	cpi	r24, 0x02	; 2
    26b4:	91 05       	cpc	r25, r1
    26b6:	31 f0       	breq	.+12     	; 0x26c4 <EXTI_enuInit+0x2e6>
    26b8:	2d 81       	ldd	r18, Y+5	; 0x05
    26ba:	3e 81       	ldd	r19, Y+6	; 0x06
    26bc:	23 30       	cpi	r18, 0x03	; 3
    26be:	31 05       	cpc	r19, r1
    26c0:	49 f0       	breq	.+18     	; 0x26d4 <EXTI_enuInit+0x2f6>
    26c2:	10 c0       	rjmp	.+32     	; 0x26e4 <EXTI_enuInit+0x306>
					{			
						case FAILLING:
						MCUCSR &= ~(MASK_BIT << ISC2);
    26c4:	a4 e5       	ldi	r26, 0x54	; 84
    26c6:	b0 e0       	ldi	r27, 0x00	; 0
    26c8:	e4 e5       	ldi	r30, 0x54	; 84
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	80 81       	ld	r24, Z
    26ce:	8f 7b       	andi	r24, 0xBF	; 191
    26d0:	8c 93       	st	X, r24
    26d2:	0d c0       	rjmp	.+26     	; 0x26ee <EXTI_enuInit+0x310>
						break;
						
						case RISING:
						MCUCSR |= (MASK_BIT << ISC2);
    26d4:	a4 e5       	ldi	r26, 0x54	; 84
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	e4 e5       	ldi	r30, 0x54	; 84
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	80 64       	ori	r24, 0x40	; 64
    26e0:	8c 93       	st	X, r24
    26e2:	05 c0       	rjmp	.+10     	; 0x26ee <EXTI_enuInit+0x310>
						break;
						
						default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
    26e4:	83 e0       	ldi	r24, 0x03	; 3
    26e6:	8a 83       	std	Y+2, r24	; 0x02
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <EXTI_enuInit+0x310>
					}			
				}
				break;
				
				default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    26ea:	83 e0       	ldi	r24, 0x03	; 3
    26ec:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_PEXTI_Config != NULL)
	{
		u8 Local_u8Iterator = 0;
		for(Local_u8Iterator = 0; Local_u8Iterator < MAX_NUM_EXTI; Local_u8Iterator++)
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	8f 5f       	subi	r24, 0xFF	; 255
    26f2:	89 83       	std	Y+1, r24	; 0x01
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	83 30       	cpi	r24, 0x03	; 3
    26f8:	08 f4       	brcc	.+2      	; 0x26fc <EXTI_enuInit+0x31e>
    26fa:	87 ce       	rjmp	.-754    	; 0x240a <EXTI_enuInit+0x2c>
    26fc:	02 c0       	rjmp	.+4      	; 0x2702 <EXTI_enuInit+0x324>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    26fe:	82 e0       	ldi	r24, 0x02	; 2
    2700:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	return Local_enuErrorState;
    2702:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2704:	2c 96       	adiw	r28, 0x0c	; 12
    2706:	0f b6       	in	r0, 0x3f	; 63
    2708:	f8 94       	cli
    270a:	de bf       	out	0x3e, r29	; 62
    270c:	0f be       	out	0x3f, r0	; 63
    270e:	cd bf       	out	0x3d, r28	; 61
    2710:	cf 91       	pop	r28
    2712:	df 91       	pop	r29
    2714:	08 95       	ret

00002716 <EXTI_enuChange_Control_State>:

ES_t EXTI_enuChange_Control_State(EXTI_ID_t Copy_enuEXTI_Id, EXTI_CTL_STATE_t Copy_enuControlState)
{
    2716:	df 93       	push	r29
    2718:	cf 93       	push	r28
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
    271e:	2b 97       	sbiw	r28, 0x0b	; 11
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	f8 94       	cli
    2724:	de bf       	out	0x3e, r29	; 62
    2726:	0f be       	out	0x3f, r0	; 63
    2728:	cd bf       	out	0x3d, r28	; 61
    272a:	8a 83       	std	Y+2, r24	; 0x02
    272c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_enuEXTI_Id < MAX_NUM_EXTI)
    2732:	8a 81       	ldd	r24, Y+2	; 0x02
    2734:	83 30       	cpi	r24, 0x03	; 3
    2736:	08 f0       	brcs	.+2      	; 0x273a <EXTI_enuChange_Control_State+0x24>
    2738:	0d c1       	rjmp	.+538    	; 0x2954 <EXTI_enuChange_Control_State+0x23e>
	{
		switch(Copy_enuEXTI_Id)
    273a:	8a 81       	ldd	r24, Y+2	; 0x02
    273c:	28 2f       	mov	r18, r24
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	3b 87       	std	Y+11, r19	; 0x0b
    2742:	2a 87       	std	Y+10, r18	; 0x0a
    2744:	8a 85       	ldd	r24, Y+10	; 0x0a
    2746:	9b 85       	ldd	r25, Y+11	; 0x0b
    2748:	81 30       	cpi	r24, 0x01	; 1
    274a:	91 05       	cpc	r25, r1
    274c:	09 f4       	brne	.+2      	; 0x2750 <EXTI_enuChange_Control_State+0x3a>
    274e:	70 c0       	rjmp	.+224    	; 0x2830 <EXTI_enuChange_Control_State+0x11a>
    2750:	2a 85       	ldd	r18, Y+10	; 0x0a
    2752:	3b 85       	ldd	r19, Y+11	; 0x0b
    2754:	22 30       	cpi	r18, 0x02	; 2
    2756:	31 05       	cpc	r19, r1
    2758:	09 f4       	brne	.+2      	; 0x275c <EXTI_enuChange_Control_State+0x46>
    275a:	cf c0       	rjmp	.+414    	; 0x28fa <EXTI_enuChange_Control_State+0x1e4>
    275c:	8a 85       	ldd	r24, Y+10	; 0x0a
    275e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2760:	00 97       	sbiw	r24, 0x00	; 0
    2762:	09 f0       	breq	.+2      	; 0x2766 <EXTI_enuChange_Control_State+0x50>
    2764:	f4 c0       	rjmp	.+488    	; 0x294e <EXTI_enuChange_Control_State+0x238>
		{
			case EXTI0:
			//Masking the 2 bits --> ISC00, ISC01
			MCUCR &= ~(3 << 0);
    2766:	a5 e5       	ldi	r26, 0x55	; 85
    2768:	b0 e0       	ldi	r27, 0x00	; 0
    276a:	e5 e5       	ldi	r30, 0x55	; 85
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	80 81       	ld	r24, Z
    2770:	8c 7f       	andi	r24, 0xFC	; 252
    2772:	8c 93       	st	X, r24
			switch(Copy_enuControlState)
    2774:	8b 81       	ldd	r24, Y+3	; 0x03
    2776:	28 2f       	mov	r18, r24
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	39 87       	std	Y+9, r19	; 0x09
    277c:	28 87       	std	Y+8, r18	; 0x08
    277e:	88 85       	ldd	r24, Y+8	; 0x08
    2780:	99 85       	ldd	r25, Y+9	; 0x09
    2782:	81 30       	cpi	r24, 0x01	; 1
    2784:	91 05       	cpc	r25, r1
    2786:	21 f1       	breq	.+72     	; 0x27d0 <EXTI_enuChange_Control_State+0xba>
    2788:	28 85       	ldd	r18, Y+8	; 0x08
    278a:	39 85       	ldd	r19, Y+9	; 0x09
    278c:	22 30       	cpi	r18, 0x02	; 2
    278e:	31 05       	cpc	r19, r1
    2790:	2c f4       	brge	.+10     	; 0x279c <EXTI_enuChange_Control_State+0x86>
    2792:	88 85       	ldd	r24, Y+8	; 0x08
    2794:	99 85       	ldd	r25, Y+9	; 0x09
    2796:	00 97       	sbiw	r24, 0x00	; 0
    2798:	61 f0       	breq	.+24     	; 0x27b2 <EXTI_enuChange_Control_State+0x9c>
    279a:	47 c0       	rjmp	.+142    	; 0x282a <EXTI_enuChange_Control_State+0x114>
    279c:	28 85       	ldd	r18, Y+8	; 0x08
    279e:	39 85       	ldd	r19, Y+9	; 0x09
    27a0:	22 30       	cpi	r18, 0x02	; 2
    27a2:	31 05       	cpc	r19, r1
    27a4:	21 f1       	breq	.+72     	; 0x27ee <EXTI_enuChange_Control_State+0xd8>
    27a6:	88 85       	ldd	r24, Y+8	; 0x08
    27a8:	99 85       	ldd	r25, Y+9	; 0x09
    27aa:	83 30       	cpi	r24, 0x03	; 3
    27ac:	91 05       	cpc	r25, r1
    27ae:	71 f1       	breq	.+92     	; 0x280c <EXTI_enuChange_Control_State+0xf6>
    27b0:	3c c0       	rjmp	.+120    	; 0x282a <EXTI_enuChange_Control_State+0x114>
			{
				case LOW_LEVEL:
				MCUCR &= ~(MASK_BIT << ISC00);
    27b2:	a5 e5       	ldi	r26, 0x55	; 85
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	e5 e5       	ldi	r30, 0x55	; 85
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	8e 7f       	andi	r24, 0xFE	; 254
    27be:	8c 93       	st	X, r24
				MCUCR &= ~(MASK_BIT << ISC01);
    27c0:	a5 e5       	ldi	r26, 0x55	; 85
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	e5 e5       	ldi	r30, 0x55	; 85
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	80 81       	ld	r24, Z
    27ca:	8d 7f       	andi	r24, 0xFD	; 253
    27cc:	8c 93       	st	X, r24
    27ce:	c4 c0       	rjmp	.+392    	; 0x2958 <EXTI_enuChange_Control_State+0x242>
				break;
				
				case LOGICAL:
				MCUCR |= (MASK_BIT << ISC00);
    27d0:	a5 e5       	ldi	r26, 0x55	; 85
    27d2:	b0 e0       	ldi	r27, 0x00	; 0
    27d4:	e5 e5       	ldi	r30, 0x55	; 85
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 81       	ld	r24, Z
    27da:	81 60       	ori	r24, 0x01	; 1
    27dc:	8c 93       	st	X, r24
				MCUCR &= ~(MASK_BIT << ISC01);
    27de:	a5 e5       	ldi	r26, 0x55	; 85
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	e5 e5       	ldi	r30, 0x55	; 85
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	8d 7f       	andi	r24, 0xFD	; 253
    27ea:	8c 93       	st	X, r24
    27ec:	b5 c0       	rjmp	.+362    	; 0x2958 <EXTI_enuChange_Control_State+0x242>
				break;
				
				case FAILLING:
				MCUCR &= ~(MASK_BIT << ISC00);
    27ee:	a5 e5       	ldi	r26, 0x55	; 85
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	e5 e5       	ldi	r30, 0x55	; 85
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	8e 7f       	andi	r24, 0xFE	; 254
    27fa:	8c 93       	st	X, r24
				MCUCR |= (MASK_BIT << ISC01);
    27fc:	a5 e5       	ldi	r26, 0x55	; 85
    27fe:	b0 e0       	ldi	r27, 0x00	; 0
    2800:	e5 e5       	ldi	r30, 0x55	; 85
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	82 60       	ori	r24, 0x02	; 2
    2808:	8c 93       	st	X, r24
    280a:	a6 c0       	rjmp	.+332    	; 0x2958 <EXTI_enuChange_Control_State+0x242>
				break;
				
				case RISING:
				MCUCR |= (MASK_BIT << ISC00);
    280c:	a5 e5       	ldi	r26, 0x55	; 85
    280e:	b0 e0       	ldi	r27, 0x00	; 0
    2810:	e5 e5       	ldi	r30, 0x55	; 85
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	80 81       	ld	r24, Z
    2816:	81 60       	ori	r24, 0x01	; 1
    2818:	8c 93       	st	X, r24
				MCUCR |= (MASK_BIT << ISC01);
    281a:	a5 e5       	ldi	r26, 0x55	; 85
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	e5 e5       	ldi	r30, 0x55	; 85
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	80 81       	ld	r24, Z
    2824:	82 60       	ori	r24, 0x02	; 2
    2826:	8c 93       	st	X, r24
    2828:	97 c0       	rjmp	.+302    	; 0x2958 <EXTI_enuChange_Control_State+0x242>
				break;
				
				default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    282a:	83 e0       	ldi	r24, 0x03	; 3
    282c:	89 83       	std	Y+1, r24	; 0x01
    282e:	94 c0       	rjmp	.+296    	; 0x2958 <EXTI_enuChange_Control_State+0x242>
			}
			break;
			
			case EXTI1:
			//Masking the 2 bits --> ISC10, ISC11
			MCUCR &= ~(3 << 2);
    2830:	a5 e5       	ldi	r26, 0x55	; 85
    2832:	b0 e0       	ldi	r27, 0x00	; 0
    2834:	e5 e5       	ldi	r30, 0x55	; 85
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	80 81       	ld	r24, Z
    283a:	83 7f       	andi	r24, 0xF3	; 243
    283c:	8c 93       	st	X, r24
			switch(Copy_enuControlState)
    283e:	8b 81       	ldd	r24, Y+3	; 0x03
    2840:	28 2f       	mov	r18, r24
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	3f 83       	std	Y+7, r19	; 0x07
    2846:	2e 83       	std	Y+6, r18	; 0x06
    2848:	8e 81       	ldd	r24, Y+6	; 0x06
    284a:	9f 81       	ldd	r25, Y+7	; 0x07
    284c:	81 30       	cpi	r24, 0x01	; 1
    284e:	91 05       	cpc	r25, r1
    2850:	21 f1       	breq	.+72     	; 0x289a <EXTI_enuChange_Control_State+0x184>
    2852:	2e 81       	ldd	r18, Y+6	; 0x06
    2854:	3f 81       	ldd	r19, Y+7	; 0x07
    2856:	22 30       	cpi	r18, 0x02	; 2
    2858:	31 05       	cpc	r19, r1
    285a:	2c f4       	brge	.+10     	; 0x2866 <EXTI_enuChange_Control_State+0x150>
    285c:	8e 81       	ldd	r24, Y+6	; 0x06
    285e:	9f 81       	ldd	r25, Y+7	; 0x07
    2860:	00 97       	sbiw	r24, 0x00	; 0
    2862:	61 f0       	breq	.+24     	; 0x287c <EXTI_enuChange_Control_State+0x166>
    2864:	47 c0       	rjmp	.+142    	; 0x28f4 <EXTI_enuChange_Control_State+0x1de>
    2866:	2e 81       	ldd	r18, Y+6	; 0x06
    2868:	3f 81       	ldd	r19, Y+7	; 0x07
    286a:	22 30       	cpi	r18, 0x02	; 2
    286c:	31 05       	cpc	r19, r1
    286e:	21 f1       	breq	.+72     	; 0x28b8 <EXTI_enuChange_Control_State+0x1a2>
    2870:	8e 81       	ldd	r24, Y+6	; 0x06
    2872:	9f 81       	ldd	r25, Y+7	; 0x07
    2874:	83 30       	cpi	r24, 0x03	; 3
    2876:	91 05       	cpc	r25, r1
    2878:	71 f1       	breq	.+92     	; 0x28d6 <EXTI_enuChange_Control_State+0x1c0>
    287a:	3c c0       	rjmp	.+120    	; 0x28f4 <EXTI_enuChange_Control_State+0x1de>
			{
				case LOW_LEVEL:
				MCUCR &= ~(MASK_BIT << ISC10);
    287c:	a5 e5       	ldi	r26, 0x55	; 85
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	e5 e5       	ldi	r30, 0x55	; 85
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	8b 7f       	andi	r24, 0xFB	; 251
    2888:	8c 93       	st	X, r24
				MCUCR &= ~(MASK_BIT << ISC11);
    288a:	a5 e5       	ldi	r26, 0x55	; 85
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	e5 e5       	ldi	r30, 0x55	; 85
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	87 7f       	andi	r24, 0xF7	; 247
    2896:	8c 93       	st	X, r24
    2898:	5f c0       	rjmp	.+190    	; 0x2958 <EXTI_enuChange_Control_State+0x242>
				break;
				
				case LOGICAL:
				MCUCR |= (MASK_BIT << ISC10);
    289a:	a5 e5       	ldi	r26, 0x55	; 85
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	e5 e5       	ldi	r30, 0x55	; 85
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	80 81       	ld	r24, Z
    28a4:	84 60       	ori	r24, 0x04	; 4
    28a6:	8c 93       	st	X, r24
				MCUCR &= ~(MASK_BIT << ISC11);
    28a8:	a5 e5       	ldi	r26, 0x55	; 85
    28aa:	b0 e0       	ldi	r27, 0x00	; 0
    28ac:	e5 e5       	ldi	r30, 0x55	; 85
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	80 81       	ld	r24, Z
    28b2:	87 7f       	andi	r24, 0xF7	; 247
    28b4:	8c 93       	st	X, r24
    28b6:	50 c0       	rjmp	.+160    	; 0x2958 <EXTI_enuChange_Control_State+0x242>
				break;
				
				case FAILLING:
				MCUCR &= ~(MASK_BIT << ISC10);
    28b8:	a5 e5       	ldi	r26, 0x55	; 85
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	e5 e5       	ldi	r30, 0x55	; 85
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 81       	ld	r24, Z
    28c2:	8b 7f       	andi	r24, 0xFB	; 251
    28c4:	8c 93       	st	X, r24
				MCUCR |= (MASK_BIT << ISC11);
    28c6:	a5 e5       	ldi	r26, 0x55	; 85
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	e5 e5       	ldi	r30, 0x55	; 85
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	88 60       	ori	r24, 0x08	; 8
    28d2:	8c 93       	st	X, r24
    28d4:	41 c0       	rjmp	.+130    	; 0x2958 <EXTI_enuChange_Control_State+0x242>
				break;
				
				case RISING:
				MCUCR |= (MASK_BIT << ISC10);
    28d6:	a5 e5       	ldi	r26, 0x55	; 85
    28d8:	b0 e0       	ldi	r27, 0x00	; 0
    28da:	e5 e5       	ldi	r30, 0x55	; 85
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	84 60       	ori	r24, 0x04	; 4
    28e2:	8c 93       	st	X, r24
				MCUCR |= (MASK_BIT << ISC11);
    28e4:	a5 e5       	ldi	r26, 0x55	; 85
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	e5 e5       	ldi	r30, 0x55	; 85
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	80 81       	ld	r24, Z
    28ee:	88 60       	ori	r24, 0x08	; 8
    28f0:	8c 93       	st	X, r24
    28f2:	32 c0       	rjmp	.+100    	; 0x2958 <EXTI_enuChange_Control_State+0x242>
				break;
				
				default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    28f4:	83 e0       	ldi	r24, 0x03	; 3
    28f6:	89 83       	std	Y+1, r24	; 0x01
    28f8:	2f c0       	rjmp	.+94     	; 0x2958 <EXTI_enuChange_Control_State+0x242>
			}
			break;
			
			case EXTI2:
			//Masking the bit --> ISC2
			MCUCSR &= ~(1 << 6);
    28fa:	a4 e5       	ldi	r26, 0x54	; 84
    28fc:	b0 e0       	ldi	r27, 0x00	; 0
    28fe:	e4 e5       	ldi	r30, 0x54	; 84
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	80 81       	ld	r24, Z
    2904:	8f 7b       	andi	r24, 0xBF	; 191
    2906:	8c 93       	st	X, r24
			switch(Copy_enuControlState)
    2908:	8b 81       	ldd	r24, Y+3	; 0x03
    290a:	28 2f       	mov	r18, r24
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	3d 83       	std	Y+5, r19	; 0x05
    2910:	2c 83       	std	Y+4, r18	; 0x04
    2912:	8c 81       	ldd	r24, Y+4	; 0x04
    2914:	9d 81       	ldd	r25, Y+5	; 0x05
    2916:	82 30       	cpi	r24, 0x02	; 2
    2918:	91 05       	cpc	r25, r1
    291a:	31 f0       	breq	.+12     	; 0x2928 <EXTI_enuChange_Control_State+0x212>
    291c:	2c 81       	ldd	r18, Y+4	; 0x04
    291e:	3d 81       	ldd	r19, Y+5	; 0x05
    2920:	23 30       	cpi	r18, 0x03	; 3
    2922:	31 05       	cpc	r19, r1
    2924:	49 f0       	breq	.+18     	; 0x2938 <EXTI_enuChange_Control_State+0x222>
    2926:	10 c0       	rjmp	.+32     	; 0x2948 <EXTI_enuChange_Control_State+0x232>
			{
				case FAILLING:
				MCUCSR &= ~(MASK_BIT << ISC2);
    2928:	a4 e5       	ldi	r26, 0x54	; 84
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	e4 e5       	ldi	r30, 0x54	; 84
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	8f 7b       	andi	r24, 0xBF	; 191
    2934:	8c 93       	st	X, r24
    2936:	10 c0       	rjmp	.+32     	; 0x2958 <EXTI_enuChange_Control_State+0x242>
				break;
				
				case RISING:
				MCUCSR |= (MASK_BIT << ISC2);
    2938:	a4 e5       	ldi	r26, 0x54	; 84
    293a:	b0 e0       	ldi	r27, 0x00	; 0
    293c:	e4 e5       	ldi	r30, 0x54	; 84
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	80 81       	ld	r24, Z
    2942:	80 64       	ori	r24, 0x40	; 64
    2944:	8c 93       	st	X, r24
    2946:	08 c0       	rjmp	.+16     	; 0x2958 <EXTI_enuChange_Control_State+0x242>
				break;
				
				default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    2948:	83 e0       	ldi	r24, 0x03	; 3
    294a:	89 83       	std	Y+1, r24	; 0x01
    294c:	05 c0       	rjmp	.+10     	; 0x2958 <EXTI_enuChange_Control_State+0x242>
				break;
			}
			break;
			
			default:
			Local_enuErrorState = ES_OUT_OF_RANGE;
    294e:	83 e0       	ldi	r24, 0x03	; 3
    2950:	89 83       	std	Y+1, r24	; 0x01
    2952:	02 c0       	rjmp	.+4      	; 0x2958 <EXTI_enuChange_Control_State+0x242>
			break;
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2954:	83 e0       	ldi	r24, 0x03	; 3
    2956:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    2958:	89 81       	ldd	r24, Y+1	; 0x01
}
    295a:	2b 96       	adiw	r28, 0x0b	; 11
    295c:	0f b6       	in	r0, 0x3f	; 63
    295e:	f8 94       	cli
    2960:	de bf       	out	0x3e, r29	; 62
    2962:	0f be       	out	0x3f, r0	; 63
    2964:	cd bf       	out	0x3d, r28	; 61
    2966:	cf 91       	pop	r28
    2968:	df 91       	pop	r29
    296a:	08 95       	ret

0000296c <EXTI_enuEnable>:

ES_t EXTI_enuEnable(EXTI_ID_t Copy_enuEXTI_Id)
{
    296c:	df 93       	push	r29
    296e:	cf 93       	push	r28
    2970:	00 d0       	rcall	.+0      	; 0x2972 <EXTI_enuEnable+0x6>
    2972:	00 d0       	rcall	.+0      	; 0x2974 <EXTI_enuEnable+0x8>
    2974:	cd b7       	in	r28, 0x3d	; 61
    2976:	de b7       	in	r29, 0x3e	; 62
    2978:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_enuEXTI_Id < MAX_NUM_EXTI)
    297e:	8a 81       	ldd	r24, Y+2	; 0x02
    2980:	83 30       	cpi	r24, 0x03	; 3
    2982:	08 f0       	brcs	.+2      	; 0x2986 <EXTI_enuEnable+0x1a>
    2984:	40 c0       	rjmp	.+128    	; 0x2a06 <EXTI_enuEnable+0x9a>
	{
		switch(Copy_enuEXTI_Id)
    2986:	8a 81       	ldd	r24, Y+2	; 0x02
    2988:	28 2f       	mov	r18, r24
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	3c 83       	std	Y+4, r19	; 0x04
    298e:	2b 83       	std	Y+3, r18	; 0x03
    2990:	8b 81       	ldd	r24, Y+3	; 0x03
    2992:	9c 81       	ldd	r25, Y+4	; 0x04
    2994:	81 30       	cpi	r24, 0x01	; 1
    2996:	91 05       	cpc	r25, r1
    2998:	c1 f0       	breq	.+48     	; 0x29ca <EXTI_enuEnable+0x5e>
    299a:	2b 81       	ldd	r18, Y+3	; 0x03
    299c:	3c 81       	ldd	r19, Y+4	; 0x04
    299e:	22 30       	cpi	r18, 0x02	; 2
    29a0:	31 05       	cpc	r19, r1
    29a2:	11 f1       	breq	.+68     	; 0x29e8 <EXTI_enuEnable+0x7c>
    29a4:	8b 81       	ldd	r24, Y+3	; 0x03
    29a6:	9c 81       	ldd	r25, Y+4	; 0x04
    29a8:	00 97       	sbiw	r24, 0x00	; 0
    29aa:	79 f5       	brne	.+94     	; 0x2a0a <EXTI_enuEnable+0x9e>
		{
			case EXTI0:
			GICR &= ~(MASK_BIT << INT0);
    29ac:	ab e5       	ldi	r26, 0x5B	; 91
    29ae:	b0 e0       	ldi	r27, 0x00	; 0
    29b0:	eb e5       	ldi	r30, 0x5B	; 91
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	80 81       	ld	r24, Z
    29b6:	8f 7b       	andi	r24, 0xBF	; 191
    29b8:	8c 93       	st	X, r24
			GICR |= (MASK_BIT << INT0);
    29ba:	ab e5       	ldi	r26, 0x5B	; 91
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	eb e5       	ldi	r30, 0x5B	; 91
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	80 64       	ori	r24, 0x40	; 64
    29c6:	8c 93       	st	X, r24
    29c8:	20 c0       	rjmp	.+64     	; 0x2a0a <EXTI_enuEnable+0x9e>
			break;
			
			case EXTI1:
			GICR &= ~(MASK_BIT << INT1);
    29ca:	ab e5       	ldi	r26, 0x5B	; 91
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	eb e5       	ldi	r30, 0x5B	; 91
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	80 81       	ld	r24, Z
    29d4:	8f 77       	andi	r24, 0x7F	; 127
    29d6:	8c 93       	st	X, r24
			GICR |= (MASK_BIT << INT1);
    29d8:	ab e5       	ldi	r26, 0x5B	; 91
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	eb e5       	ldi	r30, 0x5B	; 91
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	80 68       	ori	r24, 0x80	; 128
    29e4:	8c 93       	st	X, r24
    29e6:	11 c0       	rjmp	.+34     	; 0x2a0a <EXTI_enuEnable+0x9e>
			break;
			
			case EXTI2:
			GICR &= ~(MASK_BIT << INT2);
    29e8:	ab e5       	ldi	r26, 0x5B	; 91
    29ea:	b0 e0       	ldi	r27, 0x00	; 0
    29ec:	eb e5       	ldi	r30, 0x5B	; 91
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	80 81       	ld	r24, Z
    29f2:	8f 7d       	andi	r24, 0xDF	; 223
    29f4:	8c 93       	st	X, r24
			GICR |= (MASK_BIT << INT2);
    29f6:	ab e5       	ldi	r26, 0x5B	; 91
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	eb e5       	ldi	r30, 0x5B	; 91
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	80 62       	ori	r24, 0x20	; 32
    2a02:	8c 93       	st	X, r24
    2a04:	02 c0       	rjmp	.+4      	; 0x2a0a <EXTI_enuEnable+0x9e>
			break;
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2a06:	83 e0       	ldi	r24, 0x03	; 3
    2a08:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    2a0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	cf 91       	pop	r28
    2a16:	df 91       	pop	r29
    2a18:	08 95       	ret

00002a1a <EXTI_enuDisable>:

ES_t EXTI_enuDisable(EXTI_ID_t Copy_enuEXTI_Id)
{
    2a1a:	df 93       	push	r29
    2a1c:	cf 93       	push	r28
    2a1e:	00 d0       	rcall	.+0      	; 0x2a20 <EXTI_enuDisable+0x6>
    2a20:	00 d0       	rcall	.+0      	; 0x2a22 <EXTI_enuDisable+0x8>
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62
    2a26:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_enuEXTI_Id < MAX_NUM_EXTI)
    2a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2e:	83 30       	cpi	r24, 0x03	; 3
    2a30:	58 f5       	brcc	.+86     	; 0x2a88 <EXTI_enuDisable+0x6e>
	{
		switch(Copy_enuEXTI_Id)
    2a32:	8a 81       	ldd	r24, Y+2	; 0x02
    2a34:	28 2f       	mov	r18, r24
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	3c 83       	std	Y+4, r19	; 0x04
    2a3a:	2b 83       	std	Y+3, r18	; 0x03
    2a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a40:	81 30       	cpi	r24, 0x01	; 1
    2a42:	91 05       	cpc	r25, r1
    2a44:	89 f0       	breq	.+34     	; 0x2a68 <EXTI_enuDisable+0x4e>
    2a46:	2b 81       	ldd	r18, Y+3	; 0x03
    2a48:	3c 81       	ldd	r19, Y+4	; 0x04
    2a4a:	22 30       	cpi	r18, 0x02	; 2
    2a4c:	31 05       	cpc	r19, r1
    2a4e:	a1 f0       	breq	.+40     	; 0x2a78 <EXTI_enuDisable+0x5e>
    2a50:	8b 81       	ldd	r24, Y+3	; 0x03
    2a52:	9c 81       	ldd	r25, Y+4	; 0x04
    2a54:	00 97       	sbiw	r24, 0x00	; 0
    2a56:	d1 f4       	brne	.+52     	; 0x2a8c <EXTI_enuDisable+0x72>
		{
			case EXTI0:
			GICR &= ~(1 << INT0);
    2a58:	ab e5       	ldi	r26, 0x5B	; 91
    2a5a:	b0 e0       	ldi	r27, 0x00	; 0
    2a5c:	eb e5       	ldi	r30, 0x5B	; 91
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	80 81       	ld	r24, Z
    2a62:	8f 7b       	andi	r24, 0xBF	; 191
    2a64:	8c 93       	st	X, r24
    2a66:	12 c0       	rjmp	.+36     	; 0x2a8c <EXTI_enuDisable+0x72>
			break;
			
			case EXTI1:
			GICR &= ~(1 << INT1);
    2a68:	ab e5       	ldi	r26, 0x5B	; 91
    2a6a:	b0 e0       	ldi	r27, 0x00	; 0
    2a6c:	eb e5       	ldi	r30, 0x5B	; 91
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	80 81       	ld	r24, Z
    2a72:	8f 77       	andi	r24, 0x7F	; 127
    2a74:	8c 93       	st	X, r24
    2a76:	0a c0       	rjmp	.+20     	; 0x2a8c <EXTI_enuDisable+0x72>
			break;
			
			case EXTI2:
			GICR &= ~(1 << INT2);
    2a78:	ab e5       	ldi	r26, 0x5B	; 91
    2a7a:	b0 e0       	ldi	r27, 0x00	; 0
    2a7c:	eb e5       	ldi	r30, 0x5B	; 91
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	80 81       	ld	r24, Z
    2a82:	8f 7d       	andi	r24, 0xDF	; 223
    2a84:	8c 93       	st	X, r24
    2a86:	02 c0       	rjmp	.+4      	; 0x2a8c <EXTI_enuDisable+0x72>
			break;
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2a88:	83 e0       	ldi	r24, 0x03	; 3
    2a8a:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a8e:	0f 90       	pop	r0
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	cf 91       	pop	r28
    2a98:	df 91       	pop	r29
    2a9a:	08 95       	ret

00002a9c <EXTI_enuCallBackFunc>:

ES_t EXTI_enuCallBackFunc(volatile void (*Copy_PFunc)(void*), volatile void *Copy_PvidAppParameter, EXTI_ID_t Copy_enuEXTI_Id)
{
    2a9c:	df 93       	push	r29
    2a9e:	cf 93       	push	r28
    2aa0:	00 d0       	rcall	.+0      	; 0x2aa2 <EXTI_enuCallBackFunc+0x6>
    2aa2:	00 d0       	rcall	.+0      	; 0x2aa4 <EXTI_enuCallBackFunc+0x8>
    2aa4:	00 d0       	rcall	.+0      	; 0x2aa6 <EXTI_enuCallBackFunc+0xa>
    2aa6:	cd b7       	in	r28, 0x3d	; 61
    2aa8:	de b7       	in	r29, 0x3e	; 62
    2aaa:	9b 83       	std	Y+3, r25	; 0x03
    2aac:	8a 83       	std	Y+2, r24	; 0x02
    2aae:	7d 83       	std	Y+5, r23	; 0x05
    2ab0:	6c 83       	std	Y+4, r22	; 0x04
    2ab2:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_PFunc != NULL)
    2ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aba:	9b 81       	ldd	r25, Y+3	; 0x03
    2abc:	00 97       	sbiw	r24, 0x00	; 0
    2abe:	01 f1       	breq	.+64     	; 0x2b00 <EXTI_enuCallBackFunc+0x64>
	{
		if(Copy_enuEXTI_Id < MAX_NUM_EXTI)
    2ac0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ac2:	83 30       	cpi	r24, 0x03	; 3
    2ac4:	d0 f4       	brcc	.+52     	; 0x2afa <EXTI_enuCallBackFunc+0x5e>
		{
			EXTI_APFunc[Copy_enuEXTI_Id] = Copy_PFunc;
    2ac6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ac8:	88 2f       	mov	r24, r24
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	88 0f       	add	r24, r24
    2ace:	99 1f       	adc	r25, r25
    2ad0:	fc 01       	movw	r30, r24
    2ad2:	e3 5e       	subi	r30, 0xE3	; 227
    2ad4:	fd 4f       	sbci	r31, 0xFD	; 253
    2ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    2ada:	91 83       	std	Z+1, r25	; 0x01
    2adc:	80 83       	st	Z, r24
			EXTI_APvidGenericParameters[Copy_enuEXTI_Id] = Copy_PvidAppParameter;
    2ade:	8e 81       	ldd	r24, Y+6	; 0x06
    2ae0:	88 2f       	mov	r24, r24
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	88 0f       	add	r24, r24
    2ae6:	99 1f       	adc	r25, r25
    2ae8:	fc 01       	movw	r30, r24
    2aea:	ed 5d       	subi	r30, 0xDD	; 221
    2aec:	fd 4f       	sbci	r31, 0xFD	; 253
    2aee:	8c 81       	ldd	r24, Y+4	; 0x04
    2af0:	9d 81       	ldd	r25, Y+5	; 0x05
    2af2:	91 83       	std	Z+1, r25	; 0x01
    2af4:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK;
    2af6:	19 82       	std	Y+1, r1	; 0x01
    2af8:	05 c0       	rjmp	.+10     	; 0x2b04 <EXTI_enuCallBackFunc+0x68>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    2afa:	83 e0       	ldi	r24, 0x03	; 3
    2afc:	89 83       	std	Y+1, r24	; 0x01
    2afe:	02 c0       	rjmp	.+4      	; 0x2b04 <EXTI_enuCallBackFunc+0x68>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2b00:	82 e0       	ldi	r24, 0x02	; 2
    2b02:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    2b04:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b06:	26 96       	adiw	r28, 0x06	; 6
    2b08:	0f b6       	in	r0, 0x3f	; 63
    2b0a:	f8 94       	cli
    2b0c:	de bf       	out	0x3e, r29	; 62
    2b0e:	0f be       	out	0x3f, r0	; 63
    2b10:	cd bf       	out	0x3d, r28	; 61
    2b12:	cf 91       	pop	r28
    2b14:	df 91       	pop	r29
    2b16:	08 95       	ret

00002b18 <__vector_1>:

/* ISR for EXTI0 */
ISR(VECT_INT0)
{	
    2b18:	1f 92       	push	r1
    2b1a:	0f 92       	push	r0
    2b1c:	0f b6       	in	r0, 0x3f	; 63
    2b1e:	0f 92       	push	r0
    2b20:	11 24       	eor	r1, r1
    2b22:	2f 93       	push	r18
    2b24:	3f 93       	push	r19
    2b26:	4f 93       	push	r20
    2b28:	5f 93       	push	r21
    2b2a:	6f 93       	push	r22
    2b2c:	7f 93       	push	r23
    2b2e:	8f 93       	push	r24
    2b30:	9f 93       	push	r25
    2b32:	af 93       	push	r26
    2b34:	bf 93       	push	r27
    2b36:	ef 93       	push	r30
    2b38:	ff 93       	push	r31
    2b3a:	df 93       	push	r29
    2b3c:	cf 93       	push	r28
    2b3e:	cd b7       	in	r28, 0x3d	; 61
    2b40:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_APFunc[EXTI0] != NULL)
    2b42:	80 91 1d 02 	lds	r24, 0x021D
    2b46:	90 91 1e 02 	lds	r25, 0x021E
    2b4a:	00 97       	sbiw	r24, 0x00	; 0
    2b4c:	49 f0       	breq	.+18     	; 0x2b60 <__vector_1+0x48>
	{
		EXTI_APFunc[EXTI0](EXTI_APvidGenericParameters[EXTI0]);
    2b4e:	e0 91 1d 02 	lds	r30, 0x021D
    2b52:	f0 91 1e 02 	lds	r31, 0x021E
    2b56:	80 91 23 02 	lds	r24, 0x0223
    2b5a:	90 91 24 02 	lds	r25, 0x0224
    2b5e:	09 95       	icall
	}
}
    2b60:	cf 91       	pop	r28
    2b62:	df 91       	pop	r29
    2b64:	ff 91       	pop	r31
    2b66:	ef 91       	pop	r30
    2b68:	bf 91       	pop	r27
    2b6a:	af 91       	pop	r26
    2b6c:	9f 91       	pop	r25
    2b6e:	8f 91       	pop	r24
    2b70:	7f 91       	pop	r23
    2b72:	6f 91       	pop	r22
    2b74:	5f 91       	pop	r21
    2b76:	4f 91       	pop	r20
    2b78:	3f 91       	pop	r19
    2b7a:	2f 91       	pop	r18
    2b7c:	0f 90       	pop	r0
    2b7e:	0f be       	out	0x3f, r0	; 63
    2b80:	0f 90       	pop	r0
    2b82:	1f 90       	pop	r1
    2b84:	18 95       	reti

00002b86 <__vector_2>:

/* ISR for EXTI1 */
ISR(VECT_INT1)
{
    2b86:	1f 92       	push	r1
    2b88:	0f 92       	push	r0
    2b8a:	0f b6       	in	r0, 0x3f	; 63
    2b8c:	0f 92       	push	r0
    2b8e:	11 24       	eor	r1, r1
    2b90:	2f 93       	push	r18
    2b92:	3f 93       	push	r19
    2b94:	4f 93       	push	r20
    2b96:	5f 93       	push	r21
    2b98:	6f 93       	push	r22
    2b9a:	7f 93       	push	r23
    2b9c:	8f 93       	push	r24
    2b9e:	9f 93       	push	r25
    2ba0:	af 93       	push	r26
    2ba2:	bf 93       	push	r27
    2ba4:	ef 93       	push	r30
    2ba6:	ff 93       	push	r31
    2ba8:	df 93       	push	r29
    2baa:	cf 93       	push	r28
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_APFunc[EXTI1] != NULL)
    2bb0:	80 91 1f 02 	lds	r24, 0x021F
    2bb4:	90 91 20 02 	lds	r25, 0x0220
    2bb8:	00 97       	sbiw	r24, 0x00	; 0
    2bba:	49 f0       	breq	.+18     	; 0x2bce <__vector_2+0x48>
	{
		EXTI_APFunc[EXTI1](EXTI_APvidGenericParameters[EXTI1]);
    2bbc:	e0 91 1f 02 	lds	r30, 0x021F
    2bc0:	f0 91 20 02 	lds	r31, 0x0220
    2bc4:	80 91 25 02 	lds	r24, 0x0225
    2bc8:	90 91 26 02 	lds	r25, 0x0226
    2bcc:	09 95       	icall
	}
}
    2bce:	cf 91       	pop	r28
    2bd0:	df 91       	pop	r29
    2bd2:	ff 91       	pop	r31
    2bd4:	ef 91       	pop	r30
    2bd6:	bf 91       	pop	r27
    2bd8:	af 91       	pop	r26
    2bda:	9f 91       	pop	r25
    2bdc:	8f 91       	pop	r24
    2bde:	7f 91       	pop	r23
    2be0:	6f 91       	pop	r22
    2be2:	5f 91       	pop	r21
    2be4:	4f 91       	pop	r20
    2be6:	3f 91       	pop	r19
    2be8:	2f 91       	pop	r18
    2bea:	0f 90       	pop	r0
    2bec:	0f be       	out	0x3f, r0	; 63
    2bee:	0f 90       	pop	r0
    2bf0:	1f 90       	pop	r1
    2bf2:	18 95       	reti

00002bf4 <__vector_3>:

/* ISR for EXTI2 */
ISR(VECT_INT2)
{	
    2bf4:	1f 92       	push	r1
    2bf6:	0f 92       	push	r0
    2bf8:	0f b6       	in	r0, 0x3f	; 63
    2bfa:	0f 92       	push	r0
    2bfc:	11 24       	eor	r1, r1
    2bfe:	2f 93       	push	r18
    2c00:	3f 93       	push	r19
    2c02:	4f 93       	push	r20
    2c04:	5f 93       	push	r21
    2c06:	6f 93       	push	r22
    2c08:	7f 93       	push	r23
    2c0a:	8f 93       	push	r24
    2c0c:	9f 93       	push	r25
    2c0e:	af 93       	push	r26
    2c10:	bf 93       	push	r27
    2c12:	ef 93       	push	r30
    2c14:	ff 93       	push	r31
    2c16:	df 93       	push	r29
    2c18:	cf 93       	push	r28
    2c1a:	cd b7       	in	r28, 0x3d	; 61
    2c1c:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_APFunc[EXTI2] != NULL)
    2c1e:	80 91 21 02 	lds	r24, 0x0221
    2c22:	90 91 22 02 	lds	r25, 0x0222
    2c26:	00 97       	sbiw	r24, 0x00	; 0
    2c28:	49 f0       	breq	.+18     	; 0x2c3c <__vector_3+0x48>
	{
		EXTI_APFunc[EXTI2](EXTI_APvidGenericParameters[EXTI2]);
    2c2a:	e0 91 21 02 	lds	r30, 0x0221
    2c2e:	f0 91 22 02 	lds	r31, 0x0222
    2c32:	80 91 27 02 	lds	r24, 0x0227
    2c36:	90 91 28 02 	lds	r25, 0x0228
    2c3a:	09 95       	icall
	}
    2c3c:	cf 91       	pop	r28
    2c3e:	df 91       	pop	r29
    2c40:	ff 91       	pop	r31
    2c42:	ef 91       	pop	r30
    2c44:	bf 91       	pop	r27
    2c46:	af 91       	pop	r26
    2c48:	9f 91       	pop	r25
    2c4a:	8f 91       	pop	r24
    2c4c:	7f 91       	pop	r23
    2c4e:	6f 91       	pop	r22
    2c50:	5f 91       	pop	r21
    2c52:	4f 91       	pop	r20
    2c54:	3f 91       	pop	r19
    2c56:	2f 91       	pop	r18
    2c58:	0f 90       	pop	r0
    2c5a:	0f be       	out	0x3f, r0	; 63
    2c5c:	0f 90       	pop	r0
    2c5e:	1f 90       	pop	r1
    2c60:	18 95       	reti

00002c62 <DIO_enuINIT>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: Atmega32 has 4 ports A, B, C, D and each port consist of 8 pins
 ******************************************************************************
**/
ES_t DIO_enuINIT(void)
{
    2c62:	df 93       	push	r29
    2c64:	cf 93       	push	r28
    2c66:	0f 92       	push	r0
    2c68:	cd b7       	in	r28, 0x3d	; 61
    2c6a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	89 83       	std	Y+1, r24	; 0x01
	
	/* initialize of DDR register of 4 ports */
	DDRA = CONC(PA_DDR7,PA_DDR6,PA_DDR5,PA_DDR4,PA_DDR3,PA_DDR2,PA_DDR1,PA_DDR0);
    2c70:	ea e3       	ldi	r30, 0x3A	; 58
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	8e ef       	ldi	r24, 0xFE	; 254
    2c76:	80 83       	st	Z, r24
	DDRB = CONC(PB_DDR7,PB_DDR6,PB_DDR5,PB_DDR4,PB_DDR3,PB_DDR2,PB_DDR1,PB_DDR0);
    2c78:	e7 e3       	ldi	r30, 0x37	; 55
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	8f ef       	ldi	r24, 0xFF	; 255
    2c7e:	80 83       	st	Z, r24
	DDRC = CONC(PC_DDR7,PC_DDR6,PC_DDR5,PC_DDR4,PC_DDR3,PC_DDR2,PC_DDR1,PC_DDR0);
    2c80:	e4 e3       	ldi	r30, 0x34	; 52
    2c82:	f0 e0       	ldi	r31, 0x00	; 0
    2c84:	8f ef       	ldi	r24, 0xFF	; 255
    2c86:	80 83       	st	Z, r24
	DDRD = CONC(PD_DDR7,PD_DDR6,PD_DDR5,PD_DDR4,PD_DDR3,PD_DDR2,PD_DDR1,PD_DDR0);
    2c88:	e1 e3       	ldi	r30, 0x31	; 49
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	8a e4       	ldi	r24, 0x4A	; 74
    2c8e:	80 83       	st	Z, r24
	
	/* initialize of PORT register of 4 ports */
	PORTA = CONC(PA_PORT7,PA_PORT6,PA_PORT5,PA_PORT4,PA_PORT3,PA_PORT2,PA_PORT1,PA_PORT0);
    2c90:	eb e3       	ldi	r30, 0x3B	; 59
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	80 83       	st	Z, r24
	PORTB = CONC(PB_PORT7,PB_PORT6,PB_PORT5,PB_PORT4,PB_PORT3,PB_PORT2,PB_PORT1,PB_DDR0);
    2c98:	e8 e3       	ldi	r30, 0x38	; 56
    2c9a:	f0 e0       	ldi	r31, 0x00	; 0
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	80 83       	st	Z, r24
	PORTC = CONC(PC_PORT7,PC_PORT6,PC_PORT5,PC_PORT4,PC_PORT3,PC_PORT2,PC_PORT1,PC_PORT0);
    2ca0:	e5 e3       	ldi	r30, 0x35	; 53
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	10 82       	st	Z, r1
	PORTD = CONC(PD_PORT7,PD_PORT6,PD_PORT5,PD_PORT4,PD_PORT3,PD_PORT2,PD_PORT1,PD_PORT0);
    2ca6:	e2 e3       	ldi	r30, 0x32	; 50
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	86 e7       	ldi	r24, 0x76	; 118
    2cac:	80 83       	st	Z, r24
	
	Local_enuErrorState = ES_OK;
    2cae:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cb2:	0f 90       	pop	r0
    2cb4:	cf 91       	pop	r28
    2cb6:	df 91       	pop	r29
    2cb8:	08 95       	ret

00002cba <DIO_enuSetPortDirection>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    2cba:	df 93       	push	r29
    2cbc:	cf 93       	push	r28
    2cbe:	00 d0       	rcall	.+0      	; 0x2cc0 <DIO_enuSetPortDirection+0x6>
    2cc0:	00 d0       	rcall	.+0      	; 0x2cc2 <DIO_enuSetPortDirection+0x8>
    2cc2:	0f 92       	push	r0
    2cc4:	cd b7       	in	r28, 0x3d	; 61
    2cc6:	de b7       	in	r29, 0x3e	; 62
    2cc8:	8a 83       	std	Y+2, r24	; 0x02
    2cca:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_u8PortID <= DIO_PORTD)
    2cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd2:	84 30       	cpi	r24, 0x04	; 4
    2cd4:	a0 f5       	brcc	.+104    	; 0x2d3e <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
    2cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd8:	28 2f       	mov	r18, r24
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	3d 83       	std	Y+5, r19	; 0x05
    2cde:	2c 83       	std	Y+4, r18	; 0x04
    2ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ce4:	81 30       	cpi	r24, 0x01	; 1
    2ce6:	91 05       	cpc	r25, r1
    2ce8:	d1 f0       	breq	.+52     	; 0x2d1e <DIO_enuSetPortDirection+0x64>
    2cea:	2c 81       	ldd	r18, Y+4	; 0x04
    2cec:	3d 81       	ldd	r19, Y+5	; 0x05
    2cee:	22 30       	cpi	r18, 0x02	; 2
    2cf0:	31 05       	cpc	r19, r1
    2cf2:	2c f4       	brge	.+10     	; 0x2cfe <DIO_enuSetPortDirection+0x44>
    2cf4:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf6:	9d 81       	ldd	r25, Y+5	; 0x05
    2cf8:	00 97       	sbiw	r24, 0x00	; 0
    2cfa:	61 f0       	breq	.+24     	; 0x2d14 <DIO_enuSetPortDirection+0x5a>
    2cfc:	1e c0       	rjmp	.+60     	; 0x2d3a <DIO_enuSetPortDirection+0x80>
    2cfe:	2c 81       	ldd	r18, Y+4	; 0x04
    2d00:	3d 81       	ldd	r19, Y+5	; 0x05
    2d02:	22 30       	cpi	r18, 0x02	; 2
    2d04:	31 05       	cpc	r19, r1
    2d06:	81 f0       	breq	.+32     	; 0x2d28 <DIO_enuSetPortDirection+0x6e>
    2d08:	8c 81       	ldd	r24, Y+4	; 0x04
    2d0a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d0c:	83 30       	cpi	r24, 0x03	; 3
    2d0e:	91 05       	cpc	r25, r1
    2d10:	81 f0       	breq	.+32     	; 0x2d32 <DIO_enuSetPortDirection+0x78>
    2d12:	13 c0       	rjmp	.+38     	; 0x2d3a <DIO_enuSetPortDirection+0x80>
		{
			case DIO_PORTA:
			DDRA = Copy_u8Value;
    2d14:	ea e3       	ldi	r30, 0x3A	; 58
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1a:	80 83       	st	Z, r24
    2d1c:	0e c0       	rjmp	.+28     	; 0x2d3a <DIO_enuSetPortDirection+0x80>
			break;
			
			case DIO_PORTB:
			DDRB = Copy_u8Value;
    2d1e:	e7 e3       	ldi	r30, 0x37	; 55
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	8b 81       	ldd	r24, Y+3	; 0x03
    2d24:	80 83       	st	Z, r24
    2d26:	09 c0       	rjmp	.+18     	; 0x2d3a <DIO_enuSetPortDirection+0x80>
			break;
			
			case DIO_PORTC:
			DDRC = Copy_u8Value;
    2d28:	e4 e3       	ldi	r30, 0x34	; 52
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2e:	80 83       	st	Z, r24
    2d30:	04 c0       	rjmp	.+8      	; 0x2d3a <DIO_enuSetPortDirection+0x80>
			break;
			
			case DIO_PORTD:
			DDRD = Copy_u8Value;
    2d32:	e1 e3       	ldi	r30, 0x31	; 49
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	8b 81       	ldd	r24, Y+3	; 0x03
    2d38:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    2d3a:	19 82       	std	Y+1, r1	; 0x01
    2d3c:	02 c0       	rjmp	.+4      	; 0x2d42 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2d3e:	83 e0       	ldi	r24, 0x03	; 3
    2d40:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    2d42:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d44:	0f 90       	pop	r0
    2d46:	0f 90       	pop	r0
    2d48:	0f 90       	pop	r0
    2d4a:	0f 90       	pop	r0
    2d4c:	0f 90       	pop	r0
    2d4e:	cf 91       	pop	r28
    2d50:	df 91       	pop	r29
    2d52:	08 95       	ret

00002d54 <DIO_enuSetPortVal>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t DIO_enuSetPortVal(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    2d54:	df 93       	push	r29
    2d56:	cf 93       	push	r28
    2d58:	00 d0       	rcall	.+0      	; 0x2d5a <DIO_enuSetPortVal+0x6>
    2d5a:	00 d0       	rcall	.+0      	; 0x2d5c <DIO_enuSetPortVal+0x8>
    2d5c:	0f 92       	push	r0
    2d5e:	cd b7       	in	r28, 0x3d	; 61
    2d60:	de b7       	in	r29, 0x3e	; 62
    2d62:	8a 83       	std	Y+2, r24	; 0x02
    2d64:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_u8PortID <= DIO_PORTD)
    2d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6c:	84 30       	cpi	r24, 0x04	; 4
    2d6e:	a0 f5       	brcc	.+104    	; 0x2dd8 <DIO_enuSetPortVal+0x84>
	{
		switch(Copy_u8PortID)
    2d70:	8a 81       	ldd	r24, Y+2	; 0x02
    2d72:	28 2f       	mov	r18, r24
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	3d 83       	std	Y+5, r19	; 0x05
    2d78:	2c 83       	std	Y+4, r18	; 0x04
    2d7a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d7c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d7e:	81 30       	cpi	r24, 0x01	; 1
    2d80:	91 05       	cpc	r25, r1
    2d82:	d1 f0       	breq	.+52     	; 0x2db8 <DIO_enuSetPortVal+0x64>
    2d84:	2c 81       	ldd	r18, Y+4	; 0x04
    2d86:	3d 81       	ldd	r19, Y+5	; 0x05
    2d88:	22 30       	cpi	r18, 0x02	; 2
    2d8a:	31 05       	cpc	r19, r1
    2d8c:	2c f4       	brge	.+10     	; 0x2d98 <DIO_enuSetPortVal+0x44>
    2d8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d90:	9d 81       	ldd	r25, Y+5	; 0x05
    2d92:	00 97       	sbiw	r24, 0x00	; 0
    2d94:	61 f0       	breq	.+24     	; 0x2dae <DIO_enuSetPortVal+0x5a>
    2d96:	1e c0       	rjmp	.+60     	; 0x2dd4 <DIO_enuSetPortVal+0x80>
    2d98:	2c 81       	ldd	r18, Y+4	; 0x04
    2d9a:	3d 81       	ldd	r19, Y+5	; 0x05
    2d9c:	22 30       	cpi	r18, 0x02	; 2
    2d9e:	31 05       	cpc	r19, r1
    2da0:	81 f0       	breq	.+32     	; 0x2dc2 <DIO_enuSetPortVal+0x6e>
    2da2:	8c 81       	ldd	r24, Y+4	; 0x04
    2da4:	9d 81       	ldd	r25, Y+5	; 0x05
    2da6:	83 30       	cpi	r24, 0x03	; 3
    2da8:	91 05       	cpc	r25, r1
    2daa:	81 f0       	breq	.+32     	; 0x2dcc <DIO_enuSetPortVal+0x78>
    2dac:	13 c0       	rjmp	.+38     	; 0x2dd4 <DIO_enuSetPortVal+0x80>
		{
			case DIO_PORTA:
			PORTA = Copy_u8Value;
    2dae:	eb e3       	ldi	r30, 0x3B	; 59
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	8b 81       	ldd	r24, Y+3	; 0x03
    2db4:	80 83       	st	Z, r24
    2db6:	0e c0       	rjmp	.+28     	; 0x2dd4 <DIO_enuSetPortVal+0x80>
			break;
			
			case DIO_PORTB:
			PORTB = Copy_u8Value;
    2db8:	e8 e3       	ldi	r30, 0x38	; 56
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbe:	80 83       	st	Z, r24
    2dc0:	09 c0       	rjmp	.+18     	; 0x2dd4 <DIO_enuSetPortVal+0x80>
			break;
			
			case DIO_PORTC:
			PORTC = Copy_u8Value;
    2dc2:	e5 e3       	ldi	r30, 0x35	; 53
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc8:	80 83       	st	Z, r24
    2dca:	04 c0       	rjmp	.+8      	; 0x2dd4 <DIO_enuSetPortVal+0x80>
			break;
			
			case DIO_PORTD:
			PORTD = Copy_u8Value;
    2dcc:	e2 e3       	ldi	r30, 0x32	; 50
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd2:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    2dd4:	19 82       	std	Y+1, r1	; 0x01
    2dd6:	02 c0       	rjmp	.+4      	; 0x2ddc <DIO_enuSetPortVal+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2dd8:	83 e0       	ldi	r24, 0x03	; 3
    2dda:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dde:	0f 90       	pop	r0
    2de0:	0f 90       	pop	r0
    2de2:	0f 90       	pop	r0
    2de4:	0f 90       	pop	r0
    2de6:	0f 90       	pop	r0
    2de8:	cf 91       	pop	r28
    2dea:	df 91       	pop	r29
    2dec:	08 95       	ret

00002dee <DIO_enuGetPortVal>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t DIO_enuGetPortVal(u8 Copy_u8PortID, u8 *Copy_pu8Value)
{
    2dee:	df 93       	push	r29
    2df0:	cf 93       	push	r28
    2df2:	00 d0       	rcall	.+0      	; 0x2df4 <DIO_enuGetPortVal+0x6>
    2df4:	00 d0       	rcall	.+0      	; 0x2df6 <DIO_enuGetPortVal+0x8>
    2df6:	00 d0       	rcall	.+0      	; 0x2df8 <DIO_enuGetPortVal+0xa>
    2df8:	cd b7       	in	r28, 0x3d	; 61
    2dfa:	de b7       	in	r29, 0x3e	; 62
    2dfc:	8a 83       	std	Y+2, r24	; 0x02
    2dfe:	7c 83       	std	Y+4, r23	; 0x04
    2e00:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_u8PortID <= DIO_PORTD)
    2e06:	8a 81       	ldd	r24, Y+2	; 0x02
    2e08:	84 30       	cpi	r24, 0x04	; 4
    2e0a:	08 f0       	brcs	.+2      	; 0x2e0e <DIO_enuGetPortVal+0x20>
    2e0c:	43 c0       	rjmp	.+134    	; 0x2e94 <DIO_enuGetPortVal+0xa6>
	{
		if(Copy_pu8Value != NULL)
    2e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e10:	9c 81       	ldd	r25, Y+4	; 0x04
    2e12:	00 97       	sbiw	r24, 0x00	; 0
    2e14:	e1 f1       	breq	.+120    	; 0x2e8e <DIO_enuGetPortVal+0xa0>
		{
			switch(Copy_u8PortID)
    2e16:	8a 81       	ldd	r24, Y+2	; 0x02
    2e18:	28 2f       	mov	r18, r24
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	3e 83       	std	Y+6, r19	; 0x06
    2e1e:	2d 83       	std	Y+5, r18	; 0x05
    2e20:	8d 81       	ldd	r24, Y+5	; 0x05
    2e22:	9e 81       	ldd	r25, Y+6	; 0x06
    2e24:	81 30       	cpi	r24, 0x01	; 1
    2e26:	91 05       	cpc	r25, r1
    2e28:	e1 f0       	breq	.+56     	; 0x2e62 <DIO_enuGetPortVal+0x74>
    2e2a:	2d 81       	ldd	r18, Y+5	; 0x05
    2e2c:	3e 81       	ldd	r19, Y+6	; 0x06
    2e2e:	22 30       	cpi	r18, 0x02	; 2
    2e30:	31 05       	cpc	r19, r1
    2e32:	2c f4       	brge	.+10     	; 0x2e3e <DIO_enuGetPortVal+0x50>
    2e34:	8d 81       	ldd	r24, Y+5	; 0x05
    2e36:	9e 81       	ldd	r25, Y+6	; 0x06
    2e38:	00 97       	sbiw	r24, 0x00	; 0
    2e3a:	61 f0       	breq	.+24     	; 0x2e54 <DIO_enuGetPortVal+0x66>
    2e3c:	26 c0       	rjmp	.+76     	; 0x2e8a <DIO_enuGetPortVal+0x9c>
    2e3e:	2d 81       	ldd	r18, Y+5	; 0x05
    2e40:	3e 81       	ldd	r19, Y+6	; 0x06
    2e42:	22 30       	cpi	r18, 0x02	; 2
    2e44:	31 05       	cpc	r19, r1
    2e46:	a1 f0       	breq	.+40     	; 0x2e70 <DIO_enuGetPortVal+0x82>
    2e48:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4c:	83 30       	cpi	r24, 0x03	; 3
    2e4e:	91 05       	cpc	r25, r1
    2e50:	b1 f0       	breq	.+44     	; 0x2e7e <DIO_enuGetPortVal+0x90>
    2e52:	1b c0       	rjmp	.+54     	; 0x2e8a <DIO_enuGetPortVal+0x9c>
			{
				case DIO_PORTA:
				*Copy_pu8Value = PINA;
    2e54:	e9 e3       	ldi	r30, 0x39	; 57
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	80 81       	ld	r24, Z
    2e5a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e5c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e5e:	80 83       	st	Z, r24
    2e60:	14 c0       	rjmp	.+40     	; 0x2e8a <DIO_enuGetPortVal+0x9c>
				break;
				
				case DIO_PORTB:
				*Copy_pu8Value = PINB;
    2e62:	e6 e3       	ldi	r30, 0x36	; 54
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	80 81       	ld	r24, Z
    2e68:	eb 81       	ldd	r30, Y+3	; 0x03
    2e6a:	fc 81       	ldd	r31, Y+4	; 0x04
    2e6c:	80 83       	st	Z, r24
    2e6e:	0d c0       	rjmp	.+26     	; 0x2e8a <DIO_enuGetPortVal+0x9c>
				break;
				
				case DIO_PORTC:
				*Copy_pu8Value = PINC;
    2e70:	e3 e3       	ldi	r30, 0x33	; 51
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	80 81       	ld	r24, Z
    2e76:	eb 81       	ldd	r30, Y+3	; 0x03
    2e78:	fc 81       	ldd	r31, Y+4	; 0x04
    2e7a:	80 83       	st	Z, r24
    2e7c:	06 c0       	rjmp	.+12     	; 0x2e8a <DIO_enuGetPortVal+0x9c>
				break;
				
				case DIO_PORTD:
				*Copy_pu8Value = PIND;
    2e7e:	e0 e3       	ldi	r30, 0x30	; 48
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	80 81       	ld	r24, Z
    2e84:	eb 81       	ldd	r30, Y+3	; 0x03
    2e86:	fc 81       	ldd	r31, Y+4	; 0x04
    2e88:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    2e8a:	19 82       	std	Y+1, r1	; 0x01
    2e8c:	05 c0       	rjmp	.+10     	; 0x2e98 <DIO_enuGetPortVal+0xaa>
		}
		else
		{
			Local_enuErrorState = ES_NULL_POINTER;
    2e8e:	82 e0       	ldi	r24, 0x02	; 2
    2e90:	89 83       	std	Y+1, r24	; 0x01
    2e92:	02 c0       	rjmp	.+4      	; 0x2e98 <DIO_enuGetPortVal+0xaa>
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2e94:	83 e0       	ldi	r24, 0x03	; 3
    2e96:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e9a:	26 96       	adiw	r28, 0x06	; 6
    2e9c:	0f b6       	in	r0, 0x3f	; 63
    2e9e:	f8 94       	cli
    2ea0:	de bf       	out	0x3e, r29	; 62
    2ea2:	0f be       	out	0x3f, r0	; 63
    2ea4:	cd bf       	out	0x3d, r28	; 61
    2ea6:	cf 91       	pop	r28
    2ea8:	df 91       	pop	r29
    2eaa:	08 95       	ret

00002eac <DIO_enuTogPortVal>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t DIO_enuTogPortVal(u8 Copy_u8PortID)
{
    2eac:	df 93       	push	r29
    2eae:	cf 93       	push	r28
    2eb0:	00 d0       	rcall	.+0      	; 0x2eb2 <DIO_enuTogPortVal+0x6>
    2eb2:	00 d0       	rcall	.+0      	; 0x2eb4 <DIO_enuTogPortVal+0x8>
    2eb4:	cd b7       	in	r28, 0x3d	; 61
    2eb6:	de b7       	in	r29, 0x3e	; 62
    2eb8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_u8PortID <= DIO_PORTD)
    2ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec0:	84 30       	cpi	r24, 0x04	; 4
    2ec2:	08 f0       	brcs	.+2      	; 0x2ec6 <DIO_enuTogPortVal+0x1a>
    2ec4:	40 c0       	rjmp	.+128    	; 0x2f46 <DIO_enuTogPortVal+0x9a>
	{
		switch(Copy_u8PortID)
    2ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec8:	28 2f       	mov	r18, r24
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	3c 83       	std	Y+4, r19	; 0x04
    2ece:	2b 83       	std	Y+3, r18	; 0x03
    2ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed4:	81 30       	cpi	r24, 0x01	; 1
    2ed6:	91 05       	cpc	r25, r1
    2ed8:	e9 f0       	breq	.+58     	; 0x2f14 <DIO_enuTogPortVal+0x68>
    2eda:	2b 81       	ldd	r18, Y+3	; 0x03
    2edc:	3c 81       	ldd	r19, Y+4	; 0x04
    2ede:	22 30       	cpi	r18, 0x02	; 2
    2ee0:	31 05       	cpc	r19, r1
    2ee2:	2c f4       	brge	.+10     	; 0x2eee <DIO_enuTogPortVal+0x42>
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee8:	00 97       	sbiw	r24, 0x00	; 0
    2eea:	61 f0       	breq	.+24     	; 0x2f04 <DIO_enuTogPortVal+0x58>
    2eec:	2a c0       	rjmp	.+84     	; 0x2f42 <DIO_enuTogPortVal+0x96>
    2eee:	2b 81       	ldd	r18, Y+3	; 0x03
    2ef0:	3c 81       	ldd	r19, Y+4	; 0x04
    2ef2:	22 30       	cpi	r18, 0x02	; 2
    2ef4:	31 05       	cpc	r19, r1
    2ef6:	b1 f0       	breq	.+44     	; 0x2f24 <DIO_enuTogPortVal+0x78>
    2ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    2efa:	9c 81       	ldd	r25, Y+4	; 0x04
    2efc:	83 30       	cpi	r24, 0x03	; 3
    2efe:	91 05       	cpc	r25, r1
    2f00:	c9 f0       	breq	.+50     	; 0x2f34 <DIO_enuTogPortVal+0x88>
    2f02:	1f c0       	rjmp	.+62     	; 0x2f42 <DIO_enuTogPortVal+0x96>
		{
			case DIO_PORTA:
			PORTA = ~PORTA;
    2f04:	ab e3       	ldi	r26, 0x3B	; 59
    2f06:	b0 e0       	ldi	r27, 0x00	; 0
    2f08:	eb e3       	ldi	r30, 0x3B	; 59
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	80 81       	ld	r24, Z
    2f0e:	80 95       	com	r24
    2f10:	8c 93       	st	X, r24
    2f12:	17 c0       	rjmp	.+46     	; 0x2f42 <DIO_enuTogPortVal+0x96>
			break;
			
			case DIO_PORTB:
			PORTB = ~PORTB;
    2f14:	a8 e3       	ldi	r26, 0x38	; 56
    2f16:	b0 e0       	ldi	r27, 0x00	; 0
    2f18:	e8 e3       	ldi	r30, 0x38	; 56
    2f1a:	f0 e0       	ldi	r31, 0x00	; 0
    2f1c:	80 81       	ld	r24, Z
    2f1e:	80 95       	com	r24
    2f20:	8c 93       	st	X, r24
    2f22:	0f c0       	rjmp	.+30     	; 0x2f42 <DIO_enuTogPortVal+0x96>
			break;
			
			case DIO_PORTC:
			PORTC = ~PORTC;
    2f24:	a5 e3       	ldi	r26, 0x35	; 53
    2f26:	b0 e0       	ldi	r27, 0x00	; 0
    2f28:	e5 e3       	ldi	r30, 0x35	; 53
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	80 81       	ld	r24, Z
    2f2e:	80 95       	com	r24
    2f30:	8c 93       	st	X, r24
    2f32:	07 c0       	rjmp	.+14     	; 0x2f42 <DIO_enuTogPortVal+0x96>
			break;
			
			case DIO_PORTD:
			PORTD = ~PORTD;
    2f34:	a2 e3       	ldi	r26, 0x32	; 50
    2f36:	b0 e0       	ldi	r27, 0x00	; 0
    2f38:	e2 e3       	ldi	r30, 0x32	; 50
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	80 81       	ld	r24, Z
    2f3e:	80 95       	com	r24
    2f40:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    2f42:	19 82       	std	Y+1, r1	; 0x01
    2f44:	02 c0       	rjmp	.+4      	; 0x2f4a <DIO_enuTogPortVal+0x9e>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2f46:	83 e0       	ldi	r24, 0x03	; 3
    2f48:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f4c:	0f 90       	pop	r0
    2f4e:	0f 90       	pop	r0
    2f50:	0f 90       	pop	r0
    2f52:	0f 90       	pop	r0
    2f54:	cf 91       	pop	r28
    2f56:	df 91       	pop	r29
    2f58:	08 95       	ret

00002f5a <DIO_enuSetPinDirection>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    2f5a:	df 93       	push	r29
    2f5c:	cf 93       	push	r28
    2f5e:	00 d0       	rcall	.+0      	; 0x2f60 <DIO_enuSetPinDirection+0x6>
    2f60:	00 d0       	rcall	.+0      	; 0x2f62 <DIO_enuSetPinDirection+0x8>
    2f62:	00 d0       	rcall	.+0      	; 0x2f64 <DIO_enuSetPinDirection+0xa>
    2f64:	cd b7       	in	r28, 0x3d	; 61
    2f66:	de b7       	in	r29, 0x3e	; 62
    2f68:	8a 83       	std	Y+2, r24	; 0x02
    2f6a:	6b 83       	std	Y+3, r22	; 0x03
    2f6c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
    2f72:	8a 81       	ldd	r24, Y+2	; 0x02
    2f74:	84 30       	cpi	r24, 0x04	; 4
    2f76:	08 f0       	brcs	.+2      	; 0x2f7a <DIO_enuSetPinDirection+0x20>
    2f78:	d0 c0       	rjmp	.+416    	; 0x311a <DIO_enuSetPinDirection+0x1c0>
    2f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7c:	88 30       	cpi	r24, 0x08	; 8
    2f7e:	08 f0       	brcs	.+2      	; 0x2f82 <DIO_enuSetPinDirection+0x28>
    2f80:	cc c0       	rjmp	.+408    	; 0x311a <DIO_enuSetPinDirection+0x1c0>
    2f82:	8c 81       	ldd	r24, Y+4	; 0x04
    2f84:	82 30       	cpi	r24, 0x02	; 2
    2f86:	08 f0       	brcs	.+2      	; 0x2f8a <DIO_enuSetPinDirection+0x30>
    2f88:	c8 c0       	rjmp	.+400    	; 0x311a <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
    2f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8c:	28 2f       	mov	r18, r24
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	3e 83       	std	Y+6, r19	; 0x06
    2f92:	2d 83       	std	Y+5, r18	; 0x05
    2f94:	6d 81       	ldd	r22, Y+5	; 0x05
    2f96:	7e 81       	ldd	r23, Y+6	; 0x06
    2f98:	61 30       	cpi	r22, 0x01	; 1
    2f9a:	71 05       	cpc	r23, r1
    2f9c:	09 f4       	brne	.+2      	; 0x2fa0 <DIO_enuSetPinDirection+0x46>
    2f9e:	41 c0       	rjmp	.+130    	; 0x3022 <DIO_enuSetPinDirection+0xc8>
    2fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa4:	82 30       	cpi	r24, 0x02	; 2
    2fa6:	91 05       	cpc	r25, r1
    2fa8:	34 f4       	brge	.+12     	; 0x2fb6 <DIO_enuSetPinDirection+0x5c>
    2faa:	2d 81       	ldd	r18, Y+5	; 0x05
    2fac:	3e 81       	ldd	r19, Y+6	; 0x06
    2fae:	21 15       	cp	r18, r1
    2fb0:	31 05       	cpc	r19, r1
    2fb2:	71 f0       	breq	.+28     	; 0x2fd0 <DIO_enuSetPinDirection+0x76>
    2fb4:	b0 c0       	rjmp	.+352    	; 0x3116 <DIO_enuSetPinDirection+0x1bc>
    2fb6:	6d 81       	ldd	r22, Y+5	; 0x05
    2fb8:	7e 81       	ldd	r23, Y+6	; 0x06
    2fba:	62 30       	cpi	r22, 0x02	; 2
    2fbc:	71 05       	cpc	r23, r1
    2fbe:	09 f4       	brne	.+2      	; 0x2fc2 <DIO_enuSetPinDirection+0x68>
    2fc0:	59 c0       	rjmp	.+178    	; 0x3074 <DIO_enuSetPinDirection+0x11a>
    2fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc6:	83 30       	cpi	r24, 0x03	; 3
    2fc8:	91 05       	cpc	r25, r1
    2fca:	09 f4       	brne	.+2      	; 0x2fce <DIO_enuSetPinDirection+0x74>
    2fcc:	7c c0       	rjmp	.+248    	; 0x30c6 <DIO_enuSetPinDirection+0x16c>
    2fce:	a3 c0       	rjmp	.+326    	; 0x3116 <DIO_enuSetPinDirection+0x1bc>
		{
			case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    2fd0:	aa e3       	ldi	r26, 0x3A	; 58
    2fd2:	b0 e0       	ldi	r27, 0x00	; 0
    2fd4:	ea e3       	ldi	r30, 0x3A	; 58
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	80 81       	ld	r24, Z
    2fda:	48 2f       	mov	r20, r24
    2fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fde:	28 2f       	mov	r18, r24
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	02 c0       	rjmp	.+4      	; 0x2fec <DIO_enuSetPinDirection+0x92>
    2fe8:	88 0f       	add	r24, r24
    2fea:	99 1f       	adc	r25, r25
    2fec:	2a 95       	dec	r18
    2fee:	e2 f7       	brpl	.-8      	; 0x2fe8 <DIO_enuSetPinDirection+0x8e>
    2ff0:	80 95       	com	r24
    2ff2:	84 23       	and	r24, r20
    2ff4:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
    2ff6:	aa e3       	ldi	r26, 0x3A	; 58
    2ff8:	b0 e0       	ldi	r27, 0x00	; 0
    2ffa:	ea e3       	ldi	r30, 0x3A	; 58
    2ffc:	f0 e0       	ldi	r31, 0x00	; 0
    2ffe:	80 81       	ld	r24, Z
    3000:	48 2f       	mov	r20, r24
    3002:	8c 81       	ldd	r24, Y+4	; 0x04
    3004:	28 2f       	mov	r18, r24
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	8b 81       	ldd	r24, Y+3	; 0x03
    300a:	88 2f       	mov	r24, r24
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	b9 01       	movw	r22, r18
    3010:	02 c0       	rjmp	.+4      	; 0x3016 <DIO_enuSetPinDirection+0xbc>
    3012:	66 0f       	add	r22, r22
    3014:	77 1f       	adc	r23, r23
    3016:	8a 95       	dec	r24
    3018:	e2 f7       	brpl	.-8      	; 0x3012 <DIO_enuSetPinDirection+0xb8>
    301a:	cb 01       	movw	r24, r22
    301c:	84 2b       	or	r24, r20
    301e:	8c 93       	st	X, r24
    3020:	7a c0       	rjmp	.+244    	; 0x3116 <DIO_enuSetPinDirection+0x1bc>
			break;
			
			case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    3022:	a7 e3       	ldi	r26, 0x37	; 55
    3024:	b0 e0       	ldi	r27, 0x00	; 0
    3026:	e7 e3       	ldi	r30, 0x37	; 55
    3028:	f0 e0       	ldi	r31, 0x00	; 0
    302a:	80 81       	ld	r24, Z
    302c:	48 2f       	mov	r20, r24
    302e:	8b 81       	ldd	r24, Y+3	; 0x03
    3030:	28 2f       	mov	r18, r24
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	02 c0       	rjmp	.+4      	; 0x303e <DIO_enuSetPinDirection+0xe4>
    303a:	88 0f       	add	r24, r24
    303c:	99 1f       	adc	r25, r25
    303e:	2a 95       	dec	r18
    3040:	e2 f7       	brpl	.-8      	; 0x303a <DIO_enuSetPinDirection+0xe0>
    3042:	80 95       	com	r24
    3044:	84 23       	and	r24, r20
    3046:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
    3048:	a7 e3       	ldi	r26, 0x37	; 55
    304a:	b0 e0       	ldi	r27, 0x00	; 0
    304c:	e7 e3       	ldi	r30, 0x37	; 55
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	80 81       	ld	r24, Z
    3052:	48 2f       	mov	r20, r24
    3054:	8c 81       	ldd	r24, Y+4	; 0x04
    3056:	28 2f       	mov	r18, r24
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	8b 81       	ldd	r24, Y+3	; 0x03
    305c:	88 2f       	mov	r24, r24
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	b9 01       	movw	r22, r18
    3062:	02 c0       	rjmp	.+4      	; 0x3068 <DIO_enuSetPinDirection+0x10e>
    3064:	66 0f       	add	r22, r22
    3066:	77 1f       	adc	r23, r23
    3068:	8a 95       	dec	r24
    306a:	e2 f7       	brpl	.-8      	; 0x3064 <DIO_enuSetPinDirection+0x10a>
    306c:	cb 01       	movw	r24, r22
    306e:	84 2b       	or	r24, r20
    3070:	8c 93       	st	X, r24
    3072:	51 c0       	rjmp	.+162    	; 0x3116 <DIO_enuSetPinDirection+0x1bc>
			break;
			
			case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    3074:	a4 e3       	ldi	r26, 0x34	; 52
    3076:	b0 e0       	ldi	r27, 0x00	; 0
    3078:	e4 e3       	ldi	r30, 0x34	; 52
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	80 81       	ld	r24, Z
    307e:	48 2f       	mov	r20, r24
    3080:	8b 81       	ldd	r24, Y+3	; 0x03
    3082:	28 2f       	mov	r18, r24
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	02 c0       	rjmp	.+4      	; 0x3090 <DIO_enuSetPinDirection+0x136>
    308c:	88 0f       	add	r24, r24
    308e:	99 1f       	adc	r25, r25
    3090:	2a 95       	dec	r18
    3092:	e2 f7       	brpl	.-8      	; 0x308c <DIO_enuSetPinDirection+0x132>
    3094:	80 95       	com	r24
    3096:	84 23       	and	r24, r20
    3098:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
    309a:	a4 e3       	ldi	r26, 0x34	; 52
    309c:	b0 e0       	ldi	r27, 0x00	; 0
    309e:	e4 e3       	ldi	r30, 0x34	; 52
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	80 81       	ld	r24, Z
    30a4:	48 2f       	mov	r20, r24
    30a6:	8c 81       	ldd	r24, Y+4	; 0x04
    30a8:	28 2f       	mov	r18, r24
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	8b 81       	ldd	r24, Y+3	; 0x03
    30ae:	88 2f       	mov	r24, r24
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	b9 01       	movw	r22, r18
    30b4:	02 c0       	rjmp	.+4      	; 0x30ba <DIO_enuSetPinDirection+0x160>
    30b6:	66 0f       	add	r22, r22
    30b8:	77 1f       	adc	r23, r23
    30ba:	8a 95       	dec	r24
    30bc:	e2 f7       	brpl	.-8      	; 0x30b6 <DIO_enuSetPinDirection+0x15c>
    30be:	cb 01       	movw	r24, r22
    30c0:	84 2b       	or	r24, r20
    30c2:	8c 93       	st	X, r24
    30c4:	28 c0       	rjmp	.+80     	; 0x3116 <DIO_enuSetPinDirection+0x1bc>
			break;
			
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    30c6:	a1 e3       	ldi	r26, 0x31	; 49
    30c8:	b0 e0       	ldi	r27, 0x00	; 0
    30ca:	e1 e3       	ldi	r30, 0x31	; 49
    30cc:	f0 e0       	ldi	r31, 0x00	; 0
    30ce:	80 81       	ld	r24, Z
    30d0:	48 2f       	mov	r20, r24
    30d2:	8b 81       	ldd	r24, Y+3	; 0x03
    30d4:	28 2f       	mov	r18, r24
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	81 e0       	ldi	r24, 0x01	; 1
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	02 c0       	rjmp	.+4      	; 0x30e2 <DIO_enuSetPinDirection+0x188>
    30de:	88 0f       	add	r24, r24
    30e0:	99 1f       	adc	r25, r25
    30e2:	2a 95       	dec	r18
    30e4:	e2 f7       	brpl	.-8      	; 0x30de <DIO_enuSetPinDirection+0x184>
    30e6:	80 95       	com	r24
    30e8:	84 23       	and	r24, r20
    30ea:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
    30ec:	a1 e3       	ldi	r26, 0x31	; 49
    30ee:	b0 e0       	ldi	r27, 0x00	; 0
    30f0:	e1 e3       	ldi	r30, 0x31	; 49
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	80 81       	ld	r24, Z
    30f6:	48 2f       	mov	r20, r24
    30f8:	8c 81       	ldd	r24, Y+4	; 0x04
    30fa:	28 2f       	mov	r18, r24
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3100:	88 2f       	mov	r24, r24
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	b9 01       	movw	r22, r18
    3106:	02 c0       	rjmp	.+4      	; 0x310c <DIO_enuSetPinDirection+0x1b2>
    3108:	66 0f       	add	r22, r22
    310a:	77 1f       	adc	r23, r23
    310c:	8a 95       	dec	r24
    310e:	e2 f7       	brpl	.-8      	; 0x3108 <DIO_enuSetPinDirection+0x1ae>
    3110:	cb 01       	movw	r24, r22
    3112:	84 2b       	or	r24, r20
    3114:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    3116:	19 82       	std	Y+1, r1	; 0x01
    3118:	02 c0       	rjmp	.+4      	; 0x311e <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    311a:	83 e0       	ldi	r24, 0x03	; 3
    311c:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    311e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3120:	26 96       	adiw	r28, 0x06	; 6
    3122:	0f b6       	in	r0, 0x3f	; 63
    3124:	f8 94       	cli
    3126:	de bf       	out	0x3e, r29	; 62
    3128:	0f be       	out	0x3f, r0	; 63
    312a:	cd bf       	out	0x3d, r28	; 61
    312c:	cf 91       	pop	r28
    312e:	df 91       	pop	r29
    3130:	08 95       	ret

00003132 <DIO_enuSetPinVal>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t DIO_enuSetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    3132:	df 93       	push	r29
    3134:	cf 93       	push	r28
    3136:	00 d0       	rcall	.+0      	; 0x3138 <DIO_enuSetPinVal+0x6>
    3138:	00 d0       	rcall	.+0      	; 0x313a <DIO_enuSetPinVal+0x8>
    313a:	00 d0       	rcall	.+0      	; 0x313c <DIO_enuSetPinVal+0xa>
    313c:	cd b7       	in	r28, 0x3d	; 61
    313e:	de b7       	in	r29, 0x3e	; 62
    3140:	8a 83       	std	Y+2, r24	; 0x02
    3142:	6b 83       	std	Y+3, r22	; 0x03
    3144:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
    314a:	8a 81       	ldd	r24, Y+2	; 0x02
    314c:	84 30       	cpi	r24, 0x04	; 4
    314e:	08 f0       	brcs	.+2      	; 0x3152 <DIO_enuSetPinVal+0x20>
    3150:	d0 c0       	rjmp	.+416    	; 0x32f2 <DIO_enuSetPinVal+0x1c0>
    3152:	8b 81       	ldd	r24, Y+3	; 0x03
    3154:	88 30       	cpi	r24, 0x08	; 8
    3156:	08 f0       	brcs	.+2      	; 0x315a <DIO_enuSetPinVal+0x28>
    3158:	cc c0       	rjmp	.+408    	; 0x32f2 <DIO_enuSetPinVal+0x1c0>
    315a:	8c 81       	ldd	r24, Y+4	; 0x04
    315c:	82 30       	cpi	r24, 0x02	; 2
    315e:	08 f0       	brcs	.+2      	; 0x3162 <DIO_enuSetPinVal+0x30>
    3160:	c8 c0       	rjmp	.+400    	; 0x32f2 <DIO_enuSetPinVal+0x1c0>
	{
		switch(Copy_u8PortID)
    3162:	8a 81       	ldd	r24, Y+2	; 0x02
    3164:	28 2f       	mov	r18, r24
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	3e 83       	std	Y+6, r19	; 0x06
    316a:	2d 83       	std	Y+5, r18	; 0x05
    316c:	6d 81       	ldd	r22, Y+5	; 0x05
    316e:	7e 81       	ldd	r23, Y+6	; 0x06
    3170:	61 30       	cpi	r22, 0x01	; 1
    3172:	71 05       	cpc	r23, r1
    3174:	09 f4       	brne	.+2      	; 0x3178 <DIO_enuSetPinVal+0x46>
    3176:	41 c0       	rjmp	.+130    	; 0x31fa <DIO_enuSetPinVal+0xc8>
    3178:	8d 81       	ldd	r24, Y+5	; 0x05
    317a:	9e 81       	ldd	r25, Y+6	; 0x06
    317c:	82 30       	cpi	r24, 0x02	; 2
    317e:	91 05       	cpc	r25, r1
    3180:	34 f4       	brge	.+12     	; 0x318e <DIO_enuSetPinVal+0x5c>
    3182:	2d 81       	ldd	r18, Y+5	; 0x05
    3184:	3e 81       	ldd	r19, Y+6	; 0x06
    3186:	21 15       	cp	r18, r1
    3188:	31 05       	cpc	r19, r1
    318a:	71 f0       	breq	.+28     	; 0x31a8 <DIO_enuSetPinVal+0x76>
    318c:	b0 c0       	rjmp	.+352    	; 0x32ee <DIO_enuSetPinVal+0x1bc>
    318e:	6d 81       	ldd	r22, Y+5	; 0x05
    3190:	7e 81       	ldd	r23, Y+6	; 0x06
    3192:	62 30       	cpi	r22, 0x02	; 2
    3194:	71 05       	cpc	r23, r1
    3196:	09 f4       	brne	.+2      	; 0x319a <DIO_enuSetPinVal+0x68>
    3198:	59 c0       	rjmp	.+178    	; 0x324c <DIO_enuSetPinVal+0x11a>
    319a:	8d 81       	ldd	r24, Y+5	; 0x05
    319c:	9e 81       	ldd	r25, Y+6	; 0x06
    319e:	83 30       	cpi	r24, 0x03	; 3
    31a0:	91 05       	cpc	r25, r1
    31a2:	09 f4       	brne	.+2      	; 0x31a6 <DIO_enuSetPinVal+0x74>
    31a4:	7c c0       	rjmp	.+248    	; 0x329e <DIO_enuSetPinVal+0x16c>
    31a6:	a3 c0       	rjmp	.+326    	; 0x32ee <DIO_enuSetPinVal+0x1bc>
		{
			case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    31a8:	ab e3       	ldi	r26, 0x3B	; 59
    31aa:	b0 e0       	ldi	r27, 0x00	; 0
    31ac:	eb e3       	ldi	r30, 0x3B	; 59
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	80 81       	ld	r24, Z
    31b2:	48 2f       	mov	r20, r24
    31b4:	8b 81       	ldd	r24, Y+3	; 0x03
    31b6:	28 2f       	mov	r18, r24
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	02 c0       	rjmp	.+4      	; 0x31c4 <DIO_enuSetPinVal+0x92>
    31c0:	88 0f       	add	r24, r24
    31c2:	99 1f       	adc	r25, r25
    31c4:	2a 95       	dec	r18
    31c6:	e2 f7       	brpl	.-8      	; 0x31c0 <DIO_enuSetPinVal+0x8e>
    31c8:	80 95       	com	r24
    31ca:	84 23       	and	r24, r20
    31cc:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
    31ce:	ab e3       	ldi	r26, 0x3B	; 59
    31d0:	b0 e0       	ldi	r27, 0x00	; 0
    31d2:	eb e3       	ldi	r30, 0x3B	; 59
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	80 81       	ld	r24, Z
    31d8:	48 2f       	mov	r20, r24
    31da:	8c 81       	ldd	r24, Y+4	; 0x04
    31dc:	28 2f       	mov	r18, r24
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	8b 81       	ldd	r24, Y+3	; 0x03
    31e2:	88 2f       	mov	r24, r24
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	b9 01       	movw	r22, r18
    31e8:	02 c0       	rjmp	.+4      	; 0x31ee <DIO_enuSetPinVal+0xbc>
    31ea:	66 0f       	add	r22, r22
    31ec:	77 1f       	adc	r23, r23
    31ee:	8a 95       	dec	r24
    31f0:	e2 f7       	brpl	.-8      	; 0x31ea <DIO_enuSetPinVal+0xb8>
    31f2:	cb 01       	movw	r24, r22
    31f4:	84 2b       	or	r24, r20
    31f6:	8c 93       	st	X, r24
    31f8:	7a c0       	rjmp	.+244    	; 0x32ee <DIO_enuSetPinVal+0x1bc>
			break;
			
			case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    31fa:	a8 e3       	ldi	r26, 0x38	; 56
    31fc:	b0 e0       	ldi	r27, 0x00	; 0
    31fe:	e8 e3       	ldi	r30, 0x38	; 56
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	80 81       	ld	r24, Z
    3204:	48 2f       	mov	r20, r24
    3206:	8b 81       	ldd	r24, Y+3	; 0x03
    3208:	28 2f       	mov	r18, r24
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	02 c0       	rjmp	.+4      	; 0x3216 <DIO_enuSetPinVal+0xe4>
    3212:	88 0f       	add	r24, r24
    3214:	99 1f       	adc	r25, r25
    3216:	2a 95       	dec	r18
    3218:	e2 f7       	brpl	.-8      	; 0x3212 <DIO_enuSetPinVal+0xe0>
    321a:	80 95       	com	r24
    321c:	84 23       	and	r24, r20
    321e:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
    3220:	a8 e3       	ldi	r26, 0x38	; 56
    3222:	b0 e0       	ldi	r27, 0x00	; 0
    3224:	e8 e3       	ldi	r30, 0x38	; 56
    3226:	f0 e0       	ldi	r31, 0x00	; 0
    3228:	80 81       	ld	r24, Z
    322a:	48 2f       	mov	r20, r24
    322c:	8c 81       	ldd	r24, Y+4	; 0x04
    322e:	28 2f       	mov	r18, r24
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	8b 81       	ldd	r24, Y+3	; 0x03
    3234:	88 2f       	mov	r24, r24
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	b9 01       	movw	r22, r18
    323a:	02 c0       	rjmp	.+4      	; 0x3240 <DIO_enuSetPinVal+0x10e>
    323c:	66 0f       	add	r22, r22
    323e:	77 1f       	adc	r23, r23
    3240:	8a 95       	dec	r24
    3242:	e2 f7       	brpl	.-8      	; 0x323c <DIO_enuSetPinVal+0x10a>
    3244:	cb 01       	movw	r24, r22
    3246:	84 2b       	or	r24, r20
    3248:	8c 93       	st	X, r24
    324a:	51 c0       	rjmp	.+162    	; 0x32ee <DIO_enuSetPinVal+0x1bc>
			break;
			
			case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    324c:	a5 e3       	ldi	r26, 0x35	; 53
    324e:	b0 e0       	ldi	r27, 0x00	; 0
    3250:	e5 e3       	ldi	r30, 0x35	; 53
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	80 81       	ld	r24, Z
    3256:	48 2f       	mov	r20, r24
    3258:	8b 81       	ldd	r24, Y+3	; 0x03
    325a:	28 2f       	mov	r18, r24
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	02 c0       	rjmp	.+4      	; 0x3268 <DIO_enuSetPinVal+0x136>
    3264:	88 0f       	add	r24, r24
    3266:	99 1f       	adc	r25, r25
    3268:	2a 95       	dec	r18
    326a:	e2 f7       	brpl	.-8      	; 0x3264 <DIO_enuSetPinVal+0x132>
    326c:	80 95       	com	r24
    326e:	84 23       	and	r24, r20
    3270:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
    3272:	a5 e3       	ldi	r26, 0x35	; 53
    3274:	b0 e0       	ldi	r27, 0x00	; 0
    3276:	e5 e3       	ldi	r30, 0x35	; 53
    3278:	f0 e0       	ldi	r31, 0x00	; 0
    327a:	80 81       	ld	r24, Z
    327c:	48 2f       	mov	r20, r24
    327e:	8c 81       	ldd	r24, Y+4	; 0x04
    3280:	28 2f       	mov	r18, r24
    3282:	30 e0       	ldi	r19, 0x00	; 0
    3284:	8b 81       	ldd	r24, Y+3	; 0x03
    3286:	88 2f       	mov	r24, r24
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	b9 01       	movw	r22, r18
    328c:	02 c0       	rjmp	.+4      	; 0x3292 <DIO_enuSetPinVal+0x160>
    328e:	66 0f       	add	r22, r22
    3290:	77 1f       	adc	r23, r23
    3292:	8a 95       	dec	r24
    3294:	e2 f7       	brpl	.-8      	; 0x328e <DIO_enuSetPinVal+0x15c>
    3296:	cb 01       	movw	r24, r22
    3298:	84 2b       	or	r24, r20
    329a:	8c 93       	st	X, r24
    329c:	28 c0       	rjmp	.+80     	; 0x32ee <DIO_enuSetPinVal+0x1bc>
			break;
			
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    329e:	a2 e3       	ldi	r26, 0x32	; 50
    32a0:	b0 e0       	ldi	r27, 0x00	; 0
    32a2:	e2 e3       	ldi	r30, 0x32	; 50
    32a4:	f0 e0       	ldi	r31, 0x00	; 0
    32a6:	80 81       	ld	r24, Z
    32a8:	48 2f       	mov	r20, r24
    32aa:	8b 81       	ldd	r24, Y+3	; 0x03
    32ac:	28 2f       	mov	r18, r24
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	02 c0       	rjmp	.+4      	; 0x32ba <DIO_enuSetPinVal+0x188>
    32b6:	88 0f       	add	r24, r24
    32b8:	99 1f       	adc	r25, r25
    32ba:	2a 95       	dec	r18
    32bc:	e2 f7       	brpl	.-8      	; 0x32b6 <DIO_enuSetPinVal+0x184>
    32be:	80 95       	com	r24
    32c0:	84 23       	and	r24, r20
    32c2:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
    32c4:	a2 e3       	ldi	r26, 0x32	; 50
    32c6:	b0 e0       	ldi	r27, 0x00	; 0
    32c8:	e2 e3       	ldi	r30, 0x32	; 50
    32ca:	f0 e0       	ldi	r31, 0x00	; 0
    32cc:	80 81       	ld	r24, Z
    32ce:	48 2f       	mov	r20, r24
    32d0:	8c 81       	ldd	r24, Y+4	; 0x04
    32d2:	28 2f       	mov	r18, r24
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	8b 81       	ldd	r24, Y+3	; 0x03
    32d8:	88 2f       	mov	r24, r24
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	b9 01       	movw	r22, r18
    32de:	02 c0       	rjmp	.+4      	; 0x32e4 <DIO_enuSetPinVal+0x1b2>
    32e0:	66 0f       	add	r22, r22
    32e2:	77 1f       	adc	r23, r23
    32e4:	8a 95       	dec	r24
    32e6:	e2 f7       	brpl	.-8      	; 0x32e0 <DIO_enuSetPinVal+0x1ae>
    32e8:	cb 01       	movw	r24, r22
    32ea:	84 2b       	or	r24, r20
    32ec:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    32ee:	19 82       	std	Y+1, r1	; 0x01
    32f0:	02 c0       	rjmp	.+4      	; 0x32f6 <DIO_enuSetPinVal+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    32f2:	83 e0       	ldi	r24, 0x03	; 3
    32f4:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    32f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    32f8:	26 96       	adiw	r28, 0x06	; 6
    32fa:	0f b6       	in	r0, 0x3f	; 63
    32fc:	f8 94       	cli
    32fe:	de bf       	out	0x3e, r29	; 62
    3300:	0f be       	out	0x3f, r0	; 63
    3302:	cd bf       	out	0x3d, r28	; 61
    3304:	cf 91       	pop	r28
    3306:	df 91       	pop	r29
    3308:	08 95       	ret

0000330a <DIO_enuGetPinVal>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t DIO_enuGetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 *Copy_pu8Value)
{
    330a:	df 93       	push	r29
    330c:	cf 93       	push	r28
    330e:	cd b7       	in	r28, 0x3d	; 61
    3310:	de b7       	in	r29, 0x3e	; 62
    3312:	27 97       	sbiw	r28, 0x07	; 7
    3314:	0f b6       	in	r0, 0x3f	; 63
    3316:	f8 94       	cli
    3318:	de bf       	out	0x3e, r29	; 62
    331a:	0f be       	out	0x3f, r0	; 63
    331c:	cd bf       	out	0x3d, r28	; 61
    331e:	8a 83       	std	Y+2, r24	; 0x02
    3320:	6b 83       	std	Y+3, r22	; 0x03
    3322:	5d 83       	std	Y+5, r21	; 0x05
    3324:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_pu8Value != NULL)
    332a:	8c 81       	ldd	r24, Y+4	; 0x04
    332c:	9d 81       	ldd	r25, Y+5	; 0x05
    332e:	00 97       	sbiw	r24, 0x00	; 0
    3330:	09 f4       	brne	.+2      	; 0x3334 <DIO_enuGetPinVal+0x2a>
    3332:	7d c0       	rjmp	.+250    	; 0x342e <DIO_enuGetPinVal+0x124>
	{
		if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7)
    3334:	8a 81       	ldd	r24, Y+2	; 0x02
    3336:	84 30       	cpi	r24, 0x04	; 4
    3338:	08 f0       	brcs	.+2      	; 0x333c <DIO_enuGetPinVal+0x32>
    333a:	75 c0       	rjmp	.+234    	; 0x3426 <DIO_enuGetPinVal+0x11c>
    333c:	8b 81       	ldd	r24, Y+3	; 0x03
    333e:	88 30       	cpi	r24, 0x08	; 8
    3340:	08 f0       	brcs	.+2      	; 0x3344 <DIO_enuGetPinVal+0x3a>
    3342:	71 c0       	rjmp	.+226    	; 0x3426 <DIO_enuGetPinVal+0x11c>
		{
			switch(Copy_u8PortID)
    3344:	8a 81       	ldd	r24, Y+2	; 0x02
    3346:	28 2f       	mov	r18, r24
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	3f 83       	std	Y+7, r19	; 0x07
    334c:	2e 83       	std	Y+6, r18	; 0x06
    334e:	4e 81       	ldd	r20, Y+6	; 0x06
    3350:	5f 81       	ldd	r21, Y+7	; 0x07
    3352:	41 30       	cpi	r20, 0x01	; 1
    3354:	51 05       	cpc	r21, r1
    3356:	59 f1       	breq	.+86     	; 0x33ae <DIO_enuGetPinVal+0xa4>
    3358:	8e 81       	ldd	r24, Y+6	; 0x06
    335a:	9f 81       	ldd	r25, Y+7	; 0x07
    335c:	82 30       	cpi	r24, 0x02	; 2
    335e:	91 05       	cpc	r25, r1
    3360:	34 f4       	brge	.+12     	; 0x336e <DIO_enuGetPinVal+0x64>
    3362:	2e 81       	ldd	r18, Y+6	; 0x06
    3364:	3f 81       	ldd	r19, Y+7	; 0x07
    3366:	21 15       	cp	r18, r1
    3368:	31 05       	cpc	r19, r1
    336a:	69 f0       	breq	.+26     	; 0x3386 <DIO_enuGetPinVal+0x7c>
    336c:	5e c0       	rjmp	.+188    	; 0x342a <DIO_enuGetPinVal+0x120>
    336e:	4e 81       	ldd	r20, Y+6	; 0x06
    3370:	5f 81       	ldd	r21, Y+7	; 0x07
    3372:	42 30       	cpi	r20, 0x02	; 2
    3374:	51 05       	cpc	r21, r1
    3376:	79 f1       	breq	.+94     	; 0x33d6 <DIO_enuGetPinVal+0xcc>
    3378:	8e 81       	ldd	r24, Y+6	; 0x06
    337a:	9f 81       	ldd	r25, Y+7	; 0x07
    337c:	83 30       	cpi	r24, 0x03	; 3
    337e:	91 05       	cpc	r25, r1
    3380:	09 f4       	brne	.+2      	; 0x3384 <DIO_enuGetPinVal+0x7a>
    3382:	3d c0       	rjmp	.+122    	; 0x33fe <DIO_enuGetPinVal+0xf4>
    3384:	52 c0       	rjmp	.+164    	; 0x342a <DIO_enuGetPinVal+0x120>
			{
				case DIO_PORTA:
				*Copy_pu8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
    3386:	e9 e3       	ldi	r30, 0x39	; 57
    3388:	f0 e0       	ldi	r31, 0x00	; 0
    338a:	80 81       	ld	r24, Z
    338c:	28 2f       	mov	r18, r24
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	8b 81       	ldd	r24, Y+3	; 0x03
    3392:	88 2f       	mov	r24, r24
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	a9 01       	movw	r20, r18
    3398:	02 c0       	rjmp	.+4      	; 0x339e <DIO_enuGetPinVal+0x94>
    339a:	55 95       	asr	r21
    339c:	47 95       	ror	r20
    339e:	8a 95       	dec	r24
    33a0:	e2 f7       	brpl	.-8      	; 0x339a <DIO_enuGetPinVal+0x90>
    33a2:	ca 01       	movw	r24, r20
    33a4:	81 70       	andi	r24, 0x01	; 1
    33a6:	ec 81       	ldd	r30, Y+4	; 0x04
    33a8:	fd 81       	ldd	r31, Y+5	; 0x05
    33aa:	80 83       	st	Z, r24
    33ac:	3e c0       	rjmp	.+124    	; 0x342a <DIO_enuGetPinVal+0x120>
				break;
				
				case DIO_PORTB:
				*Copy_pu8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
    33ae:	e6 e3       	ldi	r30, 0x36	; 54
    33b0:	f0 e0       	ldi	r31, 0x00	; 0
    33b2:	80 81       	ld	r24, Z
    33b4:	28 2f       	mov	r18, r24
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ba:	88 2f       	mov	r24, r24
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	a9 01       	movw	r20, r18
    33c0:	02 c0       	rjmp	.+4      	; 0x33c6 <DIO_enuGetPinVal+0xbc>
    33c2:	55 95       	asr	r21
    33c4:	47 95       	ror	r20
    33c6:	8a 95       	dec	r24
    33c8:	e2 f7       	brpl	.-8      	; 0x33c2 <DIO_enuGetPinVal+0xb8>
    33ca:	ca 01       	movw	r24, r20
    33cc:	81 70       	andi	r24, 0x01	; 1
    33ce:	ec 81       	ldd	r30, Y+4	; 0x04
    33d0:	fd 81       	ldd	r31, Y+5	; 0x05
    33d2:	80 83       	st	Z, r24
    33d4:	2a c0       	rjmp	.+84     	; 0x342a <DIO_enuGetPinVal+0x120>
				break;
				
				case DIO_PORTC:
				*Copy_pu8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
    33d6:	e3 e3       	ldi	r30, 0x33	; 51
    33d8:	f0 e0       	ldi	r31, 0x00	; 0
    33da:	80 81       	ld	r24, Z
    33dc:	28 2f       	mov	r18, r24
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	8b 81       	ldd	r24, Y+3	; 0x03
    33e2:	88 2f       	mov	r24, r24
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	a9 01       	movw	r20, r18
    33e8:	02 c0       	rjmp	.+4      	; 0x33ee <DIO_enuGetPinVal+0xe4>
    33ea:	55 95       	asr	r21
    33ec:	47 95       	ror	r20
    33ee:	8a 95       	dec	r24
    33f0:	e2 f7       	brpl	.-8      	; 0x33ea <DIO_enuGetPinVal+0xe0>
    33f2:	ca 01       	movw	r24, r20
    33f4:	81 70       	andi	r24, 0x01	; 1
    33f6:	ec 81       	ldd	r30, Y+4	; 0x04
    33f8:	fd 81       	ldd	r31, Y+5	; 0x05
    33fa:	80 83       	st	Z, r24
    33fc:	16 c0       	rjmp	.+44     	; 0x342a <DIO_enuGetPinVal+0x120>
				break;
				
				case DIO_PORTD:
				*Copy_pu8Value = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
    33fe:	e0 e3       	ldi	r30, 0x30	; 48
    3400:	f0 e0       	ldi	r31, 0x00	; 0
    3402:	80 81       	ld	r24, Z
    3404:	28 2f       	mov	r18, r24
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	8b 81       	ldd	r24, Y+3	; 0x03
    340a:	88 2f       	mov	r24, r24
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	a9 01       	movw	r20, r18
    3410:	02 c0       	rjmp	.+4      	; 0x3416 <DIO_enuGetPinVal+0x10c>
    3412:	55 95       	asr	r21
    3414:	47 95       	ror	r20
    3416:	8a 95       	dec	r24
    3418:	e2 f7       	brpl	.-8      	; 0x3412 <DIO_enuGetPinVal+0x108>
    341a:	ca 01       	movw	r24, r20
    341c:	81 70       	andi	r24, 0x01	; 1
    341e:	ec 81       	ldd	r30, Y+4	; 0x04
    3420:	fd 81       	ldd	r31, Y+5	; 0x05
    3422:	80 83       	st	Z, r24
    3424:	02 c0       	rjmp	.+4      	; 0x342a <DIO_enuGetPinVal+0x120>
				break;
			}
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    3426:	83 e0       	ldi	r24, 0x03	; 3
    3428:	89 83       	std	Y+1, r24	; 0x01
		}
		Local_enuErrorState = ES_OK;
    342a:	19 82       	std	Y+1, r1	; 0x01
    342c:	02 c0       	rjmp	.+4      	; 0x3432 <DIO_enuGetPinVal+0x128>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    342e:	82 e0       	ldi	r24, 0x02	; 2
    3430:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    3432:	89 81       	ldd	r24, Y+1	; 0x01
}
    3434:	27 96       	adiw	r28, 0x07	; 7
    3436:	0f b6       	in	r0, 0x3f	; 63
    3438:	f8 94       	cli
    343a:	de bf       	out	0x3e, r29	; 62
    343c:	0f be       	out	0x3f, r0	; 63
    343e:	cd bf       	out	0x3d, r28	; 61
    3440:	cf 91       	pop	r28
    3442:	df 91       	pop	r29
    3444:	08 95       	ret

00003446 <DIO_enuTogPinVal>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t DIO_enuTogPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID)
{
    3446:	df 93       	push	r29
    3448:	cf 93       	push	r28
    344a:	00 d0       	rcall	.+0      	; 0x344c <DIO_enuTogPinVal+0x6>
    344c:	00 d0       	rcall	.+0      	; 0x344e <DIO_enuTogPinVal+0x8>
    344e:	0f 92       	push	r0
    3450:	cd b7       	in	r28, 0x3d	; 61
    3452:	de b7       	in	r29, 0x3e	; 62
    3454:	8a 83       	std	Y+2, r24	; 0x02
    3456:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    3458:	81 e0       	ldi	r24, 0x01	; 1
    345a:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7)
    345c:	8a 81       	ldd	r24, Y+2	; 0x02
    345e:	84 30       	cpi	r24, 0x04	; 4
    3460:	08 f0       	brcs	.+2      	; 0x3464 <DIO_enuTogPinVal+0x1e>
    3462:	74 c0       	rjmp	.+232    	; 0x354c <DIO_enuTogPinVal+0x106>
    3464:	8b 81       	ldd	r24, Y+3	; 0x03
    3466:	88 30       	cpi	r24, 0x08	; 8
    3468:	08 f0       	brcs	.+2      	; 0x346c <DIO_enuTogPinVal+0x26>
    346a:	70 c0       	rjmp	.+224    	; 0x354c <DIO_enuTogPinVal+0x106>
	{
		switch(Copy_u8PortID)
    346c:	8a 81       	ldd	r24, Y+2	; 0x02
    346e:	28 2f       	mov	r18, r24
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	3d 83       	std	Y+5, r19	; 0x05
    3474:	2c 83       	std	Y+4, r18	; 0x04
    3476:	8c 81       	ldd	r24, Y+4	; 0x04
    3478:	9d 81       	ldd	r25, Y+5	; 0x05
    347a:	81 30       	cpi	r24, 0x01	; 1
    347c:	91 05       	cpc	r25, r1
    347e:	49 f1       	breq	.+82     	; 0x34d2 <DIO_enuTogPinVal+0x8c>
    3480:	2c 81       	ldd	r18, Y+4	; 0x04
    3482:	3d 81       	ldd	r19, Y+5	; 0x05
    3484:	22 30       	cpi	r18, 0x02	; 2
    3486:	31 05       	cpc	r19, r1
    3488:	2c f4       	brge	.+10     	; 0x3494 <DIO_enuTogPinVal+0x4e>
    348a:	8c 81       	ldd	r24, Y+4	; 0x04
    348c:	9d 81       	ldd	r25, Y+5	; 0x05
    348e:	00 97       	sbiw	r24, 0x00	; 0
    3490:	61 f0       	breq	.+24     	; 0x34aa <DIO_enuTogPinVal+0x64>
    3492:	5a c0       	rjmp	.+180    	; 0x3548 <DIO_enuTogPinVal+0x102>
    3494:	2c 81       	ldd	r18, Y+4	; 0x04
    3496:	3d 81       	ldd	r19, Y+5	; 0x05
    3498:	22 30       	cpi	r18, 0x02	; 2
    349a:	31 05       	cpc	r19, r1
    349c:	71 f1       	breq	.+92     	; 0x34fa <DIO_enuTogPinVal+0xb4>
    349e:	8c 81       	ldd	r24, Y+4	; 0x04
    34a0:	9d 81       	ldd	r25, Y+5	; 0x05
    34a2:	83 30       	cpi	r24, 0x03	; 3
    34a4:	91 05       	cpc	r25, r1
    34a6:	e9 f1       	breq	.+122    	; 0x3522 <DIO_enuTogPinVal+0xdc>
    34a8:	4f c0       	rjmp	.+158    	; 0x3548 <DIO_enuTogPinVal+0x102>
		{
			case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT << Copy_u8PinID);
    34aa:	ab e3       	ldi	r26, 0x3B	; 59
    34ac:	b0 e0       	ldi	r27, 0x00	; 0
    34ae:	eb e3       	ldi	r30, 0x3B	; 59
    34b0:	f0 e0       	ldi	r31, 0x00	; 0
    34b2:	80 81       	ld	r24, Z
    34b4:	48 2f       	mov	r20, r24
    34b6:	8b 81       	ldd	r24, Y+3	; 0x03
    34b8:	28 2f       	mov	r18, r24
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	02 2e       	mov	r0, r18
    34c2:	02 c0       	rjmp	.+4      	; 0x34c8 <DIO_enuTogPinVal+0x82>
    34c4:	88 0f       	add	r24, r24
    34c6:	99 1f       	adc	r25, r25
    34c8:	0a 94       	dec	r0
    34ca:	e2 f7       	brpl	.-8      	; 0x34c4 <DIO_enuTogPinVal+0x7e>
    34cc:	84 27       	eor	r24, r20
    34ce:	8c 93       	st	X, r24
    34d0:	3b c0       	rjmp	.+118    	; 0x3548 <DIO_enuTogPinVal+0x102>
			break;
			
			case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT << Copy_u8PinID);
    34d2:	a8 e3       	ldi	r26, 0x38	; 56
    34d4:	b0 e0       	ldi	r27, 0x00	; 0
    34d6:	e8 e3       	ldi	r30, 0x38	; 56
    34d8:	f0 e0       	ldi	r31, 0x00	; 0
    34da:	80 81       	ld	r24, Z
    34dc:	48 2f       	mov	r20, r24
    34de:	8b 81       	ldd	r24, Y+3	; 0x03
    34e0:	28 2f       	mov	r18, r24
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	81 e0       	ldi	r24, 0x01	; 1
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	02 2e       	mov	r0, r18
    34ea:	02 c0       	rjmp	.+4      	; 0x34f0 <DIO_enuTogPinVal+0xaa>
    34ec:	88 0f       	add	r24, r24
    34ee:	99 1f       	adc	r25, r25
    34f0:	0a 94       	dec	r0
    34f2:	e2 f7       	brpl	.-8      	; 0x34ec <DIO_enuTogPinVal+0xa6>
    34f4:	84 27       	eor	r24, r20
    34f6:	8c 93       	st	X, r24
    34f8:	27 c0       	rjmp	.+78     	; 0x3548 <DIO_enuTogPinVal+0x102>
			break;
			
			case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT << Copy_u8PinID);
    34fa:	a5 e3       	ldi	r26, 0x35	; 53
    34fc:	b0 e0       	ldi	r27, 0x00	; 0
    34fe:	e5 e3       	ldi	r30, 0x35	; 53
    3500:	f0 e0       	ldi	r31, 0x00	; 0
    3502:	80 81       	ld	r24, Z
    3504:	48 2f       	mov	r20, r24
    3506:	8b 81       	ldd	r24, Y+3	; 0x03
    3508:	28 2f       	mov	r18, r24
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	02 2e       	mov	r0, r18
    3512:	02 c0       	rjmp	.+4      	; 0x3518 <DIO_enuTogPinVal+0xd2>
    3514:	88 0f       	add	r24, r24
    3516:	99 1f       	adc	r25, r25
    3518:	0a 94       	dec	r0
    351a:	e2 f7       	brpl	.-8      	; 0x3514 <DIO_enuTogPinVal+0xce>
    351c:	84 27       	eor	r24, r20
    351e:	8c 93       	st	X, r24
    3520:	13 c0       	rjmp	.+38     	; 0x3548 <DIO_enuTogPinVal+0x102>
			break;
			
			case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT << Copy_u8PinID);
    3522:	a2 e3       	ldi	r26, 0x32	; 50
    3524:	b0 e0       	ldi	r27, 0x00	; 0
    3526:	e2 e3       	ldi	r30, 0x32	; 50
    3528:	f0 e0       	ldi	r31, 0x00	; 0
    352a:	80 81       	ld	r24, Z
    352c:	48 2f       	mov	r20, r24
    352e:	8b 81       	ldd	r24, Y+3	; 0x03
    3530:	28 2f       	mov	r18, r24
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	02 2e       	mov	r0, r18
    353a:	02 c0       	rjmp	.+4      	; 0x3540 <DIO_enuTogPinVal+0xfa>
    353c:	88 0f       	add	r24, r24
    353e:	99 1f       	adc	r25, r25
    3540:	0a 94       	dec	r0
    3542:	e2 f7       	brpl	.-8      	; 0x353c <DIO_enuTogPinVal+0xf6>
    3544:	84 27       	eor	r24, r20
    3546:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    3548:	19 82       	std	Y+1, r1	; 0x01
    354a:	02 c0       	rjmp	.+4      	; 0x3550 <DIO_enuTogPinVal+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    354c:	83 e0       	ldi	r24, 0x03	; 3
    354e:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    3550:	89 81       	ldd	r24, Y+1	; 0x01
    3552:	0f 90       	pop	r0
    3554:	0f 90       	pop	r0
    3556:	0f 90       	pop	r0
    3558:	0f 90       	pop	r0
    355a:	0f 90       	pop	r0
    355c:	cf 91       	pop	r28
    355e:	df 91       	pop	r29
    3560:	08 95       	ret

00003562 <ADC_enuInit>:

static volatile void (*ADC_PFuncISRFunc)(void *) = NULL;
static volatile void *ADC_PvidISRParameter = NULL;

ES_t ADC_enuInit(void)
{
    3562:	df 93       	push	r29
    3564:	cf 93       	push	r28
    3566:	0f 92       	push	r0
    3568:	cd b7       	in	r28, 0x3d	; 61
    356a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    356c:	81 e0       	ldi	r24, 0x01	; 1
    356e:	89 83       	std	Y+1, r24	; 0x01
	
	/* Configure Voltage Reference */
	/* Mask the two bits of voltage reference */
	ADMUX &= VOLT_REF_MASK;
    3570:	a7 e2       	ldi	r26, 0x27	; 39
    3572:	b0 e0       	ldi	r27, 0x00	; 0
    3574:	e7 e2       	ldi	r30, 0x27	; 39
    3576:	f0 e0       	ldi	r31, 0x00	; 0
    3578:	80 81       	ld	r24, Z
    357a:	8f 73       	andi	r24, 0x3F	; 63
    357c:	8c 93       	st	X, r24
	#if ADC_VOLT_REF == AREF_REF
	ADMUX &= ~(MASK_BIT << REFS0);
    357e:	a7 e2       	ldi	r26, 0x27	; 39
    3580:	b0 e0       	ldi	r27, 0x00	; 0
    3582:	e7 e2       	ldi	r30, 0x27	; 39
    3584:	f0 e0       	ldi	r31, 0x00	; 0
    3586:	80 81       	ld	r24, Z
    3588:	8f 7b       	andi	r24, 0xBF	; 191
    358a:	8c 93       	st	X, r24
	ADMUX &= ~(MASK_BIT << REFS1);
    358c:	a7 e2       	ldi	r26, 0x27	; 39
    358e:	b0 e0       	ldi	r27, 0x00	; 0
    3590:	e7 e2       	ldi	r30, 0x27	; 39
    3592:	f0 e0       	ldi	r31, 0x00	; 0
    3594:	80 81       	ld	r24, Z
    3596:	8f 77       	andi	r24, 0x7F	; 127
    3598:	8c 93       	st	X, r24
	#error "ADC Voltage Referance has a wrong configuration"
	#endif
	
	/* Configure Adjustment */
	/* Mask the bit of adjustment */
	ADMUX &= ~(MASK_BIT << ADLAR);
    359a:	a7 e2       	ldi	r26, 0x27	; 39
    359c:	b0 e0       	ldi	r27, 0x00	; 0
    359e:	e7 e2       	ldi	r30, 0x27	; 39
    35a0:	f0 e0       	ldi	r31, 0x00	; 0
    35a2:	80 81       	ld	r24, Z
    35a4:	8f 7d       	andi	r24, 0xDF	; 223
    35a6:	8c 93       	st	X, r24
	#if ADC_ADJUST == RIGHT_ADJUST
	ADMUX &= ~(MASK_BIT << ADLAR);
    35a8:	a7 e2       	ldi	r26, 0x27	; 39
    35aa:	b0 e0       	ldi	r27, 0x00	; 0
    35ac:	e7 e2       	ldi	r30, 0x27	; 39
    35ae:	f0 e0       	ldi	r31, 0x00	; 0
    35b0:	80 81       	ld	r24, Z
    35b2:	8f 7d       	andi	r24, 0xDF	; 223
    35b4:	8c 93       	st	X, r24
	#error "ADC Adjustment has a wrong configuration"
	#endif
	
	/* Configure ADC Prescaler */
	/* Mask the three bits of Prescaler */
	ADCSRA &= PRESCALER_MASK;
    35b6:	a6 e2       	ldi	r26, 0x26	; 38
    35b8:	b0 e0       	ldi	r27, 0x00	; 0
    35ba:	e6 e2       	ldi	r30, 0x26	; 38
    35bc:	f0 e0       	ldi	r31, 0x00	; 0
    35be:	80 81       	ld	r24, Z
    35c0:	88 7f       	andi	r24, 0xF8	; 248
    35c2:	8c 93       	st	X, r24
	#elif ADC_PRESCALER == DIVISION_FACTOR_4
	ADCSRA &= ~(MASK_BIT << ADPS0);
	ADCSRA |=  (MASK_BIT << ADPS1);
	ADCSRA &= ~(MASK_BIT << ADPS2);
	#elif ADC_PRESCALER == DIVISION_FACTOR_8
	ADCSRA |=  (MASK_BIT << ADPS0);
    35c4:	a6 e2       	ldi	r26, 0x26	; 38
    35c6:	b0 e0       	ldi	r27, 0x00	; 0
    35c8:	e6 e2       	ldi	r30, 0x26	; 38
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	80 81       	ld	r24, Z
    35ce:	81 60       	ori	r24, 0x01	; 1
    35d0:	8c 93       	st	X, r24
	ADCSRA |=  (MASK_BIT << ADPS1);
    35d2:	a6 e2       	ldi	r26, 0x26	; 38
    35d4:	b0 e0       	ldi	r27, 0x00	; 0
    35d6:	e6 e2       	ldi	r30, 0x26	; 38
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	80 81       	ld	r24, Z
    35dc:	82 60       	ori	r24, 0x02	; 2
    35de:	8c 93       	st	X, r24
	ADCSRA &= ~(MASK_BIT << ADPS2);
    35e0:	a6 e2       	ldi	r26, 0x26	; 38
    35e2:	b0 e0       	ldi	r27, 0x00	; 0
    35e4:	e6 e2       	ldi	r30, 0x26	; 38
    35e6:	f0 e0       	ldi	r31, 0x00	; 0
    35e8:	80 81       	ld	r24, Z
    35ea:	8b 7f       	andi	r24, 0xFB	; 251
    35ec:	8c 93       	st	X, r24
	ADCSRA |=  (MASK_BIT << ADPS2);
	#else
	#error "ADC PreScaler has a wrong configuration"
	#endif
	
	return Local_enuErrorState;
    35ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    35f0:	0f 90       	pop	r0
    35f2:	cf 91       	pop	r28
    35f4:	df 91       	pop	r29
    35f6:	08 95       	ret

000035f8 <ADC_enuEnable>:

ES_t ADC_enuEnable(void)
{
    35f8:	df 93       	push	r29
    35fa:	cf 93       	push	r28
    35fc:	0f 92       	push	r0
    35fe:	cd b7       	in	r28, 0x3d	; 61
    3600:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    3602:	81 e0       	ldi	r24, 0x01	; 1
    3604:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA |= (MASK_BIT << ADEN);
    3606:	a6 e2       	ldi	r26, 0x26	; 38
    3608:	b0 e0       	ldi	r27, 0x00	; 0
    360a:	e6 e2       	ldi	r30, 0x26	; 38
    360c:	f0 e0       	ldi	r31, 0x00	; 0
    360e:	80 81       	ld	r24, Z
    3610:	80 68       	ori	r24, 0x80	; 128
    3612:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    3614:	89 81       	ldd	r24, Y+1	; 0x01
}
    3616:	0f 90       	pop	r0
    3618:	cf 91       	pop	r28
    361a:	df 91       	pop	r29
    361c:	08 95       	ret

0000361e <ADC_enuDisable>:

ES_t ADC_enuDisable(void)
{
    361e:	df 93       	push	r29
    3620:	cf 93       	push	r28
    3622:	0f 92       	push	r0
    3624:	cd b7       	in	r28, 0x3d	; 61
    3626:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA &= ~(MASK_BIT << ADEN);
    362c:	a6 e2       	ldi	r26, 0x26	; 38
    362e:	b0 e0       	ldi	r27, 0x00	; 0
    3630:	e6 e2       	ldi	r30, 0x26	; 38
    3632:	f0 e0       	ldi	r31, 0x00	; 0
    3634:	80 81       	ld	r24, Z
    3636:	8f 77       	andi	r24, 0x7F	; 127
    3638:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    363a:	89 81       	ldd	r24, Y+1	; 0x01
}
    363c:	0f 90       	pop	r0
    363e:	cf 91       	pop	r28
    3640:	df 91       	pop	r29
    3642:	08 95       	ret

00003644 <ADC_enuStartConversion>:

ES_t ADC_enuStartConversion(void)
{
    3644:	df 93       	push	r29
    3646:	cf 93       	push	r28
    3648:	0f 92       	push	r0
    364a:	cd b7       	in	r28, 0x3d	; 61
    364c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA |= (MASK_BIT << ADSC);
    3652:	a6 e2       	ldi	r26, 0x26	; 38
    3654:	b0 e0       	ldi	r27, 0x00	; 0
    3656:	e6 e2       	ldi	r30, 0x26	; 38
    3658:	f0 e0       	ldi	r31, 0x00	; 0
    365a:	80 81       	ld	r24, Z
    365c:	80 64       	ori	r24, 0x40	; 64
    365e:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    3660:	89 81       	ldd	r24, Y+1	; 0x01
}
    3662:	0f 90       	pop	r0
    3664:	cf 91       	pop	r28
    3666:	df 91       	pop	r29
    3668:	08 95       	ret

0000366a <ADC_enuSelectChannel>:

ES_t ADC_enuSelectChannel(u8 Copy_u8ChannelID)
{
    366a:	df 93       	push	r29
    366c:	cf 93       	push	r28
    366e:	00 d0       	rcall	.+0      	; 0x3670 <ADC_enuSelectChannel+0x6>
    3670:	cd b7       	in	r28, 0x3d	; 61
    3672:	de b7       	in	r29, 0x3e	; 62
    3674:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3676:	81 e0       	ldi	r24, 0x01	; 1
    3678:	89 83       	std	Y+1, r24	; 0x01
	
	/* Mask the five bits of channels */
	ADMUX &= CHANNALS_MASK;
    367a:	a7 e2       	ldi	r26, 0x27	; 39
    367c:	b0 e0       	ldi	r27, 0x00	; 0
    367e:	e7 e2       	ldi	r30, 0x27	; 39
    3680:	f0 e0       	ldi	r31, 0x00	; 0
    3682:	80 81       	ld	r24, Z
    3684:	80 7e       	andi	r24, 0xE0	; 224
    3686:	8c 93       	st	X, r24
	
	ADMUX |= Copy_u8ChannelID;
    3688:	a7 e2       	ldi	r26, 0x27	; 39
    368a:	b0 e0       	ldi	r27, 0x00	; 0
    368c:	e7 e2       	ldi	r30, 0x27	; 39
    368e:	f0 e0       	ldi	r31, 0x00	; 0
    3690:	90 81       	ld	r25, Z
    3692:	8a 81       	ldd	r24, Y+2	; 0x02
    3694:	89 2b       	or	r24, r25
    3696:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    3698:	89 81       	ldd	r24, Y+1	; 0x01
}
    369a:	0f 90       	pop	r0
    369c:	0f 90       	pop	r0
    369e:	cf 91       	pop	r28
    36a0:	df 91       	pop	r29
    36a2:	08 95       	ret

000036a4 <ADC_enuPollingSystem>:

ES_t ADC_enuPollingSystem(void)
{
    36a4:	df 93       	push	r29
    36a6:	cf 93       	push	r28
    36a8:	0f 92       	push	r0
    36aa:	cd b7       	in	r28, 0x3d	; 61
    36ac:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    36ae:	81 e0       	ldi	r24, 0x01	; 1
    36b0:	89 83       	std	Y+1, r24	; 0x01
	
	/* Busy Wait until flag is set */
	while(!((ADCSRA >> ADIF) & MASK_BIT));
    36b2:	e6 e2       	ldi	r30, 0x26	; 38
    36b4:	f0 e0       	ldi	r31, 0x00	; 0
    36b6:	80 81       	ld	r24, Z
    36b8:	82 95       	swap	r24
    36ba:	8f 70       	andi	r24, 0x0F	; 15
    36bc:	88 2f       	mov	r24, r24
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	81 70       	andi	r24, 0x01	; 1
    36c2:	90 70       	andi	r25, 0x00	; 0
    36c4:	00 97       	sbiw	r24, 0x00	; 0
    36c6:	a9 f3       	breq	.-22     	; 0x36b2 <ADC_enuPollingSystem+0xe>
	
	/* Write one to clear the flag */
	ADCSRA |= (MASK_BIT << ADIF);
    36c8:	a6 e2       	ldi	r26, 0x26	; 38
    36ca:	b0 e0       	ldi	r27, 0x00	; 0
    36cc:	e6 e2       	ldi	r30, 0x26	; 38
    36ce:	f0 e0       	ldi	r31, 0x00	; 0
    36d0:	80 81       	ld	r24, Z
    36d2:	80 61       	ori	r24, 0x10	; 16
    36d4:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    36d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    36d8:	0f 90       	pop	r0
    36da:	cf 91       	pop	r28
    36dc:	df 91       	pop	r29
    36de:	08 95       	ret

000036e0 <ADC_enuEnableInterrupt>:

ES_t ADC_enuEnableInterrupt(void)
{
    36e0:	df 93       	push	r29
    36e2:	cf 93       	push	r28
    36e4:	0f 92       	push	r0
    36e6:	cd b7       	in	r28, 0x3d	; 61
    36e8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    36ea:	81 e0       	ldi	r24, 0x01	; 1
    36ec:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA |= (MASK_BIT << ADIE);
    36ee:	a6 e2       	ldi	r26, 0x26	; 38
    36f0:	b0 e0       	ldi	r27, 0x00	; 0
    36f2:	e6 e2       	ldi	r30, 0x26	; 38
    36f4:	f0 e0       	ldi	r31, 0x00	; 0
    36f6:	80 81       	ld	r24, Z
    36f8:	88 60       	ori	r24, 0x08	; 8
    36fa:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    36fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    36fe:	0f 90       	pop	r0
    3700:	cf 91       	pop	r28
    3702:	df 91       	pop	r29
    3704:	08 95       	ret

00003706 <ADC_enuDisableInterrupt>:

ES_t ADC_enuDisableInterrupt(void)
{
    3706:	df 93       	push	r29
    3708:	cf 93       	push	r28
    370a:	0f 92       	push	r0
    370c:	cd b7       	in	r28, 0x3d	; 61
    370e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    3710:	81 e0       	ldi	r24, 0x01	; 1
    3712:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA &= ~(MASK_BIT << ADIE);
    3714:	a6 e2       	ldi	r26, 0x26	; 38
    3716:	b0 e0       	ldi	r27, 0x00	; 0
    3718:	e6 e2       	ldi	r30, 0x26	; 38
    371a:	f0 e0       	ldi	r31, 0x00	; 0
    371c:	80 81       	ld	r24, Z
    371e:	87 7f       	andi	r24, 0xF7	; 247
    3720:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    3722:	89 81       	ldd	r24, Y+1	; 0x01
}
    3724:	0f 90       	pop	r0
    3726:	cf 91       	pop	r28
    3728:	df 91       	pop	r29
    372a:	08 95       	ret

0000372c <ADC_enuReadHighValue>:

ES_t ADC_enuReadHighValue(u8 *Copy_pu8ReadHighValue)
{
    372c:	df 93       	push	r29
    372e:	cf 93       	push	r28
    3730:	00 d0       	rcall	.+0      	; 0x3732 <ADC_enuReadHighValue+0x6>
    3732:	0f 92       	push	r0
    3734:	cd b7       	in	r28, 0x3d	; 61
    3736:	de b7       	in	r29, 0x3e	; 62
    3738:	9b 83       	std	Y+3, r25	; 0x03
    373a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    373c:	81 e0       	ldi	r24, 0x01	; 1
    373e:	89 83       	std	Y+1, r24	; 0x01
	
	#if ADC_ADJUST == RIGHT_ADJUST
	*Copy_pu8ReadHighValue  = (ADCL >> 2);
    3740:	e4 e2       	ldi	r30, 0x24	; 36
    3742:	f0 e0       	ldi	r31, 0x00	; 0
    3744:	80 81       	ld	r24, Z
    3746:	86 95       	lsr	r24
    3748:	86 95       	lsr	r24
    374a:	ea 81       	ldd	r30, Y+2	; 0x02
    374c:	fb 81       	ldd	r31, Y+3	; 0x03
    374e:	80 83       	st	Z, r24
	*Copy_pu8ReadHighValue |= (ADCH << 6);
    3750:	ea 81       	ldd	r30, Y+2	; 0x02
    3752:	fb 81       	ldd	r31, Y+3	; 0x03
    3754:	80 81       	ld	r24, Z
    3756:	28 2f       	mov	r18, r24
    3758:	e5 e2       	ldi	r30, 0x25	; 37
    375a:	f0 e0       	ldi	r31, 0x00	; 0
    375c:	80 81       	ld	r24, Z
    375e:	88 2f       	mov	r24, r24
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	00 24       	eor	r0, r0
    3764:	96 95       	lsr	r25
    3766:	87 95       	ror	r24
    3768:	07 94       	ror	r0
    376a:	96 95       	lsr	r25
    376c:	87 95       	ror	r24
    376e:	07 94       	ror	r0
    3770:	98 2f       	mov	r25, r24
    3772:	80 2d       	mov	r24, r0
    3774:	82 2b       	or	r24, r18
    3776:	ea 81       	ldd	r30, Y+2	; 0x02
    3778:	fb 81       	ldd	r31, Y+3	; 0x03
    377a:	80 83       	st	Z, r24
	*Copy_pu8ReadHighValue = ADCH;
	#else
	#error "ADC Adjustment has a wrong configuration"
	#endif
	
	return Local_enuErrorState;
    377c:	89 81       	ldd	r24, Y+1	; 0x01
}
    377e:	0f 90       	pop	r0
    3780:	0f 90       	pop	r0
    3782:	0f 90       	pop	r0
    3784:	cf 91       	pop	r28
    3786:	df 91       	pop	r29
    3788:	08 95       	ret

0000378a <ADC_enuReadADCValue>:

ES_t ADC_enuReadADCValue(u16 *Copy_pu16ReadValue)
{
    378a:	df 93       	push	r29
    378c:	cf 93       	push	r28
    378e:	00 d0       	rcall	.+0      	; 0x3790 <ADC_enuReadADCValue+0x6>
    3790:	0f 92       	push	r0
    3792:	cd b7       	in	r28, 0x3d	; 61
    3794:	de b7       	in	r29, 0x3e	; 62
    3796:	9b 83       	std	Y+3, r25	; 0x03
    3798:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    379a:	81 e0       	ldi	r24, 0x01	; 1
    379c:	89 83       	std	Y+1, r24	; 0x01
	
	#if ADC_ADJUST == RIGHT_ADJUST
	*Copy_pu16ReadValue  = ((u16)ADCL);
    379e:	e4 e2       	ldi	r30, 0x24	; 36
    37a0:	f0 e0       	ldi	r31, 0x00	; 0
    37a2:	80 81       	ld	r24, Z
    37a4:	88 2f       	mov	r24, r24
    37a6:	90 e0       	ldi	r25, 0x00	; 0
    37a8:	ea 81       	ldd	r30, Y+2	; 0x02
    37aa:	fb 81       	ldd	r31, Y+3	; 0x03
    37ac:	91 83       	std	Z+1, r25	; 0x01
    37ae:	80 83       	st	Z, r24
	*Copy_pu16ReadValue |= ((u16)ADCH << 8);
    37b0:	ea 81       	ldd	r30, Y+2	; 0x02
    37b2:	fb 81       	ldd	r31, Y+3	; 0x03
    37b4:	20 81       	ld	r18, Z
    37b6:	31 81       	ldd	r19, Z+1	; 0x01
    37b8:	e5 e2       	ldi	r30, 0x25	; 37
    37ba:	f0 e0       	ldi	r31, 0x00	; 0
    37bc:	80 81       	ld	r24, Z
    37be:	88 2f       	mov	r24, r24
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	98 2f       	mov	r25, r24
    37c4:	88 27       	eor	r24, r24
    37c6:	82 2b       	or	r24, r18
    37c8:	93 2b       	or	r25, r19
    37ca:	ea 81       	ldd	r30, Y+2	; 0x02
    37cc:	fb 81       	ldd	r31, Y+3	; 0x03
    37ce:	91 83       	std	Z+1, r25	; 0x01
    37d0:	80 83       	st	Z, r24
	*Copy_pu16ReadValue |= ((u16)ADCH << 2);
	#else
	#error "ADC Adjustment has a wrong configuration"
	#endif
	
	return Local_enuErrorState;
    37d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    37d4:	0f 90       	pop	r0
    37d6:	0f 90       	pop	r0
    37d8:	0f 90       	pop	r0
    37da:	cf 91       	pop	r28
    37dc:	df 91       	pop	r29
    37de:	08 95       	ret

000037e0 <ADC_enuEnableTrigger>:

ES_t ADC_enuEnableTrigger(u8 Copy_u8TriggerSource)
{
    37e0:	df 93       	push	r29
    37e2:	cf 93       	push	r28
    37e4:	00 d0       	rcall	.+0      	; 0x37e6 <ADC_enuEnableTrigger+0x6>
    37e6:	00 d0       	rcall	.+0      	; 0x37e8 <ADC_enuEnableTrigger+0x8>
    37e8:	cd b7       	in	r28, 0x3d	; 61
    37ea:	de b7       	in	r29, 0x3e	; 62
    37ec:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA &= ~(MASK_BIT << ADATE);
    37f2:	a6 e2       	ldi	r26, 0x26	; 38
    37f4:	b0 e0       	ldi	r27, 0x00	; 0
    37f6:	e6 e2       	ldi	r30, 0x26	; 38
    37f8:	f0 e0       	ldi	r31, 0x00	; 0
    37fa:	80 81       	ld	r24, Z
    37fc:	8f 7d       	andi	r24, 0xDF	; 223
    37fe:	8c 93       	st	X, r24
	
	/* Mask the three bits of Auto Trigger Source */
	SFIOR &= AUTO_TRIGGER_MASK;
    3800:	a0 e5       	ldi	r26, 0x50	; 80
    3802:	b0 e0       	ldi	r27, 0x00	; 0
    3804:	e0 e5       	ldi	r30, 0x50	; 80
    3806:	f0 e0       	ldi	r31, 0x00	; 0
    3808:	80 81       	ld	r24, Z
    380a:	8f 71       	andi	r24, 0x1F	; 31
    380c:	8c 93       	st	X, r24
	switch(Copy_u8TriggerSource)
    380e:	8a 81       	ldd	r24, Y+2	; 0x02
    3810:	28 2f       	mov	r18, r24
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	3c 83       	std	Y+4, r19	; 0x04
    3816:	2b 83       	std	Y+3, r18	; 0x03
    3818:	8b 81       	ldd	r24, Y+3	; 0x03
    381a:	9c 81       	ldd	r25, Y+4	; 0x04
    381c:	83 30       	cpi	r24, 0x03	; 3
    381e:	91 05       	cpc	r25, r1
    3820:	09 f4       	brne	.+2      	; 0x3824 <ADC_enuEnableTrigger+0x44>
    3822:	70 c0       	rjmp	.+224    	; 0x3904 <ADC_enuEnableTrigger+0x124>
    3824:	2b 81       	ldd	r18, Y+3	; 0x03
    3826:	3c 81       	ldd	r19, Y+4	; 0x04
    3828:	24 30       	cpi	r18, 0x04	; 4
    382a:	31 05       	cpc	r19, r1
    382c:	84 f4       	brge	.+32     	; 0x384e <ADC_enuEnableTrigger+0x6e>
    382e:	8b 81       	ldd	r24, Y+3	; 0x03
    3830:	9c 81       	ldd	r25, Y+4	; 0x04
    3832:	81 30       	cpi	r24, 0x01	; 1
    3834:	91 05       	cpc	r25, r1
    3836:	d1 f1       	breq	.+116    	; 0x38ac <ADC_enuEnableTrigger+0xcc>
    3838:	2b 81       	ldd	r18, Y+3	; 0x03
    383a:	3c 81       	ldd	r19, Y+4	; 0x04
    383c:	22 30       	cpi	r18, 0x02	; 2
    383e:	31 05       	cpc	r19, r1
    3840:	0c f0       	brlt	.+2      	; 0x3844 <ADC_enuEnableTrigger+0x64>
    3842:	4a c0       	rjmp	.+148    	; 0x38d8 <ADC_enuEnableTrigger+0xf8>
    3844:	8b 81       	ldd	r24, Y+3	; 0x03
    3846:	9c 81       	ldd	r25, Y+4	; 0x04
    3848:	00 97       	sbiw	r24, 0x00	; 0
    384a:	d1 f0       	breq	.+52     	; 0x3880 <ADC_enuEnableTrigger+0xa0>
    384c:	c9 c0       	rjmp	.+402    	; 0x39e0 <ADC_enuEnableTrigger+0x200>
    384e:	2b 81       	ldd	r18, Y+3	; 0x03
    3850:	3c 81       	ldd	r19, Y+4	; 0x04
    3852:	25 30       	cpi	r18, 0x05	; 5
    3854:	31 05       	cpc	r19, r1
    3856:	09 f4       	brne	.+2      	; 0x385a <ADC_enuEnableTrigger+0x7a>
    3858:	81 c0       	rjmp	.+258    	; 0x395c <ADC_enuEnableTrigger+0x17c>
    385a:	8b 81       	ldd	r24, Y+3	; 0x03
    385c:	9c 81       	ldd	r25, Y+4	; 0x04
    385e:	85 30       	cpi	r24, 0x05	; 5
    3860:	91 05       	cpc	r25, r1
    3862:	0c f4       	brge	.+2      	; 0x3866 <ADC_enuEnableTrigger+0x86>
    3864:	65 c0       	rjmp	.+202    	; 0x3930 <ADC_enuEnableTrigger+0x150>
    3866:	2b 81       	ldd	r18, Y+3	; 0x03
    3868:	3c 81       	ldd	r19, Y+4	; 0x04
    386a:	26 30       	cpi	r18, 0x06	; 6
    386c:	31 05       	cpc	r19, r1
    386e:	09 f4       	brne	.+2      	; 0x3872 <ADC_enuEnableTrigger+0x92>
    3870:	8b c0       	rjmp	.+278    	; 0x3988 <ADC_enuEnableTrigger+0x1a8>
    3872:	8b 81       	ldd	r24, Y+3	; 0x03
    3874:	9c 81       	ldd	r25, Y+4	; 0x04
    3876:	87 30       	cpi	r24, 0x07	; 7
    3878:	91 05       	cpc	r25, r1
    387a:	09 f4       	brne	.+2      	; 0x387e <ADC_enuEnableTrigger+0x9e>
    387c:	9b c0       	rjmp	.+310    	; 0x39b4 <ADC_enuEnableTrigger+0x1d4>
    387e:	b0 c0       	rjmp	.+352    	; 0x39e0 <ADC_enuEnableTrigger+0x200>
	{
		case FREE_RUNNING:
		SFIOR &= ~(MASK_BIT << ADTS0);
    3880:	a0 e5       	ldi	r26, 0x50	; 80
    3882:	b0 e0       	ldi	r27, 0x00	; 0
    3884:	e0 e5       	ldi	r30, 0x50	; 80
    3886:	f0 e0       	ldi	r31, 0x00	; 0
    3888:	80 81       	ld	r24, Z
    388a:	8f 7d       	andi	r24, 0xDF	; 223
    388c:	8c 93       	st	X, r24
		SFIOR &= ~(MASK_BIT << ADTS1);
    388e:	a0 e5       	ldi	r26, 0x50	; 80
    3890:	b0 e0       	ldi	r27, 0x00	; 0
    3892:	e0 e5       	ldi	r30, 0x50	; 80
    3894:	f0 e0       	ldi	r31, 0x00	; 0
    3896:	80 81       	ld	r24, Z
    3898:	8f 7b       	andi	r24, 0xBF	; 191
    389a:	8c 93       	st	X, r24
		SFIOR &= ~(MASK_BIT << ADTS2);
    389c:	a0 e5       	ldi	r26, 0x50	; 80
    389e:	b0 e0       	ldi	r27, 0x00	; 0
    38a0:	e0 e5       	ldi	r30, 0x50	; 80
    38a2:	f0 e0       	ldi	r31, 0x00	; 0
    38a4:	80 81       	ld	r24, Z
    38a6:	8f 77       	andi	r24, 0x7F	; 127
    38a8:	8c 93       	st	X, r24
    38aa:	9c c0       	rjmp	.+312    	; 0x39e4 <ADC_enuEnableTrigger+0x204>
		break;
		
		case ANALOG_COMPARATOR:
		SFIOR |=  (MASK_BIT << ADTS0);
    38ac:	a0 e5       	ldi	r26, 0x50	; 80
    38ae:	b0 e0       	ldi	r27, 0x00	; 0
    38b0:	e0 e5       	ldi	r30, 0x50	; 80
    38b2:	f0 e0       	ldi	r31, 0x00	; 0
    38b4:	80 81       	ld	r24, Z
    38b6:	80 62       	ori	r24, 0x20	; 32
    38b8:	8c 93       	st	X, r24
		SFIOR &= ~(MASK_BIT << ADTS1);
    38ba:	a0 e5       	ldi	r26, 0x50	; 80
    38bc:	b0 e0       	ldi	r27, 0x00	; 0
    38be:	e0 e5       	ldi	r30, 0x50	; 80
    38c0:	f0 e0       	ldi	r31, 0x00	; 0
    38c2:	80 81       	ld	r24, Z
    38c4:	8f 7b       	andi	r24, 0xBF	; 191
    38c6:	8c 93       	st	X, r24
		SFIOR &= ~(MASK_BIT << ADTS2);
    38c8:	a0 e5       	ldi	r26, 0x50	; 80
    38ca:	b0 e0       	ldi	r27, 0x00	; 0
    38cc:	e0 e5       	ldi	r30, 0x50	; 80
    38ce:	f0 e0       	ldi	r31, 0x00	; 0
    38d0:	80 81       	ld	r24, Z
    38d2:	8f 77       	andi	r24, 0x7F	; 127
    38d4:	8c 93       	st	X, r24
    38d6:	86 c0       	rjmp	.+268    	; 0x39e4 <ADC_enuEnableTrigger+0x204>
		break;
		
		case EXTI0_TRIG:
		SFIOR &= ~(MASK_BIT << ADTS0);
    38d8:	a0 e5       	ldi	r26, 0x50	; 80
    38da:	b0 e0       	ldi	r27, 0x00	; 0
    38dc:	e0 e5       	ldi	r30, 0x50	; 80
    38de:	f0 e0       	ldi	r31, 0x00	; 0
    38e0:	80 81       	ld	r24, Z
    38e2:	8f 7d       	andi	r24, 0xDF	; 223
    38e4:	8c 93       	st	X, r24
		SFIOR |=  (MASK_BIT << ADTS1);
    38e6:	a0 e5       	ldi	r26, 0x50	; 80
    38e8:	b0 e0       	ldi	r27, 0x00	; 0
    38ea:	e0 e5       	ldi	r30, 0x50	; 80
    38ec:	f0 e0       	ldi	r31, 0x00	; 0
    38ee:	80 81       	ld	r24, Z
    38f0:	80 64       	ori	r24, 0x40	; 64
    38f2:	8c 93       	st	X, r24
		SFIOR &= ~(MASK_BIT << ADTS2);
    38f4:	a0 e5       	ldi	r26, 0x50	; 80
    38f6:	b0 e0       	ldi	r27, 0x00	; 0
    38f8:	e0 e5       	ldi	r30, 0x50	; 80
    38fa:	f0 e0       	ldi	r31, 0x00	; 0
    38fc:	80 81       	ld	r24, Z
    38fe:	8f 77       	andi	r24, 0x7F	; 127
    3900:	8c 93       	st	X, r24
    3902:	70 c0       	rjmp	.+224    	; 0x39e4 <ADC_enuEnableTrigger+0x204>
		break;
		
		case TIMER0_COMPARE_MATCH_TRIG:
		SFIOR |=  (MASK_BIT << ADTS0);
    3904:	a0 e5       	ldi	r26, 0x50	; 80
    3906:	b0 e0       	ldi	r27, 0x00	; 0
    3908:	e0 e5       	ldi	r30, 0x50	; 80
    390a:	f0 e0       	ldi	r31, 0x00	; 0
    390c:	80 81       	ld	r24, Z
    390e:	80 62       	ori	r24, 0x20	; 32
    3910:	8c 93       	st	X, r24
		SFIOR |=  (MASK_BIT << ADTS1);
    3912:	a0 e5       	ldi	r26, 0x50	; 80
    3914:	b0 e0       	ldi	r27, 0x00	; 0
    3916:	e0 e5       	ldi	r30, 0x50	; 80
    3918:	f0 e0       	ldi	r31, 0x00	; 0
    391a:	80 81       	ld	r24, Z
    391c:	80 64       	ori	r24, 0x40	; 64
    391e:	8c 93       	st	X, r24
		SFIOR &= ~(MASK_BIT << ADTS2);
    3920:	a0 e5       	ldi	r26, 0x50	; 80
    3922:	b0 e0       	ldi	r27, 0x00	; 0
    3924:	e0 e5       	ldi	r30, 0x50	; 80
    3926:	f0 e0       	ldi	r31, 0x00	; 0
    3928:	80 81       	ld	r24, Z
    392a:	8f 77       	andi	r24, 0x7F	; 127
    392c:	8c 93       	st	X, r24
    392e:	5a c0       	rjmp	.+180    	; 0x39e4 <ADC_enuEnableTrigger+0x204>
		break;
		
		case TIMER0_OVERFLOW_TRIG:
		SFIOR &= ~(MASK_BIT << ADTS0);
    3930:	a0 e5       	ldi	r26, 0x50	; 80
    3932:	b0 e0       	ldi	r27, 0x00	; 0
    3934:	e0 e5       	ldi	r30, 0x50	; 80
    3936:	f0 e0       	ldi	r31, 0x00	; 0
    3938:	80 81       	ld	r24, Z
    393a:	8f 7d       	andi	r24, 0xDF	; 223
    393c:	8c 93       	st	X, r24
		SFIOR &= ~(MASK_BIT << ADTS1);
    393e:	a0 e5       	ldi	r26, 0x50	; 80
    3940:	b0 e0       	ldi	r27, 0x00	; 0
    3942:	e0 e5       	ldi	r30, 0x50	; 80
    3944:	f0 e0       	ldi	r31, 0x00	; 0
    3946:	80 81       	ld	r24, Z
    3948:	8f 7b       	andi	r24, 0xBF	; 191
    394a:	8c 93       	st	X, r24
		SFIOR |=  (MASK_BIT << ADTS2);
    394c:	a0 e5       	ldi	r26, 0x50	; 80
    394e:	b0 e0       	ldi	r27, 0x00	; 0
    3950:	e0 e5       	ldi	r30, 0x50	; 80
    3952:	f0 e0       	ldi	r31, 0x00	; 0
    3954:	80 81       	ld	r24, Z
    3956:	80 68       	ori	r24, 0x80	; 128
    3958:	8c 93       	st	X, r24
    395a:	44 c0       	rjmp	.+136    	; 0x39e4 <ADC_enuEnableTrigger+0x204>
		break;
		
		case TIMER1_COMPARE_MATCH_TRIG:
		SFIOR |=  (MASK_BIT << ADTS0);
    395c:	a0 e5       	ldi	r26, 0x50	; 80
    395e:	b0 e0       	ldi	r27, 0x00	; 0
    3960:	e0 e5       	ldi	r30, 0x50	; 80
    3962:	f0 e0       	ldi	r31, 0x00	; 0
    3964:	80 81       	ld	r24, Z
    3966:	80 62       	ori	r24, 0x20	; 32
    3968:	8c 93       	st	X, r24
		SFIOR &= ~(MASK_BIT << ADTS1);
    396a:	a0 e5       	ldi	r26, 0x50	; 80
    396c:	b0 e0       	ldi	r27, 0x00	; 0
    396e:	e0 e5       	ldi	r30, 0x50	; 80
    3970:	f0 e0       	ldi	r31, 0x00	; 0
    3972:	80 81       	ld	r24, Z
    3974:	8f 7b       	andi	r24, 0xBF	; 191
    3976:	8c 93       	st	X, r24
		SFIOR |=  (MASK_BIT << ADTS2);
    3978:	a0 e5       	ldi	r26, 0x50	; 80
    397a:	b0 e0       	ldi	r27, 0x00	; 0
    397c:	e0 e5       	ldi	r30, 0x50	; 80
    397e:	f0 e0       	ldi	r31, 0x00	; 0
    3980:	80 81       	ld	r24, Z
    3982:	80 68       	ori	r24, 0x80	; 128
    3984:	8c 93       	st	X, r24
    3986:	2e c0       	rjmp	.+92     	; 0x39e4 <ADC_enuEnableTrigger+0x204>
		break;
		
		case TIMER1_OVERFLOW_TRIG:
		SFIOR &= ~(MASK_BIT << ADTS0);
    3988:	a0 e5       	ldi	r26, 0x50	; 80
    398a:	b0 e0       	ldi	r27, 0x00	; 0
    398c:	e0 e5       	ldi	r30, 0x50	; 80
    398e:	f0 e0       	ldi	r31, 0x00	; 0
    3990:	80 81       	ld	r24, Z
    3992:	8f 7d       	andi	r24, 0xDF	; 223
    3994:	8c 93       	st	X, r24
		SFIOR |=  (MASK_BIT << ADTS1);
    3996:	a0 e5       	ldi	r26, 0x50	; 80
    3998:	b0 e0       	ldi	r27, 0x00	; 0
    399a:	e0 e5       	ldi	r30, 0x50	; 80
    399c:	f0 e0       	ldi	r31, 0x00	; 0
    399e:	80 81       	ld	r24, Z
    39a0:	80 64       	ori	r24, 0x40	; 64
    39a2:	8c 93       	st	X, r24
		SFIOR |=  (MASK_BIT << ADTS2);
    39a4:	a0 e5       	ldi	r26, 0x50	; 80
    39a6:	b0 e0       	ldi	r27, 0x00	; 0
    39a8:	e0 e5       	ldi	r30, 0x50	; 80
    39aa:	f0 e0       	ldi	r31, 0x00	; 0
    39ac:	80 81       	ld	r24, Z
    39ae:	80 68       	ori	r24, 0x80	; 128
    39b0:	8c 93       	st	X, r24
    39b2:	18 c0       	rjmp	.+48     	; 0x39e4 <ADC_enuEnableTrigger+0x204>
		break;
		
		case TIMER1_CAPUTRE_TRIG:
		SFIOR |=  (MASK_BIT << ADTS0);
    39b4:	a0 e5       	ldi	r26, 0x50	; 80
    39b6:	b0 e0       	ldi	r27, 0x00	; 0
    39b8:	e0 e5       	ldi	r30, 0x50	; 80
    39ba:	f0 e0       	ldi	r31, 0x00	; 0
    39bc:	80 81       	ld	r24, Z
    39be:	80 62       	ori	r24, 0x20	; 32
    39c0:	8c 93       	st	X, r24
		SFIOR |=  (MASK_BIT << ADTS1);
    39c2:	a0 e5       	ldi	r26, 0x50	; 80
    39c4:	b0 e0       	ldi	r27, 0x00	; 0
    39c6:	e0 e5       	ldi	r30, 0x50	; 80
    39c8:	f0 e0       	ldi	r31, 0x00	; 0
    39ca:	80 81       	ld	r24, Z
    39cc:	80 64       	ori	r24, 0x40	; 64
    39ce:	8c 93       	st	X, r24
		SFIOR |=  (MASK_BIT << ADTS2);
    39d0:	a0 e5       	ldi	r26, 0x50	; 80
    39d2:	b0 e0       	ldi	r27, 0x00	; 0
    39d4:	e0 e5       	ldi	r30, 0x50	; 80
    39d6:	f0 e0       	ldi	r31, 0x00	; 0
    39d8:	80 81       	ld	r24, Z
    39da:	80 68       	ori	r24, 0x80	; 128
    39dc:	8c 93       	st	X, r24
    39de:	02 c0       	rjmp	.+4      	; 0x39e4 <ADC_enuEnableTrigger+0x204>
		break;
		
		default:
		Local_enuErrorState = ES_OUT_OF_RANGE;
    39e0:	83 e0       	ldi	r24, 0x03	; 3
    39e2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	
	ADCSRA |= (MASK_BIT << ADATE);
    39e4:	a6 e2       	ldi	r26, 0x26	; 38
    39e6:	b0 e0       	ldi	r27, 0x00	; 0
    39e8:	e6 e2       	ldi	r30, 0x26	; 38
    39ea:	f0 e0       	ldi	r31, 0x00	; 0
    39ec:	80 81       	ld	r24, Z
    39ee:	80 62       	ori	r24, 0x20	; 32
    39f0:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    39f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    39f4:	0f 90       	pop	r0
    39f6:	0f 90       	pop	r0
    39f8:	0f 90       	pop	r0
    39fa:	0f 90       	pop	r0
    39fc:	cf 91       	pop	r28
    39fe:	df 91       	pop	r29
    3a00:	08 95       	ret

00003a02 <ADC_enuDisableTrigger>:

ES_t ADC_enuDisableTrigger(void)
{
    3a02:	df 93       	push	r29
    3a04:	cf 93       	push	r28
    3a06:	0f 92       	push	r0
    3a08:	cd b7       	in	r28, 0x3d	; 61
    3a0a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA &= ~(MASK_BIT << ADATE);
    3a10:	a6 e2       	ldi	r26, 0x26	; 38
    3a12:	b0 e0       	ldi	r27, 0x00	; 0
    3a14:	e6 e2       	ldi	r30, 0x26	; 38
    3a16:	f0 e0       	ldi	r31, 0x00	; 0
    3a18:	80 81       	ld	r24, Z
    3a1a:	8f 7d       	andi	r24, 0xDF	; 223
    3a1c:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    3a1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a20:	0f 90       	pop	r0
    3a22:	cf 91       	pop	r28
    3a24:	df 91       	pop	r29
    3a26:	08 95       	ret

00003a28 <ADC_enuCallBack>:

ES_t ADC_enuCallBack(volatile void (*Copy_PFunc)(void*), volatile void *Copy_PvidAppParameter)
{
    3a28:	df 93       	push	r29
    3a2a:	cf 93       	push	r28
    3a2c:	00 d0       	rcall	.+0      	; 0x3a2e <ADC_enuCallBack+0x6>
    3a2e:	00 d0       	rcall	.+0      	; 0x3a30 <ADC_enuCallBack+0x8>
    3a30:	0f 92       	push	r0
    3a32:	cd b7       	in	r28, 0x3d	; 61
    3a34:	de b7       	in	r29, 0x3e	; 62
    3a36:	9b 83       	std	Y+3, r25	; 0x03
    3a38:	8a 83       	std	Y+2, r24	; 0x02
    3a3a:	7d 83       	std	Y+5, r23	; 0x05
    3a3c:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_PFunc != NULL)
    3a42:	8a 81       	ldd	r24, Y+2	; 0x02
    3a44:	9b 81       	ldd	r25, Y+3	; 0x03
    3a46:	00 97       	sbiw	r24, 0x00	; 0
    3a48:	69 f0       	breq	.+26     	; 0x3a64 <ADC_enuCallBack+0x3c>
	{
		ADC_PFuncISRFunc = Copy_PFunc;
    3a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a4c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a4e:	90 93 2a 02 	sts	0x022A, r25
    3a52:	80 93 29 02 	sts	0x0229, r24
		ADC_PvidISRParameter = Copy_PvidAppParameter;
    3a56:	8c 81       	ldd	r24, Y+4	; 0x04
    3a58:	9d 81       	ldd	r25, Y+5	; 0x05
    3a5a:	90 93 2c 02 	sts	0x022C, r25
    3a5e:	80 93 2b 02 	sts	0x022B, r24
    3a62:	02 c0       	rjmp	.+4      	; 0x3a68 <ADC_enuCallBack+0x40>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    3a64:	82 e0       	ldi	r24, 0x02	; 2
    3a66:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    3a68:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a6a:	0f 90       	pop	r0
    3a6c:	0f 90       	pop	r0
    3a6e:	0f 90       	pop	r0
    3a70:	0f 90       	pop	r0
    3a72:	0f 90       	pop	r0
    3a74:	cf 91       	pop	r28
    3a76:	df 91       	pop	r29
    3a78:	08 95       	ret

00003a7a <ADC_Read_From_Ch>:

ES_t ADC_Read_From_Ch(u16 *Copy_pu16ReadValue, u8 Copy_u8ChannelID)
{
    3a7a:	df 93       	push	r29
    3a7c:	cf 93       	push	r28
    3a7e:	00 d0       	rcall	.+0      	; 0x3a80 <ADC_Read_From_Ch+0x6>
    3a80:	00 d0       	rcall	.+0      	; 0x3a82 <ADC_Read_From_Ch+0x8>
    3a82:	cd b7       	in	r28, 0x3d	; 61
    3a84:	de b7       	in	r29, 0x3e	; 62
    3a86:	9b 83       	std	Y+3, r25	; 0x03
    3a88:	8a 83       	std	Y+2, r24	; 0x02
    3a8a:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    3a8c:	81 e0       	ldi	r24, 0x01	; 1
    3a8e:	89 83       	std	Y+1, r24	; 0x01

	ADC_enuEnable();
    3a90:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <ADC_enuEnable>
	ADC_enuDisableTrigger();
    3a94:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <ADC_enuDisableTrigger>
	ADC_enuSelectChannel(Copy_u8ChannelID);
    3a98:	8c 81       	ldd	r24, Y+4	; 0x04
    3a9a:	0e 94 35 1b 	call	0x366a	; 0x366a <ADC_enuSelectChannel>
	ADC_enuStartConversion();
    3a9e:	0e 94 22 1b 	call	0x3644	; 0x3644 <ADC_enuStartConversion>
	ADC_enuDisableInterrupt();
    3aa2:	0e 94 83 1b 	call	0x3706	; 0x3706 <ADC_enuDisableInterrupt>
	ADC_enuPollingSystem();
    3aa6:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <ADC_enuPollingSystem>
	ADC_enuReadADCValue(Copy_pu16ReadValue);
    3aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    3aac:	9b 81       	ldd	r25, Y+3	; 0x03
    3aae:	0e 94 c5 1b 	call	0x378a	; 0x378a <ADC_enuReadADCValue>
	ADC_enuDisable();
    3ab2:	0e 94 0f 1b 	call	0x361e	; 0x361e <ADC_enuDisable>

	return Local_enuErrorState;
    3ab6:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ab8:	0f 90       	pop	r0
    3aba:	0f 90       	pop	r0
    3abc:	0f 90       	pop	r0
    3abe:	0f 90       	pop	r0
    3ac0:	cf 91       	pop	r28
    3ac2:	df 91       	pop	r29
    3ac4:	08 95       	ret

00003ac6 <__vector_16>:

ISR(VECT_ADC)
{
    3ac6:	1f 92       	push	r1
    3ac8:	0f 92       	push	r0
    3aca:	0f b6       	in	r0, 0x3f	; 63
    3acc:	0f 92       	push	r0
    3ace:	11 24       	eor	r1, r1
    3ad0:	2f 93       	push	r18
    3ad2:	3f 93       	push	r19
    3ad4:	4f 93       	push	r20
    3ad6:	5f 93       	push	r21
    3ad8:	6f 93       	push	r22
    3ada:	7f 93       	push	r23
    3adc:	8f 93       	push	r24
    3ade:	9f 93       	push	r25
    3ae0:	af 93       	push	r26
    3ae2:	bf 93       	push	r27
    3ae4:	ef 93       	push	r30
    3ae6:	ff 93       	push	r31
    3ae8:	df 93       	push	r29
    3aea:	cf 93       	push	r28
    3aec:	cd b7       	in	r28, 0x3d	; 61
    3aee:	de b7       	in	r29, 0x3e	; 62
	if(ADC_PFuncISRFunc != NULL)
    3af0:	80 91 29 02 	lds	r24, 0x0229
    3af4:	90 91 2a 02 	lds	r25, 0x022A
    3af8:	00 97       	sbiw	r24, 0x00	; 0
    3afa:	49 f0       	breq	.+18     	; 0x3b0e <__vector_16+0x48>
	{
		ADC_PFuncISRFunc(ADC_PvidISRParameter);
    3afc:	e0 91 29 02 	lds	r30, 0x0229
    3b00:	f0 91 2a 02 	lds	r31, 0x022A
    3b04:	80 91 2b 02 	lds	r24, 0x022B
    3b08:	90 91 2c 02 	lds	r25, 0x022C
    3b0c:	09 95       	icall
	}
}
    3b0e:	cf 91       	pop	r28
    3b10:	df 91       	pop	r29
    3b12:	ff 91       	pop	r31
    3b14:	ef 91       	pop	r30
    3b16:	bf 91       	pop	r27
    3b18:	af 91       	pop	r26
    3b1a:	9f 91       	pop	r25
    3b1c:	8f 91       	pop	r24
    3b1e:	7f 91       	pop	r23
    3b20:	6f 91       	pop	r22
    3b22:	5f 91       	pop	r21
    3b24:	4f 91       	pop	r20
    3b26:	3f 91       	pop	r19
    3b28:	2f 91       	pop	r18
    3b2a:	0f 90       	pop	r0
    3b2c:	0f be       	out	0x3f, r0	; 63
    3b2e:	0f 90       	pop	r0
    3b30:	1f 90       	pop	r1
    3b32:	18 95       	reti

00003b34 <Soil_Moisture_enuInit>:
#include "Soil_Moisture_priv.h"

extern Soil_Moisture_Configuration_t Soil_Moisture_AstrSoilMoistureConfig[Soil_Moisture_NUM];

ES_t Soil_Moisture_enuInit(Soil_Moisture_Configuration_t *Copy_PstrSoilMoistureConfig)
{
    3b34:	df 93       	push	r29
    3b36:	cf 93       	push	r28
    3b38:	00 d0       	rcall	.+0      	; 0x3b3a <Soil_Moisture_enuInit+0x6>
    3b3a:	00 d0       	rcall	.+0      	; 0x3b3c <Soil_Moisture_enuInit+0x8>
    3b3c:	cd b7       	in	r28, 0x3d	; 61
    3b3e:	de b7       	in	r29, 0x3e	; 62
    3b40:	9c 83       	std	Y+4, r25	; 0x04
    3b42:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    3b44:	81 e0       	ldi	r24, 0x01	; 1
    3b46:	8a 83       	std	Y+2, r24	; 0x02

	ADC_enuInit();
    3b48:	0e 94 b1 1a 	call	0x3562	; 0x3562 <ADC_enuInit>

	u8 Local_u8Iterrator = 0;
    3b4c:	19 82       	std	Y+1, r1	; 0x01
	for(Local_u8Iterrator = 0; Local_u8Iterrator < Soil_Moisture_NUM; Local_u8Iterrator++)
    3b4e:	19 82       	std	Y+1, r1	; 0x01
    3b50:	1c c0       	rjmp	.+56     	; 0x3b8a <Soil_Moisture_enuInit+0x56>
	{
		DIO_enuSetPinDirection(DIO_u8PORTA, Copy_PstrSoilMoistureConfig[Local_u8Iterrator].Soil_Moisture_CHANNEL, DIO_u8INPUT);
    3b52:	89 81       	ldd	r24, Y+1	; 0x01
    3b54:	28 2f       	mov	r18, r24
    3b56:	30 e0       	ldi	r19, 0x00	; 0
    3b58:	8b 81       	ldd	r24, Y+3	; 0x03
    3b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b5c:	fc 01       	movw	r30, r24
    3b5e:	e2 0f       	add	r30, r18
    3b60:	f3 1f       	adc	r31, r19
    3b62:	90 81       	ld	r25, Z
    3b64:	80 e0       	ldi	r24, 0x00	; 0
    3b66:	69 2f       	mov	r22, r25
    3b68:	40 e0       	ldi	r20, 0x00	; 0
    3b6a:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
		ADC_enuSelectChannel(Copy_PstrSoilMoistureConfig[Local_u8Iterrator].Soil_Moisture_CHANNEL);
    3b6e:	89 81       	ldd	r24, Y+1	; 0x01
    3b70:	28 2f       	mov	r18, r24
    3b72:	30 e0       	ldi	r19, 0x00	; 0
    3b74:	8b 81       	ldd	r24, Y+3	; 0x03
    3b76:	9c 81       	ldd	r25, Y+4	; 0x04
    3b78:	fc 01       	movw	r30, r24
    3b7a:	e2 0f       	add	r30, r18
    3b7c:	f3 1f       	adc	r31, r19
    3b7e:	80 81       	ld	r24, Z
    3b80:	0e 94 35 1b 	call	0x366a	; 0x366a <ADC_enuSelectChannel>
	ES_t Local_enuErrorState = ES_NOK;

	ADC_enuInit();

	u8 Local_u8Iterrator = 0;
	for(Local_u8Iterrator = 0; Local_u8Iterrator < Soil_Moisture_NUM; Local_u8Iterrator++)
    3b84:	89 81       	ldd	r24, Y+1	; 0x01
    3b86:	8f 5f       	subi	r24, 0xFF	; 255
    3b88:	89 83       	std	Y+1, r24	; 0x01
    3b8a:	89 81       	ldd	r24, Y+1	; 0x01
    3b8c:	88 23       	and	r24, r24
    3b8e:	09 f3       	breq	.-62     	; 0x3b52 <Soil_Moisture_enuInit+0x1e>
	{
		DIO_enuSetPinDirection(DIO_u8PORTA, Copy_PstrSoilMoistureConfig[Local_u8Iterrator].Soil_Moisture_CHANNEL, DIO_u8INPUT);
		ADC_enuSelectChannel(Copy_PstrSoilMoistureConfig[Local_u8Iterrator].Soil_Moisture_CHANNEL);
	}

	ADC_enuEnable();
    3b90:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <ADC_enuEnable>

	Local_enuErrorState = ES_OK;
    3b94:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState;
    3b96:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3b98:	0f 90       	pop	r0
    3b9a:	0f 90       	pop	r0
    3b9c:	0f 90       	pop	r0
    3b9e:	0f 90       	pop	r0
    3ba0:	cf 91       	pop	r28
    3ba2:	df 91       	pop	r29
    3ba4:	08 95       	ret

00003ba6 <Soil_Moisture_enuGetMoisureVal>:

ES_t Soil_Moisture_enuGetMoisureVal(u8 Copy_u8Soil_Moisture_ID, u16 *Copy_Pu16MoistureValue)
{
    3ba6:	df 93       	push	r29
    3ba8:	cf 93       	push	r28
    3baa:	00 d0       	rcall	.+0      	; 0x3bac <Soil_Moisture_enuGetMoisureVal+0x6>
    3bac:	00 d0       	rcall	.+0      	; 0x3bae <Soil_Moisture_enuGetMoisureVal+0x8>
    3bae:	cd b7       	in	r28, 0x3d	; 61
    3bb0:	de b7       	in	r29, 0x3e	; 62
    3bb2:	8a 83       	std	Y+2, r24	; 0x02
    3bb4:	7c 83       	std	Y+4, r23	; 0x04
    3bb6:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    3bb8:	81 e0       	ldi	r24, 0x01	; 1
    3bba:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_Pu16MoistureValue != NULL)
    3bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    3bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    3bc0:	00 97       	sbiw	r24, 0x00	; 0
    3bc2:	01 f1       	breq	.+64     	; 0x3c04 <Soil_Moisture_enuGetMoisureVal+0x5e>
	{
		if(Copy_u8Soil_Moisture_ID < Soil_Moisture_NUM)
    3bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc6:	88 23       	and	r24, r24
    3bc8:	d1 f4       	brne	.+52     	; 0x3bfe <Soil_Moisture_enuGetMoisureVal+0x58>
		{
			ADC_enuEnable();
    3bca:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <ADC_enuEnable>
			ADC_enuDisableTrigger();
    3bce:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <ADC_enuDisableTrigger>
			ADC_enuSelectChannel(Soil_Moisture_AstrSoilMoistureConfig[Copy_u8Soil_Moisture_ID].Soil_Moisture_CHANNEL);
    3bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd4:	88 2f       	mov	r24, r24
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	fc 01       	movw	r30, r24
    3bda:	e3 5d       	subi	r30, 0xD3	; 211
    3bdc:	fd 4f       	sbci	r31, 0xFD	; 253
    3bde:	80 81       	ld	r24, Z
    3be0:	0e 94 35 1b 	call	0x366a	; 0x366a <ADC_enuSelectChannel>
			ADC_enuStartConversion();
    3be4:	0e 94 22 1b 	call	0x3644	; 0x3644 <ADC_enuStartConversion>
			ADC_enuDisableInterrupt();
    3be8:	0e 94 83 1b 	call	0x3706	; 0x3706 <ADC_enuDisableInterrupt>
			ADC_enuPollingSystem();
    3bec:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <ADC_enuPollingSystem>
			ADC_enuReadADCValue(Copy_Pu16MoistureValue);
    3bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    3bf4:	0e 94 c5 1b 	call	0x378a	; 0x378a <ADC_enuReadADCValue>
			ADC_enuDisable();
    3bf8:	0e 94 0f 1b 	call	0x361e	; 0x361e <ADC_enuDisable>
    3bfc:	05 c0       	rjmp	.+10     	; 0x3c08 <Soil_Moisture_enuGetMoisureVal+0x62>

			//ADC_Read_From_Ch(Copy_Pu16MoistureValue, Soil_Moisture_AstrSoilMoistureConfig[Copy_u8Soil_Moisture_ID].Soil_Moisture_CHANNEL);
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    3bfe:	83 e0       	ldi	r24, 0x03	; 3
    3c00:	89 83       	std	Y+1, r24	; 0x01
    3c02:	02 c0       	rjmp	.+4      	; 0x3c08 <Soil_Moisture_enuGetMoisureVal+0x62>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    3c04:	82 e0       	ldi	r24, 0x02	; 2
    3c06:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    3c08:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c0a:	0f 90       	pop	r0
    3c0c:	0f 90       	pop	r0
    3c0e:	0f 90       	pop	r0
    3c10:	0f 90       	pop	r0
    3c12:	cf 91       	pop	r28
    3c14:	df 91       	pop	r29
    3c16:	08 95       	ret

00003c18 <Switch_enuINIT>:
#include "Switch_priv.h"
#include "Switch_config.h"


ES_t Switch_enuINIT(SW_t * Copy_pAstrSwConfig)
{
    3c18:	df 93       	push	r29
    3c1a:	cf 93       	push	r28
    3c1c:	00 d0       	rcall	.+0      	; 0x3c1e <Switch_enuINIT+0x6>
    3c1e:	00 d0       	rcall	.+0      	; 0x3c20 <Switch_enuINIT+0x8>
    3c20:	cd b7       	in	r28, 0x3d	; 61
    3c22:	de b7       	in	r29, 0x3e	; 62
    3c24:	9c 83       	std	Y+4, r25	; 0x04
    3c26:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    3c28:	81 e0       	ldi	r24, 0x01	; 1
    3c2a:	8a 83       	std	Y+2, r24	; 0x02
	
	if(Copy_pAstrSwConfig != NULL)
    3c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c30:	00 97       	sbiw	r24, 0x00	; 0
    3c32:	09 f4       	brne	.+2      	; 0x3c36 <Switch_enuINIT+0x1e>
    3c34:	5c c0       	rjmp	.+184    	; 0x3cee <Switch_enuINIT+0xd6>
	{
		u8 Local_u8Iterator;
		
		for(Local_u8Iterator = 0; Local_u8Iterator < SW_NUM; Local_u8Iterator++)
    3c36:	19 82       	std	Y+1, r1	; 0x01
    3c38:	55 c0       	rjmp	.+170    	; 0x3ce4 <Switch_enuINIT+0xcc>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_pAstrSwConfig[Local_u8Iterator].SW_u8PortID, Copy_pAstrSwConfig[Local_u8Iterator].SW_u8PinID, DIO_u8INPUT);
    3c3a:	89 81       	ldd	r24, Y+1	; 0x01
    3c3c:	28 2f       	mov	r18, r24
    3c3e:	30 e0       	ldi	r19, 0x00	; 0
    3c40:	c9 01       	movw	r24, r18
    3c42:	88 0f       	add	r24, r24
    3c44:	99 1f       	adc	r25, r25
    3c46:	28 0f       	add	r18, r24
    3c48:	39 1f       	adc	r19, r25
    3c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c4e:	fc 01       	movw	r30, r24
    3c50:	e2 0f       	add	r30, r18
    3c52:	f3 1f       	adc	r31, r19
    3c54:	40 81       	ld	r20, Z
    3c56:	89 81       	ldd	r24, Y+1	; 0x01
    3c58:	28 2f       	mov	r18, r24
    3c5a:	30 e0       	ldi	r19, 0x00	; 0
    3c5c:	c9 01       	movw	r24, r18
    3c5e:	88 0f       	add	r24, r24
    3c60:	99 1f       	adc	r25, r25
    3c62:	28 0f       	add	r18, r24
    3c64:	39 1f       	adc	r19, r25
    3c66:	8b 81       	ldd	r24, Y+3	; 0x03
    3c68:	9c 81       	ldd	r25, Y+4	; 0x04
    3c6a:	fc 01       	movw	r30, r24
    3c6c:	e2 0f       	add	r30, r18
    3c6e:	f3 1f       	adc	r31, r19
    3c70:	91 81       	ldd	r25, Z+1	; 0x01
    3c72:	84 2f       	mov	r24, r20
    3c74:	69 2f       	mov	r22, r25
    3c76:	40 e0       	ldi	r20, 0x00	; 0
    3c78:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    3c7c:	8a 83       	std	Y+2, r24	; 0x02
			Local_enuErrorState = DIO_enuSetPinVal(Copy_pAstrSwConfig[Local_u8Iterator].SW_u8PortID, Copy_pAstrSwConfig[Local_u8Iterator].SW_u8PinID, Copy_pAstrSwConfig[Local_u8Iterator].SW_u8Status);	
    3c7e:	89 81       	ldd	r24, Y+1	; 0x01
    3c80:	28 2f       	mov	r18, r24
    3c82:	30 e0       	ldi	r19, 0x00	; 0
    3c84:	c9 01       	movw	r24, r18
    3c86:	88 0f       	add	r24, r24
    3c88:	99 1f       	adc	r25, r25
    3c8a:	28 0f       	add	r18, r24
    3c8c:	39 1f       	adc	r19, r25
    3c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c90:	9c 81       	ldd	r25, Y+4	; 0x04
    3c92:	fc 01       	movw	r30, r24
    3c94:	e2 0f       	add	r30, r18
    3c96:	f3 1f       	adc	r31, r19
    3c98:	50 81       	ld	r21, Z
    3c9a:	89 81       	ldd	r24, Y+1	; 0x01
    3c9c:	28 2f       	mov	r18, r24
    3c9e:	30 e0       	ldi	r19, 0x00	; 0
    3ca0:	c9 01       	movw	r24, r18
    3ca2:	88 0f       	add	r24, r24
    3ca4:	99 1f       	adc	r25, r25
    3ca6:	28 0f       	add	r18, r24
    3ca8:	39 1f       	adc	r19, r25
    3caa:	8b 81       	ldd	r24, Y+3	; 0x03
    3cac:	9c 81       	ldd	r25, Y+4	; 0x04
    3cae:	fc 01       	movw	r30, r24
    3cb0:	e2 0f       	add	r30, r18
    3cb2:	f3 1f       	adc	r31, r19
    3cb4:	41 81       	ldd	r20, Z+1	; 0x01
    3cb6:	89 81       	ldd	r24, Y+1	; 0x01
    3cb8:	28 2f       	mov	r18, r24
    3cba:	30 e0       	ldi	r19, 0x00	; 0
    3cbc:	c9 01       	movw	r24, r18
    3cbe:	88 0f       	add	r24, r24
    3cc0:	99 1f       	adc	r25, r25
    3cc2:	28 0f       	add	r18, r24
    3cc4:	39 1f       	adc	r19, r25
    3cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    3cca:	fc 01       	movw	r30, r24
    3ccc:	e2 0f       	add	r30, r18
    3cce:	f3 1f       	adc	r31, r19
    3cd0:	92 81       	ldd	r25, Z+2	; 0x02
    3cd2:	85 2f       	mov	r24, r21
    3cd4:	64 2f       	mov	r22, r20
    3cd6:	49 2f       	mov	r20, r25
    3cd8:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    3cdc:	8a 83       	std	Y+2, r24	; 0x02
	
	if(Copy_pAstrSwConfig != NULL)
	{
		u8 Local_u8Iterator;
		
		for(Local_u8Iterator = 0; Local_u8Iterator < SW_NUM; Local_u8Iterator++)
    3cde:	89 81       	ldd	r24, Y+1	; 0x01
    3ce0:	8f 5f       	subi	r24, 0xFF	; 255
    3ce2:	89 83       	std	Y+1, r24	; 0x01
    3ce4:	89 81       	ldd	r24, Y+1	; 0x01
    3ce6:	82 30       	cpi	r24, 0x02	; 2
    3ce8:	08 f4       	brcc	.+2      	; 0x3cec <Switch_enuINIT+0xd4>
    3cea:	a7 cf       	rjmp	.-178    	; 0x3c3a <Switch_enuINIT+0x22>
    3cec:	02 c0       	rjmp	.+4      	; 0x3cf2 <Switch_enuINIT+0xda>
			Local_enuErrorState = DIO_enuSetPinVal(Copy_pAstrSwConfig[Local_u8Iterator].SW_u8PortID, Copy_pAstrSwConfig[Local_u8Iterator].SW_u8PinID, Copy_pAstrSwConfig[Local_u8Iterator].SW_u8Status);	
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    3cee:	82 e0       	ldi	r24, 0x02	; 2
    3cf0:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	return Local_enuErrorState;
    3cf2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3cf4:	0f 90       	pop	r0
    3cf6:	0f 90       	pop	r0
    3cf8:	0f 90       	pop	r0
    3cfa:	0f 90       	pop	r0
    3cfc:	cf 91       	pop	r28
    3cfe:	df 91       	pop	r29
    3d00:	08 95       	ret

00003d02 <Switch_enuGetState>:

ES_t Switch_enuGetState(SW_t * Copy_pstrSwConfigID, u8 * Copy_pu8SwitchState)
{
    3d02:	df 93       	push	r29
    3d04:	cf 93       	push	r28
    3d06:	00 d0       	rcall	.+0      	; 0x3d08 <Switch_enuGetState+0x6>
    3d08:	00 d0       	rcall	.+0      	; 0x3d0a <Switch_enuGetState+0x8>
    3d0a:	0f 92       	push	r0
    3d0c:	cd b7       	in	r28, 0x3d	; 61
    3d0e:	de b7       	in	r29, 0x3e	; 62
    3d10:	9b 83       	std	Y+3, r25	; 0x03
    3d12:	8a 83       	std	Y+2, r24	; 0x02
    3d14:	7d 83       	std	Y+5, r23	; 0x05
    3d16:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    3d18:	81 e0       	ldi	r24, 0x01	; 1
    3d1a:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_pstrSwConfigID != NULL && Copy_pu8SwitchState != NULL)
    3d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d1e:	9b 81       	ldd	r25, Y+3	; 0x03
    3d20:	00 97       	sbiw	r24, 0x00	; 0
    3d22:	91 f0       	breq	.+36     	; 0x3d48 <Switch_enuGetState+0x46>
    3d24:	8c 81       	ldd	r24, Y+4	; 0x04
    3d26:	9d 81       	ldd	r25, Y+5	; 0x05
    3d28:	00 97       	sbiw	r24, 0x00	; 0
    3d2a:	71 f0       	breq	.+28     	; 0x3d48 <Switch_enuGetState+0x46>
	{
		Local_enuErrorState = DIO_enuGetPinVal(Copy_pstrSwConfigID->SW_u8PortID, Copy_pstrSwConfigID->SW_u8PinID, Copy_pu8SwitchState);
    3d2c:	ea 81       	ldd	r30, Y+2	; 0x02
    3d2e:	fb 81       	ldd	r31, Y+3	; 0x03
    3d30:	80 81       	ld	r24, Z
    3d32:	ea 81       	ldd	r30, Y+2	; 0x02
    3d34:	fb 81       	ldd	r31, Y+3	; 0x03
    3d36:	91 81       	ldd	r25, Z+1	; 0x01
    3d38:	2c 81       	ldd	r18, Y+4	; 0x04
    3d3a:	3d 81       	ldd	r19, Y+5	; 0x05
    3d3c:	69 2f       	mov	r22, r25
    3d3e:	a9 01       	movw	r20, r18
    3d40:	0e 94 85 19 	call	0x330a	; 0x330a <DIO_enuGetPinVal>
    3d44:	89 83       	std	Y+1, r24	; 0x01
    3d46:	02 c0       	rjmp	.+4      	; 0x3d4c <Switch_enuGetState+0x4a>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    3d48:	82 e0       	ldi	r24, 0x02	; 2
    3d4a:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    3d4c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d4e:	0f 90       	pop	r0
    3d50:	0f 90       	pop	r0
    3d52:	0f 90       	pop	r0
    3d54:	0f 90       	pop	r0
    3d56:	0f 90       	pop	r0
    3d58:	cf 91       	pop	r28
    3d5a:	df 91       	pop	r29
    3d5c:	08 95       	ret

00003d5e <Switch_enuChangeMode>:

ES_t Switch_enuChangeMode(SW_t * Copy_pstrSwConfigID, u8 Copy_u8SwitchStatus)
{
    3d5e:	df 93       	push	r29
    3d60:	cf 93       	push	r28
    3d62:	00 d0       	rcall	.+0      	; 0x3d64 <Switch_enuChangeMode+0x6>
    3d64:	00 d0       	rcall	.+0      	; 0x3d66 <Switch_enuChangeMode+0x8>
    3d66:	cd b7       	in	r28, 0x3d	; 61
    3d68:	de b7       	in	r29, 0x3e	; 62
    3d6a:	9b 83       	std	Y+3, r25	; 0x03
    3d6c:	8a 83       	std	Y+2, r24	; 0x02
    3d6e:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    3d70:	81 e0       	ldi	r24, 0x01	; 1
    3d72:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_pstrSwConfigID != NULL)
    3d74:	8a 81       	ldd	r24, Y+2	; 0x02
    3d76:	9b 81       	ldd	r25, Y+3	; 0x03
    3d78:	00 97       	sbiw	r24, 0x00	; 0
    3d7a:	b9 f0       	breq	.+46     	; 0x3daa <Switch_enuChangeMode+0x4c>
	{
		Local_enuErrorState = DIO_enuSetPinDirection(Copy_pstrSwConfigID->SW_u8PortID, Copy_pstrSwConfigID->SW_u8PinID, DIO_u8INPUT);
    3d7c:	ea 81       	ldd	r30, Y+2	; 0x02
    3d7e:	fb 81       	ldd	r31, Y+3	; 0x03
    3d80:	80 81       	ld	r24, Z
    3d82:	ea 81       	ldd	r30, Y+2	; 0x02
    3d84:	fb 81       	ldd	r31, Y+3	; 0x03
    3d86:	91 81       	ldd	r25, Z+1	; 0x01
    3d88:	69 2f       	mov	r22, r25
    3d8a:	40 e0       	ldi	r20, 0x00	; 0
    3d8c:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    3d90:	89 83       	std	Y+1, r24	; 0x01
		Local_enuErrorState = DIO_enuSetPinVal(Copy_pstrSwConfigID->SW_u8PortID, Copy_pstrSwConfigID->SW_u8PinID, Copy_u8SwitchStatus);
    3d92:	ea 81       	ldd	r30, Y+2	; 0x02
    3d94:	fb 81       	ldd	r31, Y+3	; 0x03
    3d96:	80 81       	ld	r24, Z
    3d98:	ea 81       	ldd	r30, Y+2	; 0x02
    3d9a:	fb 81       	ldd	r31, Y+3	; 0x03
    3d9c:	91 81       	ldd	r25, Z+1	; 0x01
    3d9e:	69 2f       	mov	r22, r25
    3da0:	4c 81       	ldd	r20, Y+4	; 0x04
    3da2:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    3da6:	89 83       	std	Y+1, r24	; 0x01
    3da8:	02 c0       	rjmp	.+4      	; 0x3dae <Switch_enuChangeMode+0x50>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    3daa:	82 e0       	ldi	r24, 0x02	; 2
    3dac:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    3dae:	89 81       	ldd	r24, Y+1	; 0x01
}
    3db0:	0f 90       	pop	r0
    3db2:	0f 90       	pop	r0
    3db4:	0f 90       	pop	r0
    3db6:	0f 90       	pop	r0
    3db8:	cf 91       	pop	r28
    3dba:	df 91       	pop	r29
    3dbc:	08 95       	ret

00003dbe <Seven_Segment_enuInit>:
#include "Seven_Segment_priv.h"

extern SEG_t SEV_SEG_AstrSEGConfig[SEG_NUM];

ES_t Seven_Segment_enuInit(SEG_t *Copy_pAstrSEG_Config)
{
    3dbe:	df 93       	push	r29
    3dc0:	cf 93       	push	r28
    3dc2:	cd b7       	in	r28, 0x3d	; 61
    3dc4:	de b7       	in	r29, 0x3e	; 62
    3dc6:	2a 97       	sbiw	r28, 0x0a	; 10
    3dc8:	0f b6       	in	r0, 0x3f	; 63
    3dca:	f8 94       	cli
    3dcc:	de bf       	out	0x3e, r29	; 62
    3dce:	0f be       	out	0x3f, r0	; 63
    3dd0:	cd bf       	out	0x3d, r28	; 61
    3dd2:	99 87       	std	Y+9, r25	; 0x09
    3dd4:	88 87       	std	Y+8, r24	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    3dd6:	81 e0       	ldi	r24, 0x01	; 1
    3dd8:	8f 83       	std	Y+7, r24	; 0x07
	
	u8 Local_u8Iterator = 0;
    3dda:	1e 82       	std	Y+6, r1	; 0x06
	
	u8 Local_u8Iterator_Error = 0;
    3ddc:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32CheckError = 0;
    3dde:	19 82       	std	Y+1, r1	; 0x01
    3de0:	1a 82       	std	Y+2, r1	; 0x02
    3de2:	1b 82       	std	Y+3, r1	; 0x03
    3de4:	1c 82       	std	Y+4, r1	; 0x04
	
	if(Copy_pAstrSEG_Config != NULL)
    3de6:	88 85       	ldd	r24, Y+8	; 0x08
    3de8:	99 85       	ldd	r25, Y+9	; 0x09
    3dea:	00 97       	sbiw	r24, 0x00	; 0
    3dec:	09 f4       	brne	.+2      	; 0x3df0 <Seven_Segment_enuInit+0x32>
    3dee:	9c c3       	rjmp	.+1848   	; 0x4528 <Seven_Segment_enuInit+0x76a>
	{
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
    3df0:	1e 82       	std	Y+6, r1	; 0x06
    3df2:	6a c3       	rjmp	.+1748   	; 0x44c8 <Seven_Segment_enuInit+0x70a>
		{
			Local_u8Iterator_Error = 0;
    3df4:	1d 82       	std	Y+5, r1	; 0x05
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_APORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_APIN, DIO_u8OUTPUT) << Local_u8Iterator_Error);
    3df6:	8e 81       	ldd	r24, Y+6	; 0x06
    3df8:	48 2f       	mov	r20, r24
    3dfa:	50 e0       	ldi	r21, 0x00	; 0
    3dfc:	ca 01       	movw	r24, r20
    3dfe:	88 0f       	add	r24, r24
    3e00:	99 1f       	adc	r25, r25
    3e02:	9c 01       	movw	r18, r24
    3e04:	22 0f       	add	r18, r18
    3e06:	33 1f       	adc	r19, r19
    3e08:	22 0f       	add	r18, r18
    3e0a:	33 1f       	adc	r19, r19
    3e0c:	22 0f       	add	r18, r18
    3e0e:	33 1f       	adc	r19, r19
    3e10:	82 0f       	add	r24, r18
    3e12:	93 1f       	adc	r25, r19
    3e14:	9c 01       	movw	r18, r24
    3e16:	24 0f       	add	r18, r20
    3e18:	35 1f       	adc	r19, r21
    3e1a:	88 85       	ldd	r24, Y+8	; 0x08
    3e1c:	99 85       	ldd	r25, Y+9	; 0x09
    3e1e:	fc 01       	movw	r30, r24
    3e20:	e2 0f       	add	r30, r18
    3e22:	f3 1f       	adc	r31, r19
    3e24:	60 81       	ld	r22, Z
    3e26:	8e 81       	ldd	r24, Y+6	; 0x06
    3e28:	48 2f       	mov	r20, r24
    3e2a:	50 e0       	ldi	r21, 0x00	; 0
    3e2c:	ca 01       	movw	r24, r20
    3e2e:	88 0f       	add	r24, r24
    3e30:	99 1f       	adc	r25, r25
    3e32:	9c 01       	movw	r18, r24
    3e34:	22 0f       	add	r18, r18
    3e36:	33 1f       	adc	r19, r19
    3e38:	22 0f       	add	r18, r18
    3e3a:	33 1f       	adc	r19, r19
    3e3c:	22 0f       	add	r18, r18
    3e3e:	33 1f       	adc	r19, r19
    3e40:	82 0f       	add	r24, r18
    3e42:	93 1f       	adc	r25, r19
    3e44:	9c 01       	movw	r18, r24
    3e46:	24 0f       	add	r18, r20
    3e48:	35 1f       	adc	r19, r21
    3e4a:	88 85       	ldd	r24, Y+8	; 0x08
    3e4c:	99 85       	ldd	r25, Y+9	; 0x09
    3e4e:	fc 01       	movw	r30, r24
    3e50:	e2 0f       	add	r30, r18
    3e52:	f3 1f       	adc	r31, r19
    3e54:	91 81       	ldd	r25, Z+1	; 0x01
    3e56:	86 2f       	mov	r24, r22
    3e58:	69 2f       	mov	r22, r25
    3e5a:	41 e0       	ldi	r20, 0x01	; 1
    3e5c:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    3e60:	28 2f       	mov	r18, r24
    3e62:	30 e0       	ldi	r19, 0x00	; 0
    3e64:	8d 81       	ldd	r24, Y+5	; 0x05
    3e66:	88 2f       	mov	r24, r24
    3e68:	90 e0       	ldi	r25, 0x00	; 0
    3e6a:	a9 01       	movw	r20, r18
    3e6c:	02 c0       	rjmp	.+4      	; 0x3e72 <Seven_Segment_enuInit+0xb4>
    3e6e:	44 0f       	add	r20, r20
    3e70:	55 1f       	adc	r21, r21
    3e72:	8a 95       	dec	r24
    3e74:	e2 f7       	brpl	.-8      	; 0x3e6e <Seven_Segment_enuInit+0xb0>
    3e76:	ca 01       	movw	r24, r20
    3e78:	9c 01       	movw	r18, r24
    3e7a:	44 27       	eor	r20, r20
    3e7c:	37 fd       	sbrc	r19, 7
    3e7e:	40 95       	com	r20
    3e80:	54 2f       	mov	r21, r20
    3e82:	89 81       	ldd	r24, Y+1	; 0x01
    3e84:	9a 81       	ldd	r25, Y+2	; 0x02
    3e86:	ab 81       	ldd	r26, Y+3	; 0x03
    3e88:	bc 81       	ldd	r27, Y+4	; 0x04
    3e8a:	82 2b       	or	r24, r18
    3e8c:	93 2b       	or	r25, r19
    3e8e:	a4 2b       	or	r26, r20
    3e90:	b5 2b       	or	r27, r21
    3e92:	89 83       	std	Y+1, r24	; 0x01
    3e94:	9a 83       	std	Y+2, r25	; 0x02
    3e96:	ab 83       	std	Y+3, r26	; 0x03
    3e98:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_BPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_BPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    3e9a:	8e 81       	ldd	r24, Y+6	; 0x06
    3e9c:	48 2f       	mov	r20, r24
    3e9e:	50 e0       	ldi	r21, 0x00	; 0
    3ea0:	ca 01       	movw	r24, r20
    3ea2:	88 0f       	add	r24, r24
    3ea4:	99 1f       	adc	r25, r25
    3ea6:	9c 01       	movw	r18, r24
    3ea8:	22 0f       	add	r18, r18
    3eaa:	33 1f       	adc	r19, r19
    3eac:	22 0f       	add	r18, r18
    3eae:	33 1f       	adc	r19, r19
    3eb0:	22 0f       	add	r18, r18
    3eb2:	33 1f       	adc	r19, r19
    3eb4:	82 0f       	add	r24, r18
    3eb6:	93 1f       	adc	r25, r19
    3eb8:	9c 01       	movw	r18, r24
    3eba:	24 0f       	add	r18, r20
    3ebc:	35 1f       	adc	r19, r21
    3ebe:	88 85       	ldd	r24, Y+8	; 0x08
    3ec0:	99 85       	ldd	r25, Y+9	; 0x09
    3ec2:	fc 01       	movw	r30, r24
    3ec4:	e2 0f       	add	r30, r18
    3ec6:	f3 1f       	adc	r31, r19
    3ec8:	62 81       	ldd	r22, Z+2	; 0x02
    3eca:	8e 81       	ldd	r24, Y+6	; 0x06
    3ecc:	48 2f       	mov	r20, r24
    3ece:	50 e0       	ldi	r21, 0x00	; 0
    3ed0:	ca 01       	movw	r24, r20
    3ed2:	88 0f       	add	r24, r24
    3ed4:	99 1f       	adc	r25, r25
    3ed6:	9c 01       	movw	r18, r24
    3ed8:	22 0f       	add	r18, r18
    3eda:	33 1f       	adc	r19, r19
    3edc:	22 0f       	add	r18, r18
    3ede:	33 1f       	adc	r19, r19
    3ee0:	22 0f       	add	r18, r18
    3ee2:	33 1f       	adc	r19, r19
    3ee4:	82 0f       	add	r24, r18
    3ee6:	93 1f       	adc	r25, r19
    3ee8:	9c 01       	movw	r18, r24
    3eea:	24 0f       	add	r18, r20
    3eec:	35 1f       	adc	r19, r21
    3eee:	88 85       	ldd	r24, Y+8	; 0x08
    3ef0:	99 85       	ldd	r25, Y+9	; 0x09
    3ef2:	fc 01       	movw	r30, r24
    3ef4:	e2 0f       	add	r30, r18
    3ef6:	f3 1f       	adc	r31, r19
    3ef8:	93 81       	ldd	r25, Z+3	; 0x03
    3efa:	86 2f       	mov	r24, r22
    3efc:	69 2f       	mov	r22, r25
    3efe:	41 e0       	ldi	r20, 0x01	; 1
    3f00:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    3f04:	28 2f       	mov	r18, r24
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	8d 81       	ldd	r24, Y+5	; 0x05
    3f0a:	8d 5f       	subi	r24, 0xFD	; 253
    3f0c:	8d 83       	std	Y+5, r24	; 0x05
    3f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f10:	88 2f       	mov	r24, r24
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	a9 01       	movw	r20, r18
    3f16:	02 c0       	rjmp	.+4      	; 0x3f1c <Seven_Segment_enuInit+0x15e>
    3f18:	44 0f       	add	r20, r20
    3f1a:	55 1f       	adc	r21, r21
    3f1c:	8a 95       	dec	r24
    3f1e:	e2 f7       	brpl	.-8      	; 0x3f18 <Seven_Segment_enuInit+0x15a>
    3f20:	ca 01       	movw	r24, r20
    3f22:	9c 01       	movw	r18, r24
    3f24:	44 27       	eor	r20, r20
    3f26:	37 fd       	sbrc	r19, 7
    3f28:	40 95       	com	r20
    3f2a:	54 2f       	mov	r21, r20
    3f2c:	89 81       	ldd	r24, Y+1	; 0x01
    3f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f30:	ab 81       	ldd	r26, Y+3	; 0x03
    3f32:	bc 81       	ldd	r27, Y+4	; 0x04
    3f34:	82 2b       	or	r24, r18
    3f36:	93 2b       	or	r25, r19
    3f38:	a4 2b       	or	r26, r20
    3f3a:	b5 2b       	or	r27, r21
    3f3c:	89 83       	std	Y+1, r24	; 0x01
    3f3e:	9a 83       	std	Y+2, r25	; 0x02
    3f40:	ab 83       	std	Y+3, r26	; 0x03
    3f42:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    3f44:	8e 81       	ldd	r24, Y+6	; 0x06
    3f46:	48 2f       	mov	r20, r24
    3f48:	50 e0       	ldi	r21, 0x00	; 0
    3f4a:	ca 01       	movw	r24, r20
    3f4c:	88 0f       	add	r24, r24
    3f4e:	99 1f       	adc	r25, r25
    3f50:	9c 01       	movw	r18, r24
    3f52:	22 0f       	add	r18, r18
    3f54:	33 1f       	adc	r19, r19
    3f56:	22 0f       	add	r18, r18
    3f58:	33 1f       	adc	r19, r19
    3f5a:	22 0f       	add	r18, r18
    3f5c:	33 1f       	adc	r19, r19
    3f5e:	82 0f       	add	r24, r18
    3f60:	93 1f       	adc	r25, r19
    3f62:	9c 01       	movw	r18, r24
    3f64:	24 0f       	add	r18, r20
    3f66:	35 1f       	adc	r19, r21
    3f68:	88 85       	ldd	r24, Y+8	; 0x08
    3f6a:	99 85       	ldd	r25, Y+9	; 0x09
    3f6c:	fc 01       	movw	r30, r24
    3f6e:	e2 0f       	add	r30, r18
    3f70:	f3 1f       	adc	r31, r19
    3f72:	64 81       	ldd	r22, Z+4	; 0x04
    3f74:	8e 81       	ldd	r24, Y+6	; 0x06
    3f76:	48 2f       	mov	r20, r24
    3f78:	50 e0       	ldi	r21, 0x00	; 0
    3f7a:	ca 01       	movw	r24, r20
    3f7c:	88 0f       	add	r24, r24
    3f7e:	99 1f       	adc	r25, r25
    3f80:	9c 01       	movw	r18, r24
    3f82:	22 0f       	add	r18, r18
    3f84:	33 1f       	adc	r19, r19
    3f86:	22 0f       	add	r18, r18
    3f88:	33 1f       	adc	r19, r19
    3f8a:	22 0f       	add	r18, r18
    3f8c:	33 1f       	adc	r19, r19
    3f8e:	82 0f       	add	r24, r18
    3f90:	93 1f       	adc	r25, r19
    3f92:	9c 01       	movw	r18, r24
    3f94:	24 0f       	add	r18, r20
    3f96:	35 1f       	adc	r19, r21
    3f98:	88 85       	ldd	r24, Y+8	; 0x08
    3f9a:	99 85       	ldd	r25, Y+9	; 0x09
    3f9c:	fc 01       	movw	r30, r24
    3f9e:	e2 0f       	add	r30, r18
    3fa0:	f3 1f       	adc	r31, r19
    3fa2:	95 81       	ldd	r25, Z+5	; 0x05
    3fa4:	86 2f       	mov	r24, r22
    3fa6:	69 2f       	mov	r22, r25
    3fa8:	41 e0       	ldi	r20, 0x01	; 1
    3faa:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    3fae:	28 2f       	mov	r18, r24
    3fb0:	30 e0       	ldi	r19, 0x00	; 0
    3fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb4:	8d 5f       	subi	r24, 0xFD	; 253
    3fb6:	8d 83       	std	Y+5, r24	; 0x05
    3fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    3fba:	88 2f       	mov	r24, r24
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	a9 01       	movw	r20, r18
    3fc0:	02 c0       	rjmp	.+4      	; 0x3fc6 <Seven_Segment_enuInit+0x208>
    3fc2:	44 0f       	add	r20, r20
    3fc4:	55 1f       	adc	r21, r21
    3fc6:	8a 95       	dec	r24
    3fc8:	e2 f7       	brpl	.-8      	; 0x3fc2 <Seven_Segment_enuInit+0x204>
    3fca:	ca 01       	movw	r24, r20
    3fcc:	9c 01       	movw	r18, r24
    3fce:	44 27       	eor	r20, r20
    3fd0:	37 fd       	sbrc	r19, 7
    3fd2:	40 95       	com	r20
    3fd4:	54 2f       	mov	r21, r20
    3fd6:	89 81       	ldd	r24, Y+1	; 0x01
    3fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fda:	ab 81       	ldd	r26, Y+3	; 0x03
    3fdc:	bc 81       	ldd	r27, Y+4	; 0x04
    3fde:	82 2b       	or	r24, r18
    3fe0:	93 2b       	or	r25, r19
    3fe2:	a4 2b       	or	r26, r20
    3fe4:	b5 2b       	or	r27, r21
    3fe6:	89 83       	std	Y+1, r24	; 0x01
    3fe8:	9a 83       	std	Y+2, r25	; 0x02
    3fea:	ab 83       	std	Y+3, r26	; 0x03
    3fec:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    3fee:	8e 81       	ldd	r24, Y+6	; 0x06
    3ff0:	48 2f       	mov	r20, r24
    3ff2:	50 e0       	ldi	r21, 0x00	; 0
    3ff4:	ca 01       	movw	r24, r20
    3ff6:	88 0f       	add	r24, r24
    3ff8:	99 1f       	adc	r25, r25
    3ffa:	9c 01       	movw	r18, r24
    3ffc:	22 0f       	add	r18, r18
    3ffe:	33 1f       	adc	r19, r19
    4000:	22 0f       	add	r18, r18
    4002:	33 1f       	adc	r19, r19
    4004:	22 0f       	add	r18, r18
    4006:	33 1f       	adc	r19, r19
    4008:	82 0f       	add	r24, r18
    400a:	93 1f       	adc	r25, r19
    400c:	9c 01       	movw	r18, r24
    400e:	24 0f       	add	r18, r20
    4010:	35 1f       	adc	r19, r21
    4012:	88 85       	ldd	r24, Y+8	; 0x08
    4014:	99 85       	ldd	r25, Y+9	; 0x09
    4016:	fc 01       	movw	r30, r24
    4018:	e2 0f       	add	r30, r18
    401a:	f3 1f       	adc	r31, r19
    401c:	66 81       	ldd	r22, Z+6	; 0x06
    401e:	8e 81       	ldd	r24, Y+6	; 0x06
    4020:	48 2f       	mov	r20, r24
    4022:	50 e0       	ldi	r21, 0x00	; 0
    4024:	ca 01       	movw	r24, r20
    4026:	88 0f       	add	r24, r24
    4028:	99 1f       	adc	r25, r25
    402a:	9c 01       	movw	r18, r24
    402c:	22 0f       	add	r18, r18
    402e:	33 1f       	adc	r19, r19
    4030:	22 0f       	add	r18, r18
    4032:	33 1f       	adc	r19, r19
    4034:	22 0f       	add	r18, r18
    4036:	33 1f       	adc	r19, r19
    4038:	82 0f       	add	r24, r18
    403a:	93 1f       	adc	r25, r19
    403c:	9c 01       	movw	r18, r24
    403e:	24 0f       	add	r18, r20
    4040:	35 1f       	adc	r19, r21
    4042:	88 85       	ldd	r24, Y+8	; 0x08
    4044:	99 85       	ldd	r25, Y+9	; 0x09
    4046:	fc 01       	movw	r30, r24
    4048:	e2 0f       	add	r30, r18
    404a:	f3 1f       	adc	r31, r19
    404c:	97 81       	ldd	r25, Z+7	; 0x07
    404e:	86 2f       	mov	r24, r22
    4050:	69 2f       	mov	r22, r25
    4052:	41 e0       	ldi	r20, 0x01	; 1
    4054:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    4058:	28 2f       	mov	r18, r24
    405a:	30 e0       	ldi	r19, 0x00	; 0
    405c:	8d 81       	ldd	r24, Y+5	; 0x05
    405e:	8d 5f       	subi	r24, 0xFD	; 253
    4060:	8d 83       	std	Y+5, r24	; 0x05
    4062:	8d 81       	ldd	r24, Y+5	; 0x05
    4064:	88 2f       	mov	r24, r24
    4066:	90 e0       	ldi	r25, 0x00	; 0
    4068:	a9 01       	movw	r20, r18
    406a:	02 c0       	rjmp	.+4      	; 0x4070 <Seven_Segment_enuInit+0x2b2>
    406c:	44 0f       	add	r20, r20
    406e:	55 1f       	adc	r21, r21
    4070:	8a 95       	dec	r24
    4072:	e2 f7       	brpl	.-8      	; 0x406c <Seven_Segment_enuInit+0x2ae>
    4074:	ca 01       	movw	r24, r20
    4076:	9c 01       	movw	r18, r24
    4078:	44 27       	eor	r20, r20
    407a:	37 fd       	sbrc	r19, 7
    407c:	40 95       	com	r20
    407e:	54 2f       	mov	r21, r20
    4080:	89 81       	ldd	r24, Y+1	; 0x01
    4082:	9a 81       	ldd	r25, Y+2	; 0x02
    4084:	ab 81       	ldd	r26, Y+3	; 0x03
    4086:	bc 81       	ldd	r27, Y+4	; 0x04
    4088:	82 2b       	or	r24, r18
    408a:	93 2b       	or	r25, r19
    408c:	a4 2b       	or	r26, r20
    408e:	b5 2b       	or	r27, r21
    4090:	89 83       	std	Y+1, r24	; 0x01
    4092:	9a 83       	std	Y+2, r25	; 0x02
    4094:	ab 83       	std	Y+3, r26	; 0x03
    4096:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_EPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_EPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    4098:	8e 81       	ldd	r24, Y+6	; 0x06
    409a:	48 2f       	mov	r20, r24
    409c:	50 e0       	ldi	r21, 0x00	; 0
    409e:	ca 01       	movw	r24, r20
    40a0:	88 0f       	add	r24, r24
    40a2:	99 1f       	adc	r25, r25
    40a4:	9c 01       	movw	r18, r24
    40a6:	22 0f       	add	r18, r18
    40a8:	33 1f       	adc	r19, r19
    40aa:	22 0f       	add	r18, r18
    40ac:	33 1f       	adc	r19, r19
    40ae:	22 0f       	add	r18, r18
    40b0:	33 1f       	adc	r19, r19
    40b2:	82 0f       	add	r24, r18
    40b4:	93 1f       	adc	r25, r19
    40b6:	9c 01       	movw	r18, r24
    40b8:	24 0f       	add	r18, r20
    40ba:	35 1f       	adc	r19, r21
    40bc:	88 85       	ldd	r24, Y+8	; 0x08
    40be:	99 85       	ldd	r25, Y+9	; 0x09
    40c0:	fc 01       	movw	r30, r24
    40c2:	e2 0f       	add	r30, r18
    40c4:	f3 1f       	adc	r31, r19
    40c6:	60 85       	ldd	r22, Z+8	; 0x08
    40c8:	8e 81       	ldd	r24, Y+6	; 0x06
    40ca:	48 2f       	mov	r20, r24
    40cc:	50 e0       	ldi	r21, 0x00	; 0
    40ce:	ca 01       	movw	r24, r20
    40d0:	88 0f       	add	r24, r24
    40d2:	99 1f       	adc	r25, r25
    40d4:	9c 01       	movw	r18, r24
    40d6:	22 0f       	add	r18, r18
    40d8:	33 1f       	adc	r19, r19
    40da:	22 0f       	add	r18, r18
    40dc:	33 1f       	adc	r19, r19
    40de:	22 0f       	add	r18, r18
    40e0:	33 1f       	adc	r19, r19
    40e2:	82 0f       	add	r24, r18
    40e4:	93 1f       	adc	r25, r19
    40e6:	9c 01       	movw	r18, r24
    40e8:	24 0f       	add	r18, r20
    40ea:	35 1f       	adc	r19, r21
    40ec:	88 85       	ldd	r24, Y+8	; 0x08
    40ee:	99 85       	ldd	r25, Y+9	; 0x09
    40f0:	fc 01       	movw	r30, r24
    40f2:	e2 0f       	add	r30, r18
    40f4:	f3 1f       	adc	r31, r19
    40f6:	91 85       	ldd	r25, Z+9	; 0x09
    40f8:	86 2f       	mov	r24, r22
    40fa:	69 2f       	mov	r22, r25
    40fc:	41 e0       	ldi	r20, 0x01	; 1
    40fe:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    4102:	28 2f       	mov	r18, r24
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	8d 81       	ldd	r24, Y+5	; 0x05
    4108:	8d 5f       	subi	r24, 0xFD	; 253
    410a:	8d 83       	std	Y+5, r24	; 0x05
    410c:	8d 81       	ldd	r24, Y+5	; 0x05
    410e:	88 2f       	mov	r24, r24
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	a9 01       	movw	r20, r18
    4114:	02 c0       	rjmp	.+4      	; 0x411a <Seven_Segment_enuInit+0x35c>
    4116:	44 0f       	add	r20, r20
    4118:	55 1f       	adc	r21, r21
    411a:	8a 95       	dec	r24
    411c:	e2 f7       	brpl	.-8      	; 0x4116 <Seven_Segment_enuInit+0x358>
    411e:	ca 01       	movw	r24, r20
    4120:	9c 01       	movw	r18, r24
    4122:	44 27       	eor	r20, r20
    4124:	37 fd       	sbrc	r19, 7
    4126:	40 95       	com	r20
    4128:	54 2f       	mov	r21, r20
    412a:	89 81       	ldd	r24, Y+1	; 0x01
    412c:	9a 81       	ldd	r25, Y+2	; 0x02
    412e:	ab 81       	ldd	r26, Y+3	; 0x03
    4130:	bc 81       	ldd	r27, Y+4	; 0x04
    4132:	82 2b       	or	r24, r18
    4134:	93 2b       	or	r25, r19
    4136:	a4 2b       	or	r26, r20
    4138:	b5 2b       	or	r27, r21
    413a:	89 83       	std	Y+1, r24	; 0x01
    413c:	9a 83       	std	Y+2, r25	; 0x02
    413e:	ab 83       	std	Y+3, r26	; 0x03
    4140:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_FPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_FPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    4142:	8e 81       	ldd	r24, Y+6	; 0x06
    4144:	48 2f       	mov	r20, r24
    4146:	50 e0       	ldi	r21, 0x00	; 0
    4148:	ca 01       	movw	r24, r20
    414a:	88 0f       	add	r24, r24
    414c:	99 1f       	adc	r25, r25
    414e:	9c 01       	movw	r18, r24
    4150:	22 0f       	add	r18, r18
    4152:	33 1f       	adc	r19, r19
    4154:	22 0f       	add	r18, r18
    4156:	33 1f       	adc	r19, r19
    4158:	22 0f       	add	r18, r18
    415a:	33 1f       	adc	r19, r19
    415c:	82 0f       	add	r24, r18
    415e:	93 1f       	adc	r25, r19
    4160:	9c 01       	movw	r18, r24
    4162:	24 0f       	add	r18, r20
    4164:	35 1f       	adc	r19, r21
    4166:	88 85       	ldd	r24, Y+8	; 0x08
    4168:	99 85       	ldd	r25, Y+9	; 0x09
    416a:	fc 01       	movw	r30, r24
    416c:	e2 0f       	add	r30, r18
    416e:	f3 1f       	adc	r31, r19
    4170:	62 85       	ldd	r22, Z+10	; 0x0a
    4172:	8e 81       	ldd	r24, Y+6	; 0x06
    4174:	48 2f       	mov	r20, r24
    4176:	50 e0       	ldi	r21, 0x00	; 0
    4178:	ca 01       	movw	r24, r20
    417a:	88 0f       	add	r24, r24
    417c:	99 1f       	adc	r25, r25
    417e:	9c 01       	movw	r18, r24
    4180:	22 0f       	add	r18, r18
    4182:	33 1f       	adc	r19, r19
    4184:	22 0f       	add	r18, r18
    4186:	33 1f       	adc	r19, r19
    4188:	22 0f       	add	r18, r18
    418a:	33 1f       	adc	r19, r19
    418c:	82 0f       	add	r24, r18
    418e:	93 1f       	adc	r25, r19
    4190:	9c 01       	movw	r18, r24
    4192:	24 0f       	add	r18, r20
    4194:	35 1f       	adc	r19, r21
    4196:	88 85       	ldd	r24, Y+8	; 0x08
    4198:	99 85       	ldd	r25, Y+9	; 0x09
    419a:	fc 01       	movw	r30, r24
    419c:	e2 0f       	add	r30, r18
    419e:	f3 1f       	adc	r31, r19
    41a0:	93 85       	ldd	r25, Z+11	; 0x0b
    41a2:	86 2f       	mov	r24, r22
    41a4:	69 2f       	mov	r22, r25
    41a6:	41 e0       	ldi	r20, 0x01	; 1
    41a8:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    41ac:	28 2f       	mov	r18, r24
    41ae:	30 e0       	ldi	r19, 0x00	; 0
    41b0:	8d 81       	ldd	r24, Y+5	; 0x05
    41b2:	8d 5f       	subi	r24, 0xFD	; 253
    41b4:	8d 83       	std	Y+5, r24	; 0x05
    41b6:	8d 81       	ldd	r24, Y+5	; 0x05
    41b8:	88 2f       	mov	r24, r24
    41ba:	90 e0       	ldi	r25, 0x00	; 0
    41bc:	a9 01       	movw	r20, r18
    41be:	02 c0       	rjmp	.+4      	; 0x41c4 <Seven_Segment_enuInit+0x406>
    41c0:	44 0f       	add	r20, r20
    41c2:	55 1f       	adc	r21, r21
    41c4:	8a 95       	dec	r24
    41c6:	e2 f7       	brpl	.-8      	; 0x41c0 <Seven_Segment_enuInit+0x402>
    41c8:	ca 01       	movw	r24, r20
    41ca:	9c 01       	movw	r18, r24
    41cc:	44 27       	eor	r20, r20
    41ce:	37 fd       	sbrc	r19, 7
    41d0:	40 95       	com	r20
    41d2:	54 2f       	mov	r21, r20
    41d4:	89 81       	ldd	r24, Y+1	; 0x01
    41d6:	9a 81       	ldd	r25, Y+2	; 0x02
    41d8:	ab 81       	ldd	r26, Y+3	; 0x03
    41da:	bc 81       	ldd	r27, Y+4	; 0x04
    41dc:	82 2b       	or	r24, r18
    41de:	93 2b       	or	r25, r19
    41e0:	a4 2b       	or	r26, r20
    41e2:	b5 2b       	or	r27, r21
    41e4:	89 83       	std	Y+1, r24	; 0x01
    41e6:	9a 83       	std	Y+2, r25	; 0x02
    41e8:	ab 83       	std	Y+3, r26	; 0x03
    41ea:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_GPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_GPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    41ec:	8e 81       	ldd	r24, Y+6	; 0x06
    41ee:	48 2f       	mov	r20, r24
    41f0:	50 e0       	ldi	r21, 0x00	; 0
    41f2:	ca 01       	movw	r24, r20
    41f4:	88 0f       	add	r24, r24
    41f6:	99 1f       	adc	r25, r25
    41f8:	9c 01       	movw	r18, r24
    41fa:	22 0f       	add	r18, r18
    41fc:	33 1f       	adc	r19, r19
    41fe:	22 0f       	add	r18, r18
    4200:	33 1f       	adc	r19, r19
    4202:	22 0f       	add	r18, r18
    4204:	33 1f       	adc	r19, r19
    4206:	82 0f       	add	r24, r18
    4208:	93 1f       	adc	r25, r19
    420a:	9c 01       	movw	r18, r24
    420c:	24 0f       	add	r18, r20
    420e:	35 1f       	adc	r19, r21
    4210:	88 85       	ldd	r24, Y+8	; 0x08
    4212:	99 85       	ldd	r25, Y+9	; 0x09
    4214:	fc 01       	movw	r30, r24
    4216:	e2 0f       	add	r30, r18
    4218:	f3 1f       	adc	r31, r19
    421a:	64 85       	ldd	r22, Z+12	; 0x0c
    421c:	8e 81       	ldd	r24, Y+6	; 0x06
    421e:	48 2f       	mov	r20, r24
    4220:	50 e0       	ldi	r21, 0x00	; 0
    4222:	ca 01       	movw	r24, r20
    4224:	88 0f       	add	r24, r24
    4226:	99 1f       	adc	r25, r25
    4228:	9c 01       	movw	r18, r24
    422a:	22 0f       	add	r18, r18
    422c:	33 1f       	adc	r19, r19
    422e:	22 0f       	add	r18, r18
    4230:	33 1f       	adc	r19, r19
    4232:	22 0f       	add	r18, r18
    4234:	33 1f       	adc	r19, r19
    4236:	82 0f       	add	r24, r18
    4238:	93 1f       	adc	r25, r19
    423a:	9c 01       	movw	r18, r24
    423c:	24 0f       	add	r18, r20
    423e:	35 1f       	adc	r19, r21
    4240:	88 85       	ldd	r24, Y+8	; 0x08
    4242:	99 85       	ldd	r25, Y+9	; 0x09
    4244:	fc 01       	movw	r30, r24
    4246:	e2 0f       	add	r30, r18
    4248:	f3 1f       	adc	r31, r19
    424a:	95 85       	ldd	r25, Z+13	; 0x0d
    424c:	86 2f       	mov	r24, r22
    424e:	69 2f       	mov	r22, r25
    4250:	41 e0       	ldi	r20, 0x01	; 1
    4252:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    4256:	28 2f       	mov	r18, r24
    4258:	30 e0       	ldi	r19, 0x00	; 0
    425a:	8d 81       	ldd	r24, Y+5	; 0x05
    425c:	8d 5f       	subi	r24, 0xFD	; 253
    425e:	8d 83       	std	Y+5, r24	; 0x05
    4260:	8d 81       	ldd	r24, Y+5	; 0x05
    4262:	88 2f       	mov	r24, r24
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	a9 01       	movw	r20, r18
    4268:	02 c0       	rjmp	.+4      	; 0x426e <Seven_Segment_enuInit+0x4b0>
    426a:	44 0f       	add	r20, r20
    426c:	55 1f       	adc	r21, r21
    426e:	8a 95       	dec	r24
    4270:	e2 f7       	brpl	.-8      	; 0x426a <Seven_Segment_enuInit+0x4ac>
    4272:	ca 01       	movw	r24, r20
    4274:	9c 01       	movw	r18, r24
    4276:	44 27       	eor	r20, r20
    4278:	37 fd       	sbrc	r19, 7
    427a:	40 95       	com	r20
    427c:	54 2f       	mov	r21, r20
    427e:	89 81       	ldd	r24, Y+1	; 0x01
    4280:	9a 81       	ldd	r25, Y+2	; 0x02
    4282:	ab 81       	ldd	r26, Y+3	; 0x03
    4284:	bc 81       	ldd	r27, Y+4	; 0x04
    4286:	82 2b       	or	r24, r18
    4288:	93 2b       	or	r25, r19
    428a:	a4 2b       	or	r26, r20
    428c:	b5 2b       	or	r27, r21
    428e:	89 83       	std	Y+1, r24	; 0x01
    4290:	9a 83       	std	Y+2, r25	; 0x02
    4292:	ab 83       	std	Y+3, r26	; 0x03
    4294:	bc 83       	std	Y+4, r27	; 0x04
			
			if(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CMN_PORT != NOT_CONNECTED && Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CMN_PIN != NOT_CONNECTED)
    4296:	8e 81       	ldd	r24, Y+6	; 0x06
    4298:	48 2f       	mov	r20, r24
    429a:	50 e0       	ldi	r21, 0x00	; 0
    429c:	ca 01       	movw	r24, r20
    429e:	88 0f       	add	r24, r24
    42a0:	99 1f       	adc	r25, r25
    42a2:	9c 01       	movw	r18, r24
    42a4:	22 0f       	add	r18, r18
    42a6:	33 1f       	adc	r19, r19
    42a8:	22 0f       	add	r18, r18
    42aa:	33 1f       	adc	r19, r19
    42ac:	22 0f       	add	r18, r18
    42ae:	33 1f       	adc	r19, r19
    42b0:	82 0f       	add	r24, r18
    42b2:	93 1f       	adc	r25, r19
    42b4:	9c 01       	movw	r18, r24
    42b6:	24 0f       	add	r18, r20
    42b8:	35 1f       	adc	r19, r21
    42ba:	88 85       	ldd	r24, Y+8	; 0x08
    42bc:	99 85       	ldd	r25, Y+9	; 0x09
    42be:	fc 01       	movw	r30, r24
    42c0:	e2 0f       	add	r30, r18
    42c2:	f3 1f       	adc	r31, r19
    42c4:	86 85       	ldd	r24, Z+14	; 0x0e
    42c6:	8a 30       	cpi	r24, 0x0A	; 10
    42c8:	09 f4       	brne	.+2      	; 0x42cc <Seven_Segment_enuInit+0x50e>
    42ca:	70 c0       	rjmp	.+224    	; 0x43ac <Seven_Segment_enuInit+0x5ee>
    42cc:	8e 81       	ldd	r24, Y+6	; 0x06
    42ce:	48 2f       	mov	r20, r24
    42d0:	50 e0       	ldi	r21, 0x00	; 0
    42d2:	ca 01       	movw	r24, r20
    42d4:	88 0f       	add	r24, r24
    42d6:	99 1f       	adc	r25, r25
    42d8:	9c 01       	movw	r18, r24
    42da:	22 0f       	add	r18, r18
    42dc:	33 1f       	adc	r19, r19
    42de:	22 0f       	add	r18, r18
    42e0:	33 1f       	adc	r19, r19
    42e2:	22 0f       	add	r18, r18
    42e4:	33 1f       	adc	r19, r19
    42e6:	82 0f       	add	r24, r18
    42e8:	93 1f       	adc	r25, r19
    42ea:	9c 01       	movw	r18, r24
    42ec:	24 0f       	add	r18, r20
    42ee:	35 1f       	adc	r19, r21
    42f0:	88 85       	ldd	r24, Y+8	; 0x08
    42f2:	99 85       	ldd	r25, Y+9	; 0x09
    42f4:	fc 01       	movw	r30, r24
    42f6:	e2 0f       	add	r30, r18
    42f8:	f3 1f       	adc	r31, r19
    42fa:	87 85       	ldd	r24, Z+15	; 0x0f
    42fc:	8a 30       	cpi	r24, 0x0A	; 10
    42fe:	09 f4       	brne	.+2      	; 0x4302 <Seven_Segment_enuInit+0x544>
    4300:	55 c0       	rjmp	.+170    	; 0x43ac <Seven_Segment_enuInit+0x5ee>
			{
				Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CMN_PORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CMN_PIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    4302:	8e 81       	ldd	r24, Y+6	; 0x06
    4304:	48 2f       	mov	r20, r24
    4306:	50 e0       	ldi	r21, 0x00	; 0
    4308:	ca 01       	movw	r24, r20
    430a:	88 0f       	add	r24, r24
    430c:	99 1f       	adc	r25, r25
    430e:	9c 01       	movw	r18, r24
    4310:	22 0f       	add	r18, r18
    4312:	33 1f       	adc	r19, r19
    4314:	22 0f       	add	r18, r18
    4316:	33 1f       	adc	r19, r19
    4318:	22 0f       	add	r18, r18
    431a:	33 1f       	adc	r19, r19
    431c:	82 0f       	add	r24, r18
    431e:	93 1f       	adc	r25, r19
    4320:	9c 01       	movw	r18, r24
    4322:	24 0f       	add	r18, r20
    4324:	35 1f       	adc	r19, r21
    4326:	88 85       	ldd	r24, Y+8	; 0x08
    4328:	99 85       	ldd	r25, Y+9	; 0x09
    432a:	fc 01       	movw	r30, r24
    432c:	e2 0f       	add	r30, r18
    432e:	f3 1f       	adc	r31, r19
    4330:	66 85       	ldd	r22, Z+14	; 0x0e
    4332:	8e 81       	ldd	r24, Y+6	; 0x06
    4334:	48 2f       	mov	r20, r24
    4336:	50 e0       	ldi	r21, 0x00	; 0
    4338:	ca 01       	movw	r24, r20
    433a:	88 0f       	add	r24, r24
    433c:	99 1f       	adc	r25, r25
    433e:	9c 01       	movw	r18, r24
    4340:	22 0f       	add	r18, r18
    4342:	33 1f       	adc	r19, r19
    4344:	22 0f       	add	r18, r18
    4346:	33 1f       	adc	r19, r19
    4348:	22 0f       	add	r18, r18
    434a:	33 1f       	adc	r19, r19
    434c:	82 0f       	add	r24, r18
    434e:	93 1f       	adc	r25, r19
    4350:	9c 01       	movw	r18, r24
    4352:	24 0f       	add	r18, r20
    4354:	35 1f       	adc	r19, r21
    4356:	88 85       	ldd	r24, Y+8	; 0x08
    4358:	99 85       	ldd	r25, Y+9	; 0x09
    435a:	fc 01       	movw	r30, r24
    435c:	e2 0f       	add	r30, r18
    435e:	f3 1f       	adc	r31, r19
    4360:	97 85       	ldd	r25, Z+15	; 0x0f
    4362:	86 2f       	mov	r24, r22
    4364:	69 2f       	mov	r22, r25
    4366:	41 e0       	ldi	r20, 0x01	; 1
    4368:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    436c:	28 2f       	mov	r18, r24
    436e:	30 e0       	ldi	r19, 0x00	; 0
    4370:	8d 81       	ldd	r24, Y+5	; 0x05
    4372:	8d 5f       	subi	r24, 0xFD	; 253
    4374:	8d 83       	std	Y+5, r24	; 0x05
    4376:	8d 81       	ldd	r24, Y+5	; 0x05
    4378:	88 2f       	mov	r24, r24
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	a9 01       	movw	r20, r18
    437e:	02 c0       	rjmp	.+4      	; 0x4384 <Seven_Segment_enuInit+0x5c6>
    4380:	44 0f       	add	r20, r20
    4382:	55 1f       	adc	r21, r21
    4384:	8a 95       	dec	r24
    4386:	e2 f7       	brpl	.-8      	; 0x4380 <Seven_Segment_enuInit+0x5c2>
    4388:	ca 01       	movw	r24, r20
    438a:	9c 01       	movw	r18, r24
    438c:	44 27       	eor	r20, r20
    438e:	37 fd       	sbrc	r19, 7
    4390:	40 95       	com	r20
    4392:	54 2f       	mov	r21, r20
    4394:	89 81       	ldd	r24, Y+1	; 0x01
    4396:	9a 81       	ldd	r25, Y+2	; 0x02
    4398:	ab 81       	ldd	r26, Y+3	; 0x03
    439a:	bc 81       	ldd	r27, Y+4	; 0x04
    439c:	82 2b       	or	r24, r18
    439e:	93 2b       	or	r25, r19
    43a0:	a4 2b       	or	r26, r20
    43a2:	b5 2b       	or	r27, r21
    43a4:	89 83       	std	Y+1, r24	; 0x01
    43a6:	9a 83       	std	Y+2, r25	; 0x02
    43a8:	ab 83       	std	Y+3, r26	; 0x03
    43aa:	bc 83       	std	Y+4, r27	; 0x04
			}
			
			if(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PORT != NOT_CONNECTED && Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PIN != NOT_CONNECTED)
    43ac:	8e 81       	ldd	r24, Y+6	; 0x06
    43ae:	48 2f       	mov	r20, r24
    43b0:	50 e0       	ldi	r21, 0x00	; 0
    43b2:	ca 01       	movw	r24, r20
    43b4:	88 0f       	add	r24, r24
    43b6:	99 1f       	adc	r25, r25
    43b8:	9c 01       	movw	r18, r24
    43ba:	22 0f       	add	r18, r18
    43bc:	33 1f       	adc	r19, r19
    43be:	22 0f       	add	r18, r18
    43c0:	33 1f       	adc	r19, r19
    43c2:	22 0f       	add	r18, r18
    43c4:	33 1f       	adc	r19, r19
    43c6:	82 0f       	add	r24, r18
    43c8:	93 1f       	adc	r25, r19
    43ca:	9c 01       	movw	r18, r24
    43cc:	24 0f       	add	r18, r20
    43ce:	35 1f       	adc	r19, r21
    43d0:	88 85       	ldd	r24, Y+8	; 0x08
    43d2:	99 85       	ldd	r25, Y+9	; 0x09
    43d4:	fc 01       	movw	r30, r24
    43d6:	e2 0f       	add	r30, r18
    43d8:	f3 1f       	adc	r31, r19
    43da:	80 89       	ldd	r24, Z+16	; 0x10
    43dc:	8a 30       	cpi	r24, 0x0A	; 10
    43de:	09 f4       	brne	.+2      	; 0x43e2 <Seven_Segment_enuInit+0x624>
    43e0:	70 c0       	rjmp	.+224    	; 0x44c2 <Seven_Segment_enuInit+0x704>
    43e2:	8e 81       	ldd	r24, Y+6	; 0x06
    43e4:	48 2f       	mov	r20, r24
    43e6:	50 e0       	ldi	r21, 0x00	; 0
    43e8:	ca 01       	movw	r24, r20
    43ea:	88 0f       	add	r24, r24
    43ec:	99 1f       	adc	r25, r25
    43ee:	9c 01       	movw	r18, r24
    43f0:	22 0f       	add	r18, r18
    43f2:	33 1f       	adc	r19, r19
    43f4:	22 0f       	add	r18, r18
    43f6:	33 1f       	adc	r19, r19
    43f8:	22 0f       	add	r18, r18
    43fa:	33 1f       	adc	r19, r19
    43fc:	82 0f       	add	r24, r18
    43fe:	93 1f       	adc	r25, r19
    4400:	9c 01       	movw	r18, r24
    4402:	24 0f       	add	r18, r20
    4404:	35 1f       	adc	r19, r21
    4406:	88 85       	ldd	r24, Y+8	; 0x08
    4408:	99 85       	ldd	r25, Y+9	; 0x09
    440a:	fc 01       	movw	r30, r24
    440c:	e2 0f       	add	r30, r18
    440e:	f3 1f       	adc	r31, r19
    4410:	81 89       	ldd	r24, Z+17	; 0x11
    4412:	8a 30       	cpi	r24, 0x0A	; 10
    4414:	09 f4       	brne	.+2      	; 0x4418 <Seven_Segment_enuInit+0x65a>
    4416:	55 c0       	rjmp	.+170    	; 0x44c2 <Seven_Segment_enuInit+0x704>
			{
				Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    4418:	8e 81       	ldd	r24, Y+6	; 0x06
    441a:	48 2f       	mov	r20, r24
    441c:	50 e0       	ldi	r21, 0x00	; 0
    441e:	ca 01       	movw	r24, r20
    4420:	88 0f       	add	r24, r24
    4422:	99 1f       	adc	r25, r25
    4424:	9c 01       	movw	r18, r24
    4426:	22 0f       	add	r18, r18
    4428:	33 1f       	adc	r19, r19
    442a:	22 0f       	add	r18, r18
    442c:	33 1f       	adc	r19, r19
    442e:	22 0f       	add	r18, r18
    4430:	33 1f       	adc	r19, r19
    4432:	82 0f       	add	r24, r18
    4434:	93 1f       	adc	r25, r19
    4436:	9c 01       	movw	r18, r24
    4438:	24 0f       	add	r18, r20
    443a:	35 1f       	adc	r19, r21
    443c:	88 85       	ldd	r24, Y+8	; 0x08
    443e:	99 85       	ldd	r25, Y+9	; 0x09
    4440:	fc 01       	movw	r30, r24
    4442:	e2 0f       	add	r30, r18
    4444:	f3 1f       	adc	r31, r19
    4446:	60 89       	ldd	r22, Z+16	; 0x10
    4448:	8e 81       	ldd	r24, Y+6	; 0x06
    444a:	48 2f       	mov	r20, r24
    444c:	50 e0       	ldi	r21, 0x00	; 0
    444e:	ca 01       	movw	r24, r20
    4450:	88 0f       	add	r24, r24
    4452:	99 1f       	adc	r25, r25
    4454:	9c 01       	movw	r18, r24
    4456:	22 0f       	add	r18, r18
    4458:	33 1f       	adc	r19, r19
    445a:	22 0f       	add	r18, r18
    445c:	33 1f       	adc	r19, r19
    445e:	22 0f       	add	r18, r18
    4460:	33 1f       	adc	r19, r19
    4462:	82 0f       	add	r24, r18
    4464:	93 1f       	adc	r25, r19
    4466:	9c 01       	movw	r18, r24
    4468:	24 0f       	add	r18, r20
    446a:	35 1f       	adc	r19, r21
    446c:	88 85       	ldd	r24, Y+8	; 0x08
    446e:	99 85       	ldd	r25, Y+9	; 0x09
    4470:	fc 01       	movw	r30, r24
    4472:	e2 0f       	add	r30, r18
    4474:	f3 1f       	adc	r31, r19
    4476:	91 89       	ldd	r25, Z+17	; 0x11
    4478:	86 2f       	mov	r24, r22
    447a:	69 2f       	mov	r22, r25
    447c:	41 e0       	ldi	r20, 0x01	; 1
    447e:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    4482:	28 2f       	mov	r18, r24
    4484:	30 e0       	ldi	r19, 0x00	; 0
    4486:	8d 81       	ldd	r24, Y+5	; 0x05
    4488:	8d 5f       	subi	r24, 0xFD	; 253
    448a:	8d 83       	std	Y+5, r24	; 0x05
    448c:	8d 81       	ldd	r24, Y+5	; 0x05
    448e:	88 2f       	mov	r24, r24
    4490:	90 e0       	ldi	r25, 0x00	; 0
    4492:	a9 01       	movw	r20, r18
    4494:	02 c0       	rjmp	.+4      	; 0x449a <Seven_Segment_enuInit+0x6dc>
    4496:	44 0f       	add	r20, r20
    4498:	55 1f       	adc	r21, r21
    449a:	8a 95       	dec	r24
    449c:	e2 f7       	brpl	.-8      	; 0x4496 <Seven_Segment_enuInit+0x6d8>
    449e:	ca 01       	movw	r24, r20
    44a0:	9c 01       	movw	r18, r24
    44a2:	44 27       	eor	r20, r20
    44a4:	37 fd       	sbrc	r19, 7
    44a6:	40 95       	com	r20
    44a8:	54 2f       	mov	r21, r20
    44aa:	89 81       	ldd	r24, Y+1	; 0x01
    44ac:	9a 81       	ldd	r25, Y+2	; 0x02
    44ae:	ab 81       	ldd	r26, Y+3	; 0x03
    44b0:	bc 81       	ldd	r27, Y+4	; 0x04
    44b2:	82 2b       	or	r24, r18
    44b4:	93 2b       	or	r25, r19
    44b6:	a4 2b       	or	r26, r20
    44b8:	b5 2b       	or	r27, r21
    44ba:	89 83       	std	Y+1, r24	; 0x01
    44bc:	9a 83       	std	Y+2, r25	; 0x02
    44be:	ab 83       	std	Y+3, r26	; 0x03
    44c0:	bc 83       	std	Y+4, r27	; 0x04
	u8 Local_u8Iterator_Error = 0;
	u32 Local_u32CheckError = 0;
	
	if(Copy_pAstrSEG_Config != NULL)
	{
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
    44c2:	8e 81       	ldd	r24, Y+6	; 0x06
    44c4:	8f 5f       	subi	r24, 0xFF	; 255
    44c6:	8e 83       	std	Y+6, r24	; 0x06
    44c8:	8e 81       	ldd	r24, Y+6	; 0x06
    44ca:	82 30       	cpi	r24, 0x02	; 2
    44cc:	08 f4       	brcc	.+2      	; 0x44d0 <Seven_Segment_enuInit+0x712>
    44ce:	92 cc       	rjmp	.-1756   	; 0x3df4 <Seven_Segment_enuInit+0x36>
			{
				Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			}
		}
		
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
    44d0:	1e 82       	std	Y+6, r1	; 0x06
    44d2:	26 c0       	rjmp	.+76     	; 0x4520 <Seven_Segment_enuInit+0x762>
		{
			for(Local_u8Iterator_Error = 0; Local_u8Iterator_Error < sizeof(Local_u32CheckError)*8; Local_u8Iterator_Error += ERROR_STATE_SIZE)
    44d4:	1d 82       	std	Y+5, r1	; 0x05
    44d6:	1d c0       	rjmp	.+58     	; 0x4512 <Seven_Segment_enuInit+0x754>
			{
				if(((Local_u32CheckError >> Local_u8Iterator_Error) & ERROR_STATE_MASK) != ES_OK)
    44d8:	8d 81       	ldd	r24, Y+5	; 0x05
    44da:	28 2f       	mov	r18, r24
    44dc:	30 e0       	ldi	r19, 0x00	; 0
    44de:	89 81       	ldd	r24, Y+1	; 0x01
    44e0:	9a 81       	ldd	r25, Y+2	; 0x02
    44e2:	ab 81       	ldd	r26, Y+3	; 0x03
    44e4:	bc 81       	ldd	r27, Y+4	; 0x04
    44e6:	02 2e       	mov	r0, r18
    44e8:	04 c0       	rjmp	.+8      	; 0x44f2 <Seven_Segment_enuInit+0x734>
    44ea:	b6 95       	lsr	r27
    44ec:	a7 95       	ror	r26
    44ee:	97 95       	ror	r25
    44f0:	87 95       	ror	r24
    44f2:	0a 94       	dec	r0
    44f4:	d2 f7       	brpl	.-12     	; 0x44ea <Seven_Segment_enuInit+0x72c>
    44f6:	87 70       	andi	r24, 0x07	; 7
    44f8:	90 70       	andi	r25, 0x00	; 0
    44fa:	a0 70       	andi	r26, 0x00	; 0
    44fc:	b0 70       	andi	r27, 0x00	; 0
    44fe:	00 97       	sbiw	r24, 0x00	; 0
    4500:	a1 05       	cpc	r26, r1
    4502:	b1 05       	cpc	r27, r1
    4504:	19 f0       	breq	.+6      	; 0x450c <Seven_Segment_enuInit+0x74e>
				{
					return ES_NOK;
    4506:	51 e0       	ldi	r21, 0x01	; 1
    4508:	5a 87       	std	Y+10, r21	; 0x0a
    450a:	12 c0       	rjmp	.+36     	; 0x4530 <Seven_Segment_enuInit+0x772>
			}
		}
		
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
		{
			for(Local_u8Iterator_Error = 0; Local_u8Iterator_Error < sizeof(Local_u32CheckError)*8; Local_u8Iterator_Error += ERROR_STATE_SIZE)
    450c:	8d 81       	ldd	r24, Y+5	; 0x05
    450e:	8d 5f       	subi	r24, 0xFD	; 253
    4510:	8d 83       	std	Y+5, r24	; 0x05
    4512:	8d 81       	ldd	r24, Y+5	; 0x05
    4514:	80 32       	cpi	r24, 0x20	; 32
    4516:	00 f3       	brcs	.-64     	; 0x44d8 <Seven_Segment_enuInit+0x71a>
				if(((Local_u32CheckError >> Local_u8Iterator_Error) & ERROR_STATE_MASK) != ES_OK)
				{
					return ES_NOK;
				}
			}
			Local_enuErrorState = ES_OK;
    4518:	1f 82       	std	Y+7, r1	; 0x07
			{
				Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			}
		}
		
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
    451a:	8e 81       	ldd	r24, Y+6	; 0x06
    451c:	8f 5f       	subi	r24, 0xFF	; 255
    451e:	8e 83       	std	Y+6, r24	; 0x06
    4520:	8e 81       	ldd	r24, Y+6	; 0x06
    4522:	82 30       	cpi	r24, 0x02	; 2
    4524:	b8 f2       	brcs	.-82     	; 0x44d4 <Seven_Segment_enuInit+0x716>
    4526:	02 c0       	rjmp	.+4      	; 0x452c <Seven_Segment_enuInit+0x76e>
			Local_enuErrorState = ES_OK;
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    4528:	82 e0       	ldi	r24, 0x02	; 2
    452a:	8f 83       	std	Y+7, r24	; 0x07
	}
	
	return Local_enuErrorState;
    452c:	8f 81       	ldd	r24, Y+7	; 0x07
    452e:	8a 87       	std	Y+10, r24	; 0x0a
    4530:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    4532:	2a 96       	adiw	r28, 0x0a	; 10
    4534:	0f b6       	in	r0, 0x3f	; 63
    4536:	f8 94       	cli
    4538:	de bf       	out	0x3e, r29	; 62
    453a:	0f be       	out	0x3f, r0	; 63
    453c:	cd bf       	out	0x3d, r28	; 61
    453e:	cf 91       	pop	r28
    4540:	df 91       	pop	r29
    4542:	08 95       	ret

00004544 <Seven_Segment_enuDisplayNumber>:

ES_t Seven_Segment_enuDisplayNumber(u8 Copy_SEG_ID, u8 Copy_u8Number)
{
    4544:	df 93       	push	r29
    4546:	cf 93       	push	r28
    4548:	cd b7       	in	r28, 0x3d	; 61
    454a:	de b7       	in	r29, 0x3e	; 62
    454c:	6e 97       	sbiw	r28, 0x1e	; 30
    454e:	0f b6       	in	r0, 0x3f	; 63
    4550:	f8 94       	cli
    4552:	de bf       	out	0x3e, r29	; 62
    4554:	0f be       	out	0x3f, r0	; 63
    4556:	cd bf       	out	0x3d, r28	; 61
    4558:	8f 83       	std	Y+7, r24	; 0x07
    455a:	68 87       	std	Y+8, r22	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    455c:	81 e0       	ldi	r24, 0x01	; 1
    455e:	8e 83       	std	Y+6, r24	; 0x06
	
	u8 Local_u8Iterator_Error = 0;
    4560:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32CheckError = 0;
    4562:	19 82       	std	Y+1, r1	; 0x01
    4564:	1a 82       	std	Y+2, r1	; 0x02
    4566:	1b 82       	std	Y+3, r1	; 0x03
    4568:	1c 82       	std	Y+4, r1	; 0x04
	 
	if(Copy_SEG_ID < SEG_NUM && Copy_u8Number < 10)
    456a:	8f 81       	ldd	r24, Y+7	; 0x07
    456c:	82 30       	cpi	r24, 0x02	; 2
    456e:	08 f0       	brcs	.+2      	; 0x4572 <Seven_Segment_enuDisplayNumber+0x2e>
    4570:	80 c5       	rjmp	.+2816   	; 0x5072 <Seven_Segment_enuDisplayNumber+0xb2e>
    4572:	88 85       	ldd	r24, Y+8	; 0x08
    4574:	8a 30       	cpi	r24, 0x0A	; 10
    4576:	08 f0       	brcs	.+2      	; 0x457a <Seven_Segment_enuDisplayNumber+0x36>
    4578:	7c c5       	rjmp	.+2808   	; 0x5072 <Seven_Segment_enuDisplayNumber+0xb2e>
	{
		if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_ANODE)
    457a:	8f 81       	ldd	r24, Y+7	; 0x07
    457c:	48 2f       	mov	r20, r24
    457e:	50 e0       	ldi	r21, 0x00	; 0
    4580:	ca 01       	movw	r24, r20
    4582:	88 0f       	add	r24, r24
    4584:	99 1f       	adc	r25, r25
    4586:	9c 01       	movw	r18, r24
    4588:	22 0f       	add	r18, r18
    458a:	33 1f       	adc	r19, r19
    458c:	22 0f       	add	r18, r18
    458e:	33 1f       	adc	r19, r19
    4590:	22 0f       	add	r18, r18
    4592:	33 1f       	adc	r19, r19
    4594:	82 0f       	add	r24, r18
    4596:	93 1f       	adc	r25, r19
    4598:	84 0f       	add	r24, r20
    459a:	95 1f       	adc	r25, r21
    459c:	fc 01       	movw	r30, r24
    459e:	ea 56       	subi	r30, 0x6A	; 106
    45a0:	fe 4f       	sbci	r31, 0xFE	; 254
    45a2:	80 81       	ld	r24, Z
    45a4:	85 30       	cpi	r24, 0x05	; 5
    45a6:	09 f0       	breq	.+2      	; 0x45aa <Seven_Segment_enuDisplayNumber+0x66>
    45a8:	b4 c2       	rjmp	.+1384   	; 0x4b12 <Seven_Segment_enuDisplayNumber+0x5ce>
		{
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_APORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_APIN, !((SEGCth_Numbers[Copy_u8Number] >> APIN_POS) & MASK_BIT)) << Local_u8Iterator_Error);
    45aa:	8f 81       	ldd	r24, Y+7	; 0x07
    45ac:	48 2f       	mov	r20, r24
    45ae:	50 e0       	ldi	r21, 0x00	; 0
    45b0:	ca 01       	movw	r24, r20
    45b2:	88 0f       	add	r24, r24
    45b4:	99 1f       	adc	r25, r25
    45b6:	9c 01       	movw	r18, r24
    45b8:	22 0f       	add	r18, r18
    45ba:	33 1f       	adc	r19, r19
    45bc:	22 0f       	add	r18, r18
    45be:	33 1f       	adc	r19, r19
    45c0:	22 0f       	add	r18, r18
    45c2:	33 1f       	adc	r19, r19
    45c4:	82 0f       	add	r24, r18
    45c6:	93 1f       	adc	r25, r19
    45c8:	84 0f       	add	r24, r20
    45ca:	95 1f       	adc	r25, r21
    45cc:	fc 01       	movw	r30, r24
    45ce:	ec 57       	subi	r30, 0x7C	; 124
    45d0:	fe 4f       	sbci	r31, 0xFE	; 254
    45d2:	40 81       	ld	r20, Z
    45d4:	4e 8f       	std	Y+30, r20	; 0x1e
    45d6:	8f 81       	ldd	r24, Y+7	; 0x07
    45d8:	48 2f       	mov	r20, r24
    45da:	50 e0       	ldi	r21, 0x00	; 0
    45dc:	ca 01       	movw	r24, r20
    45de:	88 0f       	add	r24, r24
    45e0:	99 1f       	adc	r25, r25
    45e2:	9c 01       	movw	r18, r24
    45e4:	22 0f       	add	r18, r18
    45e6:	33 1f       	adc	r19, r19
    45e8:	22 0f       	add	r18, r18
    45ea:	33 1f       	adc	r19, r19
    45ec:	22 0f       	add	r18, r18
    45ee:	33 1f       	adc	r19, r19
    45f0:	82 0f       	add	r24, r18
    45f2:	93 1f       	adc	r25, r19
    45f4:	84 0f       	add	r24, r20
    45f6:	95 1f       	adc	r25, r21
    45f8:	fc 01       	movw	r30, r24
    45fa:	eb 57       	subi	r30, 0x7B	; 123
    45fc:	fe 4f       	sbci	r31, 0xFE	; 254
    45fe:	50 81       	ld	r21, Z
    4600:	5d 8f       	std	Y+29, r21	; 0x1d
    4602:	88 85       	ldd	r24, Y+8	; 0x08
    4604:	88 2f       	mov	r24, r24
    4606:	90 e0       	ldi	r25, 0x00	; 0
    4608:	fc 01       	movw	r30, r24
    460a:	e6 55       	subi	r30, 0x56	; 86
    460c:	fe 4f       	sbci	r31, 0xFE	; 254
    460e:	80 81       	ld	r24, Z
    4610:	88 2f       	mov	r24, r24
    4612:	90 e0       	ldi	r25, 0x00	; 0
    4614:	81 70       	andi	r24, 0x01	; 1
    4616:	90 70       	andi	r25, 0x00	; 0
    4618:	1c 8e       	std	Y+28, r1	; 0x1c
    461a:	00 97       	sbiw	r24, 0x00	; 0
    461c:	11 f4       	brne	.+4      	; 0x4622 <Seven_Segment_enuDisplayNumber+0xde>
    461e:	81 e0       	ldi	r24, 0x01	; 1
    4620:	8c 8f       	std	Y+28, r24	; 0x1c
    4622:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4624:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4626:	4c 8d       	ldd	r20, Y+28	; 0x1c
    4628:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    462c:	28 2f       	mov	r18, r24
    462e:	30 e0       	ldi	r19, 0x00	; 0
    4630:	8d 81       	ldd	r24, Y+5	; 0x05
    4632:	88 2f       	mov	r24, r24
    4634:	90 e0       	ldi	r25, 0x00	; 0
    4636:	a9 01       	movw	r20, r18
    4638:	02 c0       	rjmp	.+4      	; 0x463e <Seven_Segment_enuDisplayNumber+0xfa>
    463a:	44 0f       	add	r20, r20
    463c:	55 1f       	adc	r21, r21
    463e:	8a 95       	dec	r24
    4640:	e2 f7       	brpl	.-8      	; 0x463a <Seven_Segment_enuDisplayNumber+0xf6>
    4642:	ca 01       	movw	r24, r20
    4644:	9c 01       	movw	r18, r24
    4646:	44 27       	eor	r20, r20
    4648:	37 fd       	sbrc	r19, 7
    464a:	40 95       	com	r20
    464c:	54 2f       	mov	r21, r20
    464e:	89 81       	ldd	r24, Y+1	; 0x01
    4650:	9a 81       	ldd	r25, Y+2	; 0x02
    4652:	ab 81       	ldd	r26, Y+3	; 0x03
    4654:	bc 81       	ldd	r27, Y+4	; 0x04
    4656:	82 2b       	or	r24, r18
    4658:	93 2b       	or	r25, r19
    465a:	a4 2b       	or	r26, r20
    465c:	b5 2b       	or	r27, r21
    465e:	89 83       	std	Y+1, r24	; 0x01
    4660:	9a 83       	std	Y+2, r25	; 0x02
    4662:	ab 83       	std	Y+3, r26	; 0x03
    4664:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_BPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_BPIN, !((SEGCth_Numbers[Copy_u8Number] >> BPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    4666:	8f 81       	ldd	r24, Y+7	; 0x07
    4668:	48 2f       	mov	r20, r24
    466a:	50 e0       	ldi	r21, 0x00	; 0
    466c:	ca 01       	movw	r24, r20
    466e:	88 0f       	add	r24, r24
    4670:	99 1f       	adc	r25, r25
    4672:	9c 01       	movw	r18, r24
    4674:	22 0f       	add	r18, r18
    4676:	33 1f       	adc	r19, r19
    4678:	22 0f       	add	r18, r18
    467a:	33 1f       	adc	r19, r19
    467c:	22 0f       	add	r18, r18
    467e:	33 1f       	adc	r19, r19
    4680:	82 0f       	add	r24, r18
    4682:	93 1f       	adc	r25, r19
    4684:	84 0f       	add	r24, r20
    4686:	95 1f       	adc	r25, r21
    4688:	fc 01       	movw	r30, r24
    468a:	ea 57       	subi	r30, 0x7A	; 122
    468c:	fe 4f       	sbci	r31, 0xFE	; 254
    468e:	50 81       	ld	r21, Z
    4690:	5b 8f       	std	Y+27, r21	; 0x1b
    4692:	8f 81       	ldd	r24, Y+7	; 0x07
    4694:	48 2f       	mov	r20, r24
    4696:	50 e0       	ldi	r21, 0x00	; 0
    4698:	ca 01       	movw	r24, r20
    469a:	88 0f       	add	r24, r24
    469c:	99 1f       	adc	r25, r25
    469e:	9c 01       	movw	r18, r24
    46a0:	22 0f       	add	r18, r18
    46a2:	33 1f       	adc	r19, r19
    46a4:	22 0f       	add	r18, r18
    46a6:	33 1f       	adc	r19, r19
    46a8:	22 0f       	add	r18, r18
    46aa:	33 1f       	adc	r19, r19
    46ac:	82 0f       	add	r24, r18
    46ae:	93 1f       	adc	r25, r19
    46b0:	84 0f       	add	r24, r20
    46b2:	95 1f       	adc	r25, r21
    46b4:	fc 01       	movw	r30, r24
    46b6:	e9 57       	subi	r30, 0x79	; 121
    46b8:	fe 4f       	sbci	r31, 0xFE	; 254
    46ba:	80 81       	ld	r24, Z
    46bc:	8a 8f       	std	Y+26, r24	; 0x1a
    46be:	88 85       	ldd	r24, Y+8	; 0x08
    46c0:	88 2f       	mov	r24, r24
    46c2:	90 e0       	ldi	r25, 0x00	; 0
    46c4:	fc 01       	movw	r30, r24
    46c6:	e6 55       	subi	r30, 0x56	; 86
    46c8:	fe 4f       	sbci	r31, 0xFE	; 254
    46ca:	80 81       	ld	r24, Z
    46cc:	86 95       	lsr	r24
    46ce:	88 2f       	mov	r24, r24
    46d0:	90 e0       	ldi	r25, 0x00	; 0
    46d2:	81 70       	andi	r24, 0x01	; 1
    46d4:	90 70       	andi	r25, 0x00	; 0
    46d6:	19 8e       	std	Y+25, r1	; 0x19
    46d8:	00 97       	sbiw	r24, 0x00	; 0
    46da:	11 f4       	brne	.+4      	; 0x46e0 <Seven_Segment_enuDisplayNumber+0x19c>
    46dc:	41 e0       	ldi	r20, 0x01	; 1
    46de:	49 8f       	std	Y+25, r20	; 0x19
    46e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46e2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    46e4:	49 8d       	ldd	r20, Y+25	; 0x19
    46e6:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    46ea:	28 2f       	mov	r18, r24
    46ec:	30 e0       	ldi	r19, 0x00	; 0
    46ee:	8d 81       	ldd	r24, Y+5	; 0x05
    46f0:	8d 5f       	subi	r24, 0xFD	; 253
    46f2:	8d 83       	std	Y+5, r24	; 0x05
    46f4:	8d 81       	ldd	r24, Y+5	; 0x05
    46f6:	88 2f       	mov	r24, r24
    46f8:	90 e0       	ldi	r25, 0x00	; 0
    46fa:	a9 01       	movw	r20, r18
    46fc:	02 c0       	rjmp	.+4      	; 0x4702 <Seven_Segment_enuDisplayNumber+0x1be>
    46fe:	44 0f       	add	r20, r20
    4700:	55 1f       	adc	r21, r21
    4702:	8a 95       	dec	r24
    4704:	e2 f7       	brpl	.-8      	; 0x46fe <Seven_Segment_enuDisplayNumber+0x1ba>
    4706:	ca 01       	movw	r24, r20
    4708:	9c 01       	movw	r18, r24
    470a:	44 27       	eor	r20, r20
    470c:	37 fd       	sbrc	r19, 7
    470e:	40 95       	com	r20
    4710:	54 2f       	mov	r21, r20
    4712:	89 81       	ldd	r24, Y+1	; 0x01
    4714:	9a 81       	ldd	r25, Y+2	; 0x02
    4716:	ab 81       	ldd	r26, Y+3	; 0x03
    4718:	bc 81       	ldd	r27, Y+4	; 0x04
    471a:	82 2b       	or	r24, r18
    471c:	93 2b       	or	r25, r19
    471e:	a4 2b       	or	r26, r20
    4720:	b5 2b       	or	r27, r21
    4722:	89 83       	std	Y+1, r24	; 0x01
    4724:	9a 83       	std	Y+2, r25	; 0x02
    4726:	ab 83       	std	Y+3, r26	; 0x03
    4728:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CPIN, !((SEGCth_Numbers[Copy_u8Number] >> CPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    472a:	8f 81       	ldd	r24, Y+7	; 0x07
    472c:	48 2f       	mov	r20, r24
    472e:	50 e0       	ldi	r21, 0x00	; 0
    4730:	ca 01       	movw	r24, r20
    4732:	88 0f       	add	r24, r24
    4734:	99 1f       	adc	r25, r25
    4736:	9c 01       	movw	r18, r24
    4738:	22 0f       	add	r18, r18
    473a:	33 1f       	adc	r19, r19
    473c:	22 0f       	add	r18, r18
    473e:	33 1f       	adc	r19, r19
    4740:	22 0f       	add	r18, r18
    4742:	33 1f       	adc	r19, r19
    4744:	82 0f       	add	r24, r18
    4746:	93 1f       	adc	r25, r19
    4748:	84 0f       	add	r24, r20
    474a:	95 1f       	adc	r25, r21
    474c:	fc 01       	movw	r30, r24
    474e:	e8 57       	subi	r30, 0x78	; 120
    4750:	fe 4f       	sbci	r31, 0xFE	; 254
    4752:	50 81       	ld	r21, Z
    4754:	58 8f       	std	Y+24, r21	; 0x18
    4756:	8f 81       	ldd	r24, Y+7	; 0x07
    4758:	48 2f       	mov	r20, r24
    475a:	50 e0       	ldi	r21, 0x00	; 0
    475c:	ca 01       	movw	r24, r20
    475e:	88 0f       	add	r24, r24
    4760:	99 1f       	adc	r25, r25
    4762:	9c 01       	movw	r18, r24
    4764:	22 0f       	add	r18, r18
    4766:	33 1f       	adc	r19, r19
    4768:	22 0f       	add	r18, r18
    476a:	33 1f       	adc	r19, r19
    476c:	22 0f       	add	r18, r18
    476e:	33 1f       	adc	r19, r19
    4770:	82 0f       	add	r24, r18
    4772:	93 1f       	adc	r25, r19
    4774:	84 0f       	add	r24, r20
    4776:	95 1f       	adc	r25, r21
    4778:	fc 01       	movw	r30, r24
    477a:	e7 57       	subi	r30, 0x77	; 119
    477c:	fe 4f       	sbci	r31, 0xFE	; 254
    477e:	80 81       	ld	r24, Z
    4780:	8f 8b       	std	Y+23, r24	; 0x17
    4782:	88 85       	ldd	r24, Y+8	; 0x08
    4784:	88 2f       	mov	r24, r24
    4786:	90 e0       	ldi	r25, 0x00	; 0
    4788:	fc 01       	movw	r30, r24
    478a:	e6 55       	subi	r30, 0x56	; 86
    478c:	fe 4f       	sbci	r31, 0xFE	; 254
    478e:	80 81       	ld	r24, Z
    4790:	86 95       	lsr	r24
    4792:	86 95       	lsr	r24
    4794:	88 2f       	mov	r24, r24
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	81 70       	andi	r24, 0x01	; 1
    479a:	90 70       	andi	r25, 0x00	; 0
    479c:	1e 8a       	std	Y+22, r1	; 0x16
    479e:	00 97       	sbiw	r24, 0x00	; 0
    47a0:	11 f4       	brne	.+4      	; 0x47a6 <Seven_Segment_enuDisplayNumber+0x262>
    47a2:	41 e0       	ldi	r20, 0x01	; 1
    47a4:	4e 8b       	std	Y+22, r20	; 0x16
    47a6:	88 8d       	ldd	r24, Y+24	; 0x18
    47a8:	6f 89       	ldd	r22, Y+23	; 0x17
    47aa:	4e 89       	ldd	r20, Y+22	; 0x16
    47ac:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    47b0:	28 2f       	mov	r18, r24
    47b2:	30 e0       	ldi	r19, 0x00	; 0
    47b4:	8d 81       	ldd	r24, Y+5	; 0x05
    47b6:	8d 5f       	subi	r24, 0xFD	; 253
    47b8:	8d 83       	std	Y+5, r24	; 0x05
    47ba:	8d 81       	ldd	r24, Y+5	; 0x05
    47bc:	88 2f       	mov	r24, r24
    47be:	90 e0       	ldi	r25, 0x00	; 0
    47c0:	a9 01       	movw	r20, r18
    47c2:	02 c0       	rjmp	.+4      	; 0x47c8 <Seven_Segment_enuDisplayNumber+0x284>
    47c4:	44 0f       	add	r20, r20
    47c6:	55 1f       	adc	r21, r21
    47c8:	8a 95       	dec	r24
    47ca:	e2 f7       	brpl	.-8      	; 0x47c4 <Seven_Segment_enuDisplayNumber+0x280>
    47cc:	ca 01       	movw	r24, r20
    47ce:	9c 01       	movw	r18, r24
    47d0:	44 27       	eor	r20, r20
    47d2:	37 fd       	sbrc	r19, 7
    47d4:	40 95       	com	r20
    47d6:	54 2f       	mov	r21, r20
    47d8:	89 81       	ldd	r24, Y+1	; 0x01
    47da:	9a 81       	ldd	r25, Y+2	; 0x02
    47dc:	ab 81       	ldd	r26, Y+3	; 0x03
    47de:	bc 81       	ldd	r27, Y+4	; 0x04
    47e0:	82 2b       	or	r24, r18
    47e2:	93 2b       	or	r25, r19
    47e4:	a4 2b       	or	r26, r20
    47e6:	b5 2b       	or	r27, r21
    47e8:	89 83       	std	Y+1, r24	; 0x01
    47ea:	9a 83       	std	Y+2, r25	; 0x02
    47ec:	ab 83       	std	Y+3, r26	; 0x03
    47ee:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DPIN, !((SEGCth_Numbers[Copy_u8Number] >> DPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    47f0:	8f 81       	ldd	r24, Y+7	; 0x07
    47f2:	48 2f       	mov	r20, r24
    47f4:	50 e0       	ldi	r21, 0x00	; 0
    47f6:	ca 01       	movw	r24, r20
    47f8:	88 0f       	add	r24, r24
    47fa:	99 1f       	adc	r25, r25
    47fc:	9c 01       	movw	r18, r24
    47fe:	22 0f       	add	r18, r18
    4800:	33 1f       	adc	r19, r19
    4802:	22 0f       	add	r18, r18
    4804:	33 1f       	adc	r19, r19
    4806:	22 0f       	add	r18, r18
    4808:	33 1f       	adc	r19, r19
    480a:	82 0f       	add	r24, r18
    480c:	93 1f       	adc	r25, r19
    480e:	84 0f       	add	r24, r20
    4810:	95 1f       	adc	r25, r21
    4812:	fc 01       	movw	r30, r24
    4814:	e6 57       	subi	r30, 0x76	; 118
    4816:	fe 4f       	sbci	r31, 0xFE	; 254
    4818:	50 81       	ld	r21, Z
    481a:	5d 8b       	std	Y+21, r21	; 0x15
    481c:	8f 81       	ldd	r24, Y+7	; 0x07
    481e:	48 2f       	mov	r20, r24
    4820:	50 e0       	ldi	r21, 0x00	; 0
    4822:	ca 01       	movw	r24, r20
    4824:	88 0f       	add	r24, r24
    4826:	99 1f       	adc	r25, r25
    4828:	9c 01       	movw	r18, r24
    482a:	22 0f       	add	r18, r18
    482c:	33 1f       	adc	r19, r19
    482e:	22 0f       	add	r18, r18
    4830:	33 1f       	adc	r19, r19
    4832:	22 0f       	add	r18, r18
    4834:	33 1f       	adc	r19, r19
    4836:	82 0f       	add	r24, r18
    4838:	93 1f       	adc	r25, r19
    483a:	84 0f       	add	r24, r20
    483c:	95 1f       	adc	r25, r21
    483e:	fc 01       	movw	r30, r24
    4840:	e5 57       	subi	r30, 0x75	; 117
    4842:	fe 4f       	sbci	r31, 0xFE	; 254
    4844:	80 81       	ld	r24, Z
    4846:	8c 8b       	std	Y+20, r24	; 0x14
    4848:	88 85       	ldd	r24, Y+8	; 0x08
    484a:	88 2f       	mov	r24, r24
    484c:	90 e0       	ldi	r25, 0x00	; 0
    484e:	fc 01       	movw	r30, r24
    4850:	e6 55       	subi	r30, 0x56	; 86
    4852:	fe 4f       	sbci	r31, 0xFE	; 254
    4854:	80 81       	ld	r24, Z
    4856:	86 95       	lsr	r24
    4858:	86 95       	lsr	r24
    485a:	86 95       	lsr	r24
    485c:	88 2f       	mov	r24, r24
    485e:	90 e0       	ldi	r25, 0x00	; 0
    4860:	81 70       	andi	r24, 0x01	; 1
    4862:	90 70       	andi	r25, 0x00	; 0
    4864:	1b 8a       	std	Y+19, r1	; 0x13
    4866:	00 97       	sbiw	r24, 0x00	; 0
    4868:	11 f4       	brne	.+4      	; 0x486e <Seven_Segment_enuDisplayNumber+0x32a>
    486a:	41 e0       	ldi	r20, 0x01	; 1
    486c:	4b 8b       	std	Y+19, r20	; 0x13
    486e:	8d 89       	ldd	r24, Y+21	; 0x15
    4870:	6c 89       	ldd	r22, Y+20	; 0x14
    4872:	4b 89       	ldd	r20, Y+19	; 0x13
    4874:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    4878:	28 2f       	mov	r18, r24
    487a:	30 e0       	ldi	r19, 0x00	; 0
    487c:	8d 81       	ldd	r24, Y+5	; 0x05
    487e:	8d 5f       	subi	r24, 0xFD	; 253
    4880:	8d 83       	std	Y+5, r24	; 0x05
    4882:	8d 81       	ldd	r24, Y+5	; 0x05
    4884:	88 2f       	mov	r24, r24
    4886:	90 e0       	ldi	r25, 0x00	; 0
    4888:	a9 01       	movw	r20, r18
    488a:	02 c0       	rjmp	.+4      	; 0x4890 <Seven_Segment_enuDisplayNumber+0x34c>
    488c:	44 0f       	add	r20, r20
    488e:	55 1f       	adc	r21, r21
    4890:	8a 95       	dec	r24
    4892:	e2 f7       	brpl	.-8      	; 0x488c <Seven_Segment_enuDisplayNumber+0x348>
    4894:	ca 01       	movw	r24, r20
    4896:	9c 01       	movw	r18, r24
    4898:	44 27       	eor	r20, r20
    489a:	37 fd       	sbrc	r19, 7
    489c:	40 95       	com	r20
    489e:	54 2f       	mov	r21, r20
    48a0:	89 81       	ldd	r24, Y+1	; 0x01
    48a2:	9a 81       	ldd	r25, Y+2	; 0x02
    48a4:	ab 81       	ldd	r26, Y+3	; 0x03
    48a6:	bc 81       	ldd	r27, Y+4	; 0x04
    48a8:	82 2b       	or	r24, r18
    48aa:	93 2b       	or	r25, r19
    48ac:	a4 2b       	or	r26, r20
    48ae:	b5 2b       	or	r27, r21
    48b0:	89 83       	std	Y+1, r24	; 0x01
    48b2:	9a 83       	std	Y+2, r25	; 0x02
    48b4:	ab 83       	std	Y+3, r26	; 0x03
    48b6:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPIN, !((SEGCth_Numbers[Copy_u8Number] >> EPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    48b8:	8f 81       	ldd	r24, Y+7	; 0x07
    48ba:	48 2f       	mov	r20, r24
    48bc:	50 e0       	ldi	r21, 0x00	; 0
    48be:	ca 01       	movw	r24, r20
    48c0:	88 0f       	add	r24, r24
    48c2:	99 1f       	adc	r25, r25
    48c4:	9c 01       	movw	r18, r24
    48c6:	22 0f       	add	r18, r18
    48c8:	33 1f       	adc	r19, r19
    48ca:	22 0f       	add	r18, r18
    48cc:	33 1f       	adc	r19, r19
    48ce:	22 0f       	add	r18, r18
    48d0:	33 1f       	adc	r19, r19
    48d2:	82 0f       	add	r24, r18
    48d4:	93 1f       	adc	r25, r19
    48d6:	84 0f       	add	r24, r20
    48d8:	95 1f       	adc	r25, r21
    48da:	fc 01       	movw	r30, r24
    48dc:	e4 57       	subi	r30, 0x74	; 116
    48de:	fe 4f       	sbci	r31, 0xFE	; 254
    48e0:	50 81       	ld	r21, Z
    48e2:	5a 8b       	std	Y+18, r21	; 0x12
    48e4:	8f 81       	ldd	r24, Y+7	; 0x07
    48e6:	48 2f       	mov	r20, r24
    48e8:	50 e0       	ldi	r21, 0x00	; 0
    48ea:	ca 01       	movw	r24, r20
    48ec:	88 0f       	add	r24, r24
    48ee:	99 1f       	adc	r25, r25
    48f0:	9c 01       	movw	r18, r24
    48f2:	22 0f       	add	r18, r18
    48f4:	33 1f       	adc	r19, r19
    48f6:	22 0f       	add	r18, r18
    48f8:	33 1f       	adc	r19, r19
    48fa:	22 0f       	add	r18, r18
    48fc:	33 1f       	adc	r19, r19
    48fe:	82 0f       	add	r24, r18
    4900:	93 1f       	adc	r25, r19
    4902:	84 0f       	add	r24, r20
    4904:	95 1f       	adc	r25, r21
    4906:	fc 01       	movw	r30, r24
    4908:	e3 57       	subi	r30, 0x73	; 115
    490a:	fe 4f       	sbci	r31, 0xFE	; 254
    490c:	80 81       	ld	r24, Z
    490e:	89 8b       	std	Y+17, r24	; 0x11
    4910:	88 85       	ldd	r24, Y+8	; 0x08
    4912:	88 2f       	mov	r24, r24
    4914:	90 e0       	ldi	r25, 0x00	; 0
    4916:	fc 01       	movw	r30, r24
    4918:	e6 55       	subi	r30, 0x56	; 86
    491a:	fe 4f       	sbci	r31, 0xFE	; 254
    491c:	80 81       	ld	r24, Z
    491e:	82 95       	swap	r24
    4920:	8f 70       	andi	r24, 0x0F	; 15
    4922:	88 2f       	mov	r24, r24
    4924:	90 e0       	ldi	r25, 0x00	; 0
    4926:	81 70       	andi	r24, 0x01	; 1
    4928:	90 70       	andi	r25, 0x00	; 0
    492a:	18 8a       	std	Y+16, r1	; 0x10
    492c:	00 97       	sbiw	r24, 0x00	; 0
    492e:	11 f4       	brne	.+4      	; 0x4934 <Seven_Segment_enuDisplayNumber+0x3f0>
    4930:	41 e0       	ldi	r20, 0x01	; 1
    4932:	48 8b       	std	Y+16, r20	; 0x10
    4934:	8a 89       	ldd	r24, Y+18	; 0x12
    4936:	69 89       	ldd	r22, Y+17	; 0x11
    4938:	48 89       	ldd	r20, Y+16	; 0x10
    493a:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    493e:	28 2f       	mov	r18, r24
    4940:	30 e0       	ldi	r19, 0x00	; 0
    4942:	8d 81       	ldd	r24, Y+5	; 0x05
    4944:	8d 5f       	subi	r24, 0xFD	; 253
    4946:	8d 83       	std	Y+5, r24	; 0x05
    4948:	8d 81       	ldd	r24, Y+5	; 0x05
    494a:	88 2f       	mov	r24, r24
    494c:	90 e0       	ldi	r25, 0x00	; 0
    494e:	a9 01       	movw	r20, r18
    4950:	02 c0       	rjmp	.+4      	; 0x4956 <Seven_Segment_enuDisplayNumber+0x412>
    4952:	44 0f       	add	r20, r20
    4954:	55 1f       	adc	r21, r21
    4956:	8a 95       	dec	r24
    4958:	e2 f7       	brpl	.-8      	; 0x4952 <Seven_Segment_enuDisplayNumber+0x40e>
    495a:	ca 01       	movw	r24, r20
    495c:	9c 01       	movw	r18, r24
    495e:	44 27       	eor	r20, r20
    4960:	37 fd       	sbrc	r19, 7
    4962:	40 95       	com	r20
    4964:	54 2f       	mov	r21, r20
    4966:	89 81       	ldd	r24, Y+1	; 0x01
    4968:	9a 81       	ldd	r25, Y+2	; 0x02
    496a:	ab 81       	ldd	r26, Y+3	; 0x03
    496c:	bc 81       	ldd	r27, Y+4	; 0x04
    496e:	82 2b       	or	r24, r18
    4970:	93 2b       	or	r25, r19
    4972:	a4 2b       	or	r26, r20
    4974:	b5 2b       	or	r27, r21
    4976:	89 83       	std	Y+1, r24	; 0x01
    4978:	9a 83       	std	Y+2, r25	; 0x02
    497a:	ab 83       	std	Y+3, r26	; 0x03
    497c:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPIN, !((SEGCth_Numbers[Copy_u8Number] >> FPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    497e:	8f 81       	ldd	r24, Y+7	; 0x07
    4980:	48 2f       	mov	r20, r24
    4982:	50 e0       	ldi	r21, 0x00	; 0
    4984:	ca 01       	movw	r24, r20
    4986:	88 0f       	add	r24, r24
    4988:	99 1f       	adc	r25, r25
    498a:	9c 01       	movw	r18, r24
    498c:	22 0f       	add	r18, r18
    498e:	33 1f       	adc	r19, r19
    4990:	22 0f       	add	r18, r18
    4992:	33 1f       	adc	r19, r19
    4994:	22 0f       	add	r18, r18
    4996:	33 1f       	adc	r19, r19
    4998:	82 0f       	add	r24, r18
    499a:	93 1f       	adc	r25, r19
    499c:	84 0f       	add	r24, r20
    499e:	95 1f       	adc	r25, r21
    49a0:	fc 01       	movw	r30, r24
    49a2:	e2 57       	subi	r30, 0x72	; 114
    49a4:	fe 4f       	sbci	r31, 0xFE	; 254
    49a6:	50 81       	ld	r21, Z
    49a8:	5f 87       	std	Y+15, r21	; 0x0f
    49aa:	8f 81       	ldd	r24, Y+7	; 0x07
    49ac:	48 2f       	mov	r20, r24
    49ae:	50 e0       	ldi	r21, 0x00	; 0
    49b0:	ca 01       	movw	r24, r20
    49b2:	88 0f       	add	r24, r24
    49b4:	99 1f       	adc	r25, r25
    49b6:	9c 01       	movw	r18, r24
    49b8:	22 0f       	add	r18, r18
    49ba:	33 1f       	adc	r19, r19
    49bc:	22 0f       	add	r18, r18
    49be:	33 1f       	adc	r19, r19
    49c0:	22 0f       	add	r18, r18
    49c2:	33 1f       	adc	r19, r19
    49c4:	82 0f       	add	r24, r18
    49c6:	93 1f       	adc	r25, r19
    49c8:	84 0f       	add	r24, r20
    49ca:	95 1f       	adc	r25, r21
    49cc:	fc 01       	movw	r30, r24
    49ce:	e1 57       	subi	r30, 0x71	; 113
    49d0:	fe 4f       	sbci	r31, 0xFE	; 254
    49d2:	80 81       	ld	r24, Z
    49d4:	8e 87       	std	Y+14, r24	; 0x0e
    49d6:	88 85       	ldd	r24, Y+8	; 0x08
    49d8:	88 2f       	mov	r24, r24
    49da:	90 e0       	ldi	r25, 0x00	; 0
    49dc:	fc 01       	movw	r30, r24
    49de:	e6 55       	subi	r30, 0x56	; 86
    49e0:	fe 4f       	sbci	r31, 0xFE	; 254
    49e2:	80 81       	ld	r24, Z
    49e4:	82 95       	swap	r24
    49e6:	86 95       	lsr	r24
    49e8:	87 70       	andi	r24, 0x07	; 7
    49ea:	88 2f       	mov	r24, r24
    49ec:	90 e0       	ldi	r25, 0x00	; 0
    49ee:	81 70       	andi	r24, 0x01	; 1
    49f0:	90 70       	andi	r25, 0x00	; 0
    49f2:	1d 86       	std	Y+13, r1	; 0x0d
    49f4:	00 97       	sbiw	r24, 0x00	; 0
    49f6:	11 f4       	brne	.+4      	; 0x49fc <Seven_Segment_enuDisplayNumber+0x4b8>
    49f8:	41 e0       	ldi	r20, 0x01	; 1
    49fa:	4d 87       	std	Y+13, r20	; 0x0d
    49fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    49fe:	6e 85       	ldd	r22, Y+14	; 0x0e
    4a00:	4d 85       	ldd	r20, Y+13	; 0x0d
    4a02:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    4a06:	28 2f       	mov	r18, r24
    4a08:	30 e0       	ldi	r19, 0x00	; 0
    4a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    4a0c:	8d 5f       	subi	r24, 0xFD	; 253
    4a0e:	8d 83       	std	Y+5, r24	; 0x05
    4a10:	8d 81       	ldd	r24, Y+5	; 0x05
    4a12:	88 2f       	mov	r24, r24
    4a14:	90 e0       	ldi	r25, 0x00	; 0
    4a16:	a9 01       	movw	r20, r18
    4a18:	02 c0       	rjmp	.+4      	; 0x4a1e <Seven_Segment_enuDisplayNumber+0x4da>
    4a1a:	44 0f       	add	r20, r20
    4a1c:	55 1f       	adc	r21, r21
    4a1e:	8a 95       	dec	r24
    4a20:	e2 f7       	brpl	.-8      	; 0x4a1a <Seven_Segment_enuDisplayNumber+0x4d6>
    4a22:	ca 01       	movw	r24, r20
    4a24:	9c 01       	movw	r18, r24
    4a26:	44 27       	eor	r20, r20
    4a28:	37 fd       	sbrc	r19, 7
    4a2a:	40 95       	com	r20
    4a2c:	54 2f       	mov	r21, r20
    4a2e:	89 81       	ldd	r24, Y+1	; 0x01
    4a30:	9a 81       	ldd	r25, Y+2	; 0x02
    4a32:	ab 81       	ldd	r26, Y+3	; 0x03
    4a34:	bc 81       	ldd	r27, Y+4	; 0x04
    4a36:	82 2b       	or	r24, r18
    4a38:	93 2b       	or	r25, r19
    4a3a:	a4 2b       	or	r26, r20
    4a3c:	b5 2b       	or	r27, r21
    4a3e:	89 83       	std	Y+1, r24	; 0x01
    4a40:	9a 83       	std	Y+2, r25	; 0x02
    4a42:	ab 83       	std	Y+3, r26	; 0x03
    4a44:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPIN, !((SEGCth_Numbers[Copy_u8Number] >> GPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    4a46:	8f 81       	ldd	r24, Y+7	; 0x07
    4a48:	48 2f       	mov	r20, r24
    4a4a:	50 e0       	ldi	r21, 0x00	; 0
    4a4c:	ca 01       	movw	r24, r20
    4a4e:	88 0f       	add	r24, r24
    4a50:	99 1f       	adc	r25, r25
    4a52:	9c 01       	movw	r18, r24
    4a54:	22 0f       	add	r18, r18
    4a56:	33 1f       	adc	r19, r19
    4a58:	22 0f       	add	r18, r18
    4a5a:	33 1f       	adc	r19, r19
    4a5c:	22 0f       	add	r18, r18
    4a5e:	33 1f       	adc	r19, r19
    4a60:	82 0f       	add	r24, r18
    4a62:	93 1f       	adc	r25, r19
    4a64:	84 0f       	add	r24, r20
    4a66:	95 1f       	adc	r25, r21
    4a68:	fc 01       	movw	r30, r24
    4a6a:	e0 57       	subi	r30, 0x70	; 112
    4a6c:	fe 4f       	sbci	r31, 0xFE	; 254
    4a6e:	50 81       	ld	r21, Z
    4a70:	5c 87       	std	Y+12, r21	; 0x0c
    4a72:	8f 81       	ldd	r24, Y+7	; 0x07
    4a74:	48 2f       	mov	r20, r24
    4a76:	50 e0       	ldi	r21, 0x00	; 0
    4a78:	ca 01       	movw	r24, r20
    4a7a:	88 0f       	add	r24, r24
    4a7c:	99 1f       	adc	r25, r25
    4a7e:	9c 01       	movw	r18, r24
    4a80:	22 0f       	add	r18, r18
    4a82:	33 1f       	adc	r19, r19
    4a84:	22 0f       	add	r18, r18
    4a86:	33 1f       	adc	r19, r19
    4a88:	22 0f       	add	r18, r18
    4a8a:	33 1f       	adc	r19, r19
    4a8c:	82 0f       	add	r24, r18
    4a8e:	93 1f       	adc	r25, r19
    4a90:	84 0f       	add	r24, r20
    4a92:	95 1f       	adc	r25, r21
    4a94:	fc 01       	movw	r30, r24
    4a96:	ef 56       	subi	r30, 0x6F	; 111
    4a98:	fe 4f       	sbci	r31, 0xFE	; 254
    4a9a:	80 81       	ld	r24, Z
    4a9c:	8b 87       	std	Y+11, r24	; 0x0b
    4a9e:	88 85       	ldd	r24, Y+8	; 0x08
    4aa0:	88 2f       	mov	r24, r24
    4aa2:	90 e0       	ldi	r25, 0x00	; 0
    4aa4:	fc 01       	movw	r30, r24
    4aa6:	e6 55       	subi	r30, 0x56	; 86
    4aa8:	fe 4f       	sbci	r31, 0xFE	; 254
    4aaa:	80 81       	ld	r24, Z
    4aac:	82 95       	swap	r24
    4aae:	86 95       	lsr	r24
    4ab0:	86 95       	lsr	r24
    4ab2:	83 70       	andi	r24, 0x03	; 3
    4ab4:	88 2f       	mov	r24, r24
    4ab6:	90 e0       	ldi	r25, 0x00	; 0
    4ab8:	81 70       	andi	r24, 0x01	; 1
    4aba:	90 70       	andi	r25, 0x00	; 0
    4abc:	1a 86       	std	Y+10, r1	; 0x0a
    4abe:	00 97       	sbiw	r24, 0x00	; 0
    4ac0:	11 f4       	brne	.+4      	; 0x4ac6 <Seven_Segment_enuDisplayNumber+0x582>
    4ac2:	41 e0       	ldi	r20, 0x01	; 1
    4ac4:	4a 87       	std	Y+10, r20	; 0x0a
    4ac6:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ac8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4aca:	4a 85       	ldd	r20, Y+10	; 0x0a
    4acc:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    4ad0:	28 2f       	mov	r18, r24
    4ad2:	30 e0       	ldi	r19, 0x00	; 0
    4ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ad6:	8d 5f       	subi	r24, 0xFD	; 253
    4ad8:	8d 83       	std	Y+5, r24	; 0x05
    4ada:	8d 81       	ldd	r24, Y+5	; 0x05
    4adc:	88 2f       	mov	r24, r24
    4ade:	90 e0       	ldi	r25, 0x00	; 0
    4ae0:	a9 01       	movw	r20, r18
    4ae2:	02 c0       	rjmp	.+4      	; 0x4ae8 <Seven_Segment_enuDisplayNumber+0x5a4>
    4ae4:	44 0f       	add	r20, r20
    4ae6:	55 1f       	adc	r21, r21
    4ae8:	8a 95       	dec	r24
    4aea:	e2 f7       	brpl	.-8      	; 0x4ae4 <Seven_Segment_enuDisplayNumber+0x5a0>
    4aec:	ca 01       	movw	r24, r20
    4aee:	9c 01       	movw	r18, r24
    4af0:	44 27       	eor	r20, r20
    4af2:	37 fd       	sbrc	r19, 7
    4af4:	40 95       	com	r20
    4af6:	54 2f       	mov	r21, r20
    4af8:	89 81       	ldd	r24, Y+1	; 0x01
    4afa:	9a 81       	ldd	r25, Y+2	; 0x02
    4afc:	ab 81       	ldd	r26, Y+3	; 0x03
    4afe:	bc 81       	ldd	r27, Y+4	; 0x04
    4b00:	82 2b       	or	r24, r18
    4b02:	93 2b       	or	r25, r19
    4b04:	a4 2b       	or	r26, r20
    4b06:	b5 2b       	or	r27, r21
    4b08:	89 83       	std	Y+1, r24	; 0x01
    4b0a:	9a 83       	std	Y+2, r25	; 0x02
    4b0c:	ab 83       	std	Y+3, r26	; 0x03
    4b0e:	bc 83       	std	Y+4, r27	; 0x04
    4b10:	8c c2       	rjmp	.+1304   	; 0x502a <Seven_Segment_enuDisplayNumber+0xae6>
		}
		else if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_CATHODE)
    4b12:	8f 81       	ldd	r24, Y+7	; 0x07
    4b14:	48 2f       	mov	r20, r24
    4b16:	50 e0       	ldi	r21, 0x00	; 0
    4b18:	ca 01       	movw	r24, r20
    4b1a:	88 0f       	add	r24, r24
    4b1c:	99 1f       	adc	r25, r25
    4b1e:	9c 01       	movw	r18, r24
    4b20:	22 0f       	add	r18, r18
    4b22:	33 1f       	adc	r19, r19
    4b24:	22 0f       	add	r18, r18
    4b26:	33 1f       	adc	r19, r19
    4b28:	22 0f       	add	r18, r18
    4b2a:	33 1f       	adc	r19, r19
    4b2c:	82 0f       	add	r24, r18
    4b2e:	93 1f       	adc	r25, r19
    4b30:	84 0f       	add	r24, r20
    4b32:	95 1f       	adc	r25, r21
    4b34:	fc 01       	movw	r30, r24
    4b36:	ea 56       	subi	r30, 0x6A	; 106
    4b38:	fe 4f       	sbci	r31, 0xFE	; 254
    4b3a:	80 81       	ld	r24, Z
    4b3c:	86 30       	cpi	r24, 0x06	; 6
    4b3e:	09 f0       	breq	.+2      	; 0x4b42 <Seven_Segment_enuDisplayNumber+0x5fe>
    4b40:	74 c2       	rjmp	.+1256   	; 0x502a <Seven_Segment_enuDisplayNumber+0xae6>
		{
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_APORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_APIN, ((SEGCth_Numbers[Copy_u8Number] >> APIN_POS) & MASK_BIT)) << Local_u8Iterator_Error);
    4b42:	8f 81       	ldd	r24, Y+7	; 0x07
    4b44:	48 2f       	mov	r20, r24
    4b46:	50 e0       	ldi	r21, 0x00	; 0
    4b48:	ca 01       	movw	r24, r20
    4b4a:	88 0f       	add	r24, r24
    4b4c:	99 1f       	adc	r25, r25
    4b4e:	9c 01       	movw	r18, r24
    4b50:	22 0f       	add	r18, r18
    4b52:	33 1f       	adc	r19, r19
    4b54:	22 0f       	add	r18, r18
    4b56:	33 1f       	adc	r19, r19
    4b58:	22 0f       	add	r18, r18
    4b5a:	33 1f       	adc	r19, r19
    4b5c:	82 0f       	add	r24, r18
    4b5e:	93 1f       	adc	r25, r19
    4b60:	84 0f       	add	r24, r20
    4b62:	95 1f       	adc	r25, r21
    4b64:	fc 01       	movw	r30, r24
    4b66:	ec 57       	subi	r30, 0x7C	; 124
    4b68:	fe 4f       	sbci	r31, 0xFE	; 254
    4b6a:	60 81       	ld	r22, Z
    4b6c:	8f 81       	ldd	r24, Y+7	; 0x07
    4b6e:	48 2f       	mov	r20, r24
    4b70:	50 e0       	ldi	r21, 0x00	; 0
    4b72:	ca 01       	movw	r24, r20
    4b74:	88 0f       	add	r24, r24
    4b76:	99 1f       	adc	r25, r25
    4b78:	9c 01       	movw	r18, r24
    4b7a:	22 0f       	add	r18, r18
    4b7c:	33 1f       	adc	r19, r19
    4b7e:	22 0f       	add	r18, r18
    4b80:	33 1f       	adc	r19, r19
    4b82:	22 0f       	add	r18, r18
    4b84:	33 1f       	adc	r19, r19
    4b86:	82 0f       	add	r24, r18
    4b88:	93 1f       	adc	r25, r19
    4b8a:	84 0f       	add	r24, r20
    4b8c:	95 1f       	adc	r25, r21
    4b8e:	fc 01       	movw	r30, r24
    4b90:	eb 57       	subi	r30, 0x7B	; 123
    4b92:	fe 4f       	sbci	r31, 0xFE	; 254
    4b94:	20 81       	ld	r18, Z
    4b96:	88 85       	ldd	r24, Y+8	; 0x08
    4b98:	88 2f       	mov	r24, r24
    4b9a:	90 e0       	ldi	r25, 0x00	; 0
    4b9c:	fc 01       	movw	r30, r24
    4b9e:	e6 55       	subi	r30, 0x56	; 86
    4ba0:	fe 4f       	sbci	r31, 0xFE	; 254
    4ba2:	80 81       	ld	r24, Z
    4ba4:	98 2f       	mov	r25, r24
    4ba6:	91 70       	andi	r25, 0x01	; 1
    4ba8:	86 2f       	mov	r24, r22
    4baa:	62 2f       	mov	r22, r18
    4bac:	49 2f       	mov	r20, r25
    4bae:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    4bb2:	28 2f       	mov	r18, r24
    4bb4:	30 e0       	ldi	r19, 0x00	; 0
    4bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    4bb8:	88 2f       	mov	r24, r24
    4bba:	90 e0       	ldi	r25, 0x00	; 0
    4bbc:	a9 01       	movw	r20, r18
    4bbe:	02 c0       	rjmp	.+4      	; 0x4bc4 <Seven_Segment_enuDisplayNumber+0x680>
    4bc0:	44 0f       	add	r20, r20
    4bc2:	55 1f       	adc	r21, r21
    4bc4:	8a 95       	dec	r24
    4bc6:	e2 f7       	brpl	.-8      	; 0x4bc0 <Seven_Segment_enuDisplayNumber+0x67c>
    4bc8:	ca 01       	movw	r24, r20
    4bca:	9c 01       	movw	r18, r24
    4bcc:	44 27       	eor	r20, r20
    4bce:	37 fd       	sbrc	r19, 7
    4bd0:	40 95       	com	r20
    4bd2:	54 2f       	mov	r21, r20
    4bd4:	89 81       	ldd	r24, Y+1	; 0x01
    4bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    4bd8:	ab 81       	ldd	r26, Y+3	; 0x03
    4bda:	bc 81       	ldd	r27, Y+4	; 0x04
    4bdc:	82 2b       	or	r24, r18
    4bde:	93 2b       	or	r25, r19
    4be0:	a4 2b       	or	r26, r20
    4be2:	b5 2b       	or	r27, r21
    4be4:	89 83       	std	Y+1, r24	; 0x01
    4be6:	9a 83       	std	Y+2, r25	; 0x02
    4be8:	ab 83       	std	Y+3, r26	; 0x03
    4bea:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_BPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_BPIN, ((SEGCth_Numbers[Copy_u8Number] >> BPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    4bec:	8f 81       	ldd	r24, Y+7	; 0x07
    4bee:	48 2f       	mov	r20, r24
    4bf0:	50 e0       	ldi	r21, 0x00	; 0
    4bf2:	ca 01       	movw	r24, r20
    4bf4:	88 0f       	add	r24, r24
    4bf6:	99 1f       	adc	r25, r25
    4bf8:	9c 01       	movw	r18, r24
    4bfa:	22 0f       	add	r18, r18
    4bfc:	33 1f       	adc	r19, r19
    4bfe:	22 0f       	add	r18, r18
    4c00:	33 1f       	adc	r19, r19
    4c02:	22 0f       	add	r18, r18
    4c04:	33 1f       	adc	r19, r19
    4c06:	82 0f       	add	r24, r18
    4c08:	93 1f       	adc	r25, r19
    4c0a:	84 0f       	add	r24, r20
    4c0c:	95 1f       	adc	r25, r21
    4c0e:	fc 01       	movw	r30, r24
    4c10:	ea 57       	subi	r30, 0x7A	; 122
    4c12:	fe 4f       	sbci	r31, 0xFE	; 254
    4c14:	60 81       	ld	r22, Z
    4c16:	8f 81       	ldd	r24, Y+7	; 0x07
    4c18:	48 2f       	mov	r20, r24
    4c1a:	50 e0       	ldi	r21, 0x00	; 0
    4c1c:	ca 01       	movw	r24, r20
    4c1e:	88 0f       	add	r24, r24
    4c20:	99 1f       	adc	r25, r25
    4c22:	9c 01       	movw	r18, r24
    4c24:	22 0f       	add	r18, r18
    4c26:	33 1f       	adc	r19, r19
    4c28:	22 0f       	add	r18, r18
    4c2a:	33 1f       	adc	r19, r19
    4c2c:	22 0f       	add	r18, r18
    4c2e:	33 1f       	adc	r19, r19
    4c30:	82 0f       	add	r24, r18
    4c32:	93 1f       	adc	r25, r19
    4c34:	84 0f       	add	r24, r20
    4c36:	95 1f       	adc	r25, r21
    4c38:	fc 01       	movw	r30, r24
    4c3a:	e9 57       	subi	r30, 0x79	; 121
    4c3c:	fe 4f       	sbci	r31, 0xFE	; 254
    4c3e:	20 81       	ld	r18, Z
    4c40:	88 85       	ldd	r24, Y+8	; 0x08
    4c42:	88 2f       	mov	r24, r24
    4c44:	90 e0       	ldi	r25, 0x00	; 0
    4c46:	fc 01       	movw	r30, r24
    4c48:	e6 55       	subi	r30, 0x56	; 86
    4c4a:	fe 4f       	sbci	r31, 0xFE	; 254
    4c4c:	80 81       	ld	r24, Z
    4c4e:	86 95       	lsr	r24
    4c50:	98 2f       	mov	r25, r24
    4c52:	91 70       	andi	r25, 0x01	; 1
    4c54:	86 2f       	mov	r24, r22
    4c56:	62 2f       	mov	r22, r18
    4c58:	49 2f       	mov	r20, r25
    4c5a:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    4c5e:	28 2f       	mov	r18, r24
    4c60:	30 e0       	ldi	r19, 0x00	; 0
    4c62:	8d 81       	ldd	r24, Y+5	; 0x05
    4c64:	8d 5f       	subi	r24, 0xFD	; 253
    4c66:	8d 83       	std	Y+5, r24	; 0x05
    4c68:	8d 81       	ldd	r24, Y+5	; 0x05
    4c6a:	88 2f       	mov	r24, r24
    4c6c:	90 e0       	ldi	r25, 0x00	; 0
    4c6e:	a9 01       	movw	r20, r18
    4c70:	02 c0       	rjmp	.+4      	; 0x4c76 <Seven_Segment_enuDisplayNumber+0x732>
    4c72:	44 0f       	add	r20, r20
    4c74:	55 1f       	adc	r21, r21
    4c76:	8a 95       	dec	r24
    4c78:	e2 f7       	brpl	.-8      	; 0x4c72 <Seven_Segment_enuDisplayNumber+0x72e>
    4c7a:	ca 01       	movw	r24, r20
    4c7c:	9c 01       	movw	r18, r24
    4c7e:	44 27       	eor	r20, r20
    4c80:	37 fd       	sbrc	r19, 7
    4c82:	40 95       	com	r20
    4c84:	54 2f       	mov	r21, r20
    4c86:	89 81       	ldd	r24, Y+1	; 0x01
    4c88:	9a 81       	ldd	r25, Y+2	; 0x02
    4c8a:	ab 81       	ldd	r26, Y+3	; 0x03
    4c8c:	bc 81       	ldd	r27, Y+4	; 0x04
    4c8e:	82 2b       	or	r24, r18
    4c90:	93 2b       	or	r25, r19
    4c92:	a4 2b       	or	r26, r20
    4c94:	b5 2b       	or	r27, r21
    4c96:	89 83       	std	Y+1, r24	; 0x01
    4c98:	9a 83       	std	Y+2, r25	; 0x02
    4c9a:	ab 83       	std	Y+3, r26	; 0x03
    4c9c:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CPIN, ((SEGCth_Numbers[Copy_u8Number] >> CPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    4c9e:	8f 81       	ldd	r24, Y+7	; 0x07
    4ca0:	48 2f       	mov	r20, r24
    4ca2:	50 e0       	ldi	r21, 0x00	; 0
    4ca4:	ca 01       	movw	r24, r20
    4ca6:	88 0f       	add	r24, r24
    4ca8:	99 1f       	adc	r25, r25
    4caa:	9c 01       	movw	r18, r24
    4cac:	22 0f       	add	r18, r18
    4cae:	33 1f       	adc	r19, r19
    4cb0:	22 0f       	add	r18, r18
    4cb2:	33 1f       	adc	r19, r19
    4cb4:	22 0f       	add	r18, r18
    4cb6:	33 1f       	adc	r19, r19
    4cb8:	82 0f       	add	r24, r18
    4cba:	93 1f       	adc	r25, r19
    4cbc:	84 0f       	add	r24, r20
    4cbe:	95 1f       	adc	r25, r21
    4cc0:	fc 01       	movw	r30, r24
    4cc2:	e8 57       	subi	r30, 0x78	; 120
    4cc4:	fe 4f       	sbci	r31, 0xFE	; 254
    4cc6:	60 81       	ld	r22, Z
    4cc8:	8f 81       	ldd	r24, Y+7	; 0x07
    4cca:	48 2f       	mov	r20, r24
    4ccc:	50 e0       	ldi	r21, 0x00	; 0
    4cce:	ca 01       	movw	r24, r20
    4cd0:	88 0f       	add	r24, r24
    4cd2:	99 1f       	adc	r25, r25
    4cd4:	9c 01       	movw	r18, r24
    4cd6:	22 0f       	add	r18, r18
    4cd8:	33 1f       	adc	r19, r19
    4cda:	22 0f       	add	r18, r18
    4cdc:	33 1f       	adc	r19, r19
    4cde:	22 0f       	add	r18, r18
    4ce0:	33 1f       	adc	r19, r19
    4ce2:	82 0f       	add	r24, r18
    4ce4:	93 1f       	adc	r25, r19
    4ce6:	84 0f       	add	r24, r20
    4ce8:	95 1f       	adc	r25, r21
    4cea:	fc 01       	movw	r30, r24
    4cec:	e7 57       	subi	r30, 0x77	; 119
    4cee:	fe 4f       	sbci	r31, 0xFE	; 254
    4cf0:	20 81       	ld	r18, Z
    4cf2:	88 85       	ldd	r24, Y+8	; 0x08
    4cf4:	88 2f       	mov	r24, r24
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	fc 01       	movw	r30, r24
    4cfa:	e6 55       	subi	r30, 0x56	; 86
    4cfc:	fe 4f       	sbci	r31, 0xFE	; 254
    4cfe:	80 81       	ld	r24, Z
    4d00:	86 95       	lsr	r24
    4d02:	86 95       	lsr	r24
    4d04:	98 2f       	mov	r25, r24
    4d06:	91 70       	andi	r25, 0x01	; 1
    4d08:	86 2f       	mov	r24, r22
    4d0a:	62 2f       	mov	r22, r18
    4d0c:	49 2f       	mov	r20, r25
    4d0e:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    4d12:	28 2f       	mov	r18, r24
    4d14:	30 e0       	ldi	r19, 0x00	; 0
    4d16:	8d 81       	ldd	r24, Y+5	; 0x05
    4d18:	8d 5f       	subi	r24, 0xFD	; 253
    4d1a:	8d 83       	std	Y+5, r24	; 0x05
    4d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    4d1e:	88 2f       	mov	r24, r24
    4d20:	90 e0       	ldi	r25, 0x00	; 0
    4d22:	a9 01       	movw	r20, r18
    4d24:	02 c0       	rjmp	.+4      	; 0x4d2a <Seven_Segment_enuDisplayNumber+0x7e6>
    4d26:	44 0f       	add	r20, r20
    4d28:	55 1f       	adc	r21, r21
    4d2a:	8a 95       	dec	r24
    4d2c:	e2 f7       	brpl	.-8      	; 0x4d26 <Seven_Segment_enuDisplayNumber+0x7e2>
    4d2e:	ca 01       	movw	r24, r20
    4d30:	9c 01       	movw	r18, r24
    4d32:	44 27       	eor	r20, r20
    4d34:	37 fd       	sbrc	r19, 7
    4d36:	40 95       	com	r20
    4d38:	54 2f       	mov	r21, r20
    4d3a:	89 81       	ldd	r24, Y+1	; 0x01
    4d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    4d3e:	ab 81       	ldd	r26, Y+3	; 0x03
    4d40:	bc 81       	ldd	r27, Y+4	; 0x04
    4d42:	82 2b       	or	r24, r18
    4d44:	93 2b       	or	r25, r19
    4d46:	a4 2b       	or	r26, r20
    4d48:	b5 2b       	or	r27, r21
    4d4a:	89 83       	std	Y+1, r24	; 0x01
    4d4c:	9a 83       	std	Y+2, r25	; 0x02
    4d4e:	ab 83       	std	Y+3, r26	; 0x03
    4d50:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DPIN, ((SEGCth_Numbers[Copy_u8Number] >> DPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    4d52:	8f 81       	ldd	r24, Y+7	; 0x07
    4d54:	48 2f       	mov	r20, r24
    4d56:	50 e0       	ldi	r21, 0x00	; 0
    4d58:	ca 01       	movw	r24, r20
    4d5a:	88 0f       	add	r24, r24
    4d5c:	99 1f       	adc	r25, r25
    4d5e:	9c 01       	movw	r18, r24
    4d60:	22 0f       	add	r18, r18
    4d62:	33 1f       	adc	r19, r19
    4d64:	22 0f       	add	r18, r18
    4d66:	33 1f       	adc	r19, r19
    4d68:	22 0f       	add	r18, r18
    4d6a:	33 1f       	adc	r19, r19
    4d6c:	82 0f       	add	r24, r18
    4d6e:	93 1f       	adc	r25, r19
    4d70:	84 0f       	add	r24, r20
    4d72:	95 1f       	adc	r25, r21
    4d74:	fc 01       	movw	r30, r24
    4d76:	e6 57       	subi	r30, 0x76	; 118
    4d78:	fe 4f       	sbci	r31, 0xFE	; 254
    4d7a:	60 81       	ld	r22, Z
    4d7c:	8f 81       	ldd	r24, Y+7	; 0x07
    4d7e:	48 2f       	mov	r20, r24
    4d80:	50 e0       	ldi	r21, 0x00	; 0
    4d82:	ca 01       	movw	r24, r20
    4d84:	88 0f       	add	r24, r24
    4d86:	99 1f       	adc	r25, r25
    4d88:	9c 01       	movw	r18, r24
    4d8a:	22 0f       	add	r18, r18
    4d8c:	33 1f       	adc	r19, r19
    4d8e:	22 0f       	add	r18, r18
    4d90:	33 1f       	adc	r19, r19
    4d92:	22 0f       	add	r18, r18
    4d94:	33 1f       	adc	r19, r19
    4d96:	82 0f       	add	r24, r18
    4d98:	93 1f       	adc	r25, r19
    4d9a:	84 0f       	add	r24, r20
    4d9c:	95 1f       	adc	r25, r21
    4d9e:	fc 01       	movw	r30, r24
    4da0:	e5 57       	subi	r30, 0x75	; 117
    4da2:	fe 4f       	sbci	r31, 0xFE	; 254
    4da4:	20 81       	ld	r18, Z
    4da6:	88 85       	ldd	r24, Y+8	; 0x08
    4da8:	88 2f       	mov	r24, r24
    4daa:	90 e0       	ldi	r25, 0x00	; 0
    4dac:	fc 01       	movw	r30, r24
    4dae:	e6 55       	subi	r30, 0x56	; 86
    4db0:	fe 4f       	sbci	r31, 0xFE	; 254
    4db2:	80 81       	ld	r24, Z
    4db4:	86 95       	lsr	r24
    4db6:	86 95       	lsr	r24
    4db8:	86 95       	lsr	r24
    4dba:	98 2f       	mov	r25, r24
    4dbc:	91 70       	andi	r25, 0x01	; 1
    4dbe:	86 2f       	mov	r24, r22
    4dc0:	62 2f       	mov	r22, r18
    4dc2:	49 2f       	mov	r20, r25
    4dc4:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    4dc8:	28 2f       	mov	r18, r24
    4dca:	30 e0       	ldi	r19, 0x00	; 0
    4dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    4dce:	8d 5f       	subi	r24, 0xFD	; 253
    4dd0:	8d 83       	std	Y+5, r24	; 0x05
    4dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    4dd4:	88 2f       	mov	r24, r24
    4dd6:	90 e0       	ldi	r25, 0x00	; 0
    4dd8:	a9 01       	movw	r20, r18
    4dda:	02 c0       	rjmp	.+4      	; 0x4de0 <Seven_Segment_enuDisplayNumber+0x89c>
    4ddc:	44 0f       	add	r20, r20
    4dde:	55 1f       	adc	r21, r21
    4de0:	8a 95       	dec	r24
    4de2:	e2 f7       	brpl	.-8      	; 0x4ddc <Seven_Segment_enuDisplayNumber+0x898>
    4de4:	ca 01       	movw	r24, r20
    4de6:	9c 01       	movw	r18, r24
    4de8:	44 27       	eor	r20, r20
    4dea:	37 fd       	sbrc	r19, 7
    4dec:	40 95       	com	r20
    4dee:	54 2f       	mov	r21, r20
    4df0:	89 81       	ldd	r24, Y+1	; 0x01
    4df2:	9a 81       	ldd	r25, Y+2	; 0x02
    4df4:	ab 81       	ldd	r26, Y+3	; 0x03
    4df6:	bc 81       	ldd	r27, Y+4	; 0x04
    4df8:	82 2b       	or	r24, r18
    4dfa:	93 2b       	or	r25, r19
    4dfc:	a4 2b       	or	r26, r20
    4dfe:	b5 2b       	or	r27, r21
    4e00:	89 83       	std	Y+1, r24	; 0x01
    4e02:	9a 83       	std	Y+2, r25	; 0x02
    4e04:	ab 83       	std	Y+3, r26	; 0x03
    4e06:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPIN, ((SEGCth_Numbers[Copy_u8Number] >> EPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    4e08:	8f 81       	ldd	r24, Y+7	; 0x07
    4e0a:	48 2f       	mov	r20, r24
    4e0c:	50 e0       	ldi	r21, 0x00	; 0
    4e0e:	ca 01       	movw	r24, r20
    4e10:	88 0f       	add	r24, r24
    4e12:	99 1f       	adc	r25, r25
    4e14:	9c 01       	movw	r18, r24
    4e16:	22 0f       	add	r18, r18
    4e18:	33 1f       	adc	r19, r19
    4e1a:	22 0f       	add	r18, r18
    4e1c:	33 1f       	adc	r19, r19
    4e1e:	22 0f       	add	r18, r18
    4e20:	33 1f       	adc	r19, r19
    4e22:	82 0f       	add	r24, r18
    4e24:	93 1f       	adc	r25, r19
    4e26:	84 0f       	add	r24, r20
    4e28:	95 1f       	adc	r25, r21
    4e2a:	fc 01       	movw	r30, r24
    4e2c:	e4 57       	subi	r30, 0x74	; 116
    4e2e:	fe 4f       	sbci	r31, 0xFE	; 254
    4e30:	60 81       	ld	r22, Z
    4e32:	8f 81       	ldd	r24, Y+7	; 0x07
    4e34:	48 2f       	mov	r20, r24
    4e36:	50 e0       	ldi	r21, 0x00	; 0
    4e38:	ca 01       	movw	r24, r20
    4e3a:	88 0f       	add	r24, r24
    4e3c:	99 1f       	adc	r25, r25
    4e3e:	9c 01       	movw	r18, r24
    4e40:	22 0f       	add	r18, r18
    4e42:	33 1f       	adc	r19, r19
    4e44:	22 0f       	add	r18, r18
    4e46:	33 1f       	adc	r19, r19
    4e48:	22 0f       	add	r18, r18
    4e4a:	33 1f       	adc	r19, r19
    4e4c:	82 0f       	add	r24, r18
    4e4e:	93 1f       	adc	r25, r19
    4e50:	84 0f       	add	r24, r20
    4e52:	95 1f       	adc	r25, r21
    4e54:	fc 01       	movw	r30, r24
    4e56:	e3 57       	subi	r30, 0x73	; 115
    4e58:	fe 4f       	sbci	r31, 0xFE	; 254
    4e5a:	20 81       	ld	r18, Z
    4e5c:	88 85       	ldd	r24, Y+8	; 0x08
    4e5e:	88 2f       	mov	r24, r24
    4e60:	90 e0       	ldi	r25, 0x00	; 0
    4e62:	fc 01       	movw	r30, r24
    4e64:	e6 55       	subi	r30, 0x56	; 86
    4e66:	fe 4f       	sbci	r31, 0xFE	; 254
    4e68:	80 81       	ld	r24, Z
    4e6a:	82 95       	swap	r24
    4e6c:	8f 70       	andi	r24, 0x0F	; 15
    4e6e:	98 2f       	mov	r25, r24
    4e70:	91 70       	andi	r25, 0x01	; 1
    4e72:	86 2f       	mov	r24, r22
    4e74:	62 2f       	mov	r22, r18
    4e76:	49 2f       	mov	r20, r25
    4e78:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    4e7c:	28 2f       	mov	r18, r24
    4e7e:	30 e0       	ldi	r19, 0x00	; 0
    4e80:	8d 81       	ldd	r24, Y+5	; 0x05
    4e82:	8d 5f       	subi	r24, 0xFD	; 253
    4e84:	8d 83       	std	Y+5, r24	; 0x05
    4e86:	8d 81       	ldd	r24, Y+5	; 0x05
    4e88:	88 2f       	mov	r24, r24
    4e8a:	90 e0       	ldi	r25, 0x00	; 0
    4e8c:	a9 01       	movw	r20, r18
    4e8e:	02 c0       	rjmp	.+4      	; 0x4e94 <Seven_Segment_enuDisplayNumber+0x950>
    4e90:	44 0f       	add	r20, r20
    4e92:	55 1f       	adc	r21, r21
    4e94:	8a 95       	dec	r24
    4e96:	e2 f7       	brpl	.-8      	; 0x4e90 <Seven_Segment_enuDisplayNumber+0x94c>
    4e98:	ca 01       	movw	r24, r20
    4e9a:	9c 01       	movw	r18, r24
    4e9c:	44 27       	eor	r20, r20
    4e9e:	37 fd       	sbrc	r19, 7
    4ea0:	40 95       	com	r20
    4ea2:	54 2f       	mov	r21, r20
    4ea4:	89 81       	ldd	r24, Y+1	; 0x01
    4ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ea8:	ab 81       	ldd	r26, Y+3	; 0x03
    4eaa:	bc 81       	ldd	r27, Y+4	; 0x04
    4eac:	82 2b       	or	r24, r18
    4eae:	93 2b       	or	r25, r19
    4eb0:	a4 2b       	or	r26, r20
    4eb2:	b5 2b       	or	r27, r21
    4eb4:	89 83       	std	Y+1, r24	; 0x01
    4eb6:	9a 83       	std	Y+2, r25	; 0x02
    4eb8:	ab 83       	std	Y+3, r26	; 0x03
    4eba:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPIN, ((SEGCth_Numbers[Copy_u8Number] >> FPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    4ebc:	8f 81       	ldd	r24, Y+7	; 0x07
    4ebe:	48 2f       	mov	r20, r24
    4ec0:	50 e0       	ldi	r21, 0x00	; 0
    4ec2:	ca 01       	movw	r24, r20
    4ec4:	88 0f       	add	r24, r24
    4ec6:	99 1f       	adc	r25, r25
    4ec8:	9c 01       	movw	r18, r24
    4eca:	22 0f       	add	r18, r18
    4ecc:	33 1f       	adc	r19, r19
    4ece:	22 0f       	add	r18, r18
    4ed0:	33 1f       	adc	r19, r19
    4ed2:	22 0f       	add	r18, r18
    4ed4:	33 1f       	adc	r19, r19
    4ed6:	82 0f       	add	r24, r18
    4ed8:	93 1f       	adc	r25, r19
    4eda:	84 0f       	add	r24, r20
    4edc:	95 1f       	adc	r25, r21
    4ede:	fc 01       	movw	r30, r24
    4ee0:	e2 57       	subi	r30, 0x72	; 114
    4ee2:	fe 4f       	sbci	r31, 0xFE	; 254
    4ee4:	60 81       	ld	r22, Z
    4ee6:	8f 81       	ldd	r24, Y+7	; 0x07
    4ee8:	48 2f       	mov	r20, r24
    4eea:	50 e0       	ldi	r21, 0x00	; 0
    4eec:	ca 01       	movw	r24, r20
    4eee:	88 0f       	add	r24, r24
    4ef0:	99 1f       	adc	r25, r25
    4ef2:	9c 01       	movw	r18, r24
    4ef4:	22 0f       	add	r18, r18
    4ef6:	33 1f       	adc	r19, r19
    4ef8:	22 0f       	add	r18, r18
    4efa:	33 1f       	adc	r19, r19
    4efc:	22 0f       	add	r18, r18
    4efe:	33 1f       	adc	r19, r19
    4f00:	82 0f       	add	r24, r18
    4f02:	93 1f       	adc	r25, r19
    4f04:	84 0f       	add	r24, r20
    4f06:	95 1f       	adc	r25, r21
    4f08:	fc 01       	movw	r30, r24
    4f0a:	e1 57       	subi	r30, 0x71	; 113
    4f0c:	fe 4f       	sbci	r31, 0xFE	; 254
    4f0e:	20 81       	ld	r18, Z
    4f10:	88 85       	ldd	r24, Y+8	; 0x08
    4f12:	88 2f       	mov	r24, r24
    4f14:	90 e0       	ldi	r25, 0x00	; 0
    4f16:	fc 01       	movw	r30, r24
    4f18:	e6 55       	subi	r30, 0x56	; 86
    4f1a:	fe 4f       	sbci	r31, 0xFE	; 254
    4f1c:	80 81       	ld	r24, Z
    4f1e:	82 95       	swap	r24
    4f20:	86 95       	lsr	r24
    4f22:	87 70       	andi	r24, 0x07	; 7
    4f24:	98 2f       	mov	r25, r24
    4f26:	91 70       	andi	r25, 0x01	; 1
    4f28:	86 2f       	mov	r24, r22
    4f2a:	62 2f       	mov	r22, r18
    4f2c:	49 2f       	mov	r20, r25
    4f2e:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    4f32:	28 2f       	mov	r18, r24
    4f34:	30 e0       	ldi	r19, 0x00	; 0
    4f36:	8d 81       	ldd	r24, Y+5	; 0x05
    4f38:	8d 5f       	subi	r24, 0xFD	; 253
    4f3a:	8d 83       	std	Y+5, r24	; 0x05
    4f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    4f3e:	88 2f       	mov	r24, r24
    4f40:	90 e0       	ldi	r25, 0x00	; 0
    4f42:	a9 01       	movw	r20, r18
    4f44:	02 c0       	rjmp	.+4      	; 0x4f4a <Seven_Segment_enuDisplayNumber+0xa06>
    4f46:	44 0f       	add	r20, r20
    4f48:	55 1f       	adc	r21, r21
    4f4a:	8a 95       	dec	r24
    4f4c:	e2 f7       	brpl	.-8      	; 0x4f46 <Seven_Segment_enuDisplayNumber+0xa02>
    4f4e:	ca 01       	movw	r24, r20
    4f50:	9c 01       	movw	r18, r24
    4f52:	44 27       	eor	r20, r20
    4f54:	37 fd       	sbrc	r19, 7
    4f56:	40 95       	com	r20
    4f58:	54 2f       	mov	r21, r20
    4f5a:	89 81       	ldd	r24, Y+1	; 0x01
    4f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    4f5e:	ab 81       	ldd	r26, Y+3	; 0x03
    4f60:	bc 81       	ldd	r27, Y+4	; 0x04
    4f62:	82 2b       	or	r24, r18
    4f64:	93 2b       	or	r25, r19
    4f66:	a4 2b       	or	r26, r20
    4f68:	b5 2b       	or	r27, r21
    4f6a:	89 83       	std	Y+1, r24	; 0x01
    4f6c:	9a 83       	std	Y+2, r25	; 0x02
    4f6e:	ab 83       	std	Y+3, r26	; 0x03
    4f70:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPIN, ((SEGCth_Numbers[Copy_u8Number] >> GPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    4f72:	8f 81       	ldd	r24, Y+7	; 0x07
    4f74:	48 2f       	mov	r20, r24
    4f76:	50 e0       	ldi	r21, 0x00	; 0
    4f78:	ca 01       	movw	r24, r20
    4f7a:	88 0f       	add	r24, r24
    4f7c:	99 1f       	adc	r25, r25
    4f7e:	9c 01       	movw	r18, r24
    4f80:	22 0f       	add	r18, r18
    4f82:	33 1f       	adc	r19, r19
    4f84:	22 0f       	add	r18, r18
    4f86:	33 1f       	adc	r19, r19
    4f88:	22 0f       	add	r18, r18
    4f8a:	33 1f       	adc	r19, r19
    4f8c:	82 0f       	add	r24, r18
    4f8e:	93 1f       	adc	r25, r19
    4f90:	84 0f       	add	r24, r20
    4f92:	95 1f       	adc	r25, r21
    4f94:	fc 01       	movw	r30, r24
    4f96:	e0 57       	subi	r30, 0x70	; 112
    4f98:	fe 4f       	sbci	r31, 0xFE	; 254
    4f9a:	60 81       	ld	r22, Z
    4f9c:	8f 81       	ldd	r24, Y+7	; 0x07
    4f9e:	48 2f       	mov	r20, r24
    4fa0:	50 e0       	ldi	r21, 0x00	; 0
    4fa2:	ca 01       	movw	r24, r20
    4fa4:	88 0f       	add	r24, r24
    4fa6:	99 1f       	adc	r25, r25
    4fa8:	9c 01       	movw	r18, r24
    4faa:	22 0f       	add	r18, r18
    4fac:	33 1f       	adc	r19, r19
    4fae:	22 0f       	add	r18, r18
    4fb0:	33 1f       	adc	r19, r19
    4fb2:	22 0f       	add	r18, r18
    4fb4:	33 1f       	adc	r19, r19
    4fb6:	82 0f       	add	r24, r18
    4fb8:	93 1f       	adc	r25, r19
    4fba:	84 0f       	add	r24, r20
    4fbc:	95 1f       	adc	r25, r21
    4fbe:	fc 01       	movw	r30, r24
    4fc0:	ef 56       	subi	r30, 0x6F	; 111
    4fc2:	fe 4f       	sbci	r31, 0xFE	; 254
    4fc4:	20 81       	ld	r18, Z
    4fc6:	88 85       	ldd	r24, Y+8	; 0x08
    4fc8:	88 2f       	mov	r24, r24
    4fca:	90 e0       	ldi	r25, 0x00	; 0
    4fcc:	fc 01       	movw	r30, r24
    4fce:	e6 55       	subi	r30, 0x56	; 86
    4fd0:	fe 4f       	sbci	r31, 0xFE	; 254
    4fd2:	80 81       	ld	r24, Z
    4fd4:	82 95       	swap	r24
    4fd6:	86 95       	lsr	r24
    4fd8:	86 95       	lsr	r24
    4fda:	83 70       	andi	r24, 0x03	; 3
    4fdc:	98 2f       	mov	r25, r24
    4fde:	91 70       	andi	r25, 0x01	; 1
    4fe0:	86 2f       	mov	r24, r22
    4fe2:	62 2f       	mov	r22, r18
    4fe4:	49 2f       	mov	r20, r25
    4fe6:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    4fea:	28 2f       	mov	r18, r24
    4fec:	30 e0       	ldi	r19, 0x00	; 0
    4fee:	8d 81       	ldd	r24, Y+5	; 0x05
    4ff0:	8d 5f       	subi	r24, 0xFD	; 253
    4ff2:	8d 83       	std	Y+5, r24	; 0x05
    4ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ff6:	88 2f       	mov	r24, r24
    4ff8:	90 e0       	ldi	r25, 0x00	; 0
    4ffa:	a9 01       	movw	r20, r18
    4ffc:	02 c0       	rjmp	.+4      	; 0x5002 <Seven_Segment_enuDisplayNumber+0xabe>
    4ffe:	44 0f       	add	r20, r20
    5000:	55 1f       	adc	r21, r21
    5002:	8a 95       	dec	r24
    5004:	e2 f7       	brpl	.-8      	; 0x4ffe <Seven_Segment_enuDisplayNumber+0xaba>
    5006:	ca 01       	movw	r24, r20
    5008:	9c 01       	movw	r18, r24
    500a:	44 27       	eor	r20, r20
    500c:	37 fd       	sbrc	r19, 7
    500e:	40 95       	com	r20
    5010:	54 2f       	mov	r21, r20
    5012:	89 81       	ldd	r24, Y+1	; 0x01
    5014:	9a 81       	ldd	r25, Y+2	; 0x02
    5016:	ab 81       	ldd	r26, Y+3	; 0x03
    5018:	bc 81       	ldd	r27, Y+4	; 0x04
    501a:	82 2b       	or	r24, r18
    501c:	93 2b       	or	r25, r19
    501e:	a4 2b       	or	r26, r20
    5020:	b5 2b       	or	r27, r21
    5022:	89 83       	std	Y+1, r24	; 0x01
    5024:	9a 83       	std	Y+2, r25	; 0x02
    5026:	ab 83       	std	Y+3, r26	; 0x03
    5028:	bc 83       	std	Y+4, r27	; 0x04
		}
		
		for(Local_u8Iterator_Error = 0; Local_u8Iterator_Error < sizeof(Local_u32CheckError)*8; Local_u8Iterator_Error += ERROR_STATE_SIZE)
    502a:	1d 82       	std	Y+5, r1	; 0x05
    502c:	1d c0       	rjmp	.+58     	; 0x5068 <Seven_Segment_enuDisplayNumber+0xb24>
		{
			if(((Local_u32CheckError >> Local_u8Iterator_Error) & ERROR_STATE_MASK) != ES_OK)
    502e:	8d 81       	ldd	r24, Y+5	; 0x05
    5030:	28 2f       	mov	r18, r24
    5032:	30 e0       	ldi	r19, 0x00	; 0
    5034:	89 81       	ldd	r24, Y+1	; 0x01
    5036:	9a 81       	ldd	r25, Y+2	; 0x02
    5038:	ab 81       	ldd	r26, Y+3	; 0x03
    503a:	bc 81       	ldd	r27, Y+4	; 0x04
    503c:	02 2e       	mov	r0, r18
    503e:	04 c0       	rjmp	.+8      	; 0x5048 <Seven_Segment_enuDisplayNumber+0xb04>
    5040:	b6 95       	lsr	r27
    5042:	a7 95       	ror	r26
    5044:	97 95       	ror	r25
    5046:	87 95       	ror	r24
    5048:	0a 94       	dec	r0
    504a:	d2 f7       	brpl	.-12     	; 0x5040 <Seven_Segment_enuDisplayNumber+0xafc>
    504c:	87 70       	andi	r24, 0x07	; 7
    504e:	90 70       	andi	r25, 0x00	; 0
    5050:	a0 70       	andi	r26, 0x00	; 0
    5052:	b0 70       	andi	r27, 0x00	; 0
    5054:	00 97       	sbiw	r24, 0x00	; 0
    5056:	a1 05       	cpc	r26, r1
    5058:	b1 05       	cpc	r27, r1
    505a:	19 f0       	breq	.+6      	; 0x5062 <Seven_Segment_enuDisplayNumber+0xb1e>
			{
				return ES_NOK;
    505c:	51 e0       	ldi	r21, 0x01	; 1
    505e:	59 87       	std	Y+9, r21	; 0x09
    5060:	0c c0       	rjmp	.+24     	; 0x507a <Seven_Segment_enuDisplayNumber+0xb36>
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPIN, ((SEGCth_Numbers[Copy_u8Number] >> EPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPIN, ((SEGCth_Numbers[Copy_u8Number] >> FPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPIN, ((SEGCth_Numbers[Copy_u8Number] >> GPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
		}
		
		for(Local_u8Iterator_Error = 0; Local_u8Iterator_Error < sizeof(Local_u32CheckError)*8; Local_u8Iterator_Error += ERROR_STATE_SIZE)
    5062:	8d 81       	ldd	r24, Y+5	; 0x05
    5064:	8d 5f       	subi	r24, 0xFD	; 253
    5066:	8d 83       	std	Y+5, r24	; 0x05
    5068:	8d 81       	ldd	r24, Y+5	; 0x05
    506a:	80 32       	cpi	r24, 0x20	; 32
    506c:	00 f3       	brcs	.-64     	; 0x502e <Seven_Segment_enuDisplayNumber+0xaea>
			if(((Local_u32CheckError >> Local_u8Iterator_Error) & ERROR_STATE_MASK) != ES_OK)
			{
				return ES_NOK;
			}
		}
		Local_enuErrorState = ES_OK;
    506e:	1e 82       	std	Y+6, r1	; 0x06
    5070:	02 c0       	rjmp	.+4      	; 0x5076 <Seven_Segment_enuDisplayNumber+0xb32>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    5072:	83 e0       	ldi	r24, 0x03	; 3
    5074:	8e 83       	std	Y+6, r24	; 0x06
	}
	
	return Local_enuErrorState;
    5076:	8e 81       	ldd	r24, Y+6	; 0x06
    5078:	89 87       	std	Y+9, r24	; 0x09
    507a:	89 85       	ldd	r24, Y+9	; 0x09
}
    507c:	6e 96       	adiw	r28, 0x1e	; 30
    507e:	0f b6       	in	r0, 0x3f	; 63
    5080:	f8 94       	cli
    5082:	de bf       	out	0x3e, r29	; 62
    5084:	0f be       	out	0x3f, r0	; 63
    5086:	cd bf       	out	0x3d, r28	; 61
    5088:	cf 91       	pop	r28
    508a:	df 91       	pop	r29
    508c:	08 95       	ret

0000508e <Seven_Segment_enuEnableCommon>:

ES_t Seven_Segment_enuEnableCommon(u8 Copy_SEG_ID)
{
    508e:	df 93       	push	r29
    5090:	cf 93       	push	r28
    5092:	00 d0       	rcall	.+0      	; 0x5094 <Seven_Segment_enuEnableCommon+0x6>
    5094:	cd b7       	in	r28, 0x3d	; 61
    5096:	de b7       	in	r29, 0x3e	; 62
    5098:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    509a:	81 e0       	ldi	r24, 0x01	; 1
    509c:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_SEG_ID < SEG_NUM)
    509e:	8a 81       	ldd	r24, Y+2	; 0x02
    50a0:	82 30       	cpi	r24, 0x02	; 2
    50a2:	08 f0       	brcs	.+2      	; 0x50a6 <Seven_Segment_enuEnableCommon+0x18>
    50a4:	90 c0       	rjmp	.+288    	; 0x51c6 <Seven_Segment_enuEnableCommon+0x138>
	{
		if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_ANODE)
    50a6:	8a 81       	ldd	r24, Y+2	; 0x02
    50a8:	48 2f       	mov	r20, r24
    50aa:	50 e0       	ldi	r21, 0x00	; 0
    50ac:	ca 01       	movw	r24, r20
    50ae:	88 0f       	add	r24, r24
    50b0:	99 1f       	adc	r25, r25
    50b2:	9c 01       	movw	r18, r24
    50b4:	22 0f       	add	r18, r18
    50b6:	33 1f       	adc	r19, r19
    50b8:	22 0f       	add	r18, r18
    50ba:	33 1f       	adc	r19, r19
    50bc:	22 0f       	add	r18, r18
    50be:	33 1f       	adc	r19, r19
    50c0:	82 0f       	add	r24, r18
    50c2:	93 1f       	adc	r25, r19
    50c4:	84 0f       	add	r24, r20
    50c6:	95 1f       	adc	r25, r21
    50c8:	fc 01       	movw	r30, r24
    50ca:	ea 56       	subi	r30, 0x6A	; 106
    50cc:	fe 4f       	sbci	r31, 0xFE	; 254
    50ce:	80 81       	ld	r24, Z
    50d0:	85 30       	cpi	r24, 0x05	; 5
    50d2:	89 f5       	brne	.+98     	; 0x5136 <Seven_Segment_enuEnableCommon+0xa8>
		{
			Local_enuErrorState = DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CMN_PORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CMN_PIN, DIO_u8HIGH);
    50d4:	8a 81       	ldd	r24, Y+2	; 0x02
    50d6:	48 2f       	mov	r20, r24
    50d8:	50 e0       	ldi	r21, 0x00	; 0
    50da:	ca 01       	movw	r24, r20
    50dc:	88 0f       	add	r24, r24
    50de:	99 1f       	adc	r25, r25
    50e0:	9c 01       	movw	r18, r24
    50e2:	22 0f       	add	r18, r18
    50e4:	33 1f       	adc	r19, r19
    50e6:	22 0f       	add	r18, r18
    50e8:	33 1f       	adc	r19, r19
    50ea:	22 0f       	add	r18, r18
    50ec:	33 1f       	adc	r19, r19
    50ee:	82 0f       	add	r24, r18
    50f0:	93 1f       	adc	r25, r19
    50f2:	84 0f       	add	r24, r20
    50f4:	95 1f       	adc	r25, r21
    50f6:	fc 01       	movw	r30, r24
    50f8:	ee 56       	subi	r30, 0x6E	; 110
    50fa:	fe 4f       	sbci	r31, 0xFE	; 254
    50fc:	60 81       	ld	r22, Z
    50fe:	8a 81       	ldd	r24, Y+2	; 0x02
    5100:	48 2f       	mov	r20, r24
    5102:	50 e0       	ldi	r21, 0x00	; 0
    5104:	ca 01       	movw	r24, r20
    5106:	88 0f       	add	r24, r24
    5108:	99 1f       	adc	r25, r25
    510a:	9c 01       	movw	r18, r24
    510c:	22 0f       	add	r18, r18
    510e:	33 1f       	adc	r19, r19
    5110:	22 0f       	add	r18, r18
    5112:	33 1f       	adc	r19, r19
    5114:	22 0f       	add	r18, r18
    5116:	33 1f       	adc	r19, r19
    5118:	82 0f       	add	r24, r18
    511a:	93 1f       	adc	r25, r19
    511c:	84 0f       	add	r24, r20
    511e:	95 1f       	adc	r25, r21
    5120:	fc 01       	movw	r30, r24
    5122:	ed 56       	subi	r30, 0x6D	; 109
    5124:	fe 4f       	sbci	r31, 0xFE	; 254
    5126:	90 81       	ld	r25, Z
    5128:	86 2f       	mov	r24, r22
    512a:	69 2f       	mov	r22, r25
    512c:	41 e0       	ldi	r20, 0x01	; 1
    512e:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5132:	89 83       	std	Y+1, r24	; 0x01
    5134:	4a c0       	rjmp	.+148    	; 0x51ca <Seven_Segment_enuEnableCommon+0x13c>
		}
		else if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_CATHODE)
    5136:	8a 81       	ldd	r24, Y+2	; 0x02
    5138:	48 2f       	mov	r20, r24
    513a:	50 e0       	ldi	r21, 0x00	; 0
    513c:	ca 01       	movw	r24, r20
    513e:	88 0f       	add	r24, r24
    5140:	99 1f       	adc	r25, r25
    5142:	9c 01       	movw	r18, r24
    5144:	22 0f       	add	r18, r18
    5146:	33 1f       	adc	r19, r19
    5148:	22 0f       	add	r18, r18
    514a:	33 1f       	adc	r19, r19
    514c:	22 0f       	add	r18, r18
    514e:	33 1f       	adc	r19, r19
    5150:	82 0f       	add	r24, r18
    5152:	93 1f       	adc	r25, r19
    5154:	84 0f       	add	r24, r20
    5156:	95 1f       	adc	r25, r21
    5158:	fc 01       	movw	r30, r24
    515a:	ea 56       	subi	r30, 0x6A	; 106
    515c:	fe 4f       	sbci	r31, 0xFE	; 254
    515e:	80 81       	ld	r24, Z
    5160:	86 30       	cpi	r24, 0x06	; 6
    5162:	99 f5       	brne	.+102    	; 0x51ca <Seven_Segment_enuEnableCommon+0x13c>
		{
			Local_enuErrorState = DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CMN_PORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CMN_PIN, DIO_u8LOW);
    5164:	8a 81       	ldd	r24, Y+2	; 0x02
    5166:	48 2f       	mov	r20, r24
    5168:	50 e0       	ldi	r21, 0x00	; 0
    516a:	ca 01       	movw	r24, r20
    516c:	88 0f       	add	r24, r24
    516e:	99 1f       	adc	r25, r25
    5170:	9c 01       	movw	r18, r24
    5172:	22 0f       	add	r18, r18
    5174:	33 1f       	adc	r19, r19
    5176:	22 0f       	add	r18, r18
    5178:	33 1f       	adc	r19, r19
    517a:	22 0f       	add	r18, r18
    517c:	33 1f       	adc	r19, r19
    517e:	82 0f       	add	r24, r18
    5180:	93 1f       	adc	r25, r19
    5182:	84 0f       	add	r24, r20
    5184:	95 1f       	adc	r25, r21
    5186:	fc 01       	movw	r30, r24
    5188:	ee 56       	subi	r30, 0x6E	; 110
    518a:	fe 4f       	sbci	r31, 0xFE	; 254
    518c:	60 81       	ld	r22, Z
    518e:	8a 81       	ldd	r24, Y+2	; 0x02
    5190:	48 2f       	mov	r20, r24
    5192:	50 e0       	ldi	r21, 0x00	; 0
    5194:	ca 01       	movw	r24, r20
    5196:	88 0f       	add	r24, r24
    5198:	99 1f       	adc	r25, r25
    519a:	9c 01       	movw	r18, r24
    519c:	22 0f       	add	r18, r18
    519e:	33 1f       	adc	r19, r19
    51a0:	22 0f       	add	r18, r18
    51a2:	33 1f       	adc	r19, r19
    51a4:	22 0f       	add	r18, r18
    51a6:	33 1f       	adc	r19, r19
    51a8:	82 0f       	add	r24, r18
    51aa:	93 1f       	adc	r25, r19
    51ac:	84 0f       	add	r24, r20
    51ae:	95 1f       	adc	r25, r21
    51b0:	fc 01       	movw	r30, r24
    51b2:	ed 56       	subi	r30, 0x6D	; 109
    51b4:	fe 4f       	sbci	r31, 0xFE	; 254
    51b6:	90 81       	ld	r25, Z
    51b8:	86 2f       	mov	r24, r22
    51ba:	69 2f       	mov	r22, r25
    51bc:	40 e0       	ldi	r20, 0x00	; 0
    51be:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    51c2:	89 83       	std	Y+1, r24	; 0x01
    51c4:	02 c0       	rjmp	.+4      	; 0x51ca <Seven_Segment_enuEnableCommon+0x13c>
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    51c6:	83 e0       	ldi	r24, 0x03	; 3
    51c8:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    51ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    51cc:	0f 90       	pop	r0
    51ce:	0f 90       	pop	r0
    51d0:	cf 91       	pop	r28
    51d2:	df 91       	pop	r29
    51d4:	08 95       	ret

000051d6 <Seven_Segment_enuDisableCommon>:

ES_t Seven_Segment_enuDisableCommon(u8 Copy_SEG_ID)
{
    51d6:	df 93       	push	r29
    51d8:	cf 93       	push	r28
    51da:	00 d0       	rcall	.+0      	; 0x51dc <Seven_Segment_enuDisableCommon+0x6>
    51dc:	cd b7       	in	r28, 0x3d	; 61
    51de:	de b7       	in	r29, 0x3e	; 62
    51e0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    51e2:	81 e0       	ldi	r24, 0x01	; 1
    51e4:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_SEG_ID < SEG_NUM)
    51e6:	8a 81       	ldd	r24, Y+2	; 0x02
    51e8:	82 30       	cpi	r24, 0x02	; 2
    51ea:	08 f0       	brcs	.+2      	; 0x51ee <Seven_Segment_enuDisableCommon+0x18>
    51ec:	90 c0       	rjmp	.+288    	; 0x530e <Seven_Segment_enuDisableCommon+0x138>
	{
		if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_ANODE)
    51ee:	8a 81       	ldd	r24, Y+2	; 0x02
    51f0:	48 2f       	mov	r20, r24
    51f2:	50 e0       	ldi	r21, 0x00	; 0
    51f4:	ca 01       	movw	r24, r20
    51f6:	88 0f       	add	r24, r24
    51f8:	99 1f       	adc	r25, r25
    51fa:	9c 01       	movw	r18, r24
    51fc:	22 0f       	add	r18, r18
    51fe:	33 1f       	adc	r19, r19
    5200:	22 0f       	add	r18, r18
    5202:	33 1f       	adc	r19, r19
    5204:	22 0f       	add	r18, r18
    5206:	33 1f       	adc	r19, r19
    5208:	82 0f       	add	r24, r18
    520a:	93 1f       	adc	r25, r19
    520c:	84 0f       	add	r24, r20
    520e:	95 1f       	adc	r25, r21
    5210:	fc 01       	movw	r30, r24
    5212:	ea 56       	subi	r30, 0x6A	; 106
    5214:	fe 4f       	sbci	r31, 0xFE	; 254
    5216:	80 81       	ld	r24, Z
    5218:	85 30       	cpi	r24, 0x05	; 5
    521a:	89 f5       	brne	.+98     	; 0x527e <Seven_Segment_enuDisableCommon+0xa8>
		{
			Local_enuErrorState = DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CMN_PORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CMN_PIN, DIO_u8LOW);
    521c:	8a 81       	ldd	r24, Y+2	; 0x02
    521e:	48 2f       	mov	r20, r24
    5220:	50 e0       	ldi	r21, 0x00	; 0
    5222:	ca 01       	movw	r24, r20
    5224:	88 0f       	add	r24, r24
    5226:	99 1f       	adc	r25, r25
    5228:	9c 01       	movw	r18, r24
    522a:	22 0f       	add	r18, r18
    522c:	33 1f       	adc	r19, r19
    522e:	22 0f       	add	r18, r18
    5230:	33 1f       	adc	r19, r19
    5232:	22 0f       	add	r18, r18
    5234:	33 1f       	adc	r19, r19
    5236:	82 0f       	add	r24, r18
    5238:	93 1f       	adc	r25, r19
    523a:	84 0f       	add	r24, r20
    523c:	95 1f       	adc	r25, r21
    523e:	fc 01       	movw	r30, r24
    5240:	ee 56       	subi	r30, 0x6E	; 110
    5242:	fe 4f       	sbci	r31, 0xFE	; 254
    5244:	60 81       	ld	r22, Z
    5246:	8a 81       	ldd	r24, Y+2	; 0x02
    5248:	48 2f       	mov	r20, r24
    524a:	50 e0       	ldi	r21, 0x00	; 0
    524c:	ca 01       	movw	r24, r20
    524e:	88 0f       	add	r24, r24
    5250:	99 1f       	adc	r25, r25
    5252:	9c 01       	movw	r18, r24
    5254:	22 0f       	add	r18, r18
    5256:	33 1f       	adc	r19, r19
    5258:	22 0f       	add	r18, r18
    525a:	33 1f       	adc	r19, r19
    525c:	22 0f       	add	r18, r18
    525e:	33 1f       	adc	r19, r19
    5260:	82 0f       	add	r24, r18
    5262:	93 1f       	adc	r25, r19
    5264:	84 0f       	add	r24, r20
    5266:	95 1f       	adc	r25, r21
    5268:	fc 01       	movw	r30, r24
    526a:	ed 56       	subi	r30, 0x6D	; 109
    526c:	fe 4f       	sbci	r31, 0xFE	; 254
    526e:	90 81       	ld	r25, Z
    5270:	86 2f       	mov	r24, r22
    5272:	69 2f       	mov	r22, r25
    5274:	40 e0       	ldi	r20, 0x00	; 0
    5276:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    527a:	89 83       	std	Y+1, r24	; 0x01
    527c:	4a c0       	rjmp	.+148    	; 0x5312 <Seven_Segment_enuDisableCommon+0x13c>
		}
		else if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_CATHODE)
    527e:	8a 81       	ldd	r24, Y+2	; 0x02
    5280:	48 2f       	mov	r20, r24
    5282:	50 e0       	ldi	r21, 0x00	; 0
    5284:	ca 01       	movw	r24, r20
    5286:	88 0f       	add	r24, r24
    5288:	99 1f       	adc	r25, r25
    528a:	9c 01       	movw	r18, r24
    528c:	22 0f       	add	r18, r18
    528e:	33 1f       	adc	r19, r19
    5290:	22 0f       	add	r18, r18
    5292:	33 1f       	adc	r19, r19
    5294:	22 0f       	add	r18, r18
    5296:	33 1f       	adc	r19, r19
    5298:	82 0f       	add	r24, r18
    529a:	93 1f       	adc	r25, r19
    529c:	84 0f       	add	r24, r20
    529e:	95 1f       	adc	r25, r21
    52a0:	fc 01       	movw	r30, r24
    52a2:	ea 56       	subi	r30, 0x6A	; 106
    52a4:	fe 4f       	sbci	r31, 0xFE	; 254
    52a6:	80 81       	ld	r24, Z
    52a8:	86 30       	cpi	r24, 0x06	; 6
    52aa:	99 f5       	brne	.+102    	; 0x5312 <Seven_Segment_enuDisableCommon+0x13c>
		{
			Local_enuErrorState = DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CMN_PORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CMN_PIN, DIO_u8HIGH);
    52ac:	8a 81       	ldd	r24, Y+2	; 0x02
    52ae:	48 2f       	mov	r20, r24
    52b0:	50 e0       	ldi	r21, 0x00	; 0
    52b2:	ca 01       	movw	r24, r20
    52b4:	88 0f       	add	r24, r24
    52b6:	99 1f       	adc	r25, r25
    52b8:	9c 01       	movw	r18, r24
    52ba:	22 0f       	add	r18, r18
    52bc:	33 1f       	adc	r19, r19
    52be:	22 0f       	add	r18, r18
    52c0:	33 1f       	adc	r19, r19
    52c2:	22 0f       	add	r18, r18
    52c4:	33 1f       	adc	r19, r19
    52c6:	82 0f       	add	r24, r18
    52c8:	93 1f       	adc	r25, r19
    52ca:	84 0f       	add	r24, r20
    52cc:	95 1f       	adc	r25, r21
    52ce:	fc 01       	movw	r30, r24
    52d0:	ee 56       	subi	r30, 0x6E	; 110
    52d2:	fe 4f       	sbci	r31, 0xFE	; 254
    52d4:	60 81       	ld	r22, Z
    52d6:	8a 81       	ldd	r24, Y+2	; 0x02
    52d8:	48 2f       	mov	r20, r24
    52da:	50 e0       	ldi	r21, 0x00	; 0
    52dc:	ca 01       	movw	r24, r20
    52de:	88 0f       	add	r24, r24
    52e0:	99 1f       	adc	r25, r25
    52e2:	9c 01       	movw	r18, r24
    52e4:	22 0f       	add	r18, r18
    52e6:	33 1f       	adc	r19, r19
    52e8:	22 0f       	add	r18, r18
    52ea:	33 1f       	adc	r19, r19
    52ec:	22 0f       	add	r18, r18
    52ee:	33 1f       	adc	r19, r19
    52f0:	82 0f       	add	r24, r18
    52f2:	93 1f       	adc	r25, r19
    52f4:	84 0f       	add	r24, r20
    52f6:	95 1f       	adc	r25, r21
    52f8:	fc 01       	movw	r30, r24
    52fa:	ed 56       	subi	r30, 0x6D	; 109
    52fc:	fe 4f       	sbci	r31, 0xFE	; 254
    52fe:	90 81       	ld	r25, Z
    5300:	86 2f       	mov	r24, r22
    5302:	69 2f       	mov	r22, r25
    5304:	41 e0       	ldi	r20, 0x01	; 1
    5306:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    530a:	89 83       	std	Y+1, r24	; 0x01
    530c:	02 c0       	rjmp	.+4      	; 0x5312 <Seven_Segment_enuDisableCommon+0x13c>
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    530e:	83 e0       	ldi	r24, 0x03	; 3
    5310:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    5312:	89 81       	ldd	r24, Y+1	; 0x01
}
    5314:	0f 90       	pop	r0
    5316:	0f 90       	pop	r0
    5318:	cf 91       	pop	r28
    531a:	df 91       	pop	r29
    531c:	08 95       	ret

0000531e <Seven_Segment_enuEnableDot>:

ES_t Seven_Segment_enuEnableDot(u8 Copy_SEG_ID)
{
    531e:	df 93       	push	r29
    5320:	cf 93       	push	r28
    5322:	00 d0       	rcall	.+0      	; 0x5324 <Seven_Segment_enuEnableDot+0x6>
    5324:	cd b7       	in	r28, 0x3d	; 61
    5326:	de b7       	in	r29, 0x3e	; 62
    5328:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    532a:	81 e0       	ldi	r24, 0x01	; 1
    532c:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_SEG_ID < SEG_NUM)
    532e:	8a 81       	ldd	r24, Y+2	; 0x02
    5330:	82 30       	cpi	r24, 0x02	; 2
    5332:	08 f0       	brcs	.+2      	; 0x5336 <Seven_Segment_enuEnableDot+0x18>
    5334:	90 c0       	rjmp	.+288    	; 0x5456 <Seven_Segment_enuEnableDot+0x138>
	{
		if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_ANODE)
    5336:	8a 81       	ldd	r24, Y+2	; 0x02
    5338:	48 2f       	mov	r20, r24
    533a:	50 e0       	ldi	r21, 0x00	; 0
    533c:	ca 01       	movw	r24, r20
    533e:	88 0f       	add	r24, r24
    5340:	99 1f       	adc	r25, r25
    5342:	9c 01       	movw	r18, r24
    5344:	22 0f       	add	r18, r18
    5346:	33 1f       	adc	r19, r19
    5348:	22 0f       	add	r18, r18
    534a:	33 1f       	adc	r19, r19
    534c:	22 0f       	add	r18, r18
    534e:	33 1f       	adc	r19, r19
    5350:	82 0f       	add	r24, r18
    5352:	93 1f       	adc	r25, r19
    5354:	84 0f       	add	r24, r20
    5356:	95 1f       	adc	r25, r21
    5358:	fc 01       	movw	r30, r24
    535a:	ea 56       	subi	r30, 0x6A	; 106
    535c:	fe 4f       	sbci	r31, 0xFE	; 254
    535e:	80 81       	ld	r24, Z
    5360:	85 30       	cpi	r24, 0x05	; 5
    5362:	89 f5       	brne	.+98     	; 0x53c6 <Seven_Segment_enuEnableDot+0xa8>
		{
			Local_enuErrorState = DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PIN, DIO_u8LOW);
    5364:	8a 81       	ldd	r24, Y+2	; 0x02
    5366:	48 2f       	mov	r20, r24
    5368:	50 e0       	ldi	r21, 0x00	; 0
    536a:	ca 01       	movw	r24, r20
    536c:	88 0f       	add	r24, r24
    536e:	99 1f       	adc	r25, r25
    5370:	9c 01       	movw	r18, r24
    5372:	22 0f       	add	r18, r18
    5374:	33 1f       	adc	r19, r19
    5376:	22 0f       	add	r18, r18
    5378:	33 1f       	adc	r19, r19
    537a:	22 0f       	add	r18, r18
    537c:	33 1f       	adc	r19, r19
    537e:	82 0f       	add	r24, r18
    5380:	93 1f       	adc	r25, r19
    5382:	84 0f       	add	r24, r20
    5384:	95 1f       	adc	r25, r21
    5386:	fc 01       	movw	r30, r24
    5388:	ec 56       	subi	r30, 0x6C	; 108
    538a:	fe 4f       	sbci	r31, 0xFE	; 254
    538c:	60 81       	ld	r22, Z
    538e:	8a 81       	ldd	r24, Y+2	; 0x02
    5390:	48 2f       	mov	r20, r24
    5392:	50 e0       	ldi	r21, 0x00	; 0
    5394:	ca 01       	movw	r24, r20
    5396:	88 0f       	add	r24, r24
    5398:	99 1f       	adc	r25, r25
    539a:	9c 01       	movw	r18, r24
    539c:	22 0f       	add	r18, r18
    539e:	33 1f       	adc	r19, r19
    53a0:	22 0f       	add	r18, r18
    53a2:	33 1f       	adc	r19, r19
    53a4:	22 0f       	add	r18, r18
    53a6:	33 1f       	adc	r19, r19
    53a8:	82 0f       	add	r24, r18
    53aa:	93 1f       	adc	r25, r19
    53ac:	84 0f       	add	r24, r20
    53ae:	95 1f       	adc	r25, r21
    53b0:	fc 01       	movw	r30, r24
    53b2:	eb 56       	subi	r30, 0x6B	; 107
    53b4:	fe 4f       	sbci	r31, 0xFE	; 254
    53b6:	90 81       	ld	r25, Z
    53b8:	86 2f       	mov	r24, r22
    53ba:	69 2f       	mov	r22, r25
    53bc:	40 e0       	ldi	r20, 0x00	; 0
    53be:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    53c2:	89 83       	std	Y+1, r24	; 0x01
    53c4:	4a c0       	rjmp	.+148    	; 0x545a <Seven_Segment_enuEnableDot+0x13c>
		}
		else if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_CATHODE)
    53c6:	8a 81       	ldd	r24, Y+2	; 0x02
    53c8:	48 2f       	mov	r20, r24
    53ca:	50 e0       	ldi	r21, 0x00	; 0
    53cc:	ca 01       	movw	r24, r20
    53ce:	88 0f       	add	r24, r24
    53d0:	99 1f       	adc	r25, r25
    53d2:	9c 01       	movw	r18, r24
    53d4:	22 0f       	add	r18, r18
    53d6:	33 1f       	adc	r19, r19
    53d8:	22 0f       	add	r18, r18
    53da:	33 1f       	adc	r19, r19
    53dc:	22 0f       	add	r18, r18
    53de:	33 1f       	adc	r19, r19
    53e0:	82 0f       	add	r24, r18
    53e2:	93 1f       	adc	r25, r19
    53e4:	84 0f       	add	r24, r20
    53e6:	95 1f       	adc	r25, r21
    53e8:	fc 01       	movw	r30, r24
    53ea:	ea 56       	subi	r30, 0x6A	; 106
    53ec:	fe 4f       	sbci	r31, 0xFE	; 254
    53ee:	80 81       	ld	r24, Z
    53f0:	86 30       	cpi	r24, 0x06	; 6
    53f2:	99 f5       	brne	.+102    	; 0x545a <Seven_Segment_enuEnableDot+0x13c>
		{
			Local_enuErrorState = DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PIN, DIO_u8HIGH);
    53f4:	8a 81       	ldd	r24, Y+2	; 0x02
    53f6:	48 2f       	mov	r20, r24
    53f8:	50 e0       	ldi	r21, 0x00	; 0
    53fa:	ca 01       	movw	r24, r20
    53fc:	88 0f       	add	r24, r24
    53fe:	99 1f       	adc	r25, r25
    5400:	9c 01       	movw	r18, r24
    5402:	22 0f       	add	r18, r18
    5404:	33 1f       	adc	r19, r19
    5406:	22 0f       	add	r18, r18
    5408:	33 1f       	adc	r19, r19
    540a:	22 0f       	add	r18, r18
    540c:	33 1f       	adc	r19, r19
    540e:	82 0f       	add	r24, r18
    5410:	93 1f       	adc	r25, r19
    5412:	84 0f       	add	r24, r20
    5414:	95 1f       	adc	r25, r21
    5416:	fc 01       	movw	r30, r24
    5418:	ec 56       	subi	r30, 0x6C	; 108
    541a:	fe 4f       	sbci	r31, 0xFE	; 254
    541c:	60 81       	ld	r22, Z
    541e:	8a 81       	ldd	r24, Y+2	; 0x02
    5420:	48 2f       	mov	r20, r24
    5422:	50 e0       	ldi	r21, 0x00	; 0
    5424:	ca 01       	movw	r24, r20
    5426:	88 0f       	add	r24, r24
    5428:	99 1f       	adc	r25, r25
    542a:	9c 01       	movw	r18, r24
    542c:	22 0f       	add	r18, r18
    542e:	33 1f       	adc	r19, r19
    5430:	22 0f       	add	r18, r18
    5432:	33 1f       	adc	r19, r19
    5434:	22 0f       	add	r18, r18
    5436:	33 1f       	adc	r19, r19
    5438:	82 0f       	add	r24, r18
    543a:	93 1f       	adc	r25, r19
    543c:	84 0f       	add	r24, r20
    543e:	95 1f       	adc	r25, r21
    5440:	fc 01       	movw	r30, r24
    5442:	eb 56       	subi	r30, 0x6B	; 107
    5444:	fe 4f       	sbci	r31, 0xFE	; 254
    5446:	90 81       	ld	r25, Z
    5448:	86 2f       	mov	r24, r22
    544a:	69 2f       	mov	r22, r25
    544c:	41 e0       	ldi	r20, 0x01	; 1
    544e:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5452:	89 83       	std	Y+1, r24	; 0x01
    5454:	02 c0       	rjmp	.+4      	; 0x545a <Seven_Segment_enuEnableDot+0x13c>
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    5456:	83 e0       	ldi	r24, 0x03	; 3
    5458:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    545a:	89 81       	ldd	r24, Y+1	; 0x01
}
    545c:	0f 90       	pop	r0
    545e:	0f 90       	pop	r0
    5460:	cf 91       	pop	r28
    5462:	df 91       	pop	r29
    5464:	08 95       	ret

00005466 <Seven_Segment_enuDisableDot>:

ES_t Seven_Segment_enuDisableDot(u8 Copy_SEG_ID)
{
    5466:	df 93       	push	r29
    5468:	cf 93       	push	r28
    546a:	00 d0       	rcall	.+0      	; 0x546c <Seven_Segment_enuDisableDot+0x6>
    546c:	cd b7       	in	r28, 0x3d	; 61
    546e:	de b7       	in	r29, 0x3e	; 62
    5470:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    5472:	81 e0       	ldi	r24, 0x01	; 1
    5474:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_SEG_ID < SEG_NUM)
    5476:	8a 81       	ldd	r24, Y+2	; 0x02
    5478:	82 30       	cpi	r24, 0x02	; 2
    547a:	08 f0       	brcs	.+2      	; 0x547e <Seven_Segment_enuDisableDot+0x18>
    547c:	90 c0       	rjmp	.+288    	; 0x559e <Seven_Segment_enuDisableDot+0x138>
	{
		if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_ANODE)
    547e:	8a 81       	ldd	r24, Y+2	; 0x02
    5480:	48 2f       	mov	r20, r24
    5482:	50 e0       	ldi	r21, 0x00	; 0
    5484:	ca 01       	movw	r24, r20
    5486:	88 0f       	add	r24, r24
    5488:	99 1f       	adc	r25, r25
    548a:	9c 01       	movw	r18, r24
    548c:	22 0f       	add	r18, r18
    548e:	33 1f       	adc	r19, r19
    5490:	22 0f       	add	r18, r18
    5492:	33 1f       	adc	r19, r19
    5494:	22 0f       	add	r18, r18
    5496:	33 1f       	adc	r19, r19
    5498:	82 0f       	add	r24, r18
    549a:	93 1f       	adc	r25, r19
    549c:	84 0f       	add	r24, r20
    549e:	95 1f       	adc	r25, r21
    54a0:	fc 01       	movw	r30, r24
    54a2:	ea 56       	subi	r30, 0x6A	; 106
    54a4:	fe 4f       	sbci	r31, 0xFE	; 254
    54a6:	80 81       	ld	r24, Z
    54a8:	85 30       	cpi	r24, 0x05	; 5
    54aa:	89 f5       	brne	.+98     	; 0x550e <Seven_Segment_enuDisableDot+0xa8>
		{
			Local_enuErrorState = DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PIN, DIO_u8HIGH);
    54ac:	8a 81       	ldd	r24, Y+2	; 0x02
    54ae:	48 2f       	mov	r20, r24
    54b0:	50 e0       	ldi	r21, 0x00	; 0
    54b2:	ca 01       	movw	r24, r20
    54b4:	88 0f       	add	r24, r24
    54b6:	99 1f       	adc	r25, r25
    54b8:	9c 01       	movw	r18, r24
    54ba:	22 0f       	add	r18, r18
    54bc:	33 1f       	adc	r19, r19
    54be:	22 0f       	add	r18, r18
    54c0:	33 1f       	adc	r19, r19
    54c2:	22 0f       	add	r18, r18
    54c4:	33 1f       	adc	r19, r19
    54c6:	82 0f       	add	r24, r18
    54c8:	93 1f       	adc	r25, r19
    54ca:	84 0f       	add	r24, r20
    54cc:	95 1f       	adc	r25, r21
    54ce:	fc 01       	movw	r30, r24
    54d0:	ec 56       	subi	r30, 0x6C	; 108
    54d2:	fe 4f       	sbci	r31, 0xFE	; 254
    54d4:	60 81       	ld	r22, Z
    54d6:	8a 81       	ldd	r24, Y+2	; 0x02
    54d8:	48 2f       	mov	r20, r24
    54da:	50 e0       	ldi	r21, 0x00	; 0
    54dc:	ca 01       	movw	r24, r20
    54de:	88 0f       	add	r24, r24
    54e0:	99 1f       	adc	r25, r25
    54e2:	9c 01       	movw	r18, r24
    54e4:	22 0f       	add	r18, r18
    54e6:	33 1f       	adc	r19, r19
    54e8:	22 0f       	add	r18, r18
    54ea:	33 1f       	adc	r19, r19
    54ec:	22 0f       	add	r18, r18
    54ee:	33 1f       	adc	r19, r19
    54f0:	82 0f       	add	r24, r18
    54f2:	93 1f       	adc	r25, r19
    54f4:	84 0f       	add	r24, r20
    54f6:	95 1f       	adc	r25, r21
    54f8:	fc 01       	movw	r30, r24
    54fa:	eb 56       	subi	r30, 0x6B	; 107
    54fc:	fe 4f       	sbci	r31, 0xFE	; 254
    54fe:	90 81       	ld	r25, Z
    5500:	86 2f       	mov	r24, r22
    5502:	69 2f       	mov	r22, r25
    5504:	41 e0       	ldi	r20, 0x01	; 1
    5506:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    550a:	89 83       	std	Y+1, r24	; 0x01
    550c:	4a c0       	rjmp	.+148    	; 0x55a2 <Seven_Segment_enuDisableDot+0x13c>
		}
		else if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_CATHODE)
    550e:	8a 81       	ldd	r24, Y+2	; 0x02
    5510:	48 2f       	mov	r20, r24
    5512:	50 e0       	ldi	r21, 0x00	; 0
    5514:	ca 01       	movw	r24, r20
    5516:	88 0f       	add	r24, r24
    5518:	99 1f       	adc	r25, r25
    551a:	9c 01       	movw	r18, r24
    551c:	22 0f       	add	r18, r18
    551e:	33 1f       	adc	r19, r19
    5520:	22 0f       	add	r18, r18
    5522:	33 1f       	adc	r19, r19
    5524:	22 0f       	add	r18, r18
    5526:	33 1f       	adc	r19, r19
    5528:	82 0f       	add	r24, r18
    552a:	93 1f       	adc	r25, r19
    552c:	84 0f       	add	r24, r20
    552e:	95 1f       	adc	r25, r21
    5530:	fc 01       	movw	r30, r24
    5532:	ea 56       	subi	r30, 0x6A	; 106
    5534:	fe 4f       	sbci	r31, 0xFE	; 254
    5536:	80 81       	ld	r24, Z
    5538:	86 30       	cpi	r24, 0x06	; 6
    553a:	99 f5       	brne	.+102    	; 0x55a2 <Seven_Segment_enuDisableDot+0x13c>
		{
			Local_enuErrorState = DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PIN, DIO_u8LOW);
    553c:	8a 81       	ldd	r24, Y+2	; 0x02
    553e:	48 2f       	mov	r20, r24
    5540:	50 e0       	ldi	r21, 0x00	; 0
    5542:	ca 01       	movw	r24, r20
    5544:	88 0f       	add	r24, r24
    5546:	99 1f       	adc	r25, r25
    5548:	9c 01       	movw	r18, r24
    554a:	22 0f       	add	r18, r18
    554c:	33 1f       	adc	r19, r19
    554e:	22 0f       	add	r18, r18
    5550:	33 1f       	adc	r19, r19
    5552:	22 0f       	add	r18, r18
    5554:	33 1f       	adc	r19, r19
    5556:	82 0f       	add	r24, r18
    5558:	93 1f       	adc	r25, r19
    555a:	84 0f       	add	r24, r20
    555c:	95 1f       	adc	r25, r21
    555e:	fc 01       	movw	r30, r24
    5560:	ec 56       	subi	r30, 0x6C	; 108
    5562:	fe 4f       	sbci	r31, 0xFE	; 254
    5564:	60 81       	ld	r22, Z
    5566:	8a 81       	ldd	r24, Y+2	; 0x02
    5568:	48 2f       	mov	r20, r24
    556a:	50 e0       	ldi	r21, 0x00	; 0
    556c:	ca 01       	movw	r24, r20
    556e:	88 0f       	add	r24, r24
    5570:	99 1f       	adc	r25, r25
    5572:	9c 01       	movw	r18, r24
    5574:	22 0f       	add	r18, r18
    5576:	33 1f       	adc	r19, r19
    5578:	22 0f       	add	r18, r18
    557a:	33 1f       	adc	r19, r19
    557c:	22 0f       	add	r18, r18
    557e:	33 1f       	adc	r19, r19
    5580:	82 0f       	add	r24, r18
    5582:	93 1f       	adc	r25, r19
    5584:	84 0f       	add	r24, r20
    5586:	95 1f       	adc	r25, r21
    5588:	fc 01       	movw	r30, r24
    558a:	eb 56       	subi	r30, 0x6B	; 107
    558c:	fe 4f       	sbci	r31, 0xFE	; 254
    558e:	90 81       	ld	r25, Z
    5590:	86 2f       	mov	r24, r22
    5592:	69 2f       	mov	r22, r25
    5594:	40 e0       	ldi	r20, 0x00	; 0
    5596:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    559a:	89 83       	std	Y+1, r24	; 0x01
    559c:	02 c0       	rjmp	.+4      	; 0x55a2 <Seven_Segment_enuDisableDot+0x13c>
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    559e:	83 e0       	ldi	r24, 0x03	; 3
    55a0:	89 83       	std	Y+1, r24	; 0x01
	}
		
	return Local_enuErrorState;
    55a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    55a4:	0f 90       	pop	r0
    55a6:	0f 90       	pop	r0
    55a8:	cf 91       	pop	r28
    55aa:	df 91       	pop	r29
    55ac:	08 95       	ret

000055ae <Seven_Sement_enuTurnOFF>:

ES_t Seven_Sement_enuTurnOFF(u8 Copy_SEG_ID)
{
    55ae:	df 93       	push	r29
    55b0:	cf 93       	push	r28
    55b2:	cd b7       	in	r28, 0x3d	; 61
    55b4:	de b7       	in	r29, 0x3e	; 62
    55b6:	28 97       	sbiw	r28, 0x08	; 8
    55b8:	0f b6       	in	r0, 0x3f	; 63
    55ba:	f8 94       	cli
    55bc:	de bf       	out	0x3e, r29	; 62
    55be:	0f be       	out	0x3f, r0	; 63
    55c0:	cd bf       	out	0x3d, r28	; 61
    55c2:	8f 83       	std	Y+7, r24	; 0x07
	ES_t Local_enuErrorState = ES_NOK;
    55c4:	81 e0       	ldi	r24, 0x01	; 1
    55c6:	8e 83       	std	Y+6, r24	; 0x06
	
	u8 Local_u8Iterator_Error = 0;
    55c8:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32CheckError = 0;
    55ca:	19 82       	std	Y+1, r1	; 0x01
    55cc:	1a 82       	std	Y+2, r1	; 0x02
    55ce:	1b 82       	std	Y+3, r1	; 0x03
    55d0:	1c 82       	std	Y+4, r1	; 0x04
	
	if(Copy_SEG_ID < SEG_NUM)
    55d2:	8f 81       	ldd	r24, Y+7	; 0x07
    55d4:	82 30       	cpi	r24, 0x02	; 2
    55d6:	08 f0       	brcs	.+2      	; 0x55da <Seven_Sement_enuTurnOFF+0x2c>
    55d8:	9f c5       	rjmp	.+2878   	; 0x6118 <Seven_Sement_enuTurnOFF+0xb6a>
	{
		if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_ANODE)
    55da:	8f 81       	ldd	r24, Y+7	; 0x07
    55dc:	48 2f       	mov	r20, r24
    55de:	50 e0       	ldi	r21, 0x00	; 0
    55e0:	ca 01       	movw	r24, r20
    55e2:	88 0f       	add	r24, r24
    55e4:	99 1f       	adc	r25, r25
    55e6:	9c 01       	movw	r18, r24
    55e8:	22 0f       	add	r18, r18
    55ea:	33 1f       	adc	r19, r19
    55ec:	22 0f       	add	r18, r18
    55ee:	33 1f       	adc	r19, r19
    55f0:	22 0f       	add	r18, r18
    55f2:	33 1f       	adc	r19, r19
    55f4:	82 0f       	add	r24, r18
    55f6:	93 1f       	adc	r25, r19
    55f8:	84 0f       	add	r24, r20
    55fa:	95 1f       	adc	r25, r21
    55fc:	fc 01       	movw	r30, r24
    55fe:	ea 56       	subi	r30, 0x6A	; 106
    5600:	fe 4f       	sbci	r31, 0xFE	; 254
    5602:	80 81       	ld	r24, Z
    5604:	85 30       	cpi	r24, 0x05	; 5
    5606:	09 f0       	breq	.+2      	; 0x560a <Seven_Sement_enuTurnOFF+0x5c>
    5608:	a6 c2       	rjmp	.+1356   	; 0x5b56 <Seven_Sement_enuTurnOFF+0x5a8>
		{
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_APORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_APIN, DIO_u8HIGH) << Local_u8Iterator_Error);
    560a:	8f 81       	ldd	r24, Y+7	; 0x07
    560c:	48 2f       	mov	r20, r24
    560e:	50 e0       	ldi	r21, 0x00	; 0
    5610:	ca 01       	movw	r24, r20
    5612:	88 0f       	add	r24, r24
    5614:	99 1f       	adc	r25, r25
    5616:	9c 01       	movw	r18, r24
    5618:	22 0f       	add	r18, r18
    561a:	33 1f       	adc	r19, r19
    561c:	22 0f       	add	r18, r18
    561e:	33 1f       	adc	r19, r19
    5620:	22 0f       	add	r18, r18
    5622:	33 1f       	adc	r19, r19
    5624:	82 0f       	add	r24, r18
    5626:	93 1f       	adc	r25, r19
    5628:	84 0f       	add	r24, r20
    562a:	95 1f       	adc	r25, r21
    562c:	fc 01       	movw	r30, r24
    562e:	ec 57       	subi	r30, 0x7C	; 124
    5630:	fe 4f       	sbci	r31, 0xFE	; 254
    5632:	60 81       	ld	r22, Z
    5634:	8f 81       	ldd	r24, Y+7	; 0x07
    5636:	48 2f       	mov	r20, r24
    5638:	50 e0       	ldi	r21, 0x00	; 0
    563a:	ca 01       	movw	r24, r20
    563c:	88 0f       	add	r24, r24
    563e:	99 1f       	adc	r25, r25
    5640:	9c 01       	movw	r18, r24
    5642:	22 0f       	add	r18, r18
    5644:	33 1f       	adc	r19, r19
    5646:	22 0f       	add	r18, r18
    5648:	33 1f       	adc	r19, r19
    564a:	22 0f       	add	r18, r18
    564c:	33 1f       	adc	r19, r19
    564e:	82 0f       	add	r24, r18
    5650:	93 1f       	adc	r25, r19
    5652:	84 0f       	add	r24, r20
    5654:	95 1f       	adc	r25, r21
    5656:	fc 01       	movw	r30, r24
    5658:	eb 57       	subi	r30, 0x7B	; 123
    565a:	fe 4f       	sbci	r31, 0xFE	; 254
    565c:	90 81       	ld	r25, Z
    565e:	86 2f       	mov	r24, r22
    5660:	69 2f       	mov	r22, r25
    5662:	41 e0       	ldi	r20, 0x01	; 1
    5664:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5668:	28 2f       	mov	r18, r24
    566a:	30 e0       	ldi	r19, 0x00	; 0
    566c:	8d 81       	ldd	r24, Y+5	; 0x05
    566e:	88 2f       	mov	r24, r24
    5670:	90 e0       	ldi	r25, 0x00	; 0
    5672:	a9 01       	movw	r20, r18
    5674:	02 c0       	rjmp	.+4      	; 0x567a <Seven_Sement_enuTurnOFF+0xcc>
    5676:	44 0f       	add	r20, r20
    5678:	55 1f       	adc	r21, r21
    567a:	8a 95       	dec	r24
    567c:	e2 f7       	brpl	.-8      	; 0x5676 <Seven_Sement_enuTurnOFF+0xc8>
    567e:	ca 01       	movw	r24, r20
    5680:	9c 01       	movw	r18, r24
    5682:	44 27       	eor	r20, r20
    5684:	37 fd       	sbrc	r19, 7
    5686:	40 95       	com	r20
    5688:	54 2f       	mov	r21, r20
    568a:	89 81       	ldd	r24, Y+1	; 0x01
    568c:	9a 81       	ldd	r25, Y+2	; 0x02
    568e:	ab 81       	ldd	r26, Y+3	; 0x03
    5690:	bc 81       	ldd	r27, Y+4	; 0x04
    5692:	82 2b       	or	r24, r18
    5694:	93 2b       	or	r25, r19
    5696:	a4 2b       	or	r26, r20
    5698:	b5 2b       	or	r27, r21
    569a:	89 83       	std	Y+1, r24	; 0x01
    569c:	9a 83       	std	Y+2, r25	; 0x02
    569e:	ab 83       	std	Y+3, r26	; 0x03
    56a0:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_BPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_BPIN, DIO_u8HIGH) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    56a2:	8f 81       	ldd	r24, Y+7	; 0x07
    56a4:	48 2f       	mov	r20, r24
    56a6:	50 e0       	ldi	r21, 0x00	; 0
    56a8:	ca 01       	movw	r24, r20
    56aa:	88 0f       	add	r24, r24
    56ac:	99 1f       	adc	r25, r25
    56ae:	9c 01       	movw	r18, r24
    56b0:	22 0f       	add	r18, r18
    56b2:	33 1f       	adc	r19, r19
    56b4:	22 0f       	add	r18, r18
    56b6:	33 1f       	adc	r19, r19
    56b8:	22 0f       	add	r18, r18
    56ba:	33 1f       	adc	r19, r19
    56bc:	82 0f       	add	r24, r18
    56be:	93 1f       	adc	r25, r19
    56c0:	84 0f       	add	r24, r20
    56c2:	95 1f       	adc	r25, r21
    56c4:	fc 01       	movw	r30, r24
    56c6:	ea 57       	subi	r30, 0x7A	; 122
    56c8:	fe 4f       	sbci	r31, 0xFE	; 254
    56ca:	60 81       	ld	r22, Z
    56cc:	8f 81       	ldd	r24, Y+7	; 0x07
    56ce:	48 2f       	mov	r20, r24
    56d0:	50 e0       	ldi	r21, 0x00	; 0
    56d2:	ca 01       	movw	r24, r20
    56d4:	88 0f       	add	r24, r24
    56d6:	99 1f       	adc	r25, r25
    56d8:	9c 01       	movw	r18, r24
    56da:	22 0f       	add	r18, r18
    56dc:	33 1f       	adc	r19, r19
    56de:	22 0f       	add	r18, r18
    56e0:	33 1f       	adc	r19, r19
    56e2:	22 0f       	add	r18, r18
    56e4:	33 1f       	adc	r19, r19
    56e6:	82 0f       	add	r24, r18
    56e8:	93 1f       	adc	r25, r19
    56ea:	84 0f       	add	r24, r20
    56ec:	95 1f       	adc	r25, r21
    56ee:	fc 01       	movw	r30, r24
    56f0:	e9 57       	subi	r30, 0x79	; 121
    56f2:	fe 4f       	sbci	r31, 0xFE	; 254
    56f4:	90 81       	ld	r25, Z
    56f6:	86 2f       	mov	r24, r22
    56f8:	69 2f       	mov	r22, r25
    56fa:	41 e0       	ldi	r20, 0x01	; 1
    56fc:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5700:	28 2f       	mov	r18, r24
    5702:	30 e0       	ldi	r19, 0x00	; 0
    5704:	8d 81       	ldd	r24, Y+5	; 0x05
    5706:	8d 5f       	subi	r24, 0xFD	; 253
    5708:	8d 83       	std	Y+5, r24	; 0x05
    570a:	8d 81       	ldd	r24, Y+5	; 0x05
    570c:	88 2f       	mov	r24, r24
    570e:	90 e0       	ldi	r25, 0x00	; 0
    5710:	a9 01       	movw	r20, r18
    5712:	02 c0       	rjmp	.+4      	; 0x5718 <Seven_Sement_enuTurnOFF+0x16a>
    5714:	44 0f       	add	r20, r20
    5716:	55 1f       	adc	r21, r21
    5718:	8a 95       	dec	r24
    571a:	e2 f7       	brpl	.-8      	; 0x5714 <Seven_Sement_enuTurnOFF+0x166>
    571c:	ca 01       	movw	r24, r20
    571e:	9c 01       	movw	r18, r24
    5720:	44 27       	eor	r20, r20
    5722:	37 fd       	sbrc	r19, 7
    5724:	40 95       	com	r20
    5726:	54 2f       	mov	r21, r20
    5728:	89 81       	ldd	r24, Y+1	; 0x01
    572a:	9a 81       	ldd	r25, Y+2	; 0x02
    572c:	ab 81       	ldd	r26, Y+3	; 0x03
    572e:	bc 81       	ldd	r27, Y+4	; 0x04
    5730:	82 2b       	or	r24, r18
    5732:	93 2b       	or	r25, r19
    5734:	a4 2b       	or	r26, r20
    5736:	b5 2b       	or	r27, r21
    5738:	89 83       	std	Y+1, r24	; 0x01
    573a:	9a 83       	std	Y+2, r25	; 0x02
    573c:	ab 83       	std	Y+3, r26	; 0x03
    573e:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CPIN, DIO_u8HIGH) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    5740:	8f 81       	ldd	r24, Y+7	; 0x07
    5742:	48 2f       	mov	r20, r24
    5744:	50 e0       	ldi	r21, 0x00	; 0
    5746:	ca 01       	movw	r24, r20
    5748:	88 0f       	add	r24, r24
    574a:	99 1f       	adc	r25, r25
    574c:	9c 01       	movw	r18, r24
    574e:	22 0f       	add	r18, r18
    5750:	33 1f       	adc	r19, r19
    5752:	22 0f       	add	r18, r18
    5754:	33 1f       	adc	r19, r19
    5756:	22 0f       	add	r18, r18
    5758:	33 1f       	adc	r19, r19
    575a:	82 0f       	add	r24, r18
    575c:	93 1f       	adc	r25, r19
    575e:	84 0f       	add	r24, r20
    5760:	95 1f       	adc	r25, r21
    5762:	fc 01       	movw	r30, r24
    5764:	e8 57       	subi	r30, 0x78	; 120
    5766:	fe 4f       	sbci	r31, 0xFE	; 254
    5768:	60 81       	ld	r22, Z
    576a:	8f 81       	ldd	r24, Y+7	; 0x07
    576c:	48 2f       	mov	r20, r24
    576e:	50 e0       	ldi	r21, 0x00	; 0
    5770:	ca 01       	movw	r24, r20
    5772:	88 0f       	add	r24, r24
    5774:	99 1f       	adc	r25, r25
    5776:	9c 01       	movw	r18, r24
    5778:	22 0f       	add	r18, r18
    577a:	33 1f       	adc	r19, r19
    577c:	22 0f       	add	r18, r18
    577e:	33 1f       	adc	r19, r19
    5780:	22 0f       	add	r18, r18
    5782:	33 1f       	adc	r19, r19
    5784:	82 0f       	add	r24, r18
    5786:	93 1f       	adc	r25, r19
    5788:	84 0f       	add	r24, r20
    578a:	95 1f       	adc	r25, r21
    578c:	fc 01       	movw	r30, r24
    578e:	e7 57       	subi	r30, 0x77	; 119
    5790:	fe 4f       	sbci	r31, 0xFE	; 254
    5792:	90 81       	ld	r25, Z
    5794:	86 2f       	mov	r24, r22
    5796:	69 2f       	mov	r22, r25
    5798:	41 e0       	ldi	r20, 0x01	; 1
    579a:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    579e:	28 2f       	mov	r18, r24
    57a0:	30 e0       	ldi	r19, 0x00	; 0
    57a2:	8d 81       	ldd	r24, Y+5	; 0x05
    57a4:	8d 5f       	subi	r24, 0xFD	; 253
    57a6:	8d 83       	std	Y+5, r24	; 0x05
    57a8:	8d 81       	ldd	r24, Y+5	; 0x05
    57aa:	88 2f       	mov	r24, r24
    57ac:	90 e0       	ldi	r25, 0x00	; 0
    57ae:	a9 01       	movw	r20, r18
    57b0:	02 c0       	rjmp	.+4      	; 0x57b6 <Seven_Sement_enuTurnOFF+0x208>
    57b2:	44 0f       	add	r20, r20
    57b4:	55 1f       	adc	r21, r21
    57b6:	8a 95       	dec	r24
    57b8:	e2 f7       	brpl	.-8      	; 0x57b2 <Seven_Sement_enuTurnOFF+0x204>
    57ba:	ca 01       	movw	r24, r20
    57bc:	9c 01       	movw	r18, r24
    57be:	44 27       	eor	r20, r20
    57c0:	37 fd       	sbrc	r19, 7
    57c2:	40 95       	com	r20
    57c4:	54 2f       	mov	r21, r20
    57c6:	89 81       	ldd	r24, Y+1	; 0x01
    57c8:	9a 81       	ldd	r25, Y+2	; 0x02
    57ca:	ab 81       	ldd	r26, Y+3	; 0x03
    57cc:	bc 81       	ldd	r27, Y+4	; 0x04
    57ce:	82 2b       	or	r24, r18
    57d0:	93 2b       	or	r25, r19
    57d2:	a4 2b       	or	r26, r20
    57d4:	b5 2b       	or	r27, r21
    57d6:	89 83       	std	Y+1, r24	; 0x01
    57d8:	9a 83       	std	Y+2, r25	; 0x02
    57da:	ab 83       	std	Y+3, r26	; 0x03
    57dc:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DPIN, DIO_u8HIGH) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    57de:	8f 81       	ldd	r24, Y+7	; 0x07
    57e0:	48 2f       	mov	r20, r24
    57e2:	50 e0       	ldi	r21, 0x00	; 0
    57e4:	ca 01       	movw	r24, r20
    57e6:	88 0f       	add	r24, r24
    57e8:	99 1f       	adc	r25, r25
    57ea:	9c 01       	movw	r18, r24
    57ec:	22 0f       	add	r18, r18
    57ee:	33 1f       	adc	r19, r19
    57f0:	22 0f       	add	r18, r18
    57f2:	33 1f       	adc	r19, r19
    57f4:	22 0f       	add	r18, r18
    57f6:	33 1f       	adc	r19, r19
    57f8:	82 0f       	add	r24, r18
    57fa:	93 1f       	adc	r25, r19
    57fc:	84 0f       	add	r24, r20
    57fe:	95 1f       	adc	r25, r21
    5800:	fc 01       	movw	r30, r24
    5802:	e6 57       	subi	r30, 0x76	; 118
    5804:	fe 4f       	sbci	r31, 0xFE	; 254
    5806:	60 81       	ld	r22, Z
    5808:	8f 81       	ldd	r24, Y+7	; 0x07
    580a:	48 2f       	mov	r20, r24
    580c:	50 e0       	ldi	r21, 0x00	; 0
    580e:	ca 01       	movw	r24, r20
    5810:	88 0f       	add	r24, r24
    5812:	99 1f       	adc	r25, r25
    5814:	9c 01       	movw	r18, r24
    5816:	22 0f       	add	r18, r18
    5818:	33 1f       	adc	r19, r19
    581a:	22 0f       	add	r18, r18
    581c:	33 1f       	adc	r19, r19
    581e:	22 0f       	add	r18, r18
    5820:	33 1f       	adc	r19, r19
    5822:	82 0f       	add	r24, r18
    5824:	93 1f       	adc	r25, r19
    5826:	84 0f       	add	r24, r20
    5828:	95 1f       	adc	r25, r21
    582a:	fc 01       	movw	r30, r24
    582c:	e5 57       	subi	r30, 0x75	; 117
    582e:	fe 4f       	sbci	r31, 0xFE	; 254
    5830:	90 81       	ld	r25, Z
    5832:	86 2f       	mov	r24, r22
    5834:	69 2f       	mov	r22, r25
    5836:	41 e0       	ldi	r20, 0x01	; 1
    5838:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    583c:	28 2f       	mov	r18, r24
    583e:	30 e0       	ldi	r19, 0x00	; 0
    5840:	8d 81       	ldd	r24, Y+5	; 0x05
    5842:	8d 5f       	subi	r24, 0xFD	; 253
    5844:	8d 83       	std	Y+5, r24	; 0x05
    5846:	8d 81       	ldd	r24, Y+5	; 0x05
    5848:	88 2f       	mov	r24, r24
    584a:	90 e0       	ldi	r25, 0x00	; 0
    584c:	a9 01       	movw	r20, r18
    584e:	02 c0       	rjmp	.+4      	; 0x5854 <Seven_Sement_enuTurnOFF+0x2a6>
    5850:	44 0f       	add	r20, r20
    5852:	55 1f       	adc	r21, r21
    5854:	8a 95       	dec	r24
    5856:	e2 f7       	brpl	.-8      	; 0x5850 <Seven_Sement_enuTurnOFF+0x2a2>
    5858:	ca 01       	movw	r24, r20
    585a:	9c 01       	movw	r18, r24
    585c:	44 27       	eor	r20, r20
    585e:	37 fd       	sbrc	r19, 7
    5860:	40 95       	com	r20
    5862:	54 2f       	mov	r21, r20
    5864:	89 81       	ldd	r24, Y+1	; 0x01
    5866:	9a 81       	ldd	r25, Y+2	; 0x02
    5868:	ab 81       	ldd	r26, Y+3	; 0x03
    586a:	bc 81       	ldd	r27, Y+4	; 0x04
    586c:	82 2b       	or	r24, r18
    586e:	93 2b       	or	r25, r19
    5870:	a4 2b       	or	r26, r20
    5872:	b5 2b       	or	r27, r21
    5874:	89 83       	std	Y+1, r24	; 0x01
    5876:	9a 83       	std	Y+2, r25	; 0x02
    5878:	ab 83       	std	Y+3, r26	; 0x03
    587a:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPIN, DIO_u8HIGH) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    587c:	8f 81       	ldd	r24, Y+7	; 0x07
    587e:	48 2f       	mov	r20, r24
    5880:	50 e0       	ldi	r21, 0x00	; 0
    5882:	ca 01       	movw	r24, r20
    5884:	88 0f       	add	r24, r24
    5886:	99 1f       	adc	r25, r25
    5888:	9c 01       	movw	r18, r24
    588a:	22 0f       	add	r18, r18
    588c:	33 1f       	adc	r19, r19
    588e:	22 0f       	add	r18, r18
    5890:	33 1f       	adc	r19, r19
    5892:	22 0f       	add	r18, r18
    5894:	33 1f       	adc	r19, r19
    5896:	82 0f       	add	r24, r18
    5898:	93 1f       	adc	r25, r19
    589a:	84 0f       	add	r24, r20
    589c:	95 1f       	adc	r25, r21
    589e:	fc 01       	movw	r30, r24
    58a0:	e4 57       	subi	r30, 0x74	; 116
    58a2:	fe 4f       	sbci	r31, 0xFE	; 254
    58a4:	60 81       	ld	r22, Z
    58a6:	8f 81       	ldd	r24, Y+7	; 0x07
    58a8:	48 2f       	mov	r20, r24
    58aa:	50 e0       	ldi	r21, 0x00	; 0
    58ac:	ca 01       	movw	r24, r20
    58ae:	88 0f       	add	r24, r24
    58b0:	99 1f       	adc	r25, r25
    58b2:	9c 01       	movw	r18, r24
    58b4:	22 0f       	add	r18, r18
    58b6:	33 1f       	adc	r19, r19
    58b8:	22 0f       	add	r18, r18
    58ba:	33 1f       	adc	r19, r19
    58bc:	22 0f       	add	r18, r18
    58be:	33 1f       	adc	r19, r19
    58c0:	82 0f       	add	r24, r18
    58c2:	93 1f       	adc	r25, r19
    58c4:	84 0f       	add	r24, r20
    58c6:	95 1f       	adc	r25, r21
    58c8:	fc 01       	movw	r30, r24
    58ca:	e3 57       	subi	r30, 0x73	; 115
    58cc:	fe 4f       	sbci	r31, 0xFE	; 254
    58ce:	90 81       	ld	r25, Z
    58d0:	86 2f       	mov	r24, r22
    58d2:	69 2f       	mov	r22, r25
    58d4:	41 e0       	ldi	r20, 0x01	; 1
    58d6:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    58da:	28 2f       	mov	r18, r24
    58dc:	30 e0       	ldi	r19, 0x00	; 0
    58de:	8d 81       	ldd	r24, Y+5	; 0x05
    58e0:	8d 5f       	subi	r24, 0xFD	; 253
    58e2:	8d 83       	std	Y+5, r24	; 0x05
    58e4:	8d 81       	ldd	r24, Y+5	; 0x05
    58e6:	88 2f       	mov	r24, r24
    58e8:	90 e0       	ldi	r25, 0x00	; 0
    58ea:	a9 01       	movw	r20, r18
    58ec:	02 c0       	rjmp	.+4      	; 0x58f2 <Seven_Sement_enuTurnOFF+0x344>
    58ee:	44 0f       	add	r20, r20
    58f0:	55 1f       	adc	r21, r21
    58f2:	8a 95       	dec	r24
    58f4:	e2 f7       	brpl	.-8      	; 0x58ee <Seven_Sement_enuTurnOFF+0x340>
    58f6:	ca 01       	movw	r24, r20
    58f8:	9c 01       	movw	r18, r24
    58fa:	44 27       	eor	r20, r20
    58fc:	37 fd       	sbrc	r19, 7
    58fe:	40 95       	com	r20
    5900:	54 2f       	mov	r21, r20
    5902:	89 81       	ldd	r24, Y+1	; 0x01
    5904:	9a 81       	ldd	r25, Y+2	; 0x02
    5906:	ab 81       	ldd	r26, Y+3	; 0x03
    5908:	bc 81       	ldd	r27, Y+4	; 0x04
    590a:	82 2b       	or	r24, r18
    590c:	93 2b       	or	r25, r19
    590e:	a4 2b       	or	r26, r20
    5910:	b5 2b       	or	r27, r21
    5912:	89 83       	std	Y+1, r24	; 0x01
    5914:	9a 83       	std	Y+2, r25	; 0x02
    5916:	ab 83       	std	Y+3, r26	; 0x03
    5918:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPIN, DIO_u8HIGH) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    591a:	8f 81       	ldd	r24, Y+7	; 0x07
    591c:	48 2f       	mov	r20, r24
    591e:	50 e0       	ldi	r21, 0x00	; 0
    5920:	ca 01       	movw	r24, r20
    5922:	88 0f       	add	r24, r24
    5924:	99 1f       	adc	r25, r25
    5926:	9c 01       	movw	r18, r24
    5928:	22 0f       	add	r18, r18
    592a:	33 1f       	adc	r19, r19
    592c:	22 0f       	add	r18, r18
    592e:	33 1f       	adc	r19, r19
    5930:	22 0f       	add	r18, r18
    5932:	33 1f       	adc	r19, r19
    5934:	82 0f       	add	r24, r18
    5936:	93 1f       	adc	r25, r19
    5938:	84 0f       	add	r24, r20
    593a:	95 1f       	adc	r25, r21
    593c:	fc 01       	movw	r30, r24
    593e:	e2 57       	subi	r30, 0x72	; 114
    5940:	fe 4f       	sbci	r31, 0xFE	; 254
    5942:	60 81       	ld	r22, Z
    5944:	8f 81       	ldd	r24, Y+7	; 0x07
    5946:	48 2f       	mov	r20, r24
    5948:	50 e0       	ldi	r21, 0x00	; 0
    594a:	ca 01       	movw	r24, r20
    594c:	88 0f       	add	r24, r24
    594e:	99 1f       	adc	r25, r25
    5950:	9c 01       	movw	r18, r24
    5952:	22 0f       	add	r18, r18
    5954:	33 1f       	adc	r19, r19
    5956:	22 0f       	add	r18, r18
    5958:	33 1f       	adc	r19, r19
    595a:	22 0f       	add	r18, r18
    595c:	33 1f       	adc	r19, r19
    595e:	82 0f       	add	r24, r18
    5960:	93 1f       	adc	r25, r19
    5962:	84 0f       	add	r24, r20
    5964:	95 1f       	adc	r25, r21
    5966:	fc 01       	movw	r30, r24
    5968:	e1 57       	subi	r30, 0x71	; 113
    596a:	fe 4f       	sbci	r31, 0xFE	; 254
    596c:	90 81       	ld	r25, Z
    596e:	86 2f       	mov	r24, r22
    5970:	69 2f       	mov	r22, r25
    5972:	41 e0       	ldi	r20, 0x01	; 1
    5974:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5978:	28 2f       	mov	r18, r24
    597a:	30 e0       	ldi	r19, 0x00	; 0
    597c:	8d 81       	ldd	r24, Y+5	; 0x05
    597e:	8d 5f       	subi	r24, 0xFD	; 253
    5980:	8d 83       	std	Y+5, r24	; 0x05
    5982:	8d 81       	ldd	r24, Y+5	; 0x05
    5984:	88 2f       	mov	r24, r24
    5986:	90 e0       	ldi	r25, 0x00	; 0
    5988:	a9 01       	movw	r20, r18
    598a:	02 c0       	rjmp	.+4      	; 0x5990 <Seven_Sement_enuTurnOFF+0x3e2>
    598c:	44 0f       	add	r20, r20
    598e:	55 1f       	adc	r21, r21
    5990:	8a 95       	dec	r24
    5992:	e2 f7       	brpl	.-8      	; 0x598c <Seven_Sement_enuTurnOFF+0x3de>
    5994:	ca 01       	movw	r24, r20
    5996:	9c 01       	movw	r18, r24
    5998:	44 27       	eor	r20, r20
    599a:	37 fd       	sbrc	r19, 7
    599c:	40 95       	com	r20
    599e:	54 2f       	mov	r21, r20
    59a0:	89 81       	ldd	r24, Y+1	; 0x01
    59a2:	9a 81       	ldd	r25, Y+2	; 0x02
    59a4:	ab 81       	ldd	r26, Y+3	; 0x03
    59a6:	bc 81       	ldd	r27, Y+4	; 0x04
    59a8:	82 2b       	or	r24, r18
    59aa:	93 2b       	or	r25, r19
    59ac:	a4 2b       	or	r26, r20
    59ae:	b5 2b       	or	r27, r21
    59b0:	89 83       	std	Y+1, r24	; 0x01
    59b2:	9a 83       	std	Y+2, r25	; 0x02
    59b4:	ab 83       	std	Y+3, r26	; 0x03
    59b6:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPIN, DIO_u8HIGH) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    59b8:	8f 81       	ldd	r24, Y+7	; 0x07
    59ba:	48 2f       	mov	r20, r24
    59bc:	50 e0       	ldi	r21, 0x00	; 0
    59be:	ca 01       	movw	r24, r20
    59c0:	88 0f       	add	r24, r24
    59c2:	99 1f       	adc	r25, r25
    59c4:	9c 01       	movw	r18, r24
    59c6:	22 0f       	add	r18, r18
    59c8:	33 1f       	adc	r19, r19
    59ca:	22 0f       	add	r18, r18
    59cc:	33 1f       	adc	r19, r19
    59ce:	22 0f       	add	r18, r18
    59d0:	33 1f       	adc	r19, r19
    59d2:	82 0f       	add	r24, r18
    59d4:	93 1f       	adc	r25, r19
    59d6:	84 0f       	add	r24, r20
    59d8:	95 1f       	adc	r25, r21
    59da:	fc 01       	movw	r30, r24
    59dc:	e0 57       	subi	r30, 0x70	; 112
    59de:	fe 4f       	sbci	r31, 0xFE	; 254
    59e0:	60 81       	ld	r22, Z
    59e2:	8f 81       	ldd	r24, Y+7	; 0x07
    59e4:	48 2f       	mov	r20, r24
    59e6:	50 e0       	ldi	r21, 0x00	; 0
    59e8:	ca 01       	movw	r24, r20
    59ea:	88 0f       	add	r24, r24
    59ec:	99 1f       	adc	r25, r25
    59ee:	9c 01       	movw	r18, r24
    59f0:	22 0f       	add	r18, r18
    59f2:	33 1f       	adc	r19, r19
    59f4:	22 0f       	add	r18, r18
    59f6:	33 1f       	adc	r19, r19
    59f8:	22 0f       	add	r18, r18
    59fa:	33 1f       	adc	r19, r19
    59fc:	82 0f       	add	r24, r18
    59fe:	93 1f       	adc	r25, r19
    5a00:	84 0f       	add	r24, r20
    5a02:	95 1f       	adc	r25, r21
    5a04:	fc 01       	movw	r30, r24
    5a06:	ef 56       	subi	r30, 0x6F	; 111
    5a08:	fe 4f       	sbci	r31, 0xFE	; 254
    5a0a:	90 81       	ld	r25, Z
    5a0c:	86 2f       	mov	r24, r22
    5a0e:	69 2f       	mov	r22, r25
    5a10:	41 e0       	ldi	r20, 0x01	; 1
    5a12:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5a16:	28 2f       	mov	r18, r24
    5a18:	30 e0       	ldi	r19, 0x00	; 0
    5a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    5a1c:	8d 5f       	subi	r24, 0xFD	; 253
    5a1e:	8d 83       	std	Y+5, r24	; 0x05
    5a20:	8d 81       	ldd	r24, Y+5	; 0x05
    5a22:	88 2f       	mov	r24, r24
    5a24:	90 e0       	ldi	r25, 0x00	; 0
    5a26:	a9 01       	movw	r20, r18
    5a28:	02 c0       	rjmp	.+4      	; 0x5a2e <Seven_Sement_enuTurnOFF+0x480>
    5a2a:	44 0f       	add	r20, r20
    5a2c:	55 1f       	adc	r21, r21
    5a2e:	8a 95       	dec	r24
    5a30:	e2 f7       	brpl	.-8      	; 0x5a2a <Seven_Sement_enuTurnOFF+0x47c>
    5a32:	ca 01       	movw	r24, r20
    5a34:	9c 01       	movw	r18, r24
    5a36:	44 27       	eor	r20, r20
    5a38:	37 fd       	sbrc	r19, 7
    5a3a:	40 95       	com	r20
    5a3c:	54 2f       	mov	r21, r20
    5a3e:	89 81       	ldd	r24, Y+1	; 0x01
    5a40:	9a 81       	ldd	r25, Y+2	; 0x02
    5a42:	ab 81       	ldd	r26, Y+3	; 0x03
    5a44:	bc 81       	ldd	r27, Y+4	; 0x04
    5a46:	82 2b       	or	r24, r18
    5a48:	93 2b       	or	r25, r19
    5a4a:	a4 2b       	or	r26, r20
    5a4c:	b5 2b       	or	r27, r21
    5a4e:	89 83       	std	Y+1, r24	; 0x01
    5a50:	9a 83       	std	Y+2, r25	; 0x02
    5a52:	ab 83       	std	Y+3, r26	; 0x03
    5a54:	bc 83       	std	Y+4, r27	; 0x04
			
			if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PORT != NOT_CONNECTED && SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PIN != NOT_CONNECTED)
    5a56:	8f 81       	ldd	r24, Y+7	; 0x07
    5a58:	48 2f       	mov	r20, r24
    5a5a:	50 e0       	ldi	r21, 0x00	; 0
    5a5c:	ca 01       	movw	r24, r20
    5a5e:	88 0f       	add	r24, r24
    5a60:	99 1f       	adc	r25, r25
    5a62:	9c 01       	movw	r18, r24
    5a64:	22 0f       	add	r18, r18
    5a66:	33 1f       	adc	r19, r19
    5a68:	22 0f       	add	r18, r18
    5a6a:	33 1f       	adc	r19, r19
    5a6c:	22 0f       	add	r18, r18
    5a6e:	33 1f       	adc	r19, r19
    5a70:	82 0f       	add	r24, r18
    5a72:	93 1f       	adc	r25, r19
    5a74:	84 0f       	add	r24, r20
    5a76:	95 1f       	adc	r25, r21
    5a78:	fc 01       	movw	r30, r24
    5a7a:	ec 56       	subi	r30, 0x6C	; 108
    5a7c:	fe 4f       	sbci	r31, 0xFE	; 254
    5a7e:	80 81       	ld	r24, Z
    5a80:	8a 30       	cpi	r24, 0x0A	; 10
    5a82:	09 f4       	brne	.+2      	; 0x5a86 <Seven_Sement_enuTurnOFF+0x4d8>
    5a84:	25 c3       	rjmp	.+1610   	; 0x60d0 <Seven_Sement_enuTurnOFF+0xb22>
    5a86:	8f 81       	ldd	r24, Y+7	; 0x07
    5a88:	48 2f       	mov	r20, r24
    5a8a:	50 e0       	ldi	r21, 0x00	; 0
    5a8c:	ca 01       	movw	r24, r20
    5a8e:	88 0f       	add	r24, r24
    5a90:	99 1f       	adc	r25, r25
    5a92:	9c 01       	movw	r18, r24
    5a94:	22 0f       	add	r18, r18
    5a96:	33 1f       	adc	r19, r19
    5a98:	22 0f       	add	r18, r18
    5a9a:	33 1f       	adc	r19, r19
    5a9c:	22 0f       	add	r18, r18
    5a9e:	33 1f       	adc	r19, r19
    5aa0:	82 0f       	add	r24, r18
    5aa2:	93 1f       	adc	r25, r19
    5aa4:	84 0f       	add	r24, r20
    5aa6:	95 1f       	adc	r25, r21
    5aa8:	fc 01       	movw	r30, r24
    5aaa:	eb 56       	subi	r30, 0x6B	; 107
    5aac:	fe 4f       	sbci	r31, 0xFE	; 254
    5aae:	80 81       	ld	r24, Z
    5ab0:	8a 30       	cpi	r24, 0x0A	; 10
    5ab2:	09 f4       	brne	.+2      	; 0x5ab6 <Seven_Sement_enuTurnOFF+0x508>
    5ab4:	0d c3       	rjmp	.+1562   	; 0x60d0 <Seven_Sement_enuTurnOFF+0xb22>
			{
				Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PIN, DIO_u8HIGH) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    5ab6:	8f 81       	ldd	r24, Y+7	; 0x07
    5ab8:	48 2f       	mov	r20, r24
    5aba:	50 e0       	ldi	r21, 0x00	; 0
    5abc:	ca 01       	movw	r24, r20
    5abe:	88 0f       	add	r24, r24
    5ac0:	99 1f       	adc	r25, r25
    5ac2:	9c 01       	movw	r18, r24
    5ac4:	22 0f       	add	r18, r18
    5ac6:	33 1f       	adc	r19, r19
    5ac8:	22 0f       	add	r18, r18
    5aca:	33 1f       	adc	r19, r19
    5acc:	22 0f       	add	r18, r18
    5ace:	33 1f       	adc	r19, r19
    5ad0:	82 0f       	add	r24, r18
    5ad2:	93 1f       	adc	r25, r19
    5ad4:	84 0f       	add	r24, r20
    5ad6:	95 1f       	adc	r25, r21
    5ad8:	fc 01       	movw	r30, r24
    5ada:	ec 56       	subi	r30, 0x6C	; 108
    5adc:	fe 4f       	sbci	r31, 0xFE	; 254
    5ade:	60 81       	ld	r22, Z
    5ae0:	8f 81       	ldd	r24, Y+7	; 0x07
    5ae2:	48 2f       	mov	r20, r24
    5ae4:	50 e0       	ldi	r21, 0x00	; 0
    5ae6:	ca 01       	movw	r24, r20
    5ae8:	88 0f       	add	r24, r24
    5aea:	99 1f       	adc	r25, r25
    5aec:	9c 01       	movw	r18, r24
    5aee:	22 0f       	add	r18, r18
    5af0:	33 1f       	adc	r19, r19
    5af2:	22 0f       	add	r18, r18
    5af4:	33 1f       	adc	r19, r19
    5af6:	22 0f       	add	r18, r18
    5af8:	33 1f       	adc	r19, r19
    5afa:	82 0f       	add	r24, r18
    5afc:	93 1f       	adc	r25, r19
    5afe:	84 0f       	add	r24, r20
    5b00:	95 1f       	adc	r25, r21
    5b02:	fc 01       	movw	r30, r24
    5b04:	eb 56       	subi	r30, 0x6B	; 107
    5b06:	fe 4f       	sbci	r31, 0xFE	; 254
    5b08:	90 81       	ld	r25, Z
    5b0a:	86 2f       	mov	r24, r22
    5b0c:	69 2f       	mov	r22, r25
    5b0e:	41 e0       	ldi	r20, 0x01	; 1
    5b10:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5b14:	28 2f       	mov	r18, r24
    5b16:	30 e0       	ldi	r19, 0x00	; 0
    5b18:	8d 81       	ldd	r24, Y+5	; 0x05
    5b1a:	8d 5f       	subi	r24, 0xFD	; 253
    5b1c:	8d 83       	std	Y+5, r24	; 0x05
    5b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    5b20:	88 2f       	mov	r24, r24
    5b22:	90 e0       	ldi	r25, 0x00	; 0
    5b24:	a9 01       	movw	r20, r18
    5b26:	02 c0       	rjmp	.+4      	; 0x5b2c <Seven_Sement_enuTurnOFF+0x57e>
    5b28:	44 0f       	add	r20, r20
    5b2a:	55 1f       	adc	r21, r21
    5b2c:	8a 95       	dec	r24
    5b2e:	e2 f7       	brpl	.-8      	; 0x5b28 <Seven_Sement_enuTurnOFF+0x57a>
    5b30:	ca 01       	movw	r24, r20
    5b32:	9c 01       	movw	r18, r24
    5b34:	44 27       	eor	r20, r20
    5b36:	37 fd       	sbrc	r19, 7
    5b38:	40 95       	com	r20
    5b3a:	54 2f       	mov	r21, r20
    5b3c:	89 81       	ldd	r24, Y+1	; 0x01
    5b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    5b40:	ab 81       	ldd	r26, Y+3	; 0x03
    5b42:	bc 81       	ldd	r27, Y+4	; 0x04
    5b44:	82 2b       	or	r24, r18
    5b46:	93 2b       	or	r25, r19
    5b48:	a4 2b       	or	r26, r20
    5b4a:	b5 2b       	or	r27, r21
    5b4c:	89 83       	std	Y+1, r24	; 0x01
    5b4e:	9a 83       	std	Y+2, r25	; 0x02
    5b50:	ab 83       	std	Y+3, r26	; 0x03
    5b52:	bc 83       	std	Y+4, r27	; 0x04
    5b54:	bd c2       	rjmp	.+1402   	; 0x60d0 <Seven_Sement_enuTurnOFF+0xb22>
			}
		}
		else if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_CATHODE)
    5b56:	8f 81       	ldd	r24, Y+7	; 0x07
    5b58:	48 2f       	mov	r20, r24
    5b5a:	50 e0       	ldi	r21, 0x00	; 0
    5b5c:	ca 01       	movw	r24, r20
    5b5e:	88 0f       	add	r24, r24
    5b60:	99 1f       	adc	r25, r25
    5b62:	9c 01       	movw	r18, r24
    5b64:	22 0f       	add	r18, r18
    5b66:	33 1f       	adc	r19, r19
    5b68:	22 0f       	add	r18, r18
    5b6a:	33 1f       	adc	r19, r19
    5b6c:	22 0f       	add	r18, r18
    5b6e:	33 1f       	adc	r19, r19
    5b70:	82 0f       	add	r24, r18
    5b72:	93 1f       	adc	r25, r19
    5b74:	84 0f       	add	r24, r20
    5b76:	95 1f       	adc	r25, r21
    5b78:	fc 01       	movw	r30, r24
    5b7a:	ea 56       	subi	r30, 0x6A	; 106
    5b7c:	fe 4f       	sbci	r31, 0xFE	; 254
    5b7e:	80 81       	ld	r24, Z
    5b80:	86 30       	cpi	r24, 0x06	; 6
    5b82:	09 f0       	breq	.+2      	; 0x5b86 <Seven_Sement_enuTurnOFF+0x5d8>
    5b84:	a5 c2       	rjmp	.+1354   	; 0x60d0 <Seven_Sement_enuTurnOFF+0xb22>
		{
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_APORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_APIN, DIO_u8LOW) << Local_u8Iterator_Error);
    5b86:	8f 81       	ldd	r24, Y+7	; 0x07
    5b88:	48 2f       	mov	r20, r24
    5b8a:	50 e0       	ldi	r21, 0x00	; 0
    5b8c:	ca 01       	movw	r24, r20
    5b8e:	88 0f       	add	r24, r24
    5b90:	99 1f       	adc	r25, r25
    5b92:	9c 01       	movw	r18, r24
    5b94:	22 0f       	add	r18, r18
    5b96:	33 1f       	adc	r19, r19
    5b98:	22 0f       	add	r18, r18
    5b9a:	33 1f       	adc	r19, r19
    5b9c:	22 0f       	add	r18, r18
    5b9e:	33 1f       	adc	r19, r19
    5ba0:	82 0f       	add	r24, r18
    5ba2:	93 1f       	adc	r25, r19
    5ba4:	84 0f       	add	r24, r20
    5ba6:	95 1f       	adc	r25, r21
    5ba8:	fc 01       	movw	r30, r24
    5baa:	ec 57       	subi	r30, 0x7C	; 124
    5bac:	fe 4f       	sbci	r31, 0xFE	; 254
    5bae:	60 81       	ld	r22, Z
    5bb0:	8f 81       	ldd	r24, Y+7	; 0x07
    5bb2:	48 2f       	mov	r20, r24
    5bb4:	50 e0       	ldi	r21, 0x00	; 0
    5bb6:	ca 01       	movw	r24, r20
    5bb8:	88 0f       	add	r24, r24
    5bba:	99 1f       	adc	r25, r25
    5bbc:	9c 01       	movw	r18, r24
    5bbe:	22 0f       	add	r18, r18
    5bc0:	33 1f       	adc	r19, r19
    5bc2:	22 0f       	add	r18, r18
    5bc4:	33 1f       	adc	r19, r19
    5bc6:	22 0f       	add	r18, r18
    5bc8:	33 1f       	adc	r19, r19
    5bca:	82 0f       	add	r24, r18
    5bcc:	93 1f       	adc	r25, r19
    5bce:	84 0f       	add	r24, r20
    5bd0:	95 1f       	adc	r25, r21
    5bd2:	fc 01       	movw	r30, r24
    5bd4:	eb 57       	subi	r30, 0x7B	; 123
    5bd6:	fe 4f       	sbci	r31, 0xFE	; 254
    5bd8:	90 81       	ld	r25, Z
    5bda:	86 2f       	mov	r24, r22
    5bdc:	69 2f       	mov	r22, r25
    5bde:	40 e0       	ldi	r20, 0x00	; 0
    5be0:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5be4:	28 2f       	mov	r18, r24
    5be6:	30 e0       	ldi	r19, 0x00	; 0
    5be8:	8d 81       	ldd	r24, Y+5	; 0x05
    5bea:	88 2f       	mov	r24, r24
    5bec:	90 e0       	ldi	r25, 0x00	; 0
    5bee:	a9 01       	movw	r20, r18
    5bf0:	02 c0       	rjmp	.+4      	; 0x5bf6 <Seven_Sement_enuTurnOFF+0x648>
    5bf2:	44 0f       	add	r20, r20
    5bf4:	55 1f       	adc	r21, r21
    5bf6:	8a 95       	dec	r24
    5bf8:	e2 f7       	brpl	.-8      	; 0x5bf2 <Seven_Sement_enuTurnOFF+0x644>
    5bfa:	ca 01       	movw	r24, r20
    5bfc:	9c 01       	movw	r18, r24
    5bfe:	44 27       	eor	r20, r20
    5c00:	37 fd       	sbrc	r19, 7
    5c02:	40 95       	com	r20
    5c04:	54 2f       	mov	r21, r20
    5c06:	89 81       	ldd	r24, Y+1	; 0x01
    5c08:	9a 81       	ldd	r25, Y+2	; 0x02
    5c0a:	ab 81       	ldd	r26, Y+3	; 0x03
    5c0c:	bc 81       	ldd	r27, Y+4	; 0x04
    5c0e:	82 2b       	or	r24, r18
    5c10:	93 2b       	or	r25, r19
    5c12:	a4 2b       	or	r26, r20
    5c14:	b5 2b       	or	r27, r21
    5c16:	89 83       	std	Y+1, r24	; 0x01
    5c18:	9a 83       	std	Y+2, r25	; 0x02
    5c1a:	ab 83       	std	Y+3, r26	; 0x03
    5c1c:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_BPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_BPIN, DIO_u8LOW) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    5c1e:	8f 81       	ldd	r24, Y+7	; 0x07
    5c20:	48 2f       	mov	r20, r24
    5c22:	50 e0       	ldi	r21, 0x00	; 0
    5c24:	ca 01       	movw	r24, r20
    5c26:	88 0f       	add	r24, r24
    5c28:	99 1f       	adc	r25, r25
    5c2a:	9c 01       	movw	r18, r24
    5c2c:	22 0f       	add	r18, r18
    5c2e:	33 1f       	adc	r19, r19
    5c30:	22 0f       	add	r18, r18
    5c32:	33 1f       	adc	r19, r19
    5c34:	22 0f       	add	r18, r18
    5c36:	33 1f       	adc	r19, r19
    5c38:	82 0f       	add	r24, r18
    5c3a:	93 1f       	adc	r25, r19
    5c3c:	84 0f       	add	r24, r20
    5c3e:	95 1f       	adc	r25, r21
    5c40:	fc 01       	movw	r30, r24
    5c42:	ea 57       	subi	r30, 0x7A	; 122
    5c44:	fe 4f       	sbci	r31, 0xFE	; 254
    5c46:	60 81       	ld	r22, Z
    5c48:	8f 81       	ldd	r24, Y+7	; 0x07
    5c4a:	48 2f       	mov	r20, r24
    5c4c:	50 e0       	ldi	r21, 0x00	; 0
    5c4e:	ca 01       	movw	r24, r20
    5c50:	88 0f       	add	r24, r24
    5c52:	99 1f       	adc	r25, r25
    5c54:	9c 01       	movw	r18, r24
    5c56:	22 0f       	add	r18, r18
    5c58:	33 1f       	adc	r19, r19
    5c5a:	22 0f       	add	r18, r18
    5c5c:	33 1f       	adc	r19, r19
    5c5e:	22 0f       	add	r18, r18
    5c60:	33 1f       	adc	r19, r19
    5c62:	82 0f       	add	r24, r18
    5c64:	93 1f       	adc	r25, r19
    5c66:	84 0f       	add	r24, r20
    5c68:	95 1f       	adc	r25, r21
    5c6a:	fc 01       	movw	r30, r24
    5c6c:	e9 57       	subi	r30, 0x79	; 121
    5c6e:	fe 4f       	sbci	r31, 0xFE	; 254
    5c70:	90 81       	ld	r25, Z
    5c72:	86 2f       	mov	r24, r22
    5c74:	69 2f       	mov	r22, r25
    5c76:	40 e0       	ldi	r20, 0x00	; 0
    5c78:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5c7c:	28 2f       	mov	r18, r24
    5c7e:	30 e0       	ldi	r19, 0x00	; 0
    5c80:	8d 81       	ldd	r24, Y+5	; 0x05
    5c82:	8d 5f       	subi	r24, 0xFD	; 253
    5c84:	8d 83       	std	Y+5, r24	; 0x05
    5c86:	8d 81       	ldd	r24, Y+5	; 0x05
    5c88:	88 2f       	mov	r24, r24
    5c8a:	90 e0       	ldi	r25, 0x00	; 0
    5c8c:	a9 01       	movw	r20, r18
    5c8e:	02 c0       	rjmp	.+4      	; 0x5c94 <Seven_Sement_enuTurnOFF+0x6e6>
    5c90:	44 0f       	add	r20, r20
    5c92:	55 1f       	adc	r21, r21
    5c94:	8a 95       	dec	r24
    5c96:	e2 f7       	brpl	.-8      	; 0x5c90 <Seven_Sement_enuTurnOFF+0x6e2>
    5c98:	ca 01       	movw	r24, r20
    5c9a:	9c 01       	movw	r18, r24
    5c9c:	44 27       	eor	r20, r20
    5c9e:	37 fd       	sbrc	r19, 7
    5ca0:	40 95       	com	r20
    5ca2:	54 2f       	mov	r21, r20
    5ca4:	89 81       	ldd	r24, Y+1	; 0x01
    5ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    5ca8:	ab 81       	ldd	r26, Y+3	; 0x03
    5caa:	bc 81       	ldd	r27, Y+4	; 0x04
    5cac:	82 2b       	or	r24, r18
    5cae:	93 2b       	or	r25, r19
    5cb0:	a4 2b       	or	r26, r20
    5cb2:	b5 2b       	or	r27, r21
    5cb4:	89 83       	std	Y+1, r24	; 0x01
    5cb6:	9a 83       	std	Y+2, r25	; 0x02
    5cb8:	ab 83       	std	Y+3, r26	; 0x03
    5cba:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CPIN, DIO_u8LOW) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    5cbc:	8f 81       	ldd	r24, Y+7	; 0x07
    5cbe:	48 2f       	mov	r20, r24
    5cc0:	50 e0       	ldi	r21, 0x00	; 0
    5cc2:	ca 01       	movw	r24, r20
    5cc4:	88 0f       	add	r24, r24
    5cc6:	99 1f       	adc	r25, r25
    5cc8:	9c 01       	movw	r18, r24
    5cca:	22 0f       	add	r18, r18
    5ccc:	33 1f       	adc	r19, r19
    5cce:	22 0f       	add	r18, r18
    5cd0:	33 1f       	adc	r19, r19
    5cd2:	22 0f       	add	r18, r18
    5cd4:	33 1f       	adc	r19, r19
    5cd6:	82 0f       	add	r24, r18
    5cd8:	93 1f       	adc	r25, r19
    5cda:	84 0f       	add	r24, r20
    5cdc:	95 1f       	adc	r25, r21
    5cde:	fc 01       	movw	r30, r24
    5ce0:	e8 57       	subi	r30, 0x78	; 120
    5ce2:	fe 4f       	sbci	r31, 0xFE	; 254
    5ce4:	60 81       	ld	r22, Z
    5ce6:	8f 81       	ldd	r24, Y+7	; 0x07
    5ce8:	48 2f       	mov	r20, r24
    5cea:	50 e0       	ldi	r21, 0x00	; 0
    5cec:	ca 01       	movw	r24, r20
    5cee:	88 0f       	add	r24, r24
    5cf0:	99 1f       	adc	r25, r25
    5cf2:	9c 01       	movw	r18, r24
    5cf4:	22 0f       	add	r18, r18
    5cf6:	33 1f       	adc	r19, r19
    5cf8:	22 0f       	add	r18, r18
    5cfa:	33 1f       	adc	r19, r19
    5cfc:	22 0f       	add	r18, r18
    5cfe:	33 1f       	adc	r19, r19
    5d00:	82 0f       	add	r24, r18
    5d02:	93 1f       	adc	r25, r19
    5d04:	84 0f       	add	r24, r20
    5d06:	95 1f       	adc	r25, r21
    5d08:	fc 01       	movw	r30, r24
    5d0a:	e7 57       	subi	r30, 0x77	; 119
    5d0c:	fe 4f       	sbci	r31, 0xFE	; 254
    5d0e:	90 81       	ld	r25, Z
    5d10:	86 2f       	mov	r24, r22
    5d12:	69 2f       	mov	r22, r25
    5d14:	40 e0       	ldi	r20, 0x00	; 0
    5d16:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5d1a:	28 2f       	mov	r18, r24
    5d1c:	30 e0       	ldi	r19, 0x00	; 0
    5d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    5d20:	8d 5f       	subi	r24, 0xFD	; 253
    5d22:	8d 83       	std	Y+5, r24	; 0x05
    5d24:	8d 81       	ldd	r24, Y+5	; 0x05
    5d26:	88 2f       	mov	r24, r24
    5d28:	90 e0       	ldi	r25, 0x00	; 0
    5d2a:	a9 01       	movw	r20, r18
    5d2c:	02 c0       	rjmp	.+4      	; 0x5d32 <Seven_Sement_enuTurnOFF+0x784>
    5d2e:	44 0f       	add	r20, r20
    5d30:	55 1f       	adc	r21, r21
    5d32:	8a 95       	dec	r24
    5d34:	e2 f7       	brpl	.-8      	; 0x5d2e <Seven_Sement_enuTurnOFF+0x780>
    5d36:	ca 01       	movw	r24, r20
    5d38:	9c 01       	movw	r18, r24
    5d3a:	44 27       	eor	r20, r20
    5d3c:	37 fd       	sbrc	r19, 7
    5d3e:	40 95       	com	r20
    5d40:	54 2f       	mov	r21, r20
    5d42:	89 81       	ldd	r24, Y+1	; 0x01
    5d44:	9a 81       	ldd	r25, Y+2	; 0x02
    5d46:	ab 81       	ldd	r26, Y+3	; 0x03
    5d48:	bc 81       	ldd	r27, Y+4	; 0x04
    5d4a:	82 2b       	or	r24, r18
    5d4c:	93 2b       	or	r25, r19
    5d4e:	a4 2b       	or	r26, r20
    5d50:	b5 2b       	or	r27, r21
    5d52:	89 83       	std	Y+1, r24	; 0x01
    5d54:	9a 83       	std	Y+2, r25	; 0x02
    5d56:	ab 83       	std	Y+3, r26	; 0x03
    5d58:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DPIN, DIO_u8LOW) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    5d5a:	8f 81       	ldd	r24, Y+7	; 0x07
    5d5c:	48 2f       	mov	r20, r24
    5d5e:	50 e0       	ldi	r21, 0x00	; 0
    5d60:	ca 01       	movw	r24, r20
    5d62:	88 0f       	add	r24, r24
    5d64:	99 1f       	adc	r25, r25
    5d66:	9c 01       	movw	r18, r24
    5d68:	22 0f       	add	r18, r18
    5d6a:	33 1f       	adc	r19, r19
    5d6c:	22 0f       	add	r18, r18
    5d6e:	33 1f       	adc	r19, r19
    5d70:	22 0f       	add	r18, r18
    5d72:	33 1f       	adc	r19, r19
    5d74:	82 0f       	add	r24, r18
    5d76:	93 1f       	adc	r25, r19
    5d78:	84 0f       	add	r24, r20
    5d7a:	95 1f       	adc	r25, r21
    5d7c:	fc 01       	movw	r30, r24
    5d7e:	e6 57       	subi	r30, 0x76	; 118
    5d80:	fe 4f       	sbci	r31, 0xFE	; 254
    5d82:	60 81       	ld	r22, Z
    5d84:	8f 81       	ldd	r24, Y+7	; 0x07
    5d86:	48 2f       	mov	r20, r24
    5d88:	50 e0       	ldi	r21, 0x00	; 0
    5d8a:	ca 01       	movw	r24, r20
    5d8c:	88 0f       	add	r24, r24
    5d8e:	99 1f       	adc	r25, r25
    5d90:	9c 01       	movw	r18, r24
    5d92:	22 0f       	add	r18, r18
    5d94:	33 1f       	adc	r19, r19
    5d96:	22 0f       	add	r18, r18
    5d98:	33 1f       	adc	r19, r19
    5d9a:	22 0f       	add	r18, r18
    5d9c:	33 1f       	adc	r19, r19
    5d9e:	82 0f       	add	r24, r18
    5da0:	93 1f       	adc	r25, r19
    5da2:	84 0f       	add	r24, r20
    5da4:	95 1f       	adc	r25, r21
    5da6:	fc 01       	movw	r30, r24
    5da8:	e5 57       	subi	r30, 0x75	; 117
    5daa:	fe 4f       	sbci	r31, 0xFE	; 254
    5dac:	90 81       	ld	r25, Z
    5dae:	86 2f       	mov	r24, r22
    5db0:	69 2f       	mov	r22, r25
    5db2:	40 e0       	ldi	r20, 0x00	; 0
    5db4:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5db8:	28 2f       	mov	r18, r24
    5dba:	30 e0       	ldi	r19, 0x00	; 0
    5dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    5dbe:	8d 5f       	subi	r24, 0xFD	; 253
    5dc0:	8d 83       	std	Y+5, r24	; 0x05
    5dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    5dc4:	88 2f       	mov	r24, r24
    5dc6:	90 e0       	ldi	r25, 0x00	; 0
    5dc8:	a9 01       	movw	r20, r18
    5dca:	02 c0       	rjmp	.+4      	; 0x5dd0 <Seven_Sement_enuTurnOFF+0x822>
    5dcc:	44 0f       	add	r20, r20
    5dce:	55 1f       	adc	r21, r21
    5dd0:	8a 95       	dec	r24
    5dd2:	e2 f7       	brpl	.-8      	; 0x5dcc <Seven_Sement_enuTurnOFF+0x81e>
    5dd4:	ca 01       	movw	r24, r20
    5dd6:	9c 01       	movw	r18, r24
    5dd8:	44 27       	eor	r20, r20
    5dda:	37 fd       	sbrc	r19, 7
    5ddc:	40 95       	com	r20
    5dde:	54 2f       	mov	r21, r20
    5de0:	89 81       	ldd	r24, Y+1	; 0x01
    5de2:	9a 81       	ldd	r25, Y+2	; 0x02
    5de4:	ab 81       	ldd	r26, Y+3	; 0x03
    5de6:	bc 81       	ldd	r27, Y+4	; 0x04
    5de8:	82 2b       	or	r24, r18
    5dea:	93 2b       	or	r25, r19
    5dec:	a4 2b       	or	r26, r20
    5dee:	b5 2b       	or	r27, r21
    5df0:	89 83       	std	Y+1, r24	; 0x01
    5df2:	9a 83       	std	Y+2, r25	; 0x02
    5df4:	ab 83       	std	Y+3, r26	; 0x03
    5df6:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPIN, DIO_u8LOW) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    5df8:	8f 81       	ldd	r24, Y+7	; 0x07
    5dfa:	48 2f       	mov	r20, r24
    5dfc:	50 e0       	ldi	r21, 0x00	; 0
    5dfe:	ca 01       	movw	r24, r20
    5e00:	88 0f       	add	r24, r24
    5e02:	99 1f       	adc	r25, r25
    5e04:	9c 01       	movw	r18, r24
    5e06:	22 0f       	add	r18, r18
    5e08:	33 1f       	adc	r19, r19
    5e0a:	22 0f       	add	r18, r18
    5e0c:	33 1f       	adc	r19, r19
    5e0e:	22 0f       	add	r18, r18
    5e10:	33 1f       	adc	r19, r19
    5e12:	82 0f       	add	r24, r18
    5e14:	93 1f       	adc	r25, r19
    5e16:	84 0f       	add	r24, r20
    5e18:	95 1f       	adc	r25, r21
    5e1a:	fc 01       	movw	r30, r24
    5e1c:	e4 57       	subi	r30, 0x74	; 116
    5e1e:	fe 4f       	sbci	r31, 0xFE	; 254
    5e20:	60 81       	ld	r22, Z
    5e22:	8f 81       	ldd	r24, Y+7	; 0x07
    5e24:	48 2f       	mov	r20, r24
    5e26:	50 e0       	ldi	r21, 0x00	; 0
    5e28:	ca 01       	movw	r24, r20
    5e2a:	88 0f       	add	r24, r24
    5e2c:	99 1f       	adc	r25, r25
    5e2e:	9c 01       	movw	r18, r24
    5e30:	22 0f       	add	r18, r18
    5e32:	33 1f       	adc	r19, r19
    5e34:	22 0f       	add	r18, r18
    5e36:	33 1f       	adc	r19, r19
    5e38:	22 0f       	add	r18, r18
    5e3a:	33 1f       	adc	r19, r19
    5e3c:	82 0f       	add	r24, r18
    5e3e:	93 1f       	adc	r25, r19
    5e40:	84 0f       	add	r24, r20
    5e42:	95 1f       	adc	r25, r21
    5e44:	fc 01       	movw	r30, r24
    5e46:	e3 57       	subi	r30, 0x73	; 115
    5e48:	fe 4f       	sbci	r31, 0xFE	; 254
    5e4a:	90 81       	ld	r25, Z
    5e4c:	86 2f       	mov	r24, r22
    5e4e:	69 2f       	mov	r22, r25
    5e50:	40 e0       	ldi	r20, 0x00	; 0
    5e52:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5e56:	28 2f       	mov	r18, r24
    5e58:	30 e0       	ldi	r19, 0x00	; 0
    5e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    5e5c:	8d 5f       	subi	r24, 0xFD	; 253
    5e5e:	8d 83       	std	Y+5, r24	; 0x05
    5e60:	8d 81       	ldd	r24, Y+5	; 0x05
    5e62:	88 2f       	mov	r24, r24
    5e64:	90 e0       	ldi	r25, 0x00	; 0
    5e66:	a9 01       	movw	r20, r18
    5e68:	02 c0       	rjmp	.+4      	; 0x5e6e <Seven_Sement_enuTurnOFF+0x8c0>
    5e6a:	44 0f       	add	r20, r20
    5e6c:	55 1f       	adc	r21, r21
    5e6e:	8a 95       	dec	r24
    5e70:	e2 f7       	brpl	.-8      	; 0x5e6a <Seven_Sement_enuTurnOFF+0x8bc>
    5e72:	ca 01       	movw	r24, r20
    5e74:	9c 01       	movw	r18, r24
    5e76:	44 27       	eor	r20, r20
    5e78:	37 fd       	sbrc	r19, 7
    5e7a:	40 95       	com	r20
    5e7c:	54 2f       	mov	r21, r20
    5e7e:	89 81       	ldd	r24, Y+1	; 0x01
    5e80:	9a 81       	ldd	r25, Y+2	; 0x02
    5e82:	ab 81       	ldd	r26, Y+3	; 0x03
    5e84:	bc 81       	ldd	r27, Y+4	; 0x04
    5e86:	82 2b       	or	r24, r18
    5e88:	93 2b       	or	r25, r19
    5e8a:	a4 2b       	or	r26, r20
    5e8c:	b5 2b       	or	r27, r21
    5e8e:	89 83       	std	Y+1, r24	; 0x01
    5e90:	9a 83       	std	Y+2, r25	; 0x02
    5e92:	ab 83       	std	Y+3, r26	; 0x03
    5e94:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPIN, DIO_u8LOW) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    5e96:	8f 81       	ldd	r24, Y+7	; 0x07
    5e98:	48 2f       	mov	r20, r24
    5e9a:	50 e0       	ldi	r21, 0x00	; 0
    5e9c:	ca 01       	movw	r24, r20
    5e9e:	88 0f       	add	r24, r24
    5ea0:	99 1f       	adc	r25, r25
    5ea2:	9c 01       	movw	r18, r24
    5ea4:	22 0f       	add	r18, r18
    5ea6:	33 1f       	adc	r19, r19
    5ea8:	22 0f       	add	r18, r18
    5eaa:	33 1f       	adc	r19, r19
    5eac:	22 0f       	add	r18, r18
    5eae:	33 1f       	adc	r19, r19
    5eb0:	82 0f       	add	r24, r18
    5eb2:	93 1f       	adc	r25, r19
    5eb4:	84 0f       	add	r24, r20
    5eb6:	95 1f       	adc	r25, r21
    5eb8:	fc 01       	movw	r30, r24
    5eba:	e2 57       	subi	r30, 0x72	; 114
    5ebc:	fe 4f       	sbci	r31, 0xFE	; 254
    5ebe:	60 81       	ld	r22, Z
    5ec0:	8f 81       	ldd	r24, Y+7	; 0x07
    5ec2:	48 2f       	mov	r20, r24
    5ec4:	50 e0       	ldi	r21, 0x00	; 0
    5ec6:	ca 01       	movw	r24, r20
    5ec8:	88 0f       	add	r24, r24
    5eca:	99 1f       	adc	r25, r25
    5ecc:	9c 01       	movw	r18, r24
    5ece:	22 0f       	add	r18, r18
    5ed0:	33 1f       	adc	r19, r19
    5ed2:	22 0f       	add	r18, r18
    5ed4:	33 1f       	adc	r19, r19
    5ed6:	22 0f       	add	r18, r18
    5ed8:	33 1f       	adc	r19, r19
    5eda:	82 0f       	add	r24, r18
    5edc:	93 1f       	adc	r25, r19
    5ede:	84 0f       	add	r24, r20
    5ee0:	95 1f       	adc	r25, r21
    5ee2:	fc 01       	movw	r30, r24
    5ee4:	e1 57       	subi	r30, 0x71	; 113
    5ee6:	fe 4f       	sbci	r31, 0xFE	; 254
    5ee8:	90 81       	ld	r25, Z
    5eea:	86 2f       	mov	r24, r22
    5eec:	69 2f       	mov	r22, r25
    5eee:	40 e0       	ldi	r20, 0x00	; 0
    5ef0:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5ef4:	28 2f       	mov	r18, r24
    5ef6:	30 e0       	ldi	r19, 0x00	; 0
    5ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    5efa:	8d 5f       	subi	r24, 0xFD	; 253
    5efc:	8d 83       	std	Y+5, r24	; 0x05
    5efe:	8d 81       	ldd	r24, Y+5	; 0x05
    5f00:	88 2f       	mov	r24, r24
    5f02:	90 e0       	ldi	r25, 0x00	; 0
    5f04:	a9 01       	movw	r20, r18
    5f06:	02 c0       	rjmp	.+4      	; 0x5f0c <Seven_Sement_enuTurnOFF+0x95e>
    5f08:	44 0f       	add	r20, r20
    5f0a:	55 1f       	adc	r21, r21
    5f0c:	8a 95       	dec	r24
    5f0e:	e2 f7       	brpl	.-8      	; 0x5f08 <Seven_Sement_enuTurnOFF+0x95a>
    5f10:	ca 01       	movw	r24, r20
    5f12:	9c 01       	movw	r18, r24
    5f14:	44 27       	eor	r20, r20
    5f16:	37 fd       	sbrc	r19, 7
    5f18:	40 95       	com	r20
    5f1a:	54 2f       	mov	r21, r20
    5f1c:	89 81       	ldd	r24, Y+1	; 0x01
    5f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    5f20:	ab 81       	ldd	r26, Y+3	; 0x03
    5f22:	bc 81       	ldd	r27, Y+4	; 0x04
    5f24:	82 2b       	or	r24, r18
    5f26:	93 2b       	or	r25, r19
    5f28:	a4 2b       	or	r26, r20
    5f2a:	b5 2b       	or	r27, r21
    5f2c:	89 83       	std	Y+1, r24	; 0x01
    5f2e:	9a 83       	std	Y+2, r25	; 0x02
    5f30:	ab 83       	std	Y+3, r26	; 0x03
    5f32:	bc 83       	std	Y+4, r27	; 0x04
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPIN, DIO_u8LOW) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    5f34:	8f 81       	ldd	r24, Y+7	; 0x07
    5f36:	48 2f       	mov	r20, r24
    5f38:	50 e0       	ldi	r21, 0x00	; 0
    5f3a:	ca 01       	movw	r24, r20
    5f3c:	88 0f       	add	r24, r24
    5f3e:	99 1f       	adc	r25, r25
    5f40:	9c 01       	movw	r18, r24
    5f42:	22 0f       	add	r18, r18
    5f44:	33 1f       	adc	r19, r19
    5f46:	22 0f       	add	r18, r18
    5f48:	33 1f       	adc	r19, r19
    5f4a:	22 0f       	add	r18, r18
    5f4c:	33 1f       	adc	r19, r19
    5f4e:	82 0f       	add	r24, r18
    5f50:	93 1f       	adc	r25, r19
    5f52:	84 0f       	add	r24, r20
    5f54:	95 1f       	adc	r25, r21
    5f56:	fc 01       	movw	r30, r24
    5f58:	e0 57       	subi	r30, 0x70	; 112
    5f5a:	fe 4f       	sbci	r31, 0xFE	; 254
    5f5c:	60 81       	ld	r22, Z
    5f5e:	8f 81       	ldd	r24, Y+7	; 0x07
    5f60:	48 2f       	mov	r20, r24
    5f62:	50 e0       	ldi	r21, 0x00	; 0
    5f64:	ca 01       	movw	r24, r20
    5f66:	88 0f       	add	r24, r24
    5f68:	99 1f       	adc	r25, r25
    5f6a:	9c 01       	movw	r18, r24
    5f6c:	22 0f       	add	r18, r18
    5f6e:	33 1f       	adc	r19, r19
    5f70:	22 0f       	add	r18, r18
    5f72:	33 1f       	adc	r19, r19
    5f74:	22 0f       	add	r18, r18
    5f76:	33 1f       	adc	r19, r19
    5f78:	82 0f       	add	r24, r18
    5f7a:	93 1f       	adc	r25, r19
    5f7c:	84 0f       	add	r24, r20
    5f7e:	95 1f       	adc	r25, r21
    5f80:	fc 01       	movw	r30, r24
    5f82:	ef 56       	subi	r30, 0x6F	; 111
    5f84:	fe 4f       	sbci	r31, 0xFE	; 254
    5f86:	90 81       	ld	r25, Z
    5f88:	86 2f       	mov	r24, r22
    5f8a:	69 2f       	mov	r22, r25
    5f8c:	40 e0       	ldi	r20, 0x00	; 0
    5f8e:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    5f92:	28 2f       	mov	r18, r24
    5f94:	30 e0       	ldi	r19, 0x00	; 0
    5f96:	8d 81       	ldd	r24, Y+5	; 0x05
    5f98:	8d 5f       	subi	r24, 0xFD	; 253
    5f9a:	8d 83       	std	Y+5, r24	; 0x05
    5f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    5f9e:	88 2f       	mov	r24, r24
    5fa0:	90 e0       	ldi	r25, 0x00	; 0
    5fa2:	a9 01       	movw	r20, r18
    5fa4:	02 c0       	rjmp	.+4      	; 0x5faa <Seven_Sement_enuTurnOFF+0x9fc>
    5fa6:	44 0f       	add	r20, r20
    5fa8:	55 1f       	adc	r21, r21
    5faa:	8a 95       	dec	r24
    5fac:	e2 f7       	brpl	.-8      	; 0x5fa6 <Seven_Sement_enuTurnOFF+0x9f8>
    5fae:	ca 01       	movw	r24, r20
    5fb0:	9c 01       	movw	r18, r24
    5fb2:	44 27       	eor	r20, r20
    5fb4:	37 fd       	sbrc	r19, 7
    5fb6:	40 95       	com	r20
    5fb8:	54 2f       	mov	r21, r20
    5fba:	89 81       	ldd	r24, Y+1	; 0x01
    5fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    5fbe:	ab 81       	ldd	r26, Y+3	; 0x03
    5fc0:	bc 81       	ldd	r27, Y+4	; 0x04
    5fc2:	82 2b       	or	r24, r18
    5fc4:	93 2b       	or	r25, r19
    5fc6:	a4 2b       	or	r26, r20
    5fc8:	b5 2b       	or	r27, r21
    5fca:	89 83       	std	Y+1, r24	; 0x01
    5fcc:	9a 83       	std	Y+2, r25	; 0x02
    5fce:	ab 83       	std	Y+3, r26	; 0x03
    5fd0:	bc 83       	std	Y+4, r27	; 0x04
			
			if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PORT != NOT_CONNECTED && SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PIN != NOT_CONNECTED)
    5fd2:	8f 81       	ldd	r24, Y+7	; 0x07
    5fd4:	48 2f       	mov	r20, r24
    5fd6:	50 e0       	ldi	r21, 0x00	; 0
    5fd8:	ca 01       	movw	r24, r20
    5fda:	88 0f       	add	r24, r24
    5fdc:	99 1f       	adc	r25, r25
    5fde:	9c 01       	movw	r18, r24
    5fe0:	22 0f       	add	r18, r18
    5fe2:	33 1f       	adc	r19, r19
    5fe4:	22 0f       	add	r18, r18
    5fe6:	33 1f       	adc	r19, r19
    5fe8:	22 0f       	add	r18, r18
    5fea:	33 1f       	adc	r19, r19
    5fec:	82 0f       	add	r24, r18
    5fee:	93 1f       	adc	r25, r19
    5ff0:	84 0f       	add	r24, r20
    5ff2:	95 1f       	adc	r25, r21
    5ff4:	fc 01       	movw	r30, r24
    5ff6:	ec 56       	subi	r30, 0x6C	; 108
    5ff8:	fe 4f       	sbci	r31, 0xFE	; 254
    5ffa:	80 81       	ld	r24, Z
    5ffc:	8a 30       	cpi	r24, 0x0A	; 10
    5ffe:	09 f4       	brne	.+2      	; 0x6002 <Seven_Sement_enuTurnOFF+0xa54>
    6000:	67 c0       	rjmp	.+206    	; 0x60d0 <Seven_Sement_enuTurnOFF+0xb22>
    6002:	8f 81       	ldd	r24, Y+7	; 0x07
    6004:	48 2f       	mov	r20, r24
    6006:	50 e0       	ldi	r21, 0x00	; 0
    6008:	ca 01       	movw	r24, r20
    600a:	88 0f       	add	r24, r24
    600c:	99 1f       	adc	r25, r25
    600e:	9c 01       	movw	r18, r24
    6010:	22 0f       	add	r18, r18
    6012:	33 1f       	adc	r19, r19
    6014:	22 0f       	add	r18, r18
    6016:	33 1f       	adc	r19, r19
    6018:	22 0f       	add	r18, r18
    601a:	33 1f       	adc	r19, r19
    601c:	82 0f       	add	r24, r18
    601e:	93 1f       	adc	r25, r19
    6020:	84 0f       	add	r24, r20
    6022:	95 1f       	adc	r25, r21
    6024:	fc 01       	movw	r30, r24
    6026:	eb 56       	subi	r30, 0x6B	; 107
    6028:	fe 4f       	sbci	r31, 0xFE	; 254
    602a:	80 81       	ld	r24, Z
    602c:	8a 30       	cpi	r24, 0x0A	; 10
    602e:	09 f4       	brne	.+2      	; 0x6032 <Seven_Sement_enuTurnOFF+0xa84>
    6030:	4f c0       	rjmp	.+158    	; 0x60d0 <Seven_Sement_enuTurnOFF+0xb22>
			{
				Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PIN, DIO_u8LOW) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
    6032:	8f 81       	ldd	r24, Y+7	; 0x07
    6034:	48 2f       	mov	r20, r24
    6036:	50 e0       	ldi	r21, 0x00	; 0
    6038:	ca 01       	movw	r24, r20
    603a:	88 0f       	add	r24, r24
    603c:	99 1f       	adc	r25, r25
    603e:	9c 01       	movw	r18, r24
    6040:	22 0f       	add	r18, r18
    6042:	33 1f       	adc	r19, r19
    6044:	22 0f       	add	r18, r18
    6046:	33 1f       	adc	r19, r19
    6048:	22 0f       	add	r18, r18
    604a:	33 1f       	adc	r19, r19
    604c:	82 0f       	add	r24, r18
    604e:	93 1f       	adc	r25, r19
    6050:	84 0f       	add	r24, r20
    6052:	95 1f       	adc	r25, r21
    6054:	fc 01       	movw	r30, r24
    6056:	ec 56       	subi	r30, 0x6C	; 108
    6058:	fe 4f       	sbci	r31, 0xFE	; 254
    605a:	60 81       	ld	r22, Z
    605c:	8f 81       	ldd	r24, Y+7	; 0x07
    605e:	48 2f       	mov	r20, r24
    6060:	50 e0       	ldi	r21, 0x00	; 0
    6062:	ca 01       	movw	r24, r20
    6064:	88 0f       	add	r24, r24
    6066:	99 1f       	adc	r25, r25
    6068:	9c 01       	movw	r18, r24
    606a:	22 0f       	add	r18, r18
    606c:	33 1f       	adc	r19, r19
    606e:	22 0f       	add	r18, r18
    6070:	33 1f       	adc	r19, r19
    6072:	22 0f       	add	r18, r18
    6074:	33 1f       	adc	r19, r19
    6076:	82 0f       	add	r24, r18
    6078:	93 1f       	adc	r25, r19
    607a:	84 0f       	add	r24, r20
    607c:	95 1f       	adc	r25, r21
    607e:	fc 01       	movw	r30, r24
    6080:	eb 56       	subi	r30, 0x6B	; 107
    6082:	fe 4f       	sbci	r31, 0xFE	; 254
    6084:	90 81       	ld	r25, Z
    6086:	86 2f       	mov	r24, r22
    6088:	69 2f       	mov	r22, r25
    608a:	40 e0       	ldi	r20, 0x00	; 0
    608c:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6090:	28 2f       	mov	r18, r24
    6092:	30 e0       	ldi	r19, 0x00	; 0
    6094:	8d 81       	ldd	r24, Y+5	; 0x05
    6096:	8d 5f       	subi	r24, 0xFD	; 253
    6098:	8d 83       	std	Y+5, r24	; 0x05
    609a:	8d 81       	ldd	r24, Y+5	; 0x05
    609c:	88 2f       	mov	r24, r24
    609e:	90 e0       	ldi	r25, 0x00	; 0
    60a0:	a9 01       	movw	r20, r18
    60a2:	02 c0       	rjmp	.+4      	; 0x60a8 <Seven_Sement_enuTurnOFF+0xafa>
    60a4:	44 0f       	add	r20, r20
    60a6:	55 1f       	adc	r21, r21
    60a8:	8a 95       	dec	r24
    60aa:	e2 f7       	brpl	.-8      	; 0x60a4 <Seven_Sement_enuTurnOFF+0xaf6>
    60ac:	ca 01       	movw	r24, r20
    60ae:	9c 01       	movw	r18, r24
    60b0:	44 27       	eor	r20, r20
    60b2:	37 fd       	sbrc	r19, 7
    60b4:	40 95       	com	r20
    60b6:	54 2f       	mov	r21, r20
    60b8:	89 81       	ldd	r24, Y+1	; 0x01
    60ba:	9a 81       	ldd	r25, Y+2	; 0x02
    60bc:	ab 81       	ldd	r26, Y+3	; 0x03
    60be:	bc 81       	ldd	r27, Y+4	; 0x04
    60c0:	82 2b       	or	r24, r18
    60c2:	93 2b       	or	r25, r19
    60c4:	a4 2b       	or	r26, r20
    60c6:	b5 2b       	or	r27, r21
    60c8:	89 83       	std	Y+1, r24	; 0x01
    60ca:	9a 83       	std	Y+2, r25	; 0x02
    60cc:	ab 83       	std	Y+3, r26	; 0x03
    60ce:	bc 83       	std	Y+4, r27	; 0x04
			}
		}
		
		for(Local_u8Iterator_Error = 0; Local_u8Iterator_Error < sizeof(Local_u32CheckError)*8; Local_u8Iterator_Error += ERROR_STATE_SIZE)
    60d0:	1d 82       	std	Y+5, r1	; 0x05
    60d2:	1d c0       	rjmp	.+58     	; 0x610e <Seven_Sement_enuTurnOFF+0xb60>
		{
			if(((Local_u32CheckError >> Local_u8Iterator_Error) & ERROR_STATE_MASK) != ES_OK)
    60d4:	8d 81       	ldd	r24, Y+5	; 0x05
    60d6:	28 2f       	mov	r18, r24
    60d8:	30 e0       	ldi	r19, 0x00	; 0
    60da:	89 81       	ldd	r24, Y+1	; 0x01
    60dc:	9a 81       	ldd	r25, Y+2	; 0x02
    60de:	ab 81       	ldd	r26, Y+3	; 0x03
    60e0:	bc 81       	ldd	r27, Y+4	; 0x04
    60e2:	02 2e       	mov	r0, r18
    60e4:	04 c0       	rjmp	.+8      	; 0x60ee <Seven_Sement_enuTurnOFF+0xb40>
    60e6:	b6 95       	lsr	r27
    60e8:	a7 95       	ror	r26
    60ea:	97 95       	ror	r25
    60ec:	87 95       	ror	r24
    60ee:	0a 94       	dec	r0
    60f0:	d2 f7       	brpl	.-12     	; 0x60e6 <Seven_Sement_enuTurnOFF+0xb38>
    60f2:	87 70       	andi	r24, 0x07	; 7
    60f4:	90 70       	andi	r25, 0x00	; 0
    60f6:	a0 70       	andi	r26, 0x00	; 0
    60f8:	b0 70       	andi	r27, 0x00	; 0
    60fa:	00 97       	sbiw	r24, 0x00	; 0
    60fc:	a1 05       	cpc	r26, r1
    60fe:	b1 05       	cpc	r27, r1
    6100:	19 f0       	breq	.+6      	; 0x6108 <Seven_Sement_enuTurnOFF+0xb5a>
			{
				return ES_NOK;
    6102:	51 e0       	ldi	r21, 0x01	; 1
    6104:	58 87       	std	Y+8, r21	; 0x08
    6106:	0c c0       	rjmp	.+24     	; 0x6120 <Seven_Sement_enuTurnOFF+0xb72>
			{
				Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DOT_PIN, DIO_u8LOW) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			}
		}
		
		for(Local_u8Iterator_Error = 0; Local_u8Iterator_Error < sizeof(Local_u32CheckError)*8; Local_u8Iterator_Error += ERROR_STATE_SIZE)
    6108:	8d 81       	ldd	r24, Y+5	; 0x05
    610a:	8d 5f       	subi	r24, 0xFD	; 253
    610c:	8d 83       	std	Y+5, r24	; 0x05
    610e:	8d 81       	ldd	r24, Y+5	; 0x05
    6110:	80 32       	cpi	r24, 0x20	; 32
    6112:	00 f3       	brcs	.-64     	; 0x60d4 <Seven_Sement_enuTurnOFF+0xb26>
			if(((Local_u32CheckError >> Local_u8Iterator_Error) & ERROR_STATE_MASK) != ES_OK)
			{
				return ES_NOK;
			}
		}
		Local_enuErrorState = ES_OK;
    6114:	1e 82       	std	Y+6, r1	; 0x06
    6116:	02 c0       	rjmp	.+4      	; 0x611c <Seven_Sement_enuTurnOFF+0xb6e>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    6118:	83 e0       	ldi	r24, 0x03	; 3
    611a:	8e 83       	std	Y+6, r24	; 0x06
	}
	
	return Local_enuErrorState;
    611c:	8e 81       	ldd	r24, Y+6	; 0x06
    611e:	88 87       	std	Y+8, r24	; 0x08
    6120:	88 85       	ldd	r24, Y+8	; 0x08
    6122:	28 96       	adiw	r28, 0x08	; 8
    6124:	0f b6       	in	r0, 0x3f	; 63
    6126:	f8 94       	cli
    6128:	de bf       	out	0x3e, r29	; 62
    612a:	0f be       	out	0x3f, r0	; 63
    612c:	cd bf       	out	0x3d, r28	; 61
    612e:	cf 91       	pop	r28
    6130:	df 91       	pop	r29
    6132:	08 95       	ret

00006134 <LED_enuINIT>:

#include "LED_priv.h"
#include "LED_config.h"

ES_t LED_enuINIT(LED_t *Copy_pAstrLedConfig)
{
    6134:	df 93       	push	r29
    6136:	cf 93       	push	r28
    6138:	00 d0       	rcall	.+0      	; 0x613a <LED_enuINIT+0x6>
    613a:	00 d0       	rcall	.+0      	; 0x613c <LED_enuINIT+0x8>
    613c:	cd b7       	in	r28, 0x3d	; 61
    613e:	de b7       	in	r29, 0x3e	; 62
    6140:	9c 83       	std	Y+4, r25	; 0x04
    6142:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    6144:	81 e0       	ldi	r24, 0x01	; 1
    6146:	8a 83       	std	Y+2, r24	; 0x02
	
	if(Copy_pAstrLedConfig != NULL)
    6148:	8b 81       	ldd	r24, Y+3	; 0x03
    614a:	9c 81       	ldd	r25, Y+4	; 0x04
    614c:	00 97       	sbiw	r24, 0x00	; 0
    614e:	09 f4       	brne	.+2      	; 0x6152 <LED_enuINIT+0x1e>
    6150:	21 c1       	rjmp	.+578    	; 0x6394 <LED_enuINIT+0x260>
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < LED_NUM; Local_u8Iterator++)
    6152:	19 82       	std	Y+1, r1	; 0x01
    6154:	1a c1       	rjmp	.+564    	; 0x638a <LED_enuINIT+0x256>
		{
			DIO_enuSetPinDirection(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8OUTPUT);
    6156:	89 81       	ldd	r24, Y+1	; 0x01
    6158:	88 2f       	mov	r24, r24
    615a:	90 e0       	ldi	r25, 0x00	; 0
    615c:	9c 01       	movw	r18, r24
    615e:	22 0f       	add	r18, r18
    6160:	33 1f       	adc	r19, r19
    6162:	22 0f       	add	r18, r18
    6164:	33 1f       	adc	r19, r19
    6166:	8b 81       	ldd	r24, Y+3	; 0x03
    6168:	9c 81       	ldd	r25, Y+4	; 0x04
    616a:	fc 01       	movw	r30, r24
    616c:	e2 0f       	add	r30, r18
    616e:	f3 1f       	adc	r31, r19
    6170:	40 81       	ld	r20, Z
    6172:	89 81       	ldd	r24, Y+1	; 0x01
    6174:	88 2f       	mov	r24, r24
    6176:	90 e0       	ldi	r25, 0x00	; 0
    6178:	9c 01       	movw	r18, r24
    617a:	22 0f       	add	r18, r18
    617c:	33 1f       	adc	r19, r19
    617e:	22 0f       	add	r18, r18
    6180:	33 1f       	adc	r19, r19
    6182:	8b 81       	ldd	r24, Y+3	; 0x03
    6184:	9c 81       	ldd	r25, Y+4	; 0x04
    6186:	fc 01       	movw	r30, r24
    6188:	e2 0f       	add	r30, r18
    618a:	f3 1f       	adc	r31, r19
    618c:	91 81       	ldd	r25, Z+1	; 0x01
    618e:	84 2f       	mov	r24, r20
    6190:	69 2f       	mov	r22, r25
    6192:	41 e0       	ldi	r20, 0x01	; 1
    6194:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
			if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8Connection == LED_u8SINK)
    6198:	89 81       	ldd	r24, Y+1	; 0x01
    619a:	88 2f       	mov	r24, r24
    619c:	90 e0       	ldi	r25, 0x00	; 0
    619e:	9c 01       	movw	r18, r24
    61a0:	22 0f       	add	r18, r18
    61a2:	33 1f       	adc	r19, r19
    61a4:	22 0f       	add	r18, r18
    61a6:	33 1f       	adc	r19, r19
    61a8:	8b 81       	ldd	r24, Y+3	; 0x03
    61aa:	9c 81       	ldd	r25, Y+4	; 0x04
    61ac:	fc 01       	movw	r30, r24
    61ae:	e2 0f       	add	r30, r18
    61b0:	f3 1f       	adc	r31, r19
    61b2:	82 81       	ldd	r24, Z+2	; 0x02
    61b4:	8c 30       	cpi	r24, 0x0C	; 12
    61b6:	09 f0       	breq	.+2      	; 0x61ba <LED_enuINIT+0x86>
    61b8:	69 c0       	rjmp	.+210    	; 0x628c <LED_enuINIT+0x158>
			{
				if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_u8ON)
    61ba:	89 81       	ldd	r24, Y+1	; 0x01
    61bc:	88 2f       	mov	r24, r24
    61be:	90 e0       	ldi	r25, 0x00	; 0
    61c0:	9c 01       	movw	r18, r24
    61c2:	22 0f       	add	r18, r18
    61c4:	33 1f       	adc	r19, r19
    61c6:	22 0f       	add	r18, r18
    61c8:	33 1f       	adc	r19, r19
    61ca:	8b 81       	ldd	r24, Y+3	; 0x03
    61cc:	9c 81       	ldd	r25, Y+4	; 0x04
    61ce:	fc 01       	movw	r30, r24
    61d0:	e2 0f       	add	r30, r18
    61d2:	f3 1f       	adc	r31, r19
    61d4:	83 81       	ldd	r24, Z+3	; 0x03
    61d6:	8a 30       	cpi	r24, 0x0A	; 10
    61d8:	19 f5       	brne	.+70     	; 0x6220 <LED_enuINIT+0xec>
				{
					Local_enuErrorState = DIO_enuSetPinVal(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8LOW);
    61da:	89 81       	ldd	r24, Y+1	; 0x01
    61dc:	88 2f       	mov	r24, r24
    61de:	90 e0       	ldi	r25, 0x00	; 0
    61e0:	9c 01       	movw	r18, r24
    61e2:	22 0f       	add	r18, r18
    61e4:	33 1f       	adc	r19, r19
    61e6:	22 0f       	add	r18, r18
    61e8:	33 1f       	adc	r19, r19
    61ea:	8b 81       	ldd	r24, Y+3	; 0x03
    61ec:	9c 81       	ldd	r25, Y+4	; 0x04
    61ee:	fc 01       	movw	r30, r24
    61f0:	e2 0f       	add	r30, r18
    61f2:	f3 1f       	adc	r31, r19
    61f4:	40 81       	ld	r20, Z
    61f6:	89 81       	ldd	r24, Y+1	; 0x01
    61f8:	88 2f       	mov	r24, r24
    61fa:	90 e0       	ldi	r25, 0x00	; 0
    61fc:	9c 01       	movw	r18, r24
    61fe:	22 0f       	add	r18, r18
    6200:	33 1f       	adc	r19, r19
    6202:	22 0f       	add	r18, r18
    6204:	33 1f       	adc	r19, r19
    6206:	8b 81       	ldd	r24, Y+3	; 0x03
    6208:	9c 81       	ldd	r25, Y+4	; 0x04
    620a:	fc 01       	movw	r30, r24
    620c:	e2 0f       	add	r30, r18
    620e:	f3 1f       	adc	r31, r19
    6210:	91 81       	ldd	r25, Z+1	; 0x01
    6212:	84 2f       	mov	r24, r20
    6214:	69 2f       	mov	r22, r25
    6216:	40 e0       	ldi	r20, 0x00	; 0
    6218:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    621c:	8a 83       	std	Y+2, r24	; 0x02
    621e:	b2 c0       	rjmp	.+356    	; 0x6384 <LED_enuINIT+0x250>
				}
				else if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_u8OFF)
    6220:	89 81       	ldd	r24, Y+1	; 0x01
    6222:	88 2f       	mov	r24, r24
    6224:	90 e0       	ldi	r25, 0x00	; 0
    6226:	9c 01       	movw	r18, r24
    6228:	22 0f       	add	r18, r18
    622a:	33 1f       	adc	r19, r19
    622c:	22 0f       	add	r18, r18
    622e:	33 1f       	adc	r19, r19
    6230:	8b 81       	ldd	r24, Y+3	; 0x03
    6232:	9c 81       	ldd	r25, Y+4	; 0x04
    6234:	fc 01       	movw	r30, r24
    6236:	e2 0f       	add	r30, r18
    6238:	f3 1f       	adc	r31, r19
    623a:	83 81       	ldd	r24, Z+3	; 0x03
    623c:	8b 30       	cpi	r24, 0x0B	; 11
    623e:	19 f5       	brne	.+70     	; 0x6286 <LED_enuINIT+0x152>
				{
					Local_enuErrorState = DIO_enuSetPinVal(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8HIGH);
    6240:	89 81       	ldd	r24, Y+1	; 0x01
    6242:	88 2f       	mov	r24, r24
    6244:	90 e0       	ldi	r25, 0x00	; 0
    6246:	9c 01       	movw	r18, r24
    6248:	22 0f       	add	r18, r18
    624a:	33 1f       	adc	r19, r19
    624c:	22 0f       	add	r18, r18
    624e:	33 1f       	adc	r19, r19
    6250:	8b 81       	ldd	r24, Y+3	; 0x03
    6252:	9c 81       	ldd	r25, Y+4	; 0x04
    6254:	fc 01       	movw	r30, r24
    6256:	e2 0f       	add	r30, r18
    6258:	f3 1f       	adc	r31, r19
    625a:	40 81       	ld	r20, Z
    625c:	89 81       	ldd	r24, Y+1	; 0x01
    625e:	88 2f       	mov	r24, r24
    6260:	90 e0       	ldi	r25, 0x00	; 0
    6262:	9c 01       	movw	r18, r24
    6264:	22 0f       	add	r18, r18
    6266:	33 1f       	adc	r19, r19
    6268:	22 0f       	add	r18, r18
    626a:	33 1f       	adc	r19, r19
    626c:	8b 81       	ldd	r24, Y+3	; 0x03
    626e:	9c 81       	ldd	r25, Y+4	; 0x04
    6270:	fc 01       	movw	r30, r24
    6272:	e2 0f       	add	r30, r18
    6274:	f3 1f       	adc	r31, r19
    6276:	91 81       	ldd	r25, Z+1	; 0x01
    6278:	84 2f       	mov	r24, r20
    627a:	69 2f       	mov	r22, r25
    627c:	41 e0       	ldi	r20, 0x01	; 1
    627e:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6282:	8a 83       	std	Y+2, r24	; 0x02
    6284:	7f c0       	rjmp	.+254    	; 0x6384 <LED_enuINIT+0x250>
				}
				else
				{
					Local_enuErrorState = ES_OUT_OF_RANGE;
    6286:	83 e0       	ldi	r24, 0x03	; 3
    6288:	8a 83       	std	Y+2, r24	; 0x02
    628a:	7c c0       	rjmp	.+248    	; 0x6384 <LED_enuINIT+0x250>
				}
			}
			else if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8Connection == LED_u8SOURCE)
    628c:	89 81       	ldd	r24, Y+1	; 0x01
    628e:	88 2f       	mov	r24, r24
    6290:	90 e0       	ldi	r25, 0x00	; 0
    6292:	9c 01       	movw	r18, r24
    6294:	22 0f       	add	r18, r18
    6296:	33 1f       	adc	r19, r19
    6298:	22 0f       	add	r18, r18
    629a:	33 1f       	adc	r19, r19
    629c:	8b 81       	ldd	r24, Y+3	; 0x03
    629e:	9c 81       	ldd	r25, Y+4	; 0x04
    62a0:	fc 01       	movw	r30, r24
    62a2:	e2 0f       	add	r30, r18
    62a4:	f3 1f       	adc	r31, r19
    62a6:	82 81       	ldd	r24, Z+2	; 0x02
    62a8:	8d 30       	cpi	r24, 0x0D	; 13
    62aa:	09 f0       	breq	.+2      	; 0x62ae <LED_enuINIT+0x17a>
    62ac:	69 c0       	rjmp	.+210    	; 0x6380 <LED_enuINIT+0x24c>
			{
				if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_u8ON)
    62ae:	89 81       	ldd	r24, Y+1	; 0x01
    62b0:	88 2f       	mov	r24, r24
    62b2:	90 e0       	ldi	r25, 0x00	; 0
    62b4:	9c 01       	movw	r18, r24
    62b6:	22 0f       	add	r18, r18
    62b8:	33 1f       	adc	r19, r19
    62ba:	22 0f       	add	r18, r18
    62bc:	33 1f       	adc	r19, r19
    62be:	8b 81       	ldd	r24, Y+3	; 0x03
    62c0:	9c 81       	ldd	r25, Y+4	; 0x04
    62c2:	fc 01       	movw	r30, r24
    62c4:	e2 0f       	add	r30, r18
    62c6:	f3 1f       	adc	r31, r19
    62c8:	83 81       	ldd	r24, Z+3	; 0x03
    62ca:	8a 30       	cpi	r24, 0x0A	; 10
    62cc:	19 f5       	brne	.+70     	; 0x6314 <LED_enuINIT+0x1e0>
				{
					Local_enuErrorState = DIO_enuSetPinVal(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8HIGH);
    62ce:	89 81       	ldd	r24, Y+1	; 0x01
    62d0:	88 2f       	mov	r24, r24
    62d2:	90 e0       	ldi	r25, 0x00	; 0
    62d4:	9c 01       	movw	r18, r24
    62d6:	22 0f       	add	r18, r18
    62d8:	33 1f       	adc	r19, r19
    62da:	22 0f       	add	r18, r18
    62dc:	33 1f       	adc	r19, r19
    62de:	8b 81       	ldd	r24, Y+3	; 0x03
    62e0:	9c 81       	ldd	r25, Y+4	; 0x04
    62e2:	fc 01       	movw	r30, r24
    62e4:	e2 0f       	add	r30, r18
    62e6:	f3 1f       	adc	r31, r19
    62e8:	40 81       	ld	r20, Z
    62ea:	89 81       	ldd	r24, Y+1	; 0x01
    62ec:	88 2f       	mov	r24, r24
    62ee:	90 e0       	ldi	r25, 0x00	; 0
    62f0:	9c 01       	movw	r18, r24
    62f2:	22 0f       	add	r18, r18
    62f4:	33 1f       	adc	r19, r19
    62f6:	22 0f       	add	r18, r18
    62f8:	33 1f       	adc	r19, r19
    62fa:	8b 81       	ldd	r24, Y+3	; 0x03
    62fc:	9c 81       	ldd	r25, Y+4	; 0x04
    62fe:	fc 01       	movw	r30, r24
    6300:	e2 0f       	add	r30, r18
    6302:	f3 1f       	adc	r31, r19
    6304:	91 81       	ldd	r25, Z+1	; 0x01
    6306:	84 2f       	mov	r24, r20
    6308:	69 2f       	mov	r22, r25
    630a:	41 e0       	ldi	r20, 0x01	; 1
    630c:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6310:	8a 83       	std	Y+2, r24	; 0x02
    6312:	38 c0       	rjmp	.+112    	; 0x6384 <LED_enuINIT+0x250>
				}
				else if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_u8OFF)
    6314:	89 81       	ldd	r24, Y+1	; 0x01
    6316:	88 2f       	mov	r24, r24
    6318:	90 e0       	ldi	r25, 0x00	; 0
    631a:	9c 01       	movw	r18, r24
    631c:	22 0f       	add	r18, r18
    631e:	33 1f       	adc	r19, r19
    6320:	22 0f       	add	r18, r18
    6322:	33 1f       	adc	r19, r19
    6324:	8b 81       	ldd	r24, Y+3	; 0x03
    6326:	9c 81       	ldd	r25, Y+4	; 0x04
    6328:	fc 01       	movw	r30, r24
    632a:	e2 0f       	add	r30, r18
    632c:	f3 1f       	adc	r31, r19
    632e:	83 81       	ldd	r24, Z+3	; 0x03
    6330:	8b 30       	cpi	r24, 0x0B	; 11
    6332:	19 f5       	brne	.+70     	; 0x637a <LED_enuINIT+0x246>
				{
					Local_enuErrorState = DIO_enuSetPinVal(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8LOW);
    6334:	89 81       	ldd	r24, Y+1	; 0x01
    6336:	88 2f       	mov	r24, r24
    6338:	90 e0       	ldi	r25, 0x00	; 0
    633a:	9c 01       	movw	r18, r24
    633c:	22 0f       	add	r18, r18
    633e:	33 1f       	adc	r19, r19
    6340:	22 0f       	add	r18, r18
    6342:	33 1f       	adc	r19, r19
    6344:	8b 81       	ldd	r24, Y+3	; 0x03
    6346:	9c 81       	ldd	r25, Y+4	; 0x04
    6348:	fc 01       	movw	r30, r24
    634a:	e2 0f       	add	r30, r18
    634c:	f3 1f       	adc	r31, r19
    634e:	40 81       	ld	r20, Z
    6350:	89 81       	ldd	r24, Y+1	; 0x01
    6352:	88 2f       	mov	r24, r24
    6354:	90 e0       	ldi	r25, 0x00	; 0
    6356:	9c 01       	movw	r18, r24
    6358:	22 0f       	add	r18, r18
    635a:	33 1f       	adc	r19, r19
    635c:	22 0f       	add	r18, r18
    635e:	33 1f       	adc	r19, r19
    6360:	8b 81       	ldd	r24, Y+3	; 0x03
    6362:	9c 81       	ldd	r25, Y+4	; 0x04
    6364:	fc 01       	movw	r30, r24
    6366:	e2 0f       	add	r30, r18
    6368:	f3 1f       	adc	r31, r19
    636a:	91 81       	ldd	r25, Z+1	; 0x01
    636c:	84 2f       	mov	r24, r20
    636e:	69 2f       	mov	r22, r25
    6370:	40 e0       	ldi	r20, 0x00	; 0
    6372:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6376:	8a 83       	std	Y+2, r24	; 0x02
    6378:	05 c0       	rjmp	.+10     	; 0x6384 <LED_enuINIT+0x250>
				}
				else
				{
					Local_enuErrorState = ES_OUT_OF_RANGE;
    637a:	83 e0       	ldi	r24, 0x03	; 3
    637c:	8a 83       	std	Y+2, r24	; 0x02
    637e:	02 c0       	rjmp	.+4      	; 0x6384 <LED_enuINIT+0x250>
				}
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    6380:	83 e0       	ldi	r24, 0x03	; 3
    6382:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_pAstrLedConfig != NULL)
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < LED_NUM; Local_u8Iterator++)
    6384:	89 81       	ldd	r24, Y+1	; 0x01
    6386:	8f 5f       	subi	r24, 0xFF	; 255
    6388:	89 83       	std	Y+1, r24	; 0x01
    638a:	89 81       	ldd	r24, Y+1	; 0x01
    638c:	88 30       	cpi	r24, 0x08	; 8
    638e:	08 f4       	brcc	.+2      	; 0x6392 <LED_enuINIT+0x25e>
    6390:	e2 ce       	rjmp	.-572    	; 0x6156 <LED_enuINIT+0x22>
    6392:	02 c0       	rjmp	.+4      	; 0x6398 <LED_enuINIT+0x264>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    6394:	82 e0       	ldi	r24, 0x02	; 2
    6396:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	return Local_enuErrorState;
    6398:	8a 81       	ldd	r24, Y+2	; 0x02
}
    639a:	0f 90       	pop	r0
    639c:	0f 90       	pop	r0
    639e:	0f 90       	pop	r0
    63a0:	0f 90       	pop	r0
    63a2:	cf 91       	pop	r28
    63a4:	df 91       	pop	r29
    63a6:	08 95       	ret

000063a8 <LED_enuTurnON>:

ES_t LED_enuTurnON(LED_t *Copy_pstrLedID)
{
    63a8:	df 93       	push	r29
    63aa:	cf 93       	push	r28
    63ac:	00 d0       	rcall	.+0      	; 0x63ae <LED_enuTurnON+0x6>
    63ae:	0f 92       	push	r0
    63b0:	cd b7       	in	r28, 0x3d	; 61
    63b2:	de b7       	in	r29, 0x3e	; 62
    63b4:	9b 83       	std	Y+3, r25	; 0x03
    63b6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    63b8:	81 e0       	ldi	r24, 0x01	; 1
    63ba:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_pstrLedID != NULL)
    63bc:	8a 81       	ldd	r24, Y+2	; 0x02
    63be:	9b 81       	ldd	r25, Y+3	; 0x03
    63c0:	00 97       	sbiw	r24, 0x00	; 0
    63c2:	79 f1       	breq	.+94     	; 0x6422 <LED_enuTurnON+0x7a>
	{
		DIO_enuSetPinDirection(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8OUTPUT);
    63c4:	ea 81       	ldd	r30, Y+2	; 0x02
    63c6:	fb 81       	ldd	r31, Y+3	; 0x03
    63c8:	80 81       	ld	r24, Z
    63ca:	ea 81       	ldd	r30, Y+2	; 0x02
    63cc:	fb 81       	ldd	r31, Y+3	; 0x03
    63ce:	91 81       	ldd	r25, Z+1	; 0x01
    63d0:	69 2f       	mov	r22, r25
    63d2:	41 e0       	ldi	r20, 0x01	; 1
    63d4:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
		if(Copy_pstrLedID->LED_u8Connection == LED_u8SINK)
    63d8:	ea 81       	ldd	r30, Y+2	; 0x02
    63da:	fb 81       	ldd	r31, Y+3	; 0x03
    63dc:	82 81       	ldd	r24, Z+2	; 0x02
    63de:	8c 30       	cpi	r24, 0x0C	; 12
    63e0:	61 f4       	brne	.+24     	; 0x63fa <LED_enuTurnON+0x52>
		{
			Local_enuErrorState = DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8LOW);
    63e2:	ea 81       	ldd	r30, Y+2	; 0x02
    63e4:	fb 81       	ldd	r31, Y+3	; 0x03
    63e6:	80 81       	ld	r24, Z
    63e8:	ea 81       	ldd	r30, Y+2	; 0x02
    63ea:	fb 81       	ldd	r31, Y+3	; 0x03
    63ec:	91 81       	ldd	r25, Z+1	; 0x01
    63ee:	69 2f       	mov	r22, r25
    63f0:	40 e0       	ldi	r20, 0x00	; 0
    63f2:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    63f6:	89 83       	std	Y+1, r24	; 0x01
    63f8:	16 c0       	rjmp	.+44     	; 0x6426 <LED_enuTurnON+0x7e>
		}
		else if(Copy_pstrLedID->LED_u8Connection == LED_u8SOURCE)
    63fa:	ea 81       	ldd	r30, Y+2	; 0x02
    63fc:	fb 81       	ldd	r31, Y+3	; 0x03
    63fe:	82 81       	ldd	r24, Z+2	; 0x02
    6400:	8d 30       	cpi	r24, 0x0D	; 13
    6402:	61 f4       	brne	.+24     	; 0x641c <LED_enuTurnON+0x74>
		{
			Local_enuErrorState = DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8HIGH);
    6404:	ea 81       	ldd	r30, Y+2	; 0x02
    6406:	fb 81       	ldd	r31, Y+3	; 0x03
    6408:	80 81       	ld	r24, Z
    640a:	ea 81       	ldd	r30, Y+2	; 0x02
    640c:	fb 81       	ldd	r31, Y+3	; 0x03
    640e:	91 81       	ldd	r25, Z+1	; 0x01
    6410:	69 2f       	mov	r22, r25
    6412:	41 e0       	ldi	r20, 0x01	; 1
    6414:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6418:	89 83       	std	Y+1, r24	; 0x01
    641a:	05 c0       	rjmp	.+10     	; 0x6426 <LED_enuTurnON+0x7e>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    641c:	83 e0       	ldi	r24, 0x03	; 3
    641e:	89 83       	std	Y+1, r24	; 0x01
    6420:	02 c0       	rjmp	.+4      	; 0x6426 <LED_enuTurnON+0x7e>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    6422:	82 e0       	ldi	r24, 0x02	; 2
    6424:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    6426:	89 81       	ldd	r24, Y+1	; 0x01
}
    6428:	0f 90       	pop	r0
    642a:	0f 90       	pop	r0
    642c:	0f 90       	pop	r0
    642e:	cf 91       	pop	r28
    6430:	df 91       	pop	r29
    6432:	08 95       	ret

00006434 <LED_enuTurnOFF>:

ES_t LED_enuTurnOFF(LED_t *Copy_pstrLedID)
{
    6434:	df 93       	push	r29
    6436:	cf 93       	push	r28
    6438:	00 d0       	rcall	.+0      	; 0x643a <LED_enuTurnOFF+0x6>
    643a:	0f 92       	push	r0
    643c:	cd b7       	in	r28, 0x3d	; 61
    643e:	de b7       	in	r29, 0x3e	; 62
    6440:	9b 83       	std	Y+3, r25	; 0x03
    6442:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    6444:	81 e0       	ldi	r24, 0x01	; 1
    6446:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_pstrLedID != NULL)
    6448:	8a 81       	ldd	r24, Y+2	; 0x02
    644a:	9b 81       	ldd	r25, Y+3	; 0x03
    644c:	00 97       	sbiw	r24, 0x00	; 0
    644e:	79 f1       	breq	.+94     	; 0x64ae <LED_enuTurnOFF+0x7a>
	{
		DIO_enuSetPinDirection(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8OUTPUT);
    6450:	ea 81       	ldd	r30, Y+2	; 0x02
    6452:	fb 81       	ldd	r31, Y+3	; 0x03
    6454:	80 81       	ld	r24, Z
    6456:	ea 81       	ldd	r30, Y+2	; 0x02
    6458:	fb 81       	ldd	r31, Y+3	; 0x03
    645a:	91 81       	ldd	r25, Z+1	; 0x01
    645c:	69 2f       	mov	r22, r25
    645e:	41 e0       	ldi	r20, 0x01	; 1
    6460:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
		if(Copy_pstrLedID->LED_u8Connection == LED_u8SINK)
    6464:	ea 81       	ldd	r30, Y+2	; 0x02
    6466:	fb 81       	ldd	r31, Y+3	; 0x03
    6468:	82 81       	ldd	r24, Z+2	; 0x02
    646a:	8c 30       	cpi	r24, 0x0C	; 12
    646c:	61 f4       	brne	.+24     	; 0x6486 <LED_enuTurnOFF+0x52>
		{
			Local_enuErrorState = DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8HIGH);
    646e:	ea 81       	ldd	r30, Y+2	; 0x02
    6470:	fb 81       	ldd	r31, Y+3	; 0x03
    6472:	80 81       	ld	r24, Z
    6474:	ea 81       	ldd	r30, Y+2	; 0x02
    6476:	fb 81       	ldd	r31, Y+3	; 0x03
    6478:	91 81       	ldd	r25, Z+1	; 0x01
    647a:	69 2f       	mov	r22, r25
    647c:	41 e0       	ldi	r20, 0x01	; 1
    647e:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6482:	89 83       	std	Y+1, r24	; 0x01
    6484:	16 c0       	rjmp	.+44     	; 0x64b2 <LED_enuTurnOFF+0x7e>
		}
		else if(Copy_pstrLedID->LED_u8Connection == LED_u8SOURCE)
    6486:	ea 81       	ldd	r30, Y+2	; 0x02
    6488:	fb 81       	ldd	r31, Y+3	; 0x03
    648a:	82 81       	ldd	r24, Z+2	; 0x02
    648c:	8d 30       	cpi	r24, 0x0D	; 13
    648e:	61 f4       	brne	.+24     	; 0x64a8 <LED_enuTurnOFF+0x74>
		{
			Local_enuErrorState = DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8LOW);
    6490:	ea 81       	ldd	r30, Y+2	; 0x02
    6492:	fb 81       	ldd	r31, Y+3	; 0x03
    6494:	80 81       	ld	r24, Z
    6496:	ea 81       	ldd	r30, Y+2	; 0x02
    6498:	fb 81       	ldd	r31, Y+3	; 0x03
    649a:	91 81       	ldd	r25, Z+1	; 0x01
    649c:	69 2f       	mov	r22, r25
    649e:	40 e0       	ldi	r20, 0x00	; 0
    64a0:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    64a4:	89 83       	std	Y+1, r24	; 0x01
    64a6:	05 c0       	rjmp	.+10     	; 0x64b2 <LED_enuTurnOFF+0x7e>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    64a8:	83 e0       	ldi	r24, 0x03	; 3
    64aa:	89 83       	std	Y+1, r24	; 0x01
    64ac:	02 c0       	rjmp	.+4      	; 0x64b2 <LED_enuTurnOFF+0x7e>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    64ae:	82 e0       	ldi	r24, 0x02	; 2
    64b0:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    64b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    64b4:	0f 90       	pop	r0
    64b6:	0f 90       	pop	r0
    64b8:	0f 90       	pop	r0
    64ba:	cf 91       	pop	r28
    64bc:	df 91       	pop	r29
    64be:	08 95       	ret

000064c0 <LDR_enuInit>:
/** Return Type     : ES_t enum.                                            **/
/** Arguments       : LDR_t* Copy_PstrLDRconfig.                            **/
/** Brief           : Initializing LDR configuration (Config of pin)        **/
/*****************************************************************************/
/*****************************************************************************/
ES_t LDR_enuInit(LDR_t* Copy_PstrLDRconfig) {
    64c0:	df 93       	push	r29
    64c2:	cf 93       	push	r28
    64c4:	00 d0       	rcall	.+0      	; 0x64c6 <LDR_enuInit+0x6>
    64c6:	00 d0       	rcall	.+0      	; 0x64c8 <LDR_enuInit+0x8>
    64c8:	cd b7       	in	r28, 0x3d	; 61
    64ca:	de b7       	in	r29, 0x3e	; 62
    64cc:	9c 83       	std	Y+4, r25	; 0x04
    64ce:	8b 83       	std	Y+3, r24	; 0x03
    ES_t Local_enuErrorState = ES_NOK;
    64d0:	81 e0       	ldi	r24, 0x01	; 1
    64d2:	8a 83       	std	Y+2, r24	; 0x02

    // Iterate through each LDR configuration
    for (u8 Local_u8Iterator = 0; Local_u8Iterator < LDRNUM; Local_u8Iterator++) {
    64d4:	19 82       	std	Y+1, r1	; 0x01
    64d6:	27 c0       	rjmp	.+78     	; 0x6526 <LDR_enuInit+0x66>
        if (Copy_PstrLDRconfig[Local_u8Iterator].LDR_Channel != NOTCONNECTED) {
    64d8:	89 81       	ldd	r24, Y+1	; 0x01
    64da:	88 2f       	mov	r24, r24
    64dc:	90 e0       	ldi	r25, 0x00	; 0
    64de:	9c 01       	movw	r18, r24
    64e0:	22 0f       	add	r18, r18
    64e2:	33 1f       	adc	r19, r19
    64e4:	8b 81       	ldd	r24, Y+3	; 0x03
    64e6:	9c 81       	ldd	r25, Y+4	; 0x04
    64e8:	fc 01       	movw	r30, r24
    64ea:	e2 0f       	add	r30, r18
    64ec:	f3 1f       	adc	r31, r19
    64ee:	80 81       	ld	r24, Z
    64f0:	91 81       	ldd	r25, Z+1	; 0x01
    64f2:	8f 3f       	cpi	r24, 0xFF	; 255
    64f4:	91 05       	cpc	r25, r1
    64f6:	a1 f0       	breq	.+40     	; 0x6520 <LDR_enuInit+0x60>
            // Set pin direction
            Local_enuErrorState=DIO_enuSetPinDirection(DIO_u8PORTA, Copy_PstrLDRconfig[Local_u8Iterator].LDR_Channel, DIO_u8INPUT);
    64f8:	89 81       	ldd	r24, Y+1	; 0x01
    64fa:	88 2f       	mov	r24, r24
    64fc:	90 e0       	ldi	r25, 0x00	; 0
    64fe:	9c 01       	movw	r18, r24
    6500:	22 0f       	add	r18, r18
    6502:	33 1f       	adc	r19, r19
    6504:	8b 81       	ldd	r24, Y+3	; 0x03
    6506:	9c 81       	ldd	r25, Y+4	; 0x04
    6508:	fc 01       	movw	r30, r24
    650a:	e2 0f       	add	r30, r18
    650c:	f3 1f       	adc	r31, r19
    650e:	80 81       	ld	r24, Z
    6510:	91 81       	ldd	r25, Z+1	; 0x01
    6512:	98 2f       	mov	r25, r24
    6514:	80 e0       	ldi	r24, 0x00	; 0
    6516:	69 2f       	mov	r22, r25
    6518:	40 e0       	ldi	r20, 0x00	; 0
    651a:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    651e:	8a 83       	std	Y+2, r24	; 0x02
/*****************************************************************************/
ES_t LDR_enuInit(LDR_t* Copy_PstrLDRconfig) {
    ES_t Local_enuErrorState = ES_NOK;

    // Iterate through each LDR configuration
    for (u8 Local_u8Iterator = 0; Local_u8Iterator < LDRNUM; Local_u8Iterator++) {
    6520:	89 81       	ldd	r24, Y+1	; 0x01
    6522:	8f 5f       	subi	r24, 0xFF	; 255
    6524:	89 83       	std	Y+1, r24	; 0x01
    6526:	89 81       	ldd	r24, Y+1	; 0x01
    6528:	88 23       	and	r24, r24
    652a:	b1 f2       	breq	.-84     	; 0x64d8 <LDR_enuInit+0x18>

        }
    }


    return Local_enuErrorState;
    652c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    652e:	0f 90       	pop	r0
    6530:	0f 90       	pop	r0
    6532:	0f 90       	pop	r0
    6534:	0f 90       	pop	r0
    6536:	cf 91       	pop	r28
    6538:	df 91       	pop	r29
    653a:	08 95       	ret

0000653c <LDR_enuGetValue>:
/** Return Type     : ES_t enum.                                            **/
/** Arguments       : u16 *Copy_pu16ReadValue, u8 Copy_u8ChannelID.         **/
/** Brief           : Get the value from the specified ADC channel.         **/
/*****************************************************************************/
/*****************************************************************************/
ES_t LDR_enuGetValue(u16 *Copy_pu16ReadValue, u8 Copy_u8ChannelID) {
    653c:	df 93       	push	r29
    653e:	cf 93       	push	r28
    6540:	00 d0       	rcall	.+0      	; 0x6542 <LDR_enuGetValue+0x6>
    6542:	00 d0       	rcall	.+0      	; 0x6544 <LDR_enuGetValue+0x8>
    6544:	cd b7       	in	r28, 0x3d	; 61
    6546:	de b7       	in	r29, 0x3e	; 62
    6548:	9b 83       	std	Y+3, r25	; 0x03
    654a:	8a 83       	std	Y+2, r24	; 0x02
    654c:	6c 83       	std	Y+4, r22	; 0x04
	 ES_t Local_enuErrorState = ES_NOK;
    654e:	81 e0       	ldi	r24, 0x01	; 1
    6550:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState=ADC_Read_From_Ch(Copy_pu16ReadValue,Copy_u8ChannelID);
    6552:	8a 81       	ldd	r24, Y+2	; 0x02
    6554:	9b 81       	ldd	r25, Y+3	; 0x03
    6556:	6c 81       	ldd	r22, Y+4	; 0x04
    6558:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <ADC_Read_From_Ch>
    655c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    655e:	89 81       	ldd	r24, Y+1	; 0x01
}
    6560:	0f 90       	pop	r0
    6562:	0f 90       	pop	r0
    6564:	0f 90       	pop	r0
    6566:	0f 90       	pop	r0
    6568:	cf 91       	pop	r28
    656a:	df 91       	pop	r29
    656c:	08 95       	ret

0000656e <LCD_enuInit>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuInit(void)
{
    656e:	0f 93       	push	r16
    6570:	1f 93       	push	r17
    6572:	df 93       	push	r29
    6574:	cf 93       	push	r28
    6576:	cd b7       	in	r28, 0x3d	; 61
    6578:	de b7       	in	r29, 0x3e	; 62
    657a:	c8 54       	subi	r28, 0x48	; 72
    657c:	d0 40       	sbci	r29, 0x00	; 0
    657e:	0f b6       	in	r0, 0x3f	; 63
    6580:	f8 94       	cli
    6582:	de bf       	out	0x3e, r29	; 62
    6584:	0f be       	out	0x3f, r0	; 63
    6586:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    6588:	fe 01       	movw	r30, r28
    658a:	e9 5b       	subi	r30, 0xB9	; 185
    658c:	ff 4f       	sbci	r31, 0xFF	; 255
    658e:	81 e0       	ldi	r24, 0x01	; 1
    6590:	80 83       	st	Z, r24
	
	/* Set Control Pins as output */
	Local_enuErrorState = DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    6592:	80 e0       	ldi	r24, 0x00	; 0
    6594:	60 e0       	ldi	r22, 0x00	; 0
    6596:	41 e0       	ldi	r20, 0x01	; 1
    6598:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    659c:	fe 01       	movw	r30, r28
    659e:	e9 5b       	subi	r30, 0xB9	; 185
    65a0:	ff 4f       	sbci	r31, 0xFF	; 255
    65a2:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    65a4:	fe 01       	movw	r30, r28
    65a6:	e9 5b       	subi	r30, 0xB9	; 185
    65a8:	ff 4f       	sbci	r31, 0xFF	; 255
    65aa:	80 81       	ld	r24, Z
    65ac:	88 23       	and	r24, r24
    65ae:	41 f0       	breq	.+16     	; 0x65c0 <LCD_enuInit+0x52>
		return Local_enuErrorState;
    65b0:	fe 01       	movw	r30, r28
    65b2:	e9 5b       	subi	r30, 0xB9	; 185
    65b4:	ff 4f       	sbci	r31, 0xFF	; 255
    65b6:	80 81       	ld	r24, Z
    65b8:	29 96       	adiw	r28, 0x09	; 9
    65ba:	8f af       	std	Y+63, r24	; 0x3f
    65bc:	29 97       	sbiw	r28, 0x09	; 9
    65be:	92 c3       	rjmp	.+1828   	; 0x6ce4 <LCD_enuInit+0x776>
	
	Local_enuErrorState = DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    65c0:	80 e0       	ldi	r24, 0x00	; 0
    65c2:	61 e0       	ldi	r22, 0x01	; 1
    65c4:	41 e0       	ldi	r20, 0x01	; 1
    65c6:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    65ca:	fe 01       	movw	r30, r28
    65cc:	e9 5b       	subi	r30, 0xB9	; 185
    65ce:	ff 4f       	sbci	r31, 0xFF	; 255
    65d0:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    65d2:	fe 01       	movw	r30, r28
    65d4:	e9 5b       	subi	r30, 0xB9	; 185
    65d6:	ff 4f       	sbci	r31, 0xFF	; 255
    65d8:	80 81       	ld	r24, Z
    65da:	88 23       	and	r24, r24
    65dc:	41 f0       	breq	.+16     	; 0x65ee <LCD_enuInit+0x80>
		return Local_enuErrorState;
    65de:	fe 01       	movw	r30, r28
    65e0:	e9 5b       	subi	r30, 0xB9	; 185
    65e2:	ff 4f       	sbci	r31, 0xFF	; 255
    65e4:	80 81       	ld	r24, Z
    65e6:	29 96       	adiw	r28, 0x09	; 9
    65e8:	8f af       	std	Y+63, r24	; 0x3f
    65ea:	29 97       	sbiw	r28, 0x09	; 9
    65ec:	7b c3       	rjmp	.+1782   	; 0x6ce4 <LCD_enuInit+0x776>
		
	Local_enuErrorState = DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    65ee:	80 e0       	ldi	r24, 0x00	; 0
    65f0:	62 e0       	ldi	r22, 0x02	; 2
    65f2:	41 e0       	ldi	r20, 0x01	; 1
    65f4:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    65f8:	fe 01       	movw	r30, r28
    65fa:	e9 5b       	subi	r30, 0xB9	; 185
    65fc:	ff 4f       	sbci	r31, 0xFF	; 255
    65fe:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    6600:	fe 01       	movw	r30, r28
    6602:	e9 5b       	subi	r30, 0xB9	; 185
    6604:	ff 4f       	sbci	r31, 0xFF	; 255
    6606:	80 81       	ld	r24, Z
    6608:	88 23       	and	r24, r24
    660a:	41 f0       	breq	.+16     	; 0x661c <LCD_enuInit+0xae>
		return Local_enuErrorState;
    660c:	fe 01       	movw	r30, r28
    660e:	e9 5b       	subi	r30, 0xB9	; 185
    6610:	ff 4f       	sbci	r31, 0xFF	; 255
    6612:	80 81       	ld	r24, Z
    6614:	29 96       	adiw	r28, 0x09	; 9
    6616:	8f af       	std	Y+63, r24	; 0x3f
    6618:	29 97       	sbiw	r28, 0x09	; 9
    661a:	64 c3       	rjmp	.+1736   	; 0x6ce4 <LCD_enuInit+0x776>
	
	/* Set Data Pins as output */
	Local_enuErrorState = DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    661c:	81 e0       	ldi	r24, 0x01	; 1
    661e:	67 e0       	ldi	r22, 0x07	; 7
    6620:	41 e0       	ldi	r20, 0x01	; 1
    6622:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    6626:	fe 01       	movw	r30, r28
    6628:	e9 5b       	subi	r30, 0xB9	; 185
    662a:	ff 4f       	sbci	r31, 0xFF	; 255
    662c:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    662e:	fe 01       	movw	r30, r28
    6630:	e9 5b       	subi	r30, 0xB9	; 185
    6632:	ff 4f       	sbci	r31, 0xFF	; 255
    6634:	80 81       	ld	r24, Z
    6636:	88 23       	and	r24, r24
    6638:	41 f0       	breq	.+16     	; 0x664a <LCD_enuInit+0xdc>
		return Local_enuErrorState;
    663a:	fe 01       	movw	r30, r28
    663c:	e9 5b       	subi	r30, 0xB9	; 185
    663e:	ff 4f       	sbci	r31, 0xFF	; 255
    6640:	80 81       	ld	r24, Z
    6642:	29 96       	adiw	r28, 0x09	; 9
    6644:	8f af       	std	Y+63, r24	; 0x3f
    6646:	29 97       	sbiw	r28, 0x09	; 9
    6648:	4d c3       	rjmp	.+1690   	; 0x6ce4 <LCD_enuInit+0x776>
		
	Local_enuErrorState = DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    664a:	81 e0       	ldi	r24, 0x01	; 1
    664c:	66 e0       	ldi	r22, 0x06	; 6
    664e:	41 e0       	ldi	r20, 0x01	; 1
    6650:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    6654:	fe 01       	movw	r30, r28
    6656:	e9 5b       	subi	r30, 0xB9	; 185
    6658:	ff 4f       	sbci	r31, 0xFF	; 255
    665a:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    665c:	fe 01       	movw	r30, r28
    665e:	e9 5b       	subi	r30, 0xB9	; 185
    6660:	ff 4f       	sbci	r31, 0xFF	; 255
    6662:	80 81       	ld	r24, Z
    6664:	88 23       	and	r24, r24
    6666:	41 f0       	breq	.+16     	; 0x6678 <LCD_enuInit+0x10a>
		return Local_enuErrorState;
    6668:	fe 01       	movw	r30, r28
    666a:	e9 5b       	subi	r30, 0xB9	; 185
    666c:	ff 4f       	sbci	r31, 0xFF	; 255
    666e:	80 81       	ld	r24, Z
    6670:	29 96       	adiw	r28, 0x09	; 9
    6672:	8f af       	std	Y+63, r24	; 0x3f
    6674:	29 97       	sbiw	r28, 0x09	; 9
    6676:	36 c3       	rjmp	.+1644   	; 0x6ce4 <LCD_enuInit+0x776>
		
	Local_enuErrorState = DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    6678:	81 e0       	ldi	r24, 0x01	; 1
    667a:	65 e0       	ldi	r22, 0x05	; 5
    667c:	41 e0       	ldi	r20, 0x01	; 1
    667e:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    6682:	fe 01       	movw	r30, r28
    6684:	e9 5b       	subi	r30, 0xB9	; 185
    6686:	ff 4f       	sbci	r31, 0xFF	; 255
    6688:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    668a:	fe 01       	movw	r30, r28
    668c:	e9 5b       	subi	r30, 0xB9	; 185
    668e:	ff 4f       	sbci	r31, 0xFF	; 255
    6690:	80 81       	ld	r24, Z
    6692:	88 23       	and	r24, r24
    6694:	41 f0       	breq	.+16     	; 0x66a6 <LCD_enuInit+0x138>
		return Local_enuErrorState;
    6696:	fe 01       	movw	r30, r28
    6698:	e9 5b       	subi	r30, 0xB9	; 185
    669a:	ff 4f       	sbci	r31, 0xFF	; 255
    669c:	80 81       	ld	r24, Z
    669e:	29 96       	adiw	r28, 0x09	; 9
    66a0:	8f af       	std	Y+63, r24	; 0x3f
    66a2:	29 97       	sbiw	r28, 0x09	; 9
    66a4:	1f c3       	rjmp	.+1598   	; 0x6ce4 <LCD_enuInit+0x776>
	Local_enuErrorState = DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    66a6:	81 e0       	ldi	r24, 0x01	; 1
    66a8:	64 e0       	ldi	r22, 0x04	; 4
    66aa:	41 e0       	ldi	r20, 0x01	; 1
    66ac:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    66b0:	fe 01       	movw	r30, r28
    66b2:	e9 5b       	subi	r30, 0xB9	; 185
    66b4:	ff 4f       	sbci	r31, 0xFF	; 255
    66b6:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    66b8:	fe 01       	movw	r30, r28
    66ba:	e9 5b       	subi	r30, 0xB9	; 185
    66bc:	ff 4f       	sbci	r31, 0xFF	; 255
    66be:	80 81       	ld	r24, Z
    66c0:	88 23       	and	r24, r24
    66c2:	41 f0       	breq	.+16     	; 0x66d4 <LCD_enuInit+0x166>
		return Local_enuErrorState;
    66c4:	fe 01       	movw	r30, r28
    66c6:	e9 5b       	subi	r30, 0xB9	; 185
    66c8:	ff 4f       	sbci	r31, 0xFF	; 255
    66ca:	80 81       	ld	r24, Z
    66cc:	29 96       	adiw	r28, 0x09	; 9
    66ce:	8f af       	std	Y+63, r24	; 0x3f
    66d0:	29 97       	sbiw	r28, 0x09	; 9
    66d2:	08 c3       	rjmp	.+1552   	; 0x6ce4 <LCD_enuInit+0x776>
    66d4:	fe 01       	movw	r30, r28
    66d6:	ed 5b       	subi	r30, 0xBD	; 189
    66d8:	ff 4f       	sbci	r31, 0xFF	; 255
    66da:	80 e0       	ldi	r24, 0x00	; 0
    66dc:	90 e0       	ldi	r25, 0x00	; 0
    66de:	ac e0       	ldi	r26, 0x0C	; 12
    66e0:	b2 e4       	ldi	r27, 0x42	; 66
    66e2:	80 83       	st	Z, r24
    66e4:	91 83       	std	Z+1, r25	; 0x01
    66e6:	a2 83       	std	Z+2, r26	; 0x02
    66e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    66ea:	8e 01       	movw	r16, r28
    66ec:	01 5c       	subi	r16, 0xC1	; 193
    66ee:	1f 4f       	sbci	r17, 0xFF	; 255
    66f0:	fe 01       	movw	r30, r28
    66f2:	ed 5b       	subi	r30, 0xBD	; 189
    66f4:	ff 4f       	sbci	r31, 0xFF	; 255
    66f6:	60 81       	ld	r22, Z
    66f8:	71 81       	ldd	r23, Z+1	; 0x01
    66fa:	82 81       	ldd	r24, Z+2	; 0x02
    66fc:	93 81       	ldd	r25, Z+3	; 0x03
    66fe:	20 e0       	ldi	r18, 0x00	; 0
    6700:	30 e0       	ldi	r19, 0x00	; 0
    6702:	4a e7       	ldi	r20, 0x7A	; 122
    6704:	53 e4       	ldi	r21, 0x43	; 67
    6706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    670a:	dc 01       	movw	r26, r24
    670c:	cb 01       	movw	r24, r22
    670e:	f8 01       	movw	r30, r16
    6710:	80 83       	st	Z, r24
    6712:	91 83       	std	Z+1, r25	; 0x01
    6714:	a2 83       	std	Z+2, r26	; 0x02
    6716:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6718:	fe 01       	movw	r30, r28
    671a:	ff 96       	adiw	r30, 0x3f	; 63
    671c:	60 81       	ld	r22, Z
    671e:	71 81       	ldd	r23, Z+1	; 0x01
    6720:	82 81       	ldd	r24, Z+2	; 0x02
    6722:	93 81       	ldd	r25, Z+3	; 0x03
    6724:	20 e0       	ldi	r18, 0x00	; 0
    6726:	30 e0       	ldi	r19, 0x00	; 0
    6728:	40 e8       	ldi	r20, 0x80	; 128
    672a:	5f e3       	ldi	r21, 0x3F	; 63
    672c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    6730:	88 23       	and	r24, r24
    6732:	2c f4       	brge	.+10     	; 0x673e <LCD_enuInit+0x1d0>
		__ticks = 1;
    6734:	81 e0       	ldi	r24, 0x01	; 1
    6736:	90 e0       	ldi	r25, 0x00	; 0
    6738:	9e af       	std	Y+62, r25	; 0x3e
    673a:	8d af       	std	Y+61, r24	; 0x3d
    673c:	46 c0       	rjmp	.+140    	; 0x67ca <LCD_enuInit+0x25c>
	else if (__tmp > 65535)
    673e:	fe 01       	movw	r30, r28
    6740:	ff 96       	adiw	r30, 0x3f	; 63
    6742:	60 81       	ld	r22, Z
    6744:	71 81       	ldd	r23, Z+1	; 0x01
    6746:	82 81       	ldd	r24, Z+2	; 0x02
    6748:	93 81       	ldd	r25, Z+3	; 0x03
    674a:	20 e0       	ldi	r18, 0x00	; 0
    674c:	3f ef       	ldi	r19, 0xFF	; 255
    674e:	4f e7       	ldi	r20, 0x7F	; 127
    6750:	57 e4       	ldi	r21, 0x47	; 71
    6752:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    6756:	18 16       	cp	r1, r24
    6758:	64 f5       	brge	.+88     	; 0x67b2 <LCD_enuInit+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    675a:	fe 01       	movw	r30, r28
    675c:	ed 5b       	subi	r30, 0xBD	; 189
    675e:	ff 4f       	sbci	r31, 0xFF	; 255
    6760:	60 81       	ld	r22, Z
    6762:	71 81       	ldd	r23, Z+1	; 0x01
    6764:	82 81       	ldd	r24, Z+2	; 0x02
    6766:	93 81       	ldd	r25, Z+3	; 0x03
    6768:	20 e0       	ldi	r18, 0x00	; 0
    676a:	30 e0       	ldi	r19, 0x00	; 0
    676c:	40 e2       	ldi	r20, 0x20	; 32
    676e:	51 e4       	ldi	r21, 0x41	; 65
    6770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6774:	dc 01       	movw	r26, r24
    6776:	cb 01       	movw	r24, r22
    6778:	bc 01       	movw	r22, r24
    677a:	cd 01       	movw	r24, r26
    677c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6780:	dc 01       	movw	r26, r24
    6782:	cb 01       	movw	r24, r22
    6784:	9e af       	std	Y+62, r25	; 0x3e
    6786:	8d af       	std	Y+61, r24	; 0x3d
    6788:	0f c0       	rjmp	.+30     	; 0x67a8 <LCD_enuInit+0x23a>
    678a:	89 e1       	ldi	r24, 0x19	; 25
    678c:	90 e0       	ldi	r25, 0x00	; 0
    678e:	9c af       	std	Y+60, r25	; 0x3c
    6790:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6792:	8b ad       	ldd	r24, Y+59	; 0x3b
    6794:	9c ad       	ldd	r25, Y+60	; 0x3c
    6796:	01 97       	sbiw	r24, 0x01	; 1
    6798:	f1 f7       	brne	.-4      	; 0x6796 <LCD_enuInit+0x228>
    679a:	9c af       	std	Y+60, r25	; 0x3c
    679c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    679e:	8d ad       	ldd	r24, Y+61	; 0x3d
    67a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    67a2:	01 97       	sbiw	r24, 0x01	; 1
    67a4:	9e af       	std	Y+62, r25	; 0x3e
    67a6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    67a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    67aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    67ac:	00 97       	sbiw	r24, 0x00	; 0
    67ae:	69 f7       	brne	.-38     	; 0x678a <LCD_enuInit+0x21c>
    67b0:	16 c0       	rjmp	.+44     	; 0x67de <LCD_enuInit+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    67b2:	fe 01       	movw	r30, r28
    67b4:	ff 96       	adiw	r30, 0x3f	; 63
    67b6:	60 81       	ld	r22, Z
    67b8:	71 81       	ldd	r23, Z+1	; 0x01
    67ba:	82 81       	ldd	r24, Z+2	; 0x02
    67bc:	93 81       	ldd	r25, Z+3	; 0x03
    67be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    67c2:	dc 01       	movw	r26, r24
    67c4:	cb 01       	movw	r24, r22
    67c6:	9e af       	std	Y+62, r25	; 0x3e
    67c8:	8d af       	std	Y+61, r24	; 0x3d
    67ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    67cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    67ce:	9a af       	std	Y+58, r25	; 0x3a
    67d0:	89 af       	std	Y+57, r24	; 0x39
    67d2:	89 ad       	ldd	r24, Y+57	; 0x39
    67d4:	9a ad       	ldd	r25, Y+58	; 0x3a
    67d6:	01 97       	sbiw	r24, 0x01	; 1
    67d8:	f1 f7       	brne	.-4      	; 0x67d6 <LCD_enuInit+0x268>
    67da:	9a af       	std	Y+58, r25	; 0x3a
    67dc:	89 af       	std	Y+57, r24	; 0x39
	
	_delay_ms(35);
	
	#if LCD_MODE == EIGHT_BIT
	Local_enuErrorState = DIO_enuSetPinDirection(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    67de:	81 e0       	ldi	r24, 0x01	; 1
    67e0:	63 e0       	ldi	r22, 0x03	; 3
    67e2:	41 e0       	ldi	r20, 0x01	; 1
    67e4:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    67e8:	fe 01       	movw	r30, r28
    67ea:	e9 5b       	subi	r30, 0xB9	; 185
    67ec:	ff 4f       	sbci	r31, 0xFF	; 255
    67ee:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    67f0:	fe 01       	movw	r30, r28
    67f2:	e9 5b       	subi	r30, 0xB9	; 185
    67f4:	ff 4f       	sbci	r31, 0xFF	; 255
    67f6:	80 81       	ld	r24, Z
    67f8:	88 23       	and	r24, r24
    67fa:	41 f0       	breq	.+16     	; 0x680c <LCD_enuInit+0x29e>
		return Local_enuErrorState;
    67fc:	fe 01       	movw	r30, r28
    67fe:	e9 5b       	subi	r30, 0xB9	; 185
    6800:	ff 4f       	sbci	r31, 0xFF	; 255
    6802:	80 81       	ld	r24, Z
    6804:	29 96       	adiw	r28, 0x09	; 9
    6806:	8f af       	std	Y+63, r24	; 0x3f
    6808:	29 97       	sbiw	r28, 0x09	; 9
    680a:	6c c2       	rjmp	.+1240   	; 0x6ce4 <LCD_enuInit+0x776>
	
	Local_enuErrorState = DIO_enuSetPinDirection(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    680c:	81 e0       	ldi	r24, 0x01	; 1
    680e:	62 e0       	ldi	r22, 0x02	; 2
    6810:	41 e0       	ldi	r20, 0x01	; 1
    6812:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    6816:	fe 01       	movw	r30, r28
    6818:	e9 5b       	subi	r30, 0xB9	; 185
    681a:	ff 4f       	sbci	r31, 0xFF	; 255
    681c:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    681e:	fe 01       	movw	r30, r28
    6820:	e9 5b       	subi	r30, 0xB9	; 185
    6822:	ff 4f       	sbci	r31, 0xFF	; 255
    6824:	80 81       	ld	r24, Z
    6826:	88 23       	and	r24, r24
    6828:	41 f0       	breq	.+16     	; 0x683a <LCD_enuInit+0x2cc>
		return Local_enuErrorState;
    682a:	fe 01       	movw	r30, r28
    682c:	e9 5b       	subi	r30, 0xB9	; 185
    682e:	ff 4f       	sbci	r31, 0xFF	; 255
    6830:	80 81       	ld	r24, Z
    6832:	29 96       	adiw	r28, 0x09	; 9
    6834:	8f af       	std	Y+63, r24	; 0x3f
    6836:	29 97       	sbiw	r28, 0x09	; 9
    6838:	55 c2       	rjmp	.+1194   	; 0x6ce4 <LCD_enuInit+0x776>
	
	Local_enuErrorState = DIO_enuSetPinDirection(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    683a:	81 e0       	ldi	r24, 0x01	; 1
    683c:	61 e0       	ldi	r22, 0x01	; 1
    683e:	41 e0       	ldi	r20, 0x01	; 1
    6840:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    6844:	fe 01       	movw	r30, r28
    6846:	e9 5b       	subi	r30, 0xB9	; 185
    6848:	ff 4f       	sbci	r31, 0xFF	; 255
    684a:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    684c:	fe 01       	movw	r30, r28
    684e:	e9 5b       	subi	r30, 0xB9	; 185
    6850:	ff 4f       	sbci	r31, 0xFF	; 255
    6852:	80 81       	ld	r24, Z
    6854:	88 23       	and	r24, r24
    6856:	41 f0       	breq	.+16     	; 0x6868 <LCD_enuInit+0x2fa>
		return Local_enuErrorState;
    6858:	fe 01       	movw	r30, r28
    685a:	e9 5b       	subi	r30, 0xB9	; 185
    685c:	ff 4f       	sbci	r31, 0xFF	; 255
    685e:	80 81       	ld	r24, Z
    6860:	29 96       	adiw	r28, 0x09	; 9
    6862:	8f af       	std	Y+63, r24	; 0x3f
    6864:	29 97       	sbiw	r28, 0x09	; 9
    6866:	3e c2       	rjmp	.+1148   	; 0x6ce4 <LCD_enuInit+0x776>
	
	Local_enuErrorState = DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    6868:	81 e0       	ldi	r24, 0x01	; 1
    686a:	60 e0       	ldi	r22, 0x00	; 0
    686c:	41 e0       	ldi	r20, 0x01	; 1
    686e:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    6872:	fe 01       	movw	r30, r28
    6874:	e9 5b       	subi	r30, 0xB9	; 185
    6876:	ff 4f       	sbci	r31, 0xFF	; 255
    6878:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    687a:	fe 01       	movw	r30, r28
    687c:	e9 5b       	subi	r30, 0xB9	; 185
    687e:	ff 4f       	sbci	r31, 0xFF	; 255
    6880:	80 81       	ld	r24, Z
    6882:	88 23       	and	r24, r24
    6884:	41 f0       	breq	.+16     	; 0x6896 <LCD_enuInit+0x328>
		return Local_enuErrorState;
    6886:	fe 01       	movw	r30, r28
    6888:	e9 5b       	subi	r30, 0xB9	; 185
    688a:	ff 4f       	sbci	r31, 0xFF	; 255
    688c:	80 81       	ld	r24, Z
    688e:	29 96       	adiw	r28, 0x09	; 9
    6890:	8f af       	std	Y+63, r24	; 0x3f
    6892:	29 97       	sbiw	r28, 0x09	; 9
    6894:	27 c2       	rjmp	.+1102   	; 0x6ce4 <LCD_enuInit+0x776>
	/* Function Set */
	Local_enuErrorState = LCD_inlenuSendCommand(LCD_8Bit_TwoLine_5_7CharFont);
    6896:	88 e3       	ldi	r24, 0x38	; 56
    6898:	0e 94 08 39 	call	0x7210	; 0x7210 <LCD_inlenuSendCommand>
    689c:	fe 01       	movw	r30, r28
    689e:	e9 5b       	subi	r30, 0xB9	; 185
    68a0:	ff 4f       	sbci	r31, 0xFF	; 255
    68a2:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    68a4:	fe 01       	movw	r30, r28
    68a6:	e9 5b       	subi	r30, 0xB9	; 185
    68a8:	ff 4f       	sbci	r31, 0xFF	; 255
    68aa:	80 81       	ld	r24, Z
    68ac:	88 23       	and	r24, r24
    68ae:	41 f0       	breq	.+16     	; 0x68c0 <LCD_enuInit+0x352>
		return Local_enuErrorState;
    68b0:	fe 01       	movw	r30, r28
    68b2:	e9 5b       	subi	r30, 0xB9	; 185
    68b4:	ff 4f       	sbci	r31, 0xFF	; 255
    68b6:	80 81       	ld	r24, Z
    68b8:	29 96       	adiw	r28, 0x09	; 9
    68ba:	8f af       	std	Y+63, r24	; 0x3f
    68bc:	29 97       	sbiw	r28, 0x09	; 9
    68be:	12 c2       	rjmp	.+1060   	; 0x6ce4 <LCD_enuInit+0x776>
    68c0:	80 e0       	ldi	r24, 0x00	; 0
    68c2:	90 e0       	ldi	r25, 0x00	; 0
    68c4:	a0 e8       	ldi	r26, 0x80	; 128
    68c6:	bf e3       	ldi	r27, 0x3F	; 63
    68c8:	8d ab       	std	Y+53, r24	; 0x35
    68ca:	9e ab       	std	Y+54, r25	; 0x36
    68cc:	af ab       	std	Y+55, r26	; 0x37
    68ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    68d0:	6d a9       	ldd	r22, Y+53	; 0x35
    68d2:	7e a9       	ldd	r23, Y+54	; 0x36
    68d4:	8f a9       	ldd	r24, Y+55	; 0x37
    68d6:	98 ad       	ldd	r25, Y+56	; 0x38
    68d8:	20 e0       	ldi	r18, 0x00	; 0
    68da:	30 e0       	ldi	r19, 0x00	; 0
    68dc:	4a e7       	ldi	r20, 0x7A	; 122
    68de:	53 e4       	ldi	r21, 0x43	; 67
    68e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    68e4:	dc 01       	movw	r26, r24
    68e6:	cb 01       	movw	r24, r22
    68e8:	89 ab       	std	Y+49, r24	; 0x31
    68ea:	9a ab       	std	Y+50, r25	; 0x32
    68ec:	ab ab       	std	Y+51, r26	; 0x33
    68ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    68f0:	69 a9       	ldd	r22, Y+49	; 0x31
    68f2:	7a a9       	ldd	r23, Y+50	; 0x32
    68f4:	8b a9       	ldd	r24, Y+51	; 0x33
    68f6:	9c a9       	ldd	r25, Y+52	; 0x34
    68f8:	20 e0       	ldi	r18, 0x00	; 0
    68fa:	30 e0       	ldi	r19, 0x00	; 0
    68fc:	40 e8       	ldi	r20, 0x80	; 128
    68fe:	5f e3       	ldi	r21, 0x3F	; 63
    6900:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    6904:	88 23       	and	r24, r24
    6906:	2c f4       	brge	.+10     	; 0x6912 <LCD_enuInit+0x3a4>
		__ticks = 1;
    6908:	81 e0       	ldi	r24, 0x01	; 1
    690a:	90 e0       	ldi	r25, 0x00	; 0
    690c:	98 ab       	std	Y+48, r25	; 0x30
    690e:	8f a7       	std	Y+47, r24	; 0x2f
    6910:	3f c0       	rjmp	.+126    	; 0x6990 <LCD_enuInit+0x422>
	else if (__tmp > 65535)
    6912:	69 a9       	ldd	r22, Y+49	; 0x31
    6914:	7a a9       	ldd	r23, Y+50	; 0x32
    6916:	8b a9       	ldd	r24, Y+51	; 0x33
    6918:	9c a9       	ldd	r25, Y+52	; 0x34
    691a:	20 e0       	ldi	r18, 0x00	; 0
    691c:	3f ef       	ldi	r19, 0xFF	; 255
    691e:	4f e7       	ldi	r20, 0x7F	; 127
    6920:	57 e4       	ldi	r21, 0x47	; 71
    6922:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    6926:	18 16       	cp	r1, r24
    6928:	4c f5       	brge	.+82     	; 0x697c <LCD_enuInit+0x40e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    692a:	6d a9       	ldd	r22, Y+53	; 0x35
    692c:	7e a9       	ldd	r23, Y+54	; 0x36
    692e:	8f a9       	ldd	r24, Y+55	; 0x37
    6930:	98 ad       	ldd	r25, Y+56	; 0x38
    6932:	20 e0       	ldi	r18, 0x00	; 0
    6934:	30 e0       	ldi	r19, 0x00	; 0
    6936:	40 e2       	ldi	r20, 0x20	; 32
    6938:	51 e4       	ldi	r21, 0x41	; 65
    693a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    693e:	dc 01       	movw	r26, r24
    6940:	cb 01       	movw	r24, r22
    6942:	bc 01       	movw	r22, r24
    6944:	cd 01       	movw	r24, r26
    6946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    694a:	dc 01       	movw	r26, r24
    694c:	cb 01       	movw	r24, r22
    694e:	98 ab       	std	Y+48, r25	; 0x30
    6950:	8f a7       	std	Y+47, r24	; 0x2f
    6952:	0f c0       	rjmp	.+30     	; 0x6972 <LCD_enuInit+0x404>
    6954:	89 e1       	ldi	r24, 0x19	; 25
    6956:	90 e0       	ldi	r25, 0x00	; 0
    6958:	9e a7       	std	Y+46, r25	; 0x2e
    695a:	8d a7       	std	Y+45, r24	; 0x2d
    695c:	8d a5       	ldd	r24, Y+45	; 0x2d
    695e:	9e a5       	ldd	r25, Y+46	; 0x2e
    6960:	01 97       	sbiw	r24, 0x01	; 1
    6962:	f1 f7       	brne	.-4      	; 0x6960 <LCD_enuInit+0x3f2>
    6964:	9e a7       	std	Y+46, r25	; 0x2e
    6966:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6968:	8f a5       	ldd	r24, Y+47	; 0x2f
    696a:	98 a9       	ldd	r25, Y+48	; 0x30
    696c:	01 97       	sbiw	r24, 0x01	; 1
    696e:	98 ab       	std	Y+48, r25	; 0x30
    6970:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6972:	8f a5       	ldd	r24, Y+47	; 0x2f
    6974:	98 a9       	ldd	r25, Y+48	; 0x30
    6976:	00 97       	sbiw	r24, 0x00	; 0
    6978:	69 f7       	brne	.-38     	; 0x6954 <LCD_enuInit+0x3e6>
    697a:	14 c0       	rjmp	.+40     	; 0x69a4 <LCD_enuInit+0x436>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    697c:	69 a9       	ldd	r22, Y+49	; 0x31
    697e:	7a a9       	ldd	r23, Y+50	; 0x32
    6980:	8b a9       	ldd	r24, Y+51	; 0x33
    6982:	9c a9       	ldd	r25, Y+52	; 0x34
    6984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6988:	dc 01       	movw	r26, r24
    698a:	cb 01       	movw	r24, r22
    698c:	98 ab       	std	Y+48, r25	; 0x30
    698e:	8f a7       	std	Y+47, r24	; 0x2f
    6990:	8f a5       	ldd	r24, Y+47	; 0x2f
    6992:	98 a9       	ldd	r25, Y+48	; 0x30
    6994:	9c a7       	std	Y+44, r25	; 0x2c
    6996:	8b a7       	std	Y+43, r24	; 0x2b
    6998:	8b a5       	ldd	r24, Y+43	; 0x2b
    699a:	9c a5       	ldd	r25, Y+44	; 0x2c
    699c:	01 97       	sbiw	r24, 0x01	; 1
    699e:	f1 f7       	brne	.-4      	; 0x699c <LCD_enuInit+0x42e>
    69a0:	9c a7       	std	Y+44, r25	; 0x2c
    69a2:	8b a7       	std	Y+43, r24	; 0x2b
	#else
	#error "LCD Mode has a wrong configuration"
	#endif
	
	/* Display ON/OFF Control */
	Local_enuErrorState = LCD_inlenuSendCommand(LCD_DisplayOn_CursorOn_Blinking);
    69a4:	8f e0       	ldi	r24, 0x0F	; 15
    69a6:	0e 94 08 39 	call	0x7210	; 0x7210 <LCD_inlenuSendCommand>
    69aa:	fe 01       	movw	r30, r28
    69ac:	e9 5b       	subi	r30, 0xB9	; 185
    69ae:	ff 4f       	sbci	r31, 0xFF	; 255
    69b0:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    69b2:	fe 01       	movw	r30, r28
    69b4:	e9 5b       	subi	r30, 0xB9	; 185
    69b6:	ff 4f       	sbci	r31, 0xFF	; 255
    69b8:	80 81       	ld	r24, Z
    69ba:	88 23       	and	r24, r24
    69bc:	41 f0       	breq	.+16     	; 0x69ce <LCD_enuInit+0x460>
		return Local_enuErrorState;
    69be:	fe 01       	movw	r30, r28
    69c0:	e9 5b       	subi	r30, 0xB9	; 185
    69c2:	ff 4f       	sbci	r31, 0xFF	; 255
    69c4:	80 81       	ld	r24, Z
    69c6:	29 96       	adiw	r28, 0x09	; 9
    69c8:	8f af       	std	Y+63, r24	; 0x3f
    69ca:	29 97       	sbiw	r28, 0x09	; 9
    69cc:	8b c1       	rjmp	.+790    	; 0x6ce4 <LCD_enuInit+0x776>
    69ce:	80 e0       	ldi	r24, 0x00	; 0
    69d0:	90 e0       	ldi	r25, 0x00	; 0
    69d2:	a0 e8       	ldi	r26, 0x80	; 128
    69d4:	bf e3       	ldi	r27, 0x3F	; 63
    69d6:	8f a3       	std	Y+39, r24	; 0x27
    69d8:	98 a7       	std	Y+40, r25	; 0x28
    69da:	a9 a7       	std	Y+41, r26	; 0x29
    69dc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    69de:	6f a1       	ldd	r22, Y+39	; 0x27
    69e0:	78 a5       	ldd	r23, Y+40	; 0x28
    69e2:	89 a5       	ldd	r24, Y+41	; 0x29
    69e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    69e6:	20 e0       	ldi	r18, 0x00	; 0
    69e8:	30 e0       	ldi	r19, 0x00	; 0
    69ea:	4a e7       	ldi	r20, 0x7A	; 122
    69ec:	53 e4       	ldi	r21, 0x43	; 67
    69ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    69f2:	dc 01       	movw	r26, r24
    69f4:	cb 01       	movw	r24, r22
    69f6:	8b a3       	std	Y+35, r24	; 0x23
    69f8:	9c a3       	std	Y+36, r25	; 0x24
    69fa:	ad a3       	std	Y+37, r26	; 0x25
    69fc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    69fe:	6b a1       	ldd	r22, Y+35	; 0x23
    6a00:	7c a1       	ldd	r23, Y+36	; 0x24
    6a02:	8d a1       	ldd	r24, Y+37	; 0x25
    6a04:	9e a1       	ldd	r25, Y+38	; 0x26
    6a06:	20 e0       	ldi	r18, 0x00	; 0
    6a08:	30 e0       	ldi	r19, 0x00	; 0
    6a0a:	40 e8       	ldi	r20, 0x80	; 128
    6a0c:	5f e3       	ldi	r21, 0x3F	; 63
    6a0e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    6a12:	88 23       	and	r24, r24
    6a14:	2c f4       	brge	.+10     	; 0x6a20 <LCD_enuInit+0x4b2>
		__ticks = 1;
    6a16:	81 e0       	ldi	r24, 0x01	; 1
    6a18:	90 e0       	ldi	r25, 0x00	; 0
    6a1a:	9a a3       	std	Y+34, r25	; 0x22
    6a1c:	89 a3       	std	Y+33, r24	; 0x21
    6a1e:	3f c0       	rjmp	.+126    	; 0x6a9e <LCD_enuInit+0x530>
	else if (__tmp > 65535)
    6a20:	6b a1       	ldd	r22, Y+35	; 0x23
    6a22:	7c a1       	ldd	r23, Y+36	; 0x24
    6a24:	8d a1       	ldd	r24, Y+37	; 0x25
    6a26:	9e a1       	ldd	r25, Y+38	; 0x26
    6a28:	20 e0       	ldi	r18, 0x00	; 0
    6a2a:	3f ef       	ldi	r19, 0xFF	; 255
    6a2c:	4f e7       	ldi	r20, 0x7F	; 127
    6a2e:	57 e4       	ldi	r21, 0x47	; 71
    6a30:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    6a34:	18 16       	cp	r1, r24
    6a36:	4c f5       	brge	.+82     	; 0x6a8a <LCD_enuInit+0x51c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a38:	6f a1       	ldd	r22, Y+39	; 0x27
    6a3a:	78 a5       	ldd	r23, Y+40	; 0x28
    6a3c:	89 a5       	ldd	r24, Y+41	; 0x29
    6a3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    6a40:	20 e0       	ldi	r18, 0x00	; 0
    6a42:	30 e0       	ldi	r19, 0x00	; 0
    6a44:	40 e2       	ldi	r20, 0x20	; 32
    6a46:	51 e4       	ldi	r21, 0x41	; 65
    6a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a4c:	dc 01       	movw	r26, r24
    6a4e:	cb 01       	movw	r24, r22
    6a50:	bc 01       	movw	r22, r24
    6a52:	cd 01       	movw	r24, r26
    6a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a58:	dc 01       	movw	r26, r24
    6a5a:	cb 01       	movw	r24, r22
    6a5c:	9a a3       	std	Y+34, r25	; 0x22
    6a5e:	89 a3       	std	Y+33, r24	; 0x21
    6a60:	0f c0       	rjmp	.+30     	; 0x6a80 <LCD_enuInit+0x512>
    6a62:	89 e1       	ldi	r24, 0x19	; 25
    6a64:	90 e0       	ldi	r25, 0x00	; 0
    6a66:	98 a3       	std	Y+32, r25	; 0x20
    6a68:	8f 8f       	std	Y+31, r24	; 0x1f
    6a6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6a6c:	98 a1       	ldd	r25, Y+32	; 0x20
    6a6e:	01 97       	sbiw	r24, 0x01	; 1
    6a70:	f1 f7       	brne	.-4      	; 0x6a6e <LCD_enuInit+0x500>
    6a72:	98 a3       	std	Y+32, r25	; 0x20
    6a74:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a76:	89 a1       	ldd	r24, Y+33	; 0x21
    6a78:	9a a1       	ldd	r25, Y+34	; 0x22
    6a7a:	01 97       	sbiw	r24, 0x01	; 1
    6a7c:	9a a3       	std	Y+34, r25	; 0x22
    6a7e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a80:	89 a1       	ldd	r24, Y+33	; 0x21
    6a82:	9a a1       	ldd	r25, Y+34	; 0x22
    6a84:	00 97       	sbiw	r24, 0x00	; 0
    6a86:	69 f7       	brne	.-38     	; 0x6a62 <LCD_enuInit+0x4f4>
    6a88:	14 c0       	rjmp	.+40     	; 0x6ab2 <LCD_enuInit+0x544>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6a8a:	6b a1       	ldd	r22, Y+35	; 0x23
    6a8c:	7c a1       	ldd	r23, Y+36	; 0x24
    6a8e:	8d a1       	ldd	r24, Y+37	; 0x25
    6a90:	9e a1       	ldd	r25, Y+38	; 0x26
    6a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a96:	dc 01       	movw	r26, r24
    6a98:	cb 01       	movw	r24, r22
    6a9a:	9a a3       	std	Y+34, r25	; 0x22
    6a9c:	89 a3       	std	Y+33, r24	; 0x21
    6a9e:	89 a1       	ldd	r24, Y+33	; 0x21
    6aa0:	9a a1       	ldd	r25, Y+34	; 0x22
    6aa2:	9e 8f       	std	Y+30, r25	; 0x1e
    6aa4:	8d 8f       	std	Y+29, r24	; 0x1d
    6aa6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6aa8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6aaa:	01 97       	sbiw	r24, 0x01	; 1
    6aac:	f1 f7       	brne	.-4      	; 0x6aaa <LCD_enuInit+0x53c>
    6aae:	9e 8f       	std	Y+30, r25	; 0x1e
    6ab0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	
	/* Display Clear */
	Local_enuErrorState = LCD_inlenuSendCommand(LCD_Clear_Display);
    6ab2:	81 e0       	ldi	r24, 0x01	; 1
    6ab4:	0e 94 08 39 	call	0x7210	; 0x7210 <LCD_inlenuSendCommand>
    6ab8:	fe 01       	movw	r30, r28
    6aba:	e9 5b       	subi	r30, 0xB9	; 185
    6abc:	ff 4f       	sbci	r31, 0xFF	; 255
    6abe:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    6ac0:	fe 01       	movw	r30, r28
    6ac2:	e9 5b       	subi	r30, 0xB9	; 185
    6ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    6ac6:	80 81       	ld	r24, Z
    6ac8:	88 23       	and	r24, r24
    6aca:	41 f0       	breq	.+16     	; 0x6adc <LCD_enuInit+0x56e>
		return Local_enuErrorState;
    6acc:	fe 01       	movw	r30, r28
    6ace:	e9 5b       	subi	r30, 0xB9	; 185
    6ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    6ad2:	80 81       	ld	r24, Z
    6ad4:	29 96       	adiw	r28, 0x09	; 9
    6ad6:	8f af       	std	Y+63, r24	; 0x3f
    6ad8:	29 97       	sbiw	r28, 0x09	; 9
    6ada:	04 c1       	rjmp	.+520    	; 0x6ce4 <LCD_enuInit+0x776>
    6adc:	80 e0       	ldi	r24, 0x00	; 0
    6ade:	90 e0       	ldi	r25, 0x00	; 0
    6ae0:	a0 e0       	ldi	r26, 0x00	; 0
    6ae2:	b0 e4       	ldi	r27, 0x40	; 64
    6ae4:	89 8f       	std	Y+25, r24	; 0x19
    6ae6:	9a 8f       	std	Y+26, r25	; 0x1a
    6ae8:	ab 8f       	std	Y+27, r26	; 0x1b
    6aea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6aec:	69 8d       	ldd	r22, Y+25	; 0x19
    6aee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6af0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6af2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6af4:	20 e0       	ldi	r18, 0x00	; 0
    6af6:	30 e0       	ldi	r19, 0x00	; 0
    6af8:	4a e7       	ldi	r20, 0x7A	; 122
    6afa:	53 e4       	ldi	r21, 0x43	; 67
    6afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6b00:	dc 01       	movw	r26, r24
    6b02:	cb 01       	movw	r24, r22
    6b04:	8d 8b       	std	Y+21, r24	; 0x15
    6b06:	9e 8b       	std	Y+22, r25	; 0x16
    6b08:	af 8b       	std	Y+23, r26	; 0x17
    6b0a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6b0c:	6d 89       	ldd	r22, Y+21	; 0x15
    6b0e:	7e 89       	ldd	r23, Y+22	; 0x16
    6b10:	8f 89       	ldd	r24, Y+23	; 0x17
    6b12:	98 8d       	ldd	r25, Y+24	; 0x18
    6b14:	20 e0       	ldi	r18, 0x00	; 0
    6b16:	30 e0       	ldi	r19, 0x00	; 0
    6b18:	40 e8       	ldi	r20, 0x80	; 128
    6b1a:	5f e3       	ldi	r21, 0x3F	; 63
    6b1c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    6b20:	88 23       	and	r24, r24
    6b22:	2c f4       	brge	.+10     	; 0x6b2e <LCD_enuInit+0x5c0>
		__ticks = 1;
    6b24:	81 e0       	ldi	r24, 0x01	; 1
    6b26:	90 e0       	ldi	r25, 0x00	; 0
    6b28:	9c 8b       	std	Y+20, r25	; 0x14
    6b2a:	8b 8b       	std	Y+19, r24	; 0x13
    6b2c:	3f c0       	rjmp	.+126    	; 0x6bac <LCD_enuInit+0x63e>
	else if (__tmp > 65535)
    6b2e:	6d 89       	ldd	r22, Y+21	; 0x15
    6b30:	7e 89       	ldd	r23, Y+22	; 0x16
    6b32:	8f 89       	ldd	r24, Y+23	; 0x17
    6b34:	98 8d       	ldd	r25, Y+24	; 0x18
    6b36:	20 e0       	ldi	r18, 0x00	; 0
    6b38:	3f ef       	ldi	r19, 0xFF	; 255
    6b3a:	4f e7       	ldi	r20, 0x7F	; 127
    6b3c:	57 e4       	ldi	r21, 0x47	; 71
    6b3e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    6b42:	18 16       	cp	r1, r24
    6b44:	4c f5       	brge	.+82     	; 0x6b98 <LCD_enuInit+0x62a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6b46:	69 8d       	ldd	r22, Y+25	; 0x19
    6b48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6b4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6b4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6b4e:	20 e0       	ldi	r18, 0x00	; 0
    6b50:	30 e0       	ldi	r19, 0x00	; 0
    6b52:	40 e2       	ldi	r20, 0x20	; 32
    6b54:	51 e4       	ldi	r21, 0x41	; 65
    6b56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6b5a:	dc 01       	movw	r26, r24
    6b5c:	cb 01       	movw	r24, r22
    6b5e:	bc 01       	movw	r22, r24
    6b60:	cd 01       	movw	r24, r26
    6b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b66:	dc 01       	movw	r26, r24
    6b68:	cb 01       	movw	r24, r22
    6b6a:	9c 8b       	std	Y+20, r25	; 0x14
    6b6c:	8b 8b       	std	Y+19, r24	; 0x13
    6b6e:	0f c0       	rjmp	.+30     	; 0x6b8e <LCD_enuInit+0x620>
    6b70:	89 e1       	ldi	r24, 0x19	; 25
    6b72:	90 e0       	ldi	r25, 0x00	; 0
    6b74:	9a 8b       	std	Y+18, r25	; 0x12
    6b76:	89 8b       	std	Y+17, r24	; 0x11
    6b78:	89 89       	ldd	r24, Y+17	; 0x11
    6b7a:	9a 89       	ldd	r25, Y+18	; 0x12
    6b7c:	01 97       	sbiw	r24, 0x01	; 1
    6b7e:	f1 f7       	brne	.-4      	; 0x6b7c <LCD_enuInit+0x60e>
    6b80:	9a 8b       	std	Y+18, r25	; 0x12
    6b82:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6b84:	8b 89       	ldd	r24, Y+19	; 0x13
    6b86:	9c 89       	ldd	r25, Y+20	; 0x14
    6b88:	01 97       	sbiw	r24, 0x01	; 1
    6b8a:	9c 8b       	std	Y+20, r25	; 0x14
    6b8c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b8e:	8b 89       	ldd	r24, Y+19	; 0x13
    6b90:	9c 89       	ldd	r25, Y+20	; 0x14
    6b92:	00 97       	sbiw	r24, 0x00	; 0
    6b94:	69 f7       	brne	.-38     	; 0x6b70 <LCD_enuInit+0x602>
    6b96:	14 c0       	rjmp	.+40     	; 0x6bc0 <LCD_enuInit+0x652>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b98:	6d 89       	ldd	r22, Y+21	; 0x15
    6b9a:	7e 89       	ldd	r23, Y+22	; 0x16
    6b9c:	8f 89       	ldd	r24, Y+23	; 0x17
    6b9e:	98 8d       	ldd	r25, Y+24	; 0x18
    6ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ba4:	dc 01       	movw	r26, r24
    6ba6:	cb 01       	movw	r24, r22
    6ba8:	9c 8b       	std	Y+20, r25	; 0x14
    6baa:	8b 8b       	std	Y+19, r24	; 0x13
    6bac:	8b 89       	ldd	r24, Y+19	; 0x13
    6bae:	9c 89       	ldd	r25, Y+20	; 0x14
    6bb0:	98 8b       	std	Y+16, r25	; 0x10
    6bb2:	8f 87       	std	Y+15, r24	; 0x0f
    6bb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    6bb6:	98 89       	ldd	r25, Y+16	; 0x10
    6bb8:	01 97       	sbiw	r24, 0x01	; 1
    6bba:	f1 f7       	brne	.-4      	; 0x6bb8 <LCD_enuInit+0x64a>
    6bbc:	98 8b       	std	Y+16, r25	; 0x10
    6bbe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	
	/* Entry Mode Set */
	Local_enuErrorState = LCD_inlenuSendCommand(LCD_Increase_NoShift);
    6bc0:	86 e0       	ldi	r24, 0x06	; 6
    6bc2:	0e 94 08 39 	call	0x7210	; 0x7210 <LCD_inlenuSendCommand>
    6bc6:	fe 01       	movw	r30, r28
    6bc8:	e9 5b       	subi	r30, 0xB9	; 185
    6bca:	ff 4f       	sbci	r31, 0xFF	; 255
    6bcc:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    6bce:	fe 01       	movw	r30, r28
    6bd0:	e9 5b       	subi	r30, 0xB9	; 185
    6bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    6bd4:	80 81       	ld	r24, Z
    6bd6:	88 23       	and	r24, r24
    6bd8:	41 f0       	breq	.+16     	; 0x6bea <LCD_enuInit+0x67c>
		return Local_enuErrorState;
    6bda:	fe 01       	movw	r30, r28
    6bdc:	e9 5b       	subi	r30, 0xB9	; 185
    6bde:	ff 4f       	sbci	r31, 0xFF	; 255
    6be0:	80 81       	ld	r24, Z
    6be2:	29 96       	adiw	r28, 0x09	; 9
    6be4:	8f af       	std	Y+63, r24	; 0x3f
    6be6:	29 97       	sbiw	r28, 0x09	; 9
    6be8:	7d c0       	rjmp	.+250    	; 0x6ce4 <LCD_enuInit+0x776>
    6bea:	80 e0       	ldi	r24, 0x00	; 0
    6bec:	90 e0       	ldi	r25, 0x00	; 0
    6bee:	a0 e8       	ldi	r26, 0x80	; 128
    6bf0:	bf e3       	ldi	r27, 0x3F	; 63
    6bf2:	8b 87       	std	Y+11, r24	; 0x0b
    6bf4:	9c 87       	std	Y+12, r25	; 0x0c
    6bf6:	ad 87       	std	Y+13, r26	; 0x0d
    6bf8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6bfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    6bfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    6bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c00:	9e 85       	ldd	r25, Y+14	; 0x0e
    6c02:	20 e0       	ldi	r18, 0x00	; 0
    6c04:	30 e0       	ldi	r19, 0x00	; 0
    6c06:	4a e7       	ldi	r20, 0x7A	; 122
    6c08:	53 e4       	ldi	r21, 0x43	; 67
    6c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c0e:	dc 01       	movw	r26, r24
    6c10:	cb 01       	movw	r24, r22
    6c12:	8f 83       	std	Y+7, r24	; 0x07
    6c14:	98 87       	std	Y+8, r25	; 0x08
    6c16:	a9 87       	std	Y+9, r26	; 0x09
    6c18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6c1a:	6f 81       	ldd	r22, Y+7	; 0x07
    6c1c:	78 85       	ldd	r23, Y+8	; 0x08
    6c1e:	89 85       	ldd	r24, Y+9	; 0x09
    6c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c22:	20 e0       	ldi	r18, 0x00	; 0
    6c24:	30 e0       	ldi	r19, 0x00	; 0
    6c26:	40 e8       	ldi	r20, 0x80	; 128
    6c28:	5f e3       	ldi	r21, 0x3F	; 63
    6c2a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    6c2e:	88 23       	and	r24, r24
    6c30:	2c f4       	brge	.+10     	; 0x6c3c <LCD_enuInit+0x6ce>
		__ticks = 1;
    6c32:	81 e0       	ldi	r24, 0x01	; 1
    6c34:	90 e0       	ldi	r25, 0x00	; 0
    6c36:	9e 83       	std	Y+6, r25	; 0x06
    6c38:	8d 83       	std	Y+5, r24	; 0x05
    6c3a:	3f c0       	rjmp	.+126    	; 0x6cba <LCD_enuInit+0x74c>
	else if (__tmp > 65535)
    6c3c:	6f 81       	ldd	r22, Y+7	; 0x07
    6c3e:	78 85       	ldd	r23, Y+8	; 0x08
    6c40:	89 85       	ldd	r24, Y+9	; 0x09
    6c42:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c44:	20 e0       	ldi	r18, 0x00	; 0
    6c46:	3f ef       	ldi	r19, 0xFF	; 255
    6c48:	4f e7       	ldi	r20, 0x7F	; 127
    6c4a:	57 e4       	ldi	r21, 0x47	; 71
    6c4c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    6c50:	18 16       	cp	r1, r24
    6c52:	4c f5       	brge	.+82     	; 0x6ca6 <LCD_enuInit+0x738>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6c54:	6b 85       	ldd	r22, Y+11	; 0x0b
    6c56:	7c 85       	ldd	r23, Y+12	; 0x0c
    6c58:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    6c5c:	20 e0       	ldi	r18, 0x00	; 0
    6c5e:	30 e0       	ldi	r19, 0x00	; 0
    6c60:	40 e2       	ldi	r20, 0x20	; 32
    6c62:	51 e4       	ldi	r21, 0x41	; 65
    6c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c68:	dc 01       	movw	r26, r24
    6c6a:	cb 01       	movw	r24, r22
    6c6c:	bc 01       	movw	r22, r24
    6c6e:	cd 01       	movw	r24, r26
    6c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c74:	dc 01       	movw	r26, r24
    6c76:	cb 01       	movw	r24, r22
    6c78:	9e 83       	std	Y+6, r25	; 0x06
    6c7a:	8d 83       	std	Y+5, r24	; 0x05
    6c7c:	0f c0       	rjmp	.+30     	; 0x6c9c <LCD_enuInit+0x72e>
    6c7e:	89 e1       	ldi	r24, 0x19	; 25
    6c80:	90 e0       	ldi	r25, 0x00	; 0
    6c82:	9c 83       	std	Y+4, r25	; 0x04
    6c84:	8b 83       	std	Y+3, r24	; 0x03
    6c86:	8b 81       	ldd	r24, Y+3	; 0x03
    6c88:	9c 81       	ldd	r25, Y+4	; 0x04
    6c8a:	01 97       	sbiw	r24, 0x01	; 1
    6c8c:	f1 f7       	brne	.-4      	; 0x6c8a <LCD_enuInit+0x71c>
    6c8e:	9c 83       	std	Y+4, r25	; 0x04
    6c90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c92:	8d 81       	ldd	r24, Y+5	; 0x05
    6c94:	9e 81       	ldd	r25, Y+6	; 0x06
    6c96:	01 97       	sbiw	r24, 0x01	; 1
    6c98:	9e 83       	std	Y+6, r25	; 0x06
    6c9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    6c9e:	9e 81       	ldd	r25, Y+6	; 0x06
    6ca0:	00 97       	sbiw	r24, 0x00	; 0
    6ca2:	69 f7       	brne	.-38     	; 0x6c7e <LCD_enuInit+0x710>
    6ca4:	14 c0       	rjmp	.+40     	; 0x6cce <LCD_enuInit+0x760>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6ca6:	6f 81       	ldd	r22, Y+7	; 0x07
    6ca8:	78 85       	ldd	r23, Y+8	; 0x08
    6caa:	89 85       	ldd	r24, Y+9	; 0x09
    6cac:	9a 85       	ldd	r25, Y+10	; 0x0a
    6cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6cb2:	dc 01       	movw	r26, r24
    6cb4:	cb 01       	movw	r24, r22
    6cb6:	9e 83       	std	Y+6, r25	; 0x06
    6cb8:	8d 83       	std	Y+5, r24	; 0x05
    6cba:	8d 81       	ldd	r24, Y+5	; 0x05
    6cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    6cbe:	9a 83       	std	Y+2, r25	; 0x02
    6cc0:	89 83       	std	Y+1, r24	; 0x01
    6cc2:	89 81       	ldd	r24, Y+1	; 0x01
    6cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    6cc6:	01 97       	sbiw	r24, 0x01	; 1
    6cc8:	f1 f7       	brne	.-4      	; 0x6cc6 <LCD_enuInit+0x758>
    6cca:	9a 83       	std	Y+2, r25	; 0x02
    6ccc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	
	Local_enuErrorState = ES_OK;
    6cce:	fe 01       	movw	r30, r28
    6cd0:	e9 5b       	subi	r30, 0xB9	; 185
    6cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    6cd4:	10 82       	st	Z, r1
	return Local_enuErrorState;
    6cd6:	fe 01       	movw	r30, r28
    6cd8:	e9 5b       	subi	r30, 0xB9	; 185
    6cda:	ff 4f       	sbci	r31, 0xFF	; 255
    6cdc:	80 81       	ld	r24, Z
    6cde:	29 96       	adiw	r28, 0x09	; 9
    6ce0:	8f af       	std	Y+63, r24	; 0x3f
    6ce2:	29 97       	sbiw	r28, 0x09	; 9
    6ce4:	29 96       	adiw	r28, 0x09	; 9
    6ce6:	8f ad       	ldd	r24, Y+63	; 0x3f
    6ce8:	29 97       	sbiw	r28, 0x09	; 9
}
    6cea:	c8 5b       	subi	r28, 0xB8	; 184
    6cec:	df 4f       	sbci	r29, 0xFF	; 255
    6cee:	0f b6       	in	r0, 0x3f	; 63
    6cf0:	f8 94       	cli
    6cf2:	de bf       	out	0x3e, r29	; 62
    6cf4:	0f be       	out	0x3f, r0	; 63
    6cf6:	cd bf       	out	0x3d, r28	; 61
    6cf8:	cf 91       	pop	r28
    6cfa:	df 91       	pop	r29
    6cfc:	1f 91       	pop	r17
    6cfe:	0f 91       	pop	r16
    6d00:	08 95       	ret

00006d02 <LCD_enuDisplayChar>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    6d02:	df 93       	push	r29
    6d04:	cf 93       	push	r28
    6d06:	00 d0       	rcall	.+0      	; 0x6d08 <LCD_enuDisplayChar+0x6>
    6d08:	0f 92       	push	r0
    6d0a:	cd b7       	in	r28, 0x3d	; 61
    6d0c:	de b7       	in	r29, 0x3e	; 62
    6d0e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    6d10:	81 e0       	ldi	r24, 0x01	; 1
    6d12:	89 83       	std	Y+1, r24	; 0x01
	
	/* Check position in case of we send data */
	LCD_vidCheckPosition();
    6d14:	0e 94 94 39 	call	0x7328	; 0x7328 <LCD_vidCheckPosition>
	
	/* RS --> High to write Data */
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8HIGH);
    6d18:	80 e0       	ldi	r24, 0x00	; 0
    6d1a:	60 e0       	ldi	r22, 0x00	; 0
    6d1c:	41 e0       	ldi	r20, 0x01	; 1
    6d1e:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6d22:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enuErrorState != ES_OK)
    6d24:	89 81       	ldd	r24, Y+1	; 0x01
    6d26:	88 23       	and	r24, r24
    6d28:	19 f0       	breq	.+6      	; 0x6d30 <LCD_enuDisplayChar+0x2e>
		return Local_enuErrorState;
    6d2a:	89 81       	ldd	r24, Y+1	; 0x01
    6d2c:	8b 83       	std	Y+3, r24	; 0x03
    6d2e:	0d c0       	rjmp	.+26     	; 0x6d4a <LCD_enuDisplayChar+0x48>
	
	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Data);
    6d30:	8a 81       	ldd	r24, Y+2	; 0x02
    6d32:	0e 94 d5 36 	call	0x6daa	; 0x6daa <LCD_enuLatch>
    6d36:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enuErrorState != ES_OK)
    6d38:	89 81       	ldd	r24, Y+1	; 0x01
    6d3a:	88 23       	and	r24, r24
    6d3c:	19 f0       	breq	.+6      	; 0x6d44 <LCD_enuDisplayChar+0x42>
		return Local_enuErrorState;
    6d3e:	89 81       	ldd	r24, Y+1	; 0x01
    6d40:	8b 83       	std	Y+3, r24	; 0x03
    6d42:	03 c0       	rjmp	.+6      	; 0x6d4a <LCD_enuDisplayChar+0x48>
	
	Local_enuErrorState = ES_OK;
    6d44:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    6d46:	89 81       	ldd	r24, Y+1	; 0x01
    6d48:	8b 83       	std	Y+3, r24	; 0x03
    6d4a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    6d4c:	0f 90       	pop	r0
    6d4e:	0f 90       	pop	r0
    6d50:	0f 90       	pop	r0
    6d52:	cf 91       	pop	r28
    6d54:	df 91       	pop	r29
    6d56:	08 95       	ret

00006d58 <LCD_enuSendCommand>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    6d58:	df 93       	push	r29
    6d5a:	cf 93       	push	r28
    6d5c:	00 d0       	rcall	.+0      	; 0x6d5e <LCD_enuSendCommand+0x6>
    6d5e:	0f 92       	push	r0
    6d60:	cd b7       	in	r28, 0x3d	; 61
    6d62:	de b7       	in	r29, 0x3e	; 62
    6d64:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    6d66:	81 e0       	ldi	r24, 0x01	; 1
    6d68:	89 83       	std	Y+1, r24	; 0x01
	
	/* RS --> LOW to write Command */
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8LOW);
    6d6a:	80 e0       	ldi	r24, 0x00	; 0
    6d6c:	60 e0       	ldi	r22, 0x00	; 0
    6d6e:	40 e0       	ldi	r20, 0x00	; 0
    6d70:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6d74:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enuErrorState != ES_OK)
    6d76:	89 81       	ldd	r24, Y+1	; 0x01
    6d78:	88 23       	and	r24, r24
    6d7a:	19 f0       	breq	.+6      	; 0x6d82 <LCD_enuSendCommand+0x2a>
		return Local_enuErrorState;
    6d7c:	89 81       	ldd	r24, Y+1	; 0x01
    6d7e:	8b 83       	std	Y+3, r24	; 0x03
    6d80:	0d c0       	rjmp	.+26     	; 0x6d9c <LCD_enuSendCommand+0x44>
	
	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Command);
    6d82:	8a 81       	ldd	r24, Y+2	; 0x02
    6d84:	0e 94 d5 36 	call	0x6daa	; 0x6daa <LCD_enuLatch>
    6d88:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enuErrorState != ES_OK)
    6d8a:	89 81       	ldd	r24, Y+1	; 0x01
    6d8c:	88 23       	and	r24, r24
    6d8e:	19 f0       	breq	.+6      	; 0x6d96 <LCD_enuSendCommand+0x3e>
		return Local_enuErrorState;
    6d90:	89 81       	ldd	r24, Y+1	; 0x01
    6d92:	8b 83       	std	Y+3, r24	; 0x03
    6d94:	03 c0       	rjmp	.+6      	; 0x6d9c <LCD_enuSendCommand+0x44>
	
	Local_enuErrorState = ES_OK;
    6d96:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    6d98:	89 81       	ldd	r24, Y+1	; 0x01
    6d9a:	8b 83       	std	Y+3, r24	; 0x03
    6d9c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    6d9e:	0f 90       	pop	r0
    6da0:	0f 90       	pop	r0
    6da2:	0f 90       	pop	r0
    6da4:	cf 91       	pop	r28
    6da6:	df 91       	pop	r29
    6da8:	08 95       	ret

00006daa <LCD_enuLatch>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
static ES_t LCD_enuLatch(u8 Copy_u8Data)
{	
    6daa:	df 93       	push	r29
    6dac:	cf 93       	push	r28
    6dae:	cd b7       	in	r28, 0x3d	; 61
    6db0:	de b7       	in	r29, 0x3e	; 62
    6db2:	6f 97       	sbiw	r28, 0x1f	; 31
    6db4:	0f b6       	in	r0, 0x3f	; 63
    6db6:	f8 94       	cli
    6db8:	de bf       	out	0x3e, r29	; 62
    6dba:	0f be       	out	0x3f, r0	; 63
    6dbc:	cd bf       	out	0x3d, r28	; 61
    6dbe:	8e 8f       	std	Y+30, r24	; 0x1e
	ES_t Local_enuErrorState = ES_NOK;
    6dc0:	81 e0       	ldi	r24, 0x01	; 1
    6dc2:	8d 8f       	std	Y+29, r24	; 0x1d
	
	/* RW --> LOW to write */
	Local_enuErrorState = DIO_enuSetPinVal(RW_PORT, RW_PIN, DIO_u8LOW);
    6dc4:	80 e0       	ldi	r24, 0x00	; 0
    6dc6:	61 e0       	ldi	r22, 0x01	; 1
    6dc8:	40 e0       	ldi	r20, 0x00	; 0
    6dca:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6dce:	8d 8f       	std	Y+29, r24	; 0x1d
	if(Local_enuErrorState != ES_OK)
    6dd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6dd2:	88 23       	and	r24, r24
    6dd4:	19 f0       	breq	.+6      	; 0x6ddc <LCD_enuLatch+0x32>
		return Local_enuErrorState;
    6dd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6dd8:	8f 8f       	std	Y+31, r24	; 0x1f
    6dda:	81 c1       	rjmp	.+770    	; 0x70de <LCD_enuLatch+0x334>
	
	/* Enable --> HIGH */
	Local_enuErrorState = DIO_enuSetPinVal(EN_PORT, EN_PIN, DIO_u8HIGH);
    6ddc:	80 e0       	ldi	r24, 0x00	; 0
    6dde:	62 e0       	ldi	r22, 0x02	; 2
    6de0:	41 e0       	ldi	r20, 0x01	; 1
    6de2:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6de6:	8d 8f       	std	Y+29, r24	; 0x1d
	if(Local_enuErrorState != ES_OK)
    6de8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6dea:	88 23       	and	r24, r24
    6dec:	19 f0       	breq	.+6      	; 0x6df4 <LCD_enuLatch+0x4a>
		return Local_enuErrorState;
    6dee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6df0:	8f 8f       	std	Y+31, r24	; 0x1f
    6df2:	75 c1       	rjmp	.+746    	; 0x70de <LCD_enuLatch+0x334>
	
	#if LCD_MODE == EIGHT_BIT
	/* Write Command to Data Pins */
	Local_enuErrorState = DIO_enuSetPinVal(D7_PORT, D7_PIN, ((Copy_u8Data >> D7_POS) & MASK_BIT));
    6df4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6df6:	98 2f       	mov	r25, r24
    6df8:	99 1f       	adc	r25, r25
    6dfa:	99 27       	eor	r25, r25
    6dfc:	99 1f       	adc	r25, r25
    6dfe:	81 e0       	ldi	r24, 0x01	; 1
    6e00:	67 e0       	ldi	r22, 0x07	; 7
    6e02:	49 2f       	mov	r20, r25
    6e04:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6e08:	8d 8f       	std	Y+29, r24	; 0x1d
	if(Local_enuErrorState != ES_OK)
    6e0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6e0c:	88 23       	and	r24, r24
    6e0e:	19 f0       	breq	.+6      	; 0x6e16 <LCD_enuLatch+0x6c>
		return Local_enuErrorState;
    6e10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6e12:	8f 8f       	std	Y+31, r24	; 0x1f
    6e14:	64 c1       	rjmp	.+712    	; 0x70de <LCD_enuLatch+0x334>
		
	Local_enuErrorState = DIO_enuSetPinVal(D6_PORT, D6_PIN, ((Copy_u8Data >> D6_POS) & MASK_BIT));
    6e16:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6e18:	82 95       	swap	r24
    6e1a:	86 95       	lsr	r24
    6e1c:	86 95       	lsr	r24
    6e1e:	83 70       	andi	r24, 0x03	; 3
    6e20:	98 2f       	mov	r25, r24
    6e22:	91 70       	andi	r25, 0x01	; 1
    6e24:	81 e0       	ldi	r24, 0x01	; 1
    6e26:	66 e0       	ldi	r22, 0x06	; 6
    6e28:	49 2f       	mov	r20, r25
    6e2a:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6e2e:	8d 8f       	std	Y+29, r24	; 0x1d
	if(Local_enuErrorState != ES_OK)
    6e30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6e32:	88 23       	and	r24, r24
    6e34:	19 f0       	breq	.+6      	; 0x6e3c <LCD_enuLatch+0x92>
		return Local_enuErrorState;
    6e36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6e38:	8f 8f       	std	Y+31, r24	; 0x1f
    6e3a:	51 c1       	rjmp	.+674    	; 0x70de <LCD_enuLatch+0x334>
		
	Local_enuErrorState = DIO_enuSetPinVal(D5_PORT, D5_PIN, ((Copy_u8Data >> D5_POS) & MASK_BIT));
    6e3c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6e3e:	82 95       	swap	r24
    6e40:	86 95       	lsr	r24
    6e42:	87 70       	andi	r24, 0x07	; 7
    6e44:	98 2f       	mov	r25, r24
    6e46:	91 70       	andi	r25, 0x01	; 1
    6e48:	81 e0       	ldi	r24, 0x01	; 1
    6e4a:	65 e0       	ldi	r22, 0x05	; 5
    6e4c:	49 2f       	mov	r20, r25
    6e4e:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6e52:	8d 8f       	std	Y+29, r24	; 0x1d
	if(Local_enuErrorState != ES_OK)
    6e54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6e56:	88 23       	and	r24, r24
    6e58:	19 f0       	breq	.+6      	; 0x6e60 <LCD_enuLatch+0xb6>
		return Local_enuErrorState;
    6e5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6e5c:	8f 8f       	std	Y+31, r24	; 0x1f
    6e5e:	3f c1       	rjmp	.+638    	; 0x70de <LCD_enuLatch+0x334>
		
	Local_enuErrorState = DIO_enuSetPinVal(D4_PORT, D4_PIN, ((Copy_u8Data >> D4_POS) & MASK_BIT));
    6e60:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6e62:	82 95       	swap	r24
    6e64:	8f 70       	andi	r24, 0x0F	; 15
    6e66:	98 2f       	mov	r25, r24
    6e68:	91 70       	andi	r25, 0x01	; 1
    6e6a:	81 e0       	ldi	r24, 0x01	; 1
    6e6c:	64 e0       	ldi	r22, 0x04	; 4
    6e6e:	49 2f       	mov	r20, r25
    6e70:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6e74:	8d 8f       	std	Y+29, r24	; 0x1d
	if(Local_enuErrorState != ES_OK)
    6e76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6e78:	88 23       	and	r24, r24
    6e7a:	19 f0       	breq	.+6      	; 0x6e82 <LCD_enuLatch+0xd8>
		return Local_enuErrorState;
    6e7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6e7e:	8f 8f       	std	Y+31, r24	; 0x1f
    6e80:	2e c1       	rjmp	.+604    	; 0x70de <LCD_enuLatch+0x334>
		
	Local_enuErrorState = DIO_enuSetPinVal(D3_PORT, D3_PIN, ((Copy_u8Data >> D3_POS) & MASK_BIT));
    6e82:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6e84:	86 95       	lsr	r24
    6e86:	86 95       	lsr	r24
    6e88:	86 95       	lsr	r24
    6e8a:	98 2f       	mov	r25, r24
    6e8c:	91 70       	andi	r25, 0x01	; 1
    6e8e:	81 e0       	ldi	r24, 0x01	; 1
    6e90:	63 e0       	ldi	r22, 0x03	; 3
    6e92:	49 2f       	mov	r20, r25
    6e94:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6e98:	8d 8f       	std	Y+29, r24	; 0x1d
	if(Local_enuErrorState != ES_OK)
    6e9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6e9c:	88 23       	and	r24, r24
    6e9e:	19 f0       	breq	.+6      	; 0x6ea6 <LCD_enuLatch+0xfc>
		return Local_enuErrorState;
    6ea0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6ea2:	8f 8f       	std	Y+31, r24	; 0x1f
    6ea4:	1c c1       	rjmp	.+568    	; 0x70de <LCD_enuLatch+0x334>
		
	Local_enuErrorState = DIO_enuSetPinVal(D2_PORT, D2_PIN, ((Copy_u8Data >> D2_POS) & MASK_BIT));
    6ea6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6ea8:	86 95       	lsr	r24
    6eaa:	86 95       	lsr	r24
    6eac:	98 2f       	mov	r25, r24
    6eae:	91 70       	andi	r25, 0x01	; 1
    6eb0:	81 e0       	ldi	r24, 0x01	; 1
    6eb2:	62 e0       	ldi	r22, 0x02	; 2
    6eb4:	49 2f       	mov	r20, r25
    6eb6:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6eba:	8d 8f       	std	Y+29, r24	; 0x1d
	if(Local_enuErrorState != ES_OK)
    6ebc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6ebe:	88 23       	and	r24, r24
    6ec0:	19 f0       	breq	.+6      	; 0x6ec8 <LCD_enuLatch+0x11e>
		return Local_enuErrorState;
    6ec2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6ec4:	8f 8f       	std	Y+31, r24	; 0x1f
    6ec6:	0b c1       	rjmp	.+534    	; 0x70de <LCD_enuLatch+0x334>
	
	Local_enuErrorState = DIO_enuSetPinVal(D1_PORT, D1_PIN, ((Copy_u8Data >> D1_POS) & MASK_BIT));
    6ec8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6eca:	86 95       	lsr	r24
    6ecc:	98 2f       	mov	r25, r24
    6ece:	91 70       	andi	r25, 0x01	; 1
    6ed0:	81 e0       	ldi	r24, 0x01	; 1
    6ed2:	61 e0       	ldi	r22, 0x01	; 1
    6ed4:	49 2f       	mov	r20, r25
    6ed6:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6eda:	8d 8f       	std	Y+29, r24	; 0x1d
	if(Local_enuErrorState != ES_OK)
    6edc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6ede:	88 23       	and	r24, r24
    6ee0:	19 f0       	breq	.+6      	; 0x6ee8 <LCD_enuLatch+0x13e>
		return Local_enuErrorState;
    6ee2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6ee4:	8f 8f       	std	Y+31, r24	; 0x1f
    6ee6:	fb c0       	rjmp	.+502    	; 0x70de <LCD_enuLatch+0x334>
		
	Local_enuErrorState = DIO_enuSetPinVal(D0_PORT, D0_PIN, ((Copy_u8Data >> D0_POS) & MASK_BIT));
    6ee8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6eea:	98 2f       	mov	r25, r24
    6eec:	91 70       	andi	r25, 0x01	; 1
    6eee:	81 e0       	ldi	r24, 0x01	; 1
    6ef0:	60 e0       	ldi	r22, 0x00	; 0
    6ef2:	49 2f       	mov	r20, r25
    6ef4:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6ef8:	8d 8f       	std	Y+29, r24	; 0x1d
	if(Local_enuErrorState != ES_OK)
    6efa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6efc:	88 23       	and	r24, r24
    6efe:	19 f0       	breq	.+6      	; 0x6f06 <LCD_enuLatch+0x15c>
		return Local_enuErrorState;
    6f00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6f02:	8f 8f       	std	Y+31, r24	; 0x1f
    6f04:	ec c0       	rjmp	.+472    	; 0x70de <LCD_enuLatch+0x334>
    6f06:	80 e0       	ldi	r24, 0x00	; 0
    6f08:	90 e0       	ldi	r25, 0x00	; 0
    6f0a:	a0 e8       	ldi	r26, 0x80	; 128
    6f0c:	bf e3       	ldi	r27, 0x3F	; 63
    6f0e:	89 8f       	std	Y+25, r24	; 0x19
    6f10:	9a 8f       	std	Y+26, r25	; 0x1a
    6f12:	ab 8f       	std	Y+27, r26	; 0x1b
    6f14:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6f16:	69 8d       	ldd	r22, Y+25	; 0x19
    6f18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6f1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6f1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6f1e:	20 e0       	ldi	r18, 0x00	; 0
    6f20:	30 e0       	ldi	r19, 0x00	; 0
    6f22:	4a e7       	ldi	r20, 0x7A	; 122
    6f24:	53 e4       	ldi	r21, 0x43	; 67
    6f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6f2a:	dc 01       	movw	r26, r24
    6f2c:	cb 01       	movw	r24, r22
    6f2e:	8d 8b       	std	Y+21, r24	; 0x15
    6f30:	9e 8b       	std	Y+22, r25	; 0x16
    6f32:	af 8b       	std	Y+23, r26	; 0x17
    6f34:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6f36:	6d 89       	ldd	r22, Y+21	; 0x15
    6f38:	7e 89       	ldd	r23, Y+22	; 0x16
    6f3a:	8f 89       	ldd	r24, Y+23	; 0x17
    6f3c:	98 8d       	ldd	r25, Y+24	; 0x18
    6f3e:	20 e0       	ldi	r18, 0x00	; 0
    6f40:	30 e0       	ldi	r19, 0x00	; 0
    6f42:	40 e8       	ldi	r20, 0x80	; 128
    6f44:	5f e3       	ldi	r21, 0x3F	; 63
    6f46:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    6f4a:	88 23       	and	r24, r24
    6f4c:	2c f4       	brge	.+10     	; 0x6f58 <LCD_enuLatch+0x1ae>
		__ticks = 1;
    6f4e:	81 e0       	ldi	r24, 0x01	; 1
    6f50:	90 e0       	ldi	r25, 0x00	; 0
    6f52:	9c 8b       	std	Y+20, r25	; 0x14
    6f54:	8b 8b       	std	Y+19, r24	; 0x13
    6f56:	3f c0       	rjmp	.+126    	; 0x6fd6 <LCD_enuLatch+0x22c>
	else if (__tmp > 65535)
    6f58:	6d 89       	ldd	r22, Y+21	; 0x15
    6f5a:	7e 89       	ldd	r23, Y+22	; 0x16
    6f5c:	8f 89       	ldd	r24, Y+23	; 0x17
    6f5e:	98 8d       	ldd	r25, Y+24	; 0x18
    6f60:	20 e0       	ldi	r18, 0x00	; 0
    6f62:	3f ef       	ldi	r19, 0xFF	; 255
    6f64:	4f e7       	ldi	r20, 0x7F	; 127
    6f66:	57 e4       	ldi	r21, 0x47	; 71
    6f68:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    6f6c:	18 16       	cp	r1, r24
    6f6e:	4c f5       	brge	.+82     	; 0x6fc2 <LCD_enuLatch+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6f70:	69 8d       	ldd	r22, Y+25	; 0x19
    6f72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6f74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6f76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6f78:	20 e0       	ldi	r18, 0x00	; 0
    6f7a:	30 e0       	ldi	r19, 0x00	; 0
    6f7c:	40 e2       	ldi	r20, 0x20	; 32
    6f7e:	51 e4       	ldi	r21, 0x41	; 65
    6f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6f84:	dc 01       	movw	r26, r24
    6f86:	cb 01       	movw	r24, r22
    6f88:	bc 01       	movw	r22, r24
    6f8a:	cd 01       	movw	r24, r26
    6f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6f90:	dc 01       	movw	r26, r24
    6f92:	cb 01       	movw	r24, r22
    6f94:	9c 8b       	std	Y+20, r25	; 0x14
    6f96:	8b 8b       	std	Y+19, r24	; 0x13
    6f98:	0f c0       	rjmp	.+30     	; 0x6fb8 <LCD_enuLatch+0x20e>
    6f9a:	89 e1       	ldi	r24, 0x19	; 25
    6f9c:	90 e0       	ldi	r25, 0x00	; 0
    6f9e:	9a 8b       	std	Y+18, r25	; 0x12
    6fa0:	89 8b       	std	Y+17, r24	; 0x11
    6fa2:	89 89       	ldd	r24, Y+17	; 0x11
    6fa4:	9a 89       	ldd	r25, Y+18	; 0x12
    6fa6:	01 97       	sbiw	r24, 0x01	; 1
    6fa8:	f1 f7       	brne	.-4      	; 0x6fa6 <LCD_enuLatch+0x1fc>
    6faa:	9a 8b       	std	Y+18, r25	; 0x12
    6fac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6fae:	8b 89       	ldd	r24, Y+19	; 0x13
    6fb0:	9c 89       	ldd	r25, Y+20	; 0x14
    6fb2:	01 97       	sbiw	r24, 0x01	; 1
    6fb4:	9c 8b       	std	Y+20, r25	; 0x14
    6fb6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6fb8:	8b 89       	ldd	r24, Y+19	; 0x13
    6fba:	9c 89       	ldd	r25, Y+20	; 0x14
    6fbc:	00 97       	sbiw	r24, 0x00	; 0
    6fbe:	69 f7       	brne	.-38     	; 0x6f9a <LCD_enuLatch+0x1f0>
    6fc0:	14 c0       	rjmp	.+40     	; 0x6fea <LCD_enuLatch+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6fc2:	6d 89       	ldd	r22, Y+21	; 0x15
    6fc4:	7e 89       	ldd	r23, Y+22	; 0x16
    6fc6:	8f 89       	ldd	r24, Y+23	; 0x17
    6fc8:	98 8d       	ldd	r25, Y+24	; 0x18
    6fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6fce:	dc 01       	movw	r26, r24
    6fd0:	cb 01       	movw	r24, r22
    6fd2:	9c 8b       	std	Y+20, r25	; 0x14
    6fd4:	8b 8b       	std	Y+19, r24	; 0x13
    6fd6:	8b 89       	ldd	r24, Y+19	; 0x13
    6fd8:	9c 89       	ldd	r25, Y+20	; 0x14
    6fda:	98 8b       	std	Y+16, r25	; 0x10
    6fdc:	8f 87       	std	Y+15, r24	; 0x0f
    6fde:	8f 85       	ldd	r24, Y+15	; 0x0f
    6fe0:	98 89       	ldd	r25, Y+16	; 0x10
    6fe2:	01 97       	sbiw	r24, 0x01	; 1
    6fe4:	f1 f7       	brne	.-4      	; 0x6fe2 <LCD_enuLatch+0x238>
    6fe6:	98 8b       	std	Y+16, r25	; 0x10
    6fe8:	8f 87       	std	Y+15, r24	; 0x0f
	#else
	#error "LCD Mode has a wrong configuration"
	#endif
	
	_delay_ms(1);
	DIO_enuSetPinVal(EN_PORT, EN_PIN, DIO_u8LOW);
    6fea:	80 e0       	ldi	r24, 0x00	; 0
    6fec:	62 e0       	ldi	r22, 0x02	; 2
    6fee:	40 e0       	ldi	r20, 0x00	; 0
    6ff0:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    6ff4:	80 e0       	ldi	r24, 0x00	; 0
    6ff6:	90 e0       	ldi	r25, 0x00	; 0
    6ff8:	a0 e8       	ldi	r26, 0x80	; 128
    6ffa:	bf e3       	ldi	r27, 0x3F	; 63
    6ffc:	8b 87       	std	Y+11, r24	; 0x0b
    6ffe:	9c 87       	std	Y+12, r25	; 0x0c
    7000:	ad 87       	std	Y+13, r26	; 0x0d
    7002:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7004:	6b 85       	ldd	r22, Y+11	; 0x0b
    7006:	7c 85       	ldd	r23, Y+12	; 0x0c
    7008:	8d 85       	ldd	r24, Y+13	; 0x0d
    700a:	9e 85       	ldd	r25, Y+14	; 0x0e
    700c:	20 e0       	ldi	r18, 0x00	; 0
    700e:	30 e0       	ldi	r19, 0x00	; 0
    7010:	4a e7       	ldi	r20, 0x7A	; 122
    7012:	53 e4       	ldi	r21, 0x43	; 67
    7014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7018:	dc 01       	movw	r26, r24
    701a:	cb 01       	movw	r24, r22
    701c:	8f 83       	std	Y+7, r24	; 0x07
    701e:	98 87       	std	Y+8, r25	; 0x08
    7020:	a9 87       	std	Y+9, r26	; 0x09
    7022:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7024:	6f 81       	ldd	r22, Y+7	; 0x07
    7026:	78 85       	ldd	r23, Y+8	; 0x08
    7028:	89 85       	ldd	r24, Y+9	; 0x09
    702a:	9a 85       	ldd	r25, Y+10	; 0x0a
    702c:	20 e0       	ldi	r18, 0x00	; 0
    702e:	30 e0       	ldi	r19, 0x00	; 0
    7030:	40 e8       	ldi	r20, 0x80	; 128
    7032:	5f e3       	ldi	r21, 0x3F	; 63
    7034:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    7038:	88 23       	and	r24, r24
    703a:	2c f4       	brge	.+10     	; 0x7046 <LCD_enuLatch+0x29c>
		__ticks = 1;
    703c:	81 e0       	ldi	r24, 0x01	; 1
    703e:	90 e0       	ldi	r25, 0x00	; 0
    7040:	9e 83       	std	Y+6, r25	; 0x06
    7042:	8d 83       	std	Y+5, r24	; 0x05
    7044:	3f c0       	rjmp	.+126    	; 0x70c4 <LCD_enuLatch+0x31a>
	else if (__tmp > 65535)
    7046:	6f 81       	ldd	r22, Y+7	; 0x07
    7048:	78 85       	ldd	r23, Y+8	; 0x08
    704a:	89 85       	ldd	r24, Y+9	; 0x09
    704c:	9a 85       	ldd	r25, Y+10	; 0x0a
    704e:	20 e0       	ldi	r18, 0x00	; 0
    7050:	3f ef       	ldi	r19, 0xFF	; 255
    7052:	4f e7       	ldi	r20, 0x7F	; 127
    7054:	57 e4       	ldi	r21, 0x47	; 71
    7056:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    705a:	18 16       	cp	r1, r24
    705c:	4c f5       	brge	.+82     	; 0x70b0 <LCD_enuLatch+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    705e:	6b 85       	ldd	r22, Y+11	; 0x0b
    7060:	7c 85       	ldd	r23, Y+12	; 0x0c
    7062:	8d 85       	ldd	r24, Y+13	; 0x0d
    7064:	9e 85       	ldd	r25, Y+14	; 0x0e
    7066:	20 e0       	ldi	r18, 0x00	; 0
    7068:	30 e0       	ldi	r19, 0x00	; 0
    706a:	40 e2       	ldi	r20, 0x20	; 32
    706c:	51 e4       	ldi	r21, 0x41	; 65
    706e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7072:	dc 01       	movw	r26, r24
    7074:	cb 01       	movw	r24, r22
    7076:	bc 01       	movw	r22, r24
    7078:	cd 01       	movw	r24, r26
    707a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    707e:	dc 01       	movw	r26, r24
    7080:	cb 01       	movw	r24, r22
    7082:	9e 83       	std	Y+6, r25	; 0x06
    7084:	8d 83       	std	Y+5, r24	; 0x05
    7086:	0f c0       	rjmp	.+30     	; 0x70a6 <LCD_enuLatch+0x2fc>
    7088:	89 e1       	ldi	r24, 0x19	; 25
    708a:	90 e0       	ldi	r25, 0x00	; 0
    708c:	9c 83       	std	Y+4, r25	; 0x04
    708e:	8b 83       	std	Y+3, r24	; 0x03
    7090:	8b 81       	ldd	r24, Y+3	; 0x03
    7092:	9c 81       	ldd	r25, Y+4	; 0x04
    7094:	01 97       	sbiw	r24, 0x01	; 1
    7096:	f1 f7       	brne	.-4      	; 0x7094 <LCD_enuLatch+0x2ea>
    7098:	9c 83       	std	Y+4, r25	; 0x04
    709a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    709c:	8d 81       	ldd	r24, Y+5	; 0x05
    709e:	9e 81       	ldd	r25, Y+6	; 0x06
    70a0:	01 97       	sbiw	r24, 0x01	; 1
    70a2:	9e 83       	std	Y+6, r25	; 0x06
    70a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    70a6:	8d 81       	ldd	r24, Y+5	; 0x05
    70a8:	9e 81       	ldd	r25, Y+6	; 0x06
    70aa:	00 97       	sbiw	r24, 0x00	; 0
    70ac:	69 f7       	brne	.-38     	; 0x7088 <LCD_enuLatch+0x2de>
    70ae:	14 c0       	rjmp	.+40     	; 0x70d8 <LCD_enuLatch+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    70b0:	6f 81       	ldd	r22, Y+7	; 0x07
    70b2:	78 85       	ldd	r23, Y+8	; 0x08
    70b4:	89 85       	ldd	r24, Y+9	; 0x09
    70b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    70b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    70bc:	dc 01       	movw	r26, r24
    70be:	cb 01       	movw	r24, r22
    70c0:	9e 83       	std	Y+6, r25	; 0x06
    70c2:	8d 83       	std	Y+5, r24	; 0x05
    70c4:	8d 81       	ldd	r24, Y+5	; 0x05
    70c6:	9e 81       	ldd	r25, Y+6	; 0x06
    70c8:	9a 83       	std	Y+2, r25	; 0x02
    70ca:	89 83       	std	Y+1, r24	; 0x01
    70cc:	89 81       	ldd	r24, Y+1	; 0x01
    70ce:	9a 81       	ldd	r25, Y+2	; 0x02
    70d0:	01 97       	sbiw	r24, 0x01	; 1
    70d2:	f1 f7       	brne	.-4      	; 0x70d0 <LCD_enuLatch+0x326>
    70d4:	9a 83       	std	Y+2, r25	; 0x02
    70d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	
	Local_enuErrorState = ES_OK;
    70d8:	1d 8e       	std	Y+29, r1	; 0x1d
	return Local_enuErrorState;
    70da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    70dc:	8f 8f       	std	Y+31, r24	; 0x1f
    70de:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    70e0:	6f 96       	adiw	r28, 0x1f	; 31
    70e2:	0f b6       	in	r0, 0x3f	; 63
    70e4:	f8 94       	cli
    70e6:	de bf       	out	0x3e, r29	; 62
    70e8:	0f be       	out	0x3f, r0	; 63
    70ea:	cd bf       	out	0x3d, r28	; 61
    70ec:	cf 91       	pop	r28
    70ee:	df 91       	pop	r29
    70f0:	08 95       	ret

000070f2 <LCD_vidTrigger_LATCH>:

static void LCD_vidTrigger_LATCH(void)
{
    70f2:	df 93       	push	r29
    70f4:	cf 93       	push	r28
    70f6:	cd b7       	in	r28, 0x3d	; 61
    70f8:	de b7       	in	r29, 0x3e	; 62
    70fa:	2e 97       	sbiw	r28, 0x0e	; 14
    70fc:	0f b6       	in	r0, 0x3f	; 63
    70fe:	f8 94       	cli
    7100:	de bf       	out	0x3e, r29	; 62
    7102:	0f be       	out	0x3f, r0	; 63
    7104:	cd bf       	out	0x3d, r28	; 61
	/* Enable EN --> it works at Rising Edge */
	DIO_enuSetPinVal(EN_PORT, EN_PIN, DIO_u8LOW);
    7106:	80 e0       	ldi	r24, 0x00	; 0
    7108:	62 e0       	ldi	r22, 0x02	; 2
    710a:	40 e0       	ldi	r20, 0x00	; 0
    710c:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    7110:	80 e0       	ldi	r24, 0x00	; 0
    7112:	90 e0       	ldi	r25, 0x00	; 0
    7114:	a0 e2       	ldi	r26, 0x20	; 32
    7116:	b1 e4       	ldi	r27, 0x41	; 65
    7118:	8b 87       	std	Y+11, r24	; 0x0b
    711a:	9c 87       	std	Y+12, r25	; 0x0c
    711c:	ad 87       	std	Y+13, r26	; 0x0d
    711e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7120:	6b 85       	ldd	r22, Y+11	; 0x0b
    7122:	7c 85       	ldd	r23, Y+12	; 0x0c
    7124:	8d 85       	ldd	r24, Y+13	; 0x0d
    7126:	9e 85       	ldd	r25, Y+14	; 0x0e
    7128:	20 e0       	ldi	r18, 0x00	; 0
    712a:	30 e0       	ldi	r19, 0x00	; 0
    712c:	4a e7       	ldi	r20, 0x7A	; 122
    712e:	53 e4       	ldi	r21, 0x43	; 67
    7130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7134:	dc 01       	movw	r26, r24
    7136:	cb 01       	movw	r24, r22
    7138:	8f 83       	std	Y+7, r24	; 0x07
    713a:	98 87       	std	Y+8, r25	; 0x08
    713c:	a9 87       	std	Y+9, r26	; 0x09
    713e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7140:	6f 81       	ldd	r22, Y+7	; 0x07
    7142:	78 85       	ldd	r23, Y+8	; 0x08
    7144:	89 85       	ldd	r24, Y+9	; 0x09
    7146:	9a 85       	ldd	r25, Y+10	; 0x0a
    7148:	20 e0       	ldi	r18, 0x00	; 0
    714a:	30 e0       	ldi	r19, 0x00	; 0
    714c:	40 e8       	ldi	r20, 0x80	; 128
    714e:	5f e3       	ldi	r21, 0x3F	; 63
    7150:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    7154:	88 23       	and	r24, r24
    7156:	2c f4       	brge	.+10     	; 0x7162 <LCD_vidTrigger_LATCH+0x70>
		__ticks = 1;
    7158:	81 e0       	ldi	r24, 0x01	; 1
    715a:	90 e0       	ldi	r25, 0x00	; 0
    715c:	9e 83       	std	Y+6, r25	; 0x06
    715e:	8d 83       	std	Y+5, r24	; 0x05
    7160:	3f c0       	rjmp	.+126    	; 0x71e0 <LCD_vidTrigger_LATCH+0xee>
	else if (__tmp > 65535)
    7162:	6f 81       	ldd	r22, Y+7	; 0x07
    7164:	78 85       	ldd	r23, Y+8	; 0x08
    7166:	89 85       	ldd	r24, Y+9	; 0x09
    7168:	9a 85       	ldd	r25, Y+10	; 0x0a
    716a:	20 e0       	ldi	r18, 0x00	; 0
    716c:	3f ef       	ldi	r19, 0xFF	; 255
    716e:	4f e7       	ldi	r20, 0x7F	; 127
    7170:	57 e4       	ldi	r21, 0x47	; 71
    7172:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    7176:	18 16       	cp	r1, r24
    7178:	4c f5       	brge	.+82     	; 0x71cc <LCD_vidTrigger_LATCH+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    717a:	6b 85       	ldd	r22, Y+11	; 0x0b
    717c:	7c 85       	ldd	r23, Y+12	; 0x0c
    717e:	8d 85       	ldd	r24, Y+13	; 0x0d
    7180:	9e 85       	ldd	r25, Y+14	; 0x0e
    7182:	20 e0       	ldi	r18, 0x00	; 0
    7184:	30 e0       	ldi	r19, 0x00	; 0
    7186:	40 e2       	ldi	r20, 0x20	; 32
    7188:	51 e4       	ldi	r21, 0x41	; 65
    718a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    718e:	dc 01       	movw	r26, r24
    7190:	cb 01       	movw	r24, r22
    7192:	bc 01       	movw	r22, r24
    7194:	cd 01       	movw	r24, r26
    7196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    719a:	dc 01       	movw	r26, r24
    719c:	cb 01       	movw	r24, r22
    719e:	9e 83       	std	Y+6, r25	; 0x06
    71a0:	8d 83       	std	Y+5, r24	; 0x05
    71a2:	0f c0       	rjmp	.+30     	; 0x71c2 <LCD_vidTrigger_LATCH+0xd0>
    71a4:	89 e1       	ldi	r24, 0x19	; 25
    71a6:	90 e0       	ldi	r25, 0x00	; 0
    71a8:	9c 83       	std	Y+4, r25	; 0x04
    71aa:	8b 83       	std	Y+3, r24	; 0x03
    71ac:	8b 81       	ldd	r24, Y+3	; 0x03
    71ae:	9c 81       	ldd	r25, Y+4	; 0x04
    71b0:	01 97       	sbiw	r24, 0x01	; 1
    71b2:	f1 f7       	brne	.-4      	; 0x71b0 <LCD_vidTrigger_LATCH+0xbe>
    71b4:	9c 83       	std	Y+4, r25	; 0x04
    71b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    71b8:	8d 81       	ldd	r24, Y+5	; 0x05
    71ba:	9e 81       	ldd	r25, Y+6	; 0x06
    71bc:	01 97       	sbiw	r24, 0x01	; 1
    71be:	9e 83       	std	Y+6, r25	; 0x06
    71c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    71c2:	8d 81       	ldd	r24, Y+5	; 0x05
    71c4:	9e 81       	ldd	r25, Y+6	; 0x06
    71c6:	00 97       	sbiw	r24, 0x00	; 0
    71c8:	69 f7       	brne	.-38     	; 0x71a4 <LCD_vidTrigger_LATCH+0xb2>
    71ca:	14 c0       	rjmp	.+40     	; 0x71f4 <LCD_vidTrigger_LATCH+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    71cc:	6f 81       	ldd	r22, Y+7	; 0x07
    71ce:	78 85       	ldd	r23, Y+8	; 0x08
    71d0:	89 85       	ldd	r24, Y+9	; 0x09
    71d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    71d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    71d8:	dc 01       	movw	r26, r24
    71da:	cb 01       	movw	r24, r22
    71dc:	9e 83       	std	Y+6, r25	; 0x06
    71de:	8d 83       	std	Y+5, r24	; 0x05
    71e0:	8d 81       	ldd	r24, Y+5	; 0x05
    71e2:	9e 81       	ldd	r25, Y+6	; 0x06
    71e4:	9a 83       	std	Y+2, r25	; 0x02
    71e6:	89 83       	std	Y+1, r24	; 0x01
    71e8:	89 81       	ldd	r24, Y+1	; 0x01
    71ea:	9a 81       	ldd	r25, Y+2	; 0x02
    71ec:	01 97       	sbiw	r24, 0x01	; 1
    71ee:	f1 f7       	brne	.-4      	; 0x71ec <LCD_vidTrigger_LATCH+0xfa>
    71f0:	9a 83       	std	Y+2, r25	; 0x02
    71f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinVal(EN_PORT, EN_PIN, DIO_u8HIGH);
    71f4:	80 e0       	ldi	r24, 0x00	; 0
    71f6:	62 e0       	ldi	r22, 0x02	; 2
    71f8:	41 e0       	ldi	r20, 0x01	; 1
    71fa:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
}
    71fe:	2e 96       	adiw	r28, 0x0e	; 14
    7200:	0f b6       	in	r0, 0x3f	; 63
    7202:	f8 94       	cli
    7204:	de bf       	out	0x3e, r29	; 62
    7206:	0f be       	out	0x3f, r0	; 63
    7208:	cd bf       	out	0x3d, r28	; 61
    720a:	cf 91       	pop	r28
    720c:	df 91       	pop	r29
    720e:	08 95       	ret

00007210 <LCD_inlenuSendCommand>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
static inline ES_t LCD_inlenuSendCommand(u8 Copy_u8Command)
{
    7210:	df 93       	push	r29
    7212:	cf 93       	push	r28
    7214:	00 d0       	rcall	.+0      	; 0x7216 <LCD_inlenuSendCommand+0x6>
    7216:	0f 92       	push	r0
    7218:	cd b7       	in	r28, 0x3d	; 61
    721a:	de b7       	in	r29, 0x3e	; 62
    721c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    721e:	81 e0       	ldi	r24, 0x01	; 1
    7220:	89 83       	std	Y+1, r24	; 0x01
		
	/* RS --> LOW to write Command */
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8LOW);
    7222:	80 e0       	ldi	r24, 0x00	; 0
    7224:	60 e0       	ldi	r22, 0x00	; 0
    7226:	40 e0       	ldi	r20, 0x00	; 0
    7228:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    722c:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enuErrorState != ES_OK)
    722e:	89 81       	ldd	r24, Y+1	; 0x01
    7230:	88 23       	and	r24, r24
    7232:	19 f0       	breq	.+6      	; 0x723a <LCD_inlenuSendCommand+0x2a>
		return Local_enuErrorState;	
    7234:	89 81       	ldd	r24, Y+1	; 0x01
    7236:	8b 83       	std	Y+3, r24	; 0x03
    7238:	0d c0       	rjmp	.+26     	; 0x7254 <LCD_inlenuSendCommand+0x44>

	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Command);
    723a:	8a 81       	ldd	r24, Y+2	; 0x02
    723c:	0e 94 d5 36 	call	0x6daa	; 0x6daa <LCD_enuLatch>
    7240:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enuErrorState != ES_OK)
    7242:	89 81       	ldd	r24, Y+1	; 0x01
    7244:	88 23       	and	r24, r24
    7246:	19 f0       	breq	.+6      	; 0x724e <LCD_inlenuSendCommand+0x3e>
		return Local_enuErrorState;
    7248:	89 81       	ldd	r24, Y+1	; 0x01
    724a:	8b 83       	std	Y+3, r24	; 0x03
    724c:	03 c0       	rjmp	.+6      	; 0x7254 <LCD_inlenuSendCommand+0x44>
	
	Local_enuErrorState = ES_OK;	
    724e:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    7250:	89 81       	ldd	r24, Y+1	; 0x01
    7252:	8b 83       	std	Y+3, r24	; 0x03
    7254:	8b 81       	ldd	r24, Y+3	; 0x03
}
    7256:	0f 90       	pop	r0
    7258:	0f 90       	pop	r0
    725a:	0f 90       	pop	r0
    725c:	cf 91       	pop	r28
    725e:	df 91       	pop	r29
    7260:	08 95       	ret

00007262 <LCD_enuGoToPosition>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuGoToPosition(u8 Copy_u8Line, u8 Copy_u8Position)
{
    7262:	df 93       	push	r29
    7264:	cf 93       	push	r28
    7266:	00 d0       	rcall	.+0      	; 0x7268 <LCD_enuGoToPosition+0x6>
    7268:	00 d0       	rcall	.+0      	; 0x726a <LCD_enuGoToPosition+0x8>
    726a:	cd b7       	in	r28, 0x3d	; 61
    726c:	de b7       	in	r29, 0x3e	; 62
    726e:	8a 83       	std	Y+2, r24	; 0x02
    7270:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_enuErrorState = ES_NOK;
    7272:	81 e0       	ldi	r24, 0x01	; 1
    7274:	89 83       	std	Y+1, r24	; 0x01

    if (Copy_u8Position < 20) // Check if position is within the line range
    7276:	8b 81       	ldd	r24, Y+3	; 0x03
    7278:	84 31       	cpi	r24, 0x14	; 20
    727a:	08 f0       	brcs	.+2      	; 0x727e <LCD_enuGoToPosition+0x1c>
    727c:	4a c0       	rjmp	.+148    	; 0x7312 <LCD_enuGoToPosition+0xb0>
    {
        if (Copy_u8Line == LCD_FIRST_LINE)
    727e:	8a 81       	ldd	r24, Y+2	; 0x02
    7280:	88 23       	and	r24, r24
    7282:	79 f4       	brne	.+30     	; 0x72a2 <LCD_enuGoToPosition+0x40>
        {
            Local_enuErrorState = LCD_inlenuSendCommand(LCD_BEGIN_AT_FIRST_ROW + Copy_u8Position);
    7284:	8b 81       	ldd	r24, Y+3	; 0x03
    7286:	80 58       	subi	r24, 0x80	; 128
    7288:	0e 94 08 39 	call	0x7210	; 0x7210 <LCD_inlenuSendCommand>
    728c:	89 83       	std	Y+1, r24	; 0x01
            if (Local_enuErrorState != ES_OK)
    728e:	89 81       	ldd	r24, Y+1	; 0x01
    7290:	88 23       	and	r24, r24
    7292:	19 f0       	breq	.+6      	; 0x729a <LCD_enuGoToPosition+0x38>
                return Local_enuErrorState;
    7294:	89 81       	ldd	r24, Y+1	; 0x01
    7296:	8c 83       	std	Y+4, r24	; 0x04
    7298:	3f c0       	rjmp	.+126    	; 0x7318 <LCD_enuGoToPosition+0xb6>

            LCD_u8PosCounter = Copy_u8Position;
    729a:	8b 81       	ldd	r24, Y+3	; 0x03
    729c:	80 93 30 02 	sts	0x0230, r24
    72a0:	38 c0       	rjmp	.+112    	; 0x7312 <LCD_enuGoToPosition+0xb0>
        }
        else if (Copy_u8Line == LCD_SECOND_LINE)
    72a2:	8a 81       	ldd	r24, Y+2	; 0x02
    72a4:	81 30       	cpi	r24, 0x01	; 1
    72a6:	81 f4       	brne	.+32     	; 0x72c8 <LCD_enuGoToPosition+0x66>
        {
            Local_enuErrorState = LCD_inlenuSendCommand(LCD_BEGIN_AT_SECOND_ROW + Copy_u8Position);
    72a8:	8b 81       	ldd	r24, Y+3	; 0x03
    72aa:	80 54       	subi	r24, 0x40	; 64
    72ac:	0e 94 08 39 	call	0x7210	; 0x7210 <LCD_inlenuSendCommand>
    72b0:	89 83       	std	Y+1, r24	; 0x01
            if (Local_enuErrorState != ES_OK)
    72b2:	89 81       	ldd	r24, Y+1	; 0x01
    72b4:	88 23       	and	r24, r24
    72b6:	19 f0       	breq	.+6      	; 0x72be <LCD_enuGoToPosition+0x5c>
                return Local_enuErrorState;
    72b8:	89 81       	ldd	r24, Y+1	; 0x01
    72ba:	8c 83       	std	Y+4, r24	; 0x04
    72bc:	2d c0       	rjmp	.+90     	; 0x7318 <LCD_enuGoToPosition+0xb6>

            LCD_u8PosCounter = Copy_u8Position + 20;
    72be:	8b 81       	ldd	r24, Y+3	; 0x03
    72c0:	8c 5e       	subi	r24, 0xEC	; 236
    72c2:	80 93 30 02 	sts	0x0230, r24
    72c6:	25 c0       	rjmp	.+74     	; 0x7312 <LCD_enuGoToPosition+0xb0>
        }
        else if (Copy_u8Line == LCD_THIRD_LINE)
    72c8:	8a 81       	ldd	r24, Y+2	; 0x02
    72ca:	82 30       	cpi	r24, 0x02	; 2
    72cc:	81 f4       	brne	.+32     	; 0x72ee <LCD_enuGoToPosition+0x8c>
        {
            Local_enuErrorState = LCD_inlenuSendCommand(LCD_BEGIN_AT_THIRD_ROW + Copy_u8Position);
    72ce:	8b 81       	ldd	r24, Y+3	; 0x03
    72d0:	8c 56       	subi	r24, 0x6C	; 108
    72d2:	0e 94 08 39 	call	0x7210	; 0x7210 <LCD_inlenuSendCommand>
    72d6:	89 83       	std	Y+1, r24	; 0x01
            if (Local_enuErrorState != ES_OK)
    72d8:	89 81       	ldd	r24, Y+1	; 0x01
    72da:	88 23       	and	r24, r24
    72dc:	19 f0       	breq	.+6      	; 0x72e4 <LCD_enuGoToPosition+0x82>
                return Local_enuErrorState;
    72de:	89 81       	ldd	r24, Y+1	; 0x01
    72e0:	8c 83       	std	Y+4, r24	; 0x04
    72e2:	1a c0       	rjmp	.+52     	; 0x7318 <LCD_enuGoToPosition+0xb6>

            LCD_u8PosCounter = Copy_u8Position + 40;
    72e4:	8b 81       	ldd	r24, Y+3	; 0x03
    72e6:	88 5d       	subi	r24, 0xD8	; 216
    72e8:	80 93 30 02 	sts	0x0230, r24
    72ec:	12 c0       	rjmp	.+36     	; 0x7312 <LCD_enuGoToPosition+0xb0>
        }
        else if (Copy_u8Line == LCD_FOURTH_LINE)
    72ee:	8a 81       	ldd	r24, Y+2	; 0x02
    72f0:	83 30       	cpi	r24, 0x03	; 3
    72f2:	79 f4       	brne	.+30     	; 0x7312 <LCD_enuGoToPosition+0xb0>
        {
            Local_enuErrorState = LCD_inlenuSendCommand(LCD_BEGIN_AT_FOURTH_ROW + Copy_u8Position);
    72f4:	8b 81       	ldd	r24, Y+3	; 0x03
    72f6:	8c 52       	subi	r24, 0x2C	; 44
    72f8:	0e 94 08 39 	call	0x7210	; 0x7210 <LCD_inlenuSendCommand>
    72fc:	89 83       	std	Y+1, r24	; 0x01
            if (Local_enuErrorState != ES_OK)
    72fe:	89 81       	ldd	r24, Y+1	; 0x01
    7300:	88 23       	and	r24, r24
    7302:	19 f0       	breq	.+6      	; 0x730a <LCD_enuGoToPosition+0xa8>
                return Local_enuErrorState;
    7304:	89 81       	ldd	r24, Y+1	; 0x01
    7306:	8c 83       	std	Y+4, r24	; 0x04
    7308:	07 c0       	rjmp	.+14     	; 0x7318 <LCD_enuGoToPosition+0xb6>

            LCD_u8PosCounter = Copy_u8Position + 60;
    730a:	8b 81       	ldd	r24, Y+3	; 0x03
    730c:	84 5c       	subi	r24, 0xC4	; 196
    730e:	80 93 30 02 	sts	0x0230, r24
        }
    }

    Local_enuErrorState = ES_OK;
    7312:	19 82       	std	Y+1, r1	; 0x01
    return Local_enuErrorState;
    7314:	89 81       	ldd	r24, Y+1	; 0x01
    7316:	8c 83       	std	Y+4, r24	; 0x04
    7318:	8c 81       	ldd	r24, Y+4	; 0x04
}
    731a:	0f 90       	pop	r0
    731c:	0f 90       	pop	r0
    731e:	0f 90       	pop	r0
    7320:	0f 90       	pop	r0
    7322:	cf 91       	pop	r28
    7324:	df 91       	pop	r29
    7326:	08 95       	ret

00007328 <LCD_vidCheckPosition>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
static void LCD_vidCheckPosition(void)
{
    7328:	df 93       	push	r29
    732a:	cf 93       	push	r28
    732c:	cd b7       	in	r28, 0x3d	; 61
    732e:	de b7       	in	r29, 0x3e	; 62
    if (LCD_u8PosCounter == 20)
    7330:	80 91 30 02 	lds	r24, 0x0230
    7334:	84 31       	cpi	r24, 0x14	; 20
    7336:	51 f4       	brne	.+20     	; 0x734c <LCD_vidCheckPosition+0x24>
    {
        LCD_enuGoToPosition(LCD_SECOND_LINE, 0);
    7338:	81 e0       	ldi	r24, 0x01	; 1
    733a:	60 e0       	ldi	r22, 0x00	; 0
    733c:	0e 94 31 39 	call	0x7262	; 0x7262 <LCD_enuGoToPosition>
        LCD_u8PosCounter++;
    7340:	80 91 30 02 	lds	r24, 0x0230
    7344:	8f 5f       	subi	r24, 0xFF	; 255
    7346:	80 93 30 02 	sts	0x0230, r24
    734a:	2f c0       	rjmp	.+94     	; 0x73aa <LCD_vidCheckPosition+0x82>
    }
    else if (LCD_u8PosCounter == 40)
    734c:	80 91 30 02 	lds	r24, 0x0230
    7350:	88 32       	cpi	r24, 0x28	; 40
    7352:	51 f4       	brne	.+20     	; 0x7368 <LCD_vidCheckPosition+0x40>
    {
        LCD_enuGoToPosition(LCD_THIRD_LINE, 0);
    7354:	82 e0       	ldi	r24, 0x02	; 2
    7356:	60 e0       	ldi	r22, 0x00	; 0
    7358:	0e 94 31 39 	call	0x7262	; 0x7262 <LCD_enuGoToPosition>
        LCD_u8PosCounter++;
    735c:	80 91 30 02 	lds	r24, 0x0230
    7360:	8f 5f       	subi	r24, 0xFF	; 255
    7362:	80 93 30 02 	sts	0x0230, r24
    7366:	21 c0       	rjmp	.+66     	; 0x73aa <LCD_vidCheckPosition+0x82>
    }
    else if (LCD_u8PosCounter == 60)
    7368:	80 91 30 02 	lds	r24, 0x0230
    736c:	8c 33       	cpi	r24, 0x3C	; 60
    736e:	51 f4       	brne	.+20     	; 0x7384 <LCD_vidCheckPosition+0x5c>
    {
        LCD_enuGoToPosition(LCD_FOURTH_LINE, 0);
    7370:	83 e0       	ldi	r24, 0x03	; 3
    7372:	60 e0       	ldi	r22, 0x00	; 0
    7374:	0e 94 31 39 	call	0x7262	; 0x7262 <LCD_enuGoToPosition>
        LCD_u8PosCounter++;
    7378:	80 91 30 02 	lds	r24, 0x0230
    737c:	8f 5f       	subi	r24, 0xFF	; 255
    737e:	80 93 30 02 	sts	0x0230, r24
    7382:	13 c0       	rjmp	.+38     	; 0x73aa <LCD_vidCheckPosition+0x82>
    }
    else if (LCD_u8PosCounter == 80)
    7384:	80 91 30 02 	lds	r24, 0x0230
    7388:	80 35       	cpi	r24, 0x50	; 80
    738a:	51 f4       	brne	.+20     	; 0x73a0 <LCD_vidCheckPosition+0x78>
    {
        LCD_inlenuSendCommand(LCD_Clear_Display);
    738c:	81 e0       	ldi	r24, 0x01	; 1
    738e:	0e 94 08 39 	call	0x7210	; 0x7210 <LCD_inlenuSendCommand>
        LCD_enuGoToPosition(LCD_FIRST_LINE, 0);
    7392:	80 e0       	ldi	r24, 0x00	; 0
    7394:	60 e0       	ldi	r22, 0x00	; 0
    7396:	0e 94 31 39 	call	0x7262	; 0x7262 <LCD_enuGoToPosition>
        LCD_u8PosCounter = 0;
    739a:	10 92 30 02 	sts	0x0230, r1
    739e:	05 c0       	rjmp	.+10     	; 0x73aa <LCD_vidCheckPosition+0x82>
    }
    else
    {
        LCD_u8PosCounter++;
    73a0:	80 91 30 02 	lds	r24, 0x0230
    73a4:	8f 5f       	subi	r24, 0xFF	; 255
    73a6:	80 93 30 02 	sts	0x0230, r24
    }
}
    73aa:	cf 91       	pop	r28
    73ac:	df 91       	pop	r29
    73ae:	08 95       	ret

000073b0 <LCD_vidClearScreen>:
 * @retval		: none
 * @note		: none
 ******************************************************************************
**/
void LCD_vidClearScreen(void)
{
    73b0:	df 93       	push	r29
    73b2:	cf 93       	push	r28
    73b4:	cd b7       	in	r28, 0x3d	; 61
    73b6:	de b7       	in	r29, 0x3e	; 62
	LCD_inlenuSendCommand(LCD_Clear_Display);
    73b8:	81 e0       	ldi	r24, 0x01	; 1
    73ba:	0e 94 08 39 	call	0x7210	; 0x7210 <LCD_inlenuSendCommand>
	LCD_u8PosCounter = 0;
    73be:	10 92 30 02 	sts	0x0230, r1
}
    73c2:	cf 91       	pop	r28
    73c4:	df 91       	pop	r29
    73c6:	08 95       	ret

000073c8 <LCD_enuWriteString>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuWriteString(u8 *Copy_pu8Str)
{
    73c8:	df 93       	push	r29
    73ca:	cf 93       	push	r28
    73cc:	00 d0       	rcall	.+0      	; 0x73ce <LCD_enuWriteString+0x6>
    73ce:	00 d0       	rcall	.+0      	; 0x73d0 <LCD_enuWriteString+0x8>
    73d0:	cd b7       	in	r28, 0x3d	; 61
    73d2:	de b7       	in	r29, 0x3e	; 62
    73d4:	9b 83       	std	Y+3, r25	; 0x03
    73d6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    73d8:	81 e0       	ldi	r24, 0x01	; 1
    73da:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_pu8Str != NULL)
    73dc:	8a 81       	ldd	r24, Y+2	; 0x02
    73de:	9b 81       	ldd	r25, Y+3	; 0x03
    73e0:	00 97       	sbiw	r24, 0x00	; 0
    73e2:	e1 f0       	breq	.+56     	; 0x741c <LCD_enuWriteString+0x54>
    73e4:	11 c0       	rjmp	.+34     	; 0x7408 <LCD_enuWriteString+0x40>
	{
		while(*Copy_pu8Str != '\0')
		{
			Local_enuErrorState = LCD_enuDisplayChar(*Copy_pu8Str);
    73e6:	ea 81       	ldd	r30, Y+2	; 0x02
    73e8:	fb 81       	ldd	r31, Y+3	; 0x03
    73ea:	80 81       	ld	r24, Z
    73ec:	0e 94 81 36 	call	0x6d02	; 0x6d02 <LCD_enuDisplayChar>
    73f0:	89 83       	std	Y+1, r24	; 0x01
			if(Local_enuErrorState != ES_OK)
    73f2:	89 81       	ldd	r24, Y+1	; 0x01
    73f4:	88 23       	and	r24, r24
    73f6:	19 f0       	breq	.+6      	; 0x73fe <LCD_enuWriteString+0x36>
				return Local_enuErrorState;
    73f8:	89 81       	ldd	r24, Y+1	; 0x01
    73fa:	8c 83       	std	Y+4, r24	; 0x04
    73fc:	11 c0       	rjmp	.+34     	; 0x7420 <LCD_enuWriteString+0x58>
			Copy_pu8Str++;
    73fe:	8a 81       	ldd	r24, Y+2	; 0x02
    7400:	9b 81       	ldd	r25, Y+3	; 0x03
    7402:	01 96       	adiw	r24, 0x01	; 1
    7404:	9b 83       	std	Y+3, r25	; 0x03
    7406:	8a 83       	std	Y+2, r24	; 0x02
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_pu8Str != NULL)
	{
		while(*Copy_pu8Str != '\0')
    7408:	ea 81       	ldd	r30, Y+2	; 0x02
    740a:	fb 81       	ldd	r31, Y+3	; 0x03
    740c:	80 81       	ld	r24, Z
    740e:	88 23       	and	r24, r24
    7410:	51 f7       	brne	.-44     	; 0x73e6 <LCD_enuWriteString+0x1e>
			Local_enuErrorState = LCD_enuDisplayChar(*Copy_pu8Str);
			if(Local_enuErrorState != ES_OK)
				return Local_enuErrorState;
			Copy_pu8Str++;
		}
		Local_enuErrorState = ES_OK;
    7412:	19 82       	std	Y+1, r1	; 0x01
	else
	{
		return ES_NULL_POINTER;
	}
	
	Local_enuErrorState = ES_OK;
    7414:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    7416:	89 81       	ldd	r24, Y+1	; 0x01
    7418:	8c 83       	std	Y+4, r24	; 0x04
    741a:	02 c0       	rjmp	.+4      	; 0x7420 <LCD_enuWriteString+0x58>
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		return ES_NULL_POINTER;
    741c:	82 e0       	ldi	r24, 0x02	; 2
    741e:	8c 83       	std	Y+4, r24	; 0x04
    7420:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	
	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
    7422:	0f 90       	pop	r0
    7424:	0f 90       	pop	r0
    7426:	0f 90       	pop	r0
    7428:	0f 90       	pop	r0
    742a:	cf 91       	pop	r28
    742c:	df 91       	pop	r29
    742e:	08 95       	ret

00007430 <LCD_enuWriteIntNumber>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuWriteIntNumber(s32 Copy_s32Number)
{
    7430:	df 93       	push	r29
    7432:	cf 93       	push	r28
    7434:	cd b7       	in	r28, 0x3d	; 61
    7436:	de b7       	in	r29, 0x3e	; 62
    7438:	66 97       	sbiw	r28, 0x16	; 22
    743a:	0f b6       	in	r0, 0x3f	; 63
    743c:	f8 94       	cli
    743e:	de bf       	out	0x3e, r29	; 62
    7440:	0f be       	out	0x3f, r0	; 63
    7442:	cd bf       	out	0x3d, r28	; 61
    7444:	6b 8b       	std	Y+19, r22	; 0x13
    7446:	7c 8b       	std	Y+20, r23	; 0x14
    7448:	8d 8b       	std	Y+21, r24	; 0x15
    744a:	9e 8b       	std	Y+22, r25	; 0x16
	ES_t Local_enuErrorState = ES_NOK;
    744c:	81 e0       	ldi	r24, 0x01	; 1
    744e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_As8Container[16];
	u8 Local_u8Iterator;
	
	sprintf(Local_As8Container, "%d", Copy_s32Number);
    7450:	8d b7       	in	r24, 0x3d	; 61
    7452:	9e b7       	in	r25, 0x3e	; 62
    7454:	08 97       	sbiw	r24, 0x08	; 8
    7456:	0f b6       	in	r0, 0x3f	; 63
    7458:	f8 94       	cli
    745a:	9e bf       	out	0x3e, r25	; 62
    745c:	0f be       	out	0x3f, r0	; 63
    745e:	8d bf       	out	0x3d, r24	; 61
    7460:	ed b7       	in	r30, 0x3d	; 61
    7462:	fe b7       	in	r31, 0x3e	; 62
    7464:	31 96       	adiw	r30, 0x01	; 1
    7466:	ce 01       	movw	r24, r28
    7468:	03 96       	adiw	r24, 0x03	; 3
    746a:	91 83       	std	Z+1, r25	; 0x01
    746c:	80 83       	st	Z, r24
    746e:	80 e6       	ldi	r24, 0x60	; 96
    7470:	90 e0       	ldi	r25, 0x00	; 0
    7472:	93 83       	std	Z+3, r25	; 0x03
    7474:	82 83       	std	Z+2, r24	; 0x02
    7476:	8b 89       	ldd	r24, Y+19	; 0x13
    7478:	9c 89       	ldd	r25, Y+20	; 0x14
    747a:	ad 89       	ldd	r26, Y+21	; 0x15
    747c:	be 89       	ldd	r27, Y+22	; 0x16
    747e:	84 83       	std	Z+4, r24	; 0x04
    7480:	95 83       	std	Z+5, r25	; 0x05
    7482:	a6 83       	std	Z+6, r26	; 0x06
    7484:	b7 83       	std	Z+7, r27	; 0x07
    7486:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <sprintf>
    748a:	8d b7       	in	r24, 0x3d	; 61
    748c:	9e b7       	in	r25, 0x3e	; 62
    748e:	08 96       	adiw	r24, 0x08	; 8
    7490:	0f b6       	in	r0, 0x3f	; 63
    7492:	f8 94       	cli
    7494:	9e bf       	out	0x3e, r25	; 62
    7496:	0f be       	out	0x3f, r0	; 63
    7498:	8d bf       	out	0x3d, r24	; 61
	
	for(Local_u8Iterator = 0; Local_As8Container[Local_u8Iterator] != '\0'; Local_u8Iterator++)
    749a:	19 82       	std	Y+1, r1	; 0x01
    749c:	0f c0       	rjmp	.+30     	; 0x74bc <LCD_enuWriteIntNumber+0x8c>
	{
		Local_enuErrorState = LCD_enuDisplayChar(Local_As8Container[Local_u8Iterator]);
    749e:	89 81       	ldd	r24, Y+1	; 0x01
    74a0:	28 2f       	mov	r18, r24
    74a2:	30 e0       	ldi	r19, 0x00	; 0
    74a4:	ce 01       	movw	r24, r28
    74a6:	03 96       	adiw	r24, 0x03	; 3
    74a8:	fc 01       	movw	r30, r24
    74aa:	e2 0f       	add	r30, r18
    74ac:	f3 1f       	adc	r31, r19
    74ae:	80 81       	ld	r24, Z
    74b0:	0e 94 81 36 	call	0x6d02	; 0x6d02 <LCD_enuDisplayChar>
    74b4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_As8Container[16];
	u8 Local_u8Iterator;
	
	sprintf(Local_As8Container, "%d", Copy_s32Number);
	
	for(Local_u8Iterator = 0; Local_As8Container[Local_u8Iterator] != '\0'; Local_u8Iterator++)
    74b6:	89 81       	ldd	r24, Y+1	; 0x01
    74b8:	8f 5f       	subi	r24, 0xFF	; 255
    74ba:	89 83       	std	Y+1, r24	; 0x01
    74bc:	89 81       	ldd	r24, Y+1	; 0x01
    74be:	28 2f       	mov	r18, r24
    74c0:	30 e0       	ldi	r19, 0x00	; 0
    74c2:	ce 01       	movw	r24, r28
    74c4:	03 96       	adiw	r24, 0x03	; 3
    74c6:	fc 01       	movw	r30, r24
    74c8:	e2 0f       	add	r30, r18
    74ca:	f3 1f       	adc	r31, r19
    74cc:	80 81       	ld	r24, Z
    74ce:	88 23       	and	r24, r24
    74d0:	31 f7       	brne	.-52     	; 0x749e <LCD_enuWriteIntNumber+0x6e>
	{
		Local_enuErrorState = LCD_enuDisplayChar(Local_As8Container[Local_u8Iterator]);
	}
	
	return Local_enuErrorState;
    74d2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    74d4:	66 96       	adiw	r28, 0x16	; 22
    74d6:	0f b6       	in	r0, 0x3f	; 63
    74d8:	f8 94       	cli
    74da:	de bf       	out	0x3e, r29	; 62
    74dc:	0f be       	out	0x3f, r0	; 63
    74de:	cd bf       	out	0x3d, r28	; 61
    74e0:	cf 91       	pop	r28
    74e2:	df 91       	pop	r29
    74e4:	08 95       	ret

000074e6 <LCD_enuWriteFloatNumber>:

ES_t LCD_enuWriteFloatNumber(f32 Copy_f32Number)
{
    74e6:	df 93       	push	r29
    74e8:	cf 93       	push	r28
    74ea:	cd b7       	in	r28, 0x3d	; 61
    74ec:	de b7       	in	r29, 0x3e	; 62
    74ee:	2d 97       	sbiw	r28, 0x0d	; 13
    74f0:	0f b6       	in	r0, 0x3f	; 63
    74f2:	f8 94       	cli
    74f4:	de bf       	out	0x3e, r29	; 62
    74f6:	0f be       	out	0x3f, r0	; 63
    74f8:	cd bf       	out	0x3d, r28	; 61
    74fa:	6a 87       	std	Y+10, r22	; 0x0a
    74fc:	7b 87       	std	Y+11, r23	; 0x0b
    74fe:	8c 87       	std	Y+12, r24	; 0x0c
    7500:	9d 87       	std	Y+13, r25	; 0x0d
	ES_t Local_enuErrorState = ES_NOK;
    7502:	81 e0       	ldi	r24, 0x01	; 1
    7504:	89 87       	std	Y+9, r24	; 0x09
	
	f32 Local_f32FracNum = Copy_f32Number - (u32)Copy_f32Number;
    7506:	6a 85       	ldd	r22, Y+10	; 0x0a
    7508:	7b 85       	ldd	r23, Y+11	; 0x0b
    750a:	8c 85       	ldd	r24, Y+12	; 0x0c
    750c:	9d 85       	ldd	r25, Y+13	; 0x0d
    750e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7512:	dc 01       	movw	r26, r24
    7514:	cb 01       	movw	r24, r22
    7516:	bc 01       	movw	r22, r24
    7518:	cd 01       	movw	r24, r26
    751a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    751e:	9b 01       	movw	r18, r22
    7520:	ac 01       	movw	r20, r24
    7522:	6a 85       	ldd	r22, Y+10	; 0x0a
    7524:	7b 85       	ldd	r23, Y+11	; 0x0b
    7526:	8c 85       	ldd	r24, Y+12	; 0x0c
    7528:	9d 85       	ldd	r25, Y+13	; 0x0d
    752a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    752e:	dc 01       	movw	r26, r24
    7530:	cb 01       	movw	r24, r22
    7532:	8d 83       	std	Y+5, r24	; 0x05
    7534:	9e 83       	std	Y+6, r25	; 0x06
    7536:	af 83       	std	Y+7, r26	; 0x07
    7538:	b8 87       	std	Y+8, r27	; 0x08
	s32 Local_s32IntNum = Copy_f32Number - Local_f32FracNum;
    753a:	6a 85       	ldd	r22, Y+10	; 0x0a
    753c:	7b 85       	ldd	r23, Y+11	; 0x0b
    753e:	8c 85       	ldd	r24, Y+12	; 0x0c
    7540:	9d 85       	ldd	r25, Y+13	; 0x0d
    7542:	2d 81       	ldd	r18, Y+5	; 0x05
    7544:	3e 81       	ldd	r19, Y+6	; 0x06
    7546:	4f 81       	ldd	r20, Y+7	; 0x07
    7548:	58 85       	ldd	r21, Y+8	; 0x08
    754a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    754e:	dc 01       	movw	r26, r24
    7550:	cb 01       	movw	r24, r22
    7552:	bc 01       	movw	r22, r24
    7554:	cd 01       	movw	r24, r26
    7556:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    755a:	dc 01       	movw	r26, r24
    755c:	cb 01       	movw	r24, r22
    755e:	89 83       	std	Y+1, r24	; 0x01
    7560:	9a 83       	std	Y+2, r25	; 0x02
    7562:	ab 83       	std	Y+3, r26	; 0x03
    7564:	bc 83       	std	Y+4, r27	; 0x04
	LCD_enuWriteIntNumber(Local_s32IntNum);
    7566:	89 81       	ldd	r24, Y+1	; 0x01
    7568:	9a 81       	ldd	r25, Y+2	; 0x02
    756a:	ab 81       	ldd	r26, Y+3	; 0x03
    756c:	bc 81       	ldd	r27, Y+4	; 0x04
    756e:	bc 01       	movw	r22, r24
    7570:	cd 01       	movw	r24, r26
    7572:	0e 94 18 3a 	call	0x7430	; 0x7430 <LCD_enuWriteIntNumber>
	LCD_enuDisplayChar('.');
    7576:	8e e2       	ldi	r24, 0x2E	; 46
    7578:	0e 94 81 36 	call	0x6d02	; 0x6d02 <LCD_enuDisplayChar>
	LCD_enuWriteIntNumber(Local_f32FracNum * 100000);
    757c:	6d 81       	ldd	r22, Y+5	; 0x05
    757e:	7e 81       	ldd	r23, Y+6	; 0x06
    7580:	8f 81       	ldd	r24, Y+7	; 0x07
    7582:	98 85       	ldd	r25, Y+8	; 0x08
    7584:	20 e0       	ldi	r18, 0x00	; 0
    7586:	30 e5       	ldi	r19, 0x50	; 80
    7588:	43 ec       	ldi	r20, 0xC3	; 195
    758a:	57 e4       	ldi	r21, 0x47	; 71
    758c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7590:	dc 01       	movw	r26, r24
    7592:	cb 01       	movw	r24, r22
    7594:	bc 01       	movw	r22, r24
    7596:	cd 01       	movw	r24, r26
    7598:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    759c:	dc 01       	movw	r26, r24
    759e:	cb 01       	movw	r24, r22
    75a0:	bc 01       	movw	r22, r24
    75a2:	cd 01       	movw	r24, r26
    75a4:	0e 94 18 3a 	call	0x7430	; 0x7430 <LCD_enuWriteIntNumber>
	
	return Local_enuErrorState;
    75a8:	89 85       	ldd	r24, Y+9	; 0x09
}
    75aa:	2d 96       	adiw	r28, 0x0d	; 13
    75ac:	0f b6       	in	r0, 0x3f	; 63
    75ae:	f8 94       	cli
    75b0:	de bf       	out	0x3e, r29	; 62
    75b2:	0f be       	out	0x3f, r0	; 63
    75b4:	cd bf       	out	0x3d, r28	; 61
    75b6:	cf 91       	pop	r28
    75b8:	df 91       	pop	r29
    75ba:	08 95       	ret

000075bc <LCD_enuCustomCharacter>:

ES_t LCD_enuCustomCharacter(u8 *Copy_ArrCustomChar)
{
    75bc:	df 93       	push	r29
    75be:	cf 93       	push	r28
    75c0:	00 d0       	rcall	.+0      	; 0x75c2 <LCD_enuCustomCharacter+0x6>
    75c2:	0f 92       	push	r0
    75c4:	cd b7       	in	r28, 0x3d	; 61
    75c6:	de b7       	in	r29, 0x3e	; 62
    75c8:	9b 83       	std	Y+3, r25	; 0x03
    75ca:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    75cc:	81 e0       	ldi	r24, 0x01	; 1
    75ce:	89 83       	std	Y+1, r24	; 0x01
	
	LCD_inlenuSendCommand(64);
    75d0:	80 e4       	ldi	r24, 0x40	; 64
    75d2:	0e 94 08 39 	call	0x7210	; 0x7210 <LCD_inlenuSendCommand>
    75d6:	0a c0       	rjmp	.+20     	; 0x75ec <LCD_enuCustomCharacter+0x30>
	
	while(*Copy_ArrCustomChar != 0)
	{
		LCD_enuDisplayChar(*Copy_ArrCustomChar);
    75d8:	ea 81       	ldd	r30, Y+2	; 0x02
    75da:	fb 81       	ldd	r31, Y+3	; 0x03
    75dc:	80 81       	ld	r24, Z
    75de:	0e 94 81 36 	call	0x6d02	; 0x6d02 <LCD_enuDisplayChar>
		Copy_ArrCustomChar++;
    75e2:	8a 81       	ldd	r24, Y+2	; 0x02
    75e4:	9b 81       	ldd	r25, Y+3	; 0x03
    75e6:	01 96       	adiw	r24, 0x01	; 1
    75e8:	9b 83       	std	Y+3, r25	; 0x03
    75ea:	8a 83       	std	Y+2, r24	; 0x02
{
	ES_t Local_enuErrorState = ES_NOK;
	
	LCD_inlenuSendCommand(64);
	
	while(*Copy_ArrCustomChar != 0)
    75ec:	ea 81       	ldd	r30, Y+2	; 0x02
    75ee:	fb 81       	ldd	r31, Y+3	; 0x03
    75f0:	80 81       	ld	r24, Z
    75f2:	88 23       	and	r24, r24
    75f4:	89 f7       	brne	.-30     	; 0x75d8 <LCD_enuCustomCharacter+0x1c>
	{
		LCD_enuDisplayChar(*Copy_ArrCustomChar);
		Copy_ArrCustomChar++;
	}
	
	LCD_inlenuSendCommand(LCD_BEGIN_AT_FIRST_ROW);
    75f6:	80 e8       	ldi	r24, 0x80	; 128
    75f8:	0e 94 08 39 	call	0x7210	; 0x7210 <LCD_inlenuSendCommand>
	LCD_enuDisplayChar(0);
    75fc:	80 e0       	ldi	r24, 0x00	; 0
    75fe:	0e 94 81 36 	call	0x6d02	; 0x6d02 <LCD_enuDisplayChar>
	
	return Local_enuErrorState;
    7602:	89 81       	ldd	r24, Y+1	; 0x01
}
    7604:	0f 90       	pop	r0
    7606:	0f 90       	pop	r0
    7608:	0f 90       	pop	r0
    760a:	cf 91       	pop	r28
    760c:	df 91       	pop	r29
    760e:	08 95       	ret

00007610 <KEYPAD_enuInit>:
 * @retval		: ES_t --> it returns the error state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t KEYPAD_enuInit(void)
{
    7610:	df 93       	push	r29
    7612:	cf 93       	push	r28
    7614:	0f 92       	push	r0
    7616:	cd b7       	in	r28, 0x3d	; 61
    7618:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_u8ErrorState = ES_NOK;
    761a:	81 e0       	ldi	r24, 0x01	; 1
    761c:	89 83       	std	Y+1, r24	; 0x01
	
	/* Configure Column pins as output high */
	/* Output */
	Local_u8ErrorState = DIO_enuSetPinDirection(KEYPAD_C1_PORT, KEYPAD_C1_PIN, DIO_u8OUTPUT);
    761e:	82 e0       	ldi	r24, 0x02	; 2
    7620:	60 e0       	ldi	r22, 0x00	; 0
    7622:	41 e0       	ldi	r20, 0x01	; 1
    7624:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    7628:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinDirection(KEYPAD_C2_PORT, KEYPAD_C2_PIN, DIO_u8OUTPUT);
    762a:	82 e0       	ldi	r24, 0x02	; 2
    762c:	61 e0       	ldi	r22, 0x01	; 1
    762e:	41 e0       	ldi	r20, 0x01	; 1
    7630:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    7634:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinDirection(KEYPAD_C3_PORT, KEYPAD_C3_PIN, DIO_u8OUTPUT);
    7636:	82 e0       	ldi	r24, 0x02	; 2
    7638:	62 e0       	ldi	r22, 0x02	; 2
    763a:	41 e0       	ldi	r20, 0x01	; 1
    763c:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    7640:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinDirection(KEYPAD_C4_PORT, KEYPAD_C4_PIN, DIO_u8OUTPUT);
    7642:	82 e0       	ldi	r24, 0x02	; 2
    7644:	63 e0       	ldi	r22, 0x03	; 3
    7646:	41 e0       	ldi	r20, 0x01	; 1
    7648:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    764c:	89 83       	std	Y+1, r24	; 0x01
	
	/* High */
	Local_u8ErrorState = DIO_enuSetPinVal(KEYPAD_C1_PORT, KEYPAD_C1_PIN, DIO_u8HIGH);
    764e:	82 e0       	ldi	r24, 0x02	; 2
    7650:	60 e0       	ldi	r22, 0x00	; 0
    7652:	41 e0       	ldi	r20, 0x01	; 1
    7654:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    7658:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinVal(KEYPAD_C2_PORT, KEYPAD_C2_PIN, DIO_u8HIGH);
    765a:	82 e0       	ldi	r24, 0x02	; 2
    765c:	61 e0       	ldi	r22, 0x01	; 1
    765e:	41 e0       	ldi	r20, 0x01	; 1
    7660:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    7664:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinVal(KEYPAD_C3_PORT, KEYPAD_C3_PIN, DIO_u8HIGH);
    7666:	82 e0       	ldi	r24, 0x02	; 2
    7668:	62 e0       	ldi	r22, 0x02	; 2
    766a:	41 e0       	ldi	r20, 0x01	; 1
    766c:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    7670:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinVal(KEYPAD_C4_PORT, KEYPAD_C4_PIN, DIO_u8HIGH);
    7672:	82 e0       	ldi	r24, 0x02	; 2
    7674:	63 e0       	ldi	r22, 0x03	; 3
    7676:	41 e0       	ldi	r20, 0x01	; 1
    7678:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    767c:	89 83       	std	Y+1, r24	; 0x01
	
	/* Configure Row pins as input pull-up */
	/* Input */
	Local_u8ErrorState = DIO_enuSetPinDirection(KEYPAD_R1_PORT, KEYPAD_R1_PIN, DIO_u8INPUT);
    767e:	82 e0       	ldi	r24, 0x02	; 2
    7680:	64 e0       	ldi	r22, 0x04	; 4
    7682:	40 e0       	ldi	r20, 0x00	; 0
    7684:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    7688:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinDirection(KEYPAD_R2_PORT, KEYPAD_R2_PIN, DIO_u8INPUT);
    768a:	82 e0       	ldi	r24, 0x02	; 2
    768c:	65 e0       	ldi	r22, 0x05	; 5
    768e:	40 e0       	ldi	r20, 0x00	; 0
    7690:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    7694:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinDirection(KEYPAD_R3_PORT, KEYPAD_R3_PIN, DIO_u8INPUT);
    7696:	82 e0       	ldi	r24, 0x02	; 2
    7698:	66 e0       	ldi	r22, 0x06	; 6
    769a:	40 e0       	ldi	r20, 0x00	; 0
    769c:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    76a0:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinDirection(KEYPAD_R4_PORT, KEYPAD_R4_PIN, DIO_u8INPUT);
    76a2:	82 e0       	ldi	r24, 0x02	; 2
    76a4:	67 e0       	ldi	r22, 0x07	; 7
    76a6:	40 e0       	ldi	r20, 0x00	; 0
    76a8:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
    76ac:	89 83       	std	Y+1, r24	; 0x01
	
	/* Pull-UP */
	Local_u8ErrorState = DIO_enuSetPinVal(KEYPAD_R1_PORT, KEYPAD_R1_PIN, DIO_u8PULL_UP);
    76ae:	82 e0       	ldi	r24, 0x02	; 2
    76b0:	64 e0       	ldi	r22, 0x04	; 4
    76b2:	41 e0       	ldi	r20, 0x01	; 1
    76b4:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    76b8:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinVal(KEYPAD_R2_PORT, KEYPAD_R2_PIN, DIO_u8PULL_UP);
    76ba:	82 e0       	ldi	r24, 0x02	; 2
    76bc:	65 e0       	ldi	r22, 0x05	; 5
    76be:	41 e0       	ldi	r20, 0x01	; 1
    76c0:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    76c4:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinVal(KEYPAD_R3_PORT, KEYPAD_R3_PIN, DIO_u8PULL_UP);
    76c6:	82 e0       	ldi	r24, 0x02	; 2
    76c8:	66 e0       	ldi	r22, 0x06	; 6
    76ca:	41 e0       	ldi	r20, 0x01	; 1
    76cc:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    76d0:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinVal(KEYPAD_R4_PORT, KEYPAD_R4_PIN, DIO_u8PULL_UP);
    76d2:	82 e0       	ldi	r24, 0x02	; 2
    76d4:	67 e0       	ldi	r22, 0x07	; 7
    76d6:	41 e0       	ldi	r20, 0x01	; 1
    76d8:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    76dc:	89 83       	std	Y+1, r24	; 0x01
	
	return Local_u8ErrorState;
    76de:	89 81       	ldd	r24, Y+1	; 0x01
}
    76e0:	0f 90       	pop	r0
    76e2:	cf 91       	pop	r28
    76e4:	df 91       	pop	r29
    76e6:	08 95       	ret

000076e8 <KEYPAD_u8GetPressedKey>:
 * @retval		: it returns the Key pressed
 * @note		: none
 ******************************************************************************
**/
u8 KEYPAD_u8GetPressedKey(void)
{
    76e8:	df 93       	push	r29
    76ea:	cf 93       	push	r28
    76ec:	00 d0       	rcall	.+0      	; 0x76ee <KEYPAD_u8GetPressedKey+0x6>
    76ee:	00 d0       	rcall	.+0      	; 0x76f0 <KEYPAD_u8GetPressedKey+0x8>
    76f0:	0f 92       	push	r0
    76f2:	cd b7       	in	r28, 0x3d	; 61
    76f4:	de b7       	in	r29, 0x3e	; 62
	
	/* array for Keypad characters */
	static u8 Local_KEYPAD_CHAR[ROW_NUM][COLUMN_NUM] = KEYPAD_CHARACTERS;
	
	u8 Local_u8ColumnIndex, Local_u8RowIndex, Local_u8PinState;
	u8 Local_u8PressedKey = KEYPAD_No_Key_Pressed;
    76f6:	8f ef       	ldi	r24, 0xFF	; 255
    76f8:	89 83       	std	Y+1, r24	; 0x01
	
	for(Local_u8ColumnIndex = 0; Local_u8ColumnIndex < COLUMN_NUM; Local_u8ColumnIndex++)
    76fa:	1b 82       	std	Y+3, r1	; 0x03
    76fc:	7a c0       	rjmp	.+244    	; 0x77f2 <KEYPAD_u8GetPressedKey+0x10a>
	{
		/* Active the current column */
		DIO_enuSetPinVal(Local_Au8ColumnsPorts[Local_u8ColumnIndex], Local_Au8ColumnsPins[Local_u8ColumnIndex], DIO_u8LOW);
    76fe:	8b 81       	ldd	r24, Y+3	; 0x03
    7700:	88 2f       	mov	r24, r24
    7702:	90 e0       	ldi	r25, 0x00	; 0
    7704:	fc 01       	movw	r30, r24
    7706:	e0 51       	subi	r30, 0x10	; 16
    7708:	fe 4f       	sbci	r31, 0xFE	; 254
    770a:	20 81       	ld	r18, Z
    770c:	8b 81       	ldd	r24, Y+3	; 0x03
    770e:	88 2f       	mov	r24, r24
    7710:	90 e0       	ldi	r25, 0x00	; 0
    7712:	fc 01       	movw	r30, r24
    7714:	e4 51       	subi	r30, 0x14	; 20
    7716:	fe 4f       	sbci	r31, 0xFE	; 254
    7718:	90 81       	ld	r25, Z
    771a:	82 2f       	mov	r24, r18
    771c:	69 2f       	mov	r22, r25
    771e:	40 e0       	ldi	r20, 0x00	; 0
    7720:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
		
		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUM; Local_u8RowIndex++)
    7724:	1a 82       	std	Y+2, r1	; 0x02
    7726:	4b c0       	rjmp	.+150    	; 0x77be <KEYPAD_u8GetPressedKey+0xd6>
		{
			/* iterate on reading Row pins value */
			DIO_enuGetPinVal(Local_Au8RowsPorts[Local_u8RowIndex], Local_Au8RowsPins[Local_u8RowIndex], &Local_u8PinState);
    7728:	8a 81       	ldd	r24, Y+2	; 0x02
    772a:	88 2f       	mov	r24, r24
    772c:	90 e0       	ldi	r25, 0x00	; 0
    772e:	fc 01       	movw	r30, r24
    7730:	e8 51       	subi	r30, 0x18	; 24
    7732:	fe 4f       	sbci	r31, 0xFE	; 254
    7734:	40 81       	ld	r20, Z
    7736:	8a 81       	ldd	r24, Y+2	; 0x02
    7738:	88 2f       	mov	r24, r24
    773a:	90 e0       	ldi	r25, 0x00	; 0
    773c:	fc 01       	movw	r30, r24
    773e:	ec 51       	subi	r30, 0x1C	; 28
    7740:	fe 4f       	sbci	r31, 0xFE	; 254
    7742:	90 81       	ld	r25, Z
    7744:	9e 01       	movw	r18, r28
    7746:	2c 5f       	subi	r18, 0xFC	; 252
    7748:	3f 4f       	sbci	r19, 0xFF	; 255
    774a:	84 2f       	mov	r24, r20
    774c:	69 2f       	mov	r22, r25
    774e:	a9 01       	movw	r20, r18
    7750:	0e 94 85 19 	call	0x330a	; 0x330a <DIO_enuGetPinVal>
			
			if(DIO_u8LOW == Local_u8PinState)
    7754:	8c 81       	ldd	r24, Y+4	; 0x04
    7756:	88 23       	and	r24, r24
    7758:	79 f5       	brne	.+94     	; 0x77b8 <KEYPAD_u8GetPressedKey+0xd0>
			{
				Local_u8PressedKey = Local_KEYPAD_CHAR[Local_u8RowIndex][Local_u8ColumnIndex];
    775a:	8a 81       	ldd	r24, Y+2	; 0x02
    775c:	48 2f       	mov	r20, r24
    775e:	50 e0       	ldi	r21, 0x00	; 0
    7760:	8b 81       	ldd	r24, Y+3	; 0x03
    7762:	28 2f       	mov	r18, r24
    7764:	30 e0       	ldi	r19, 0x00	; 0
    7766:	ca 01       	movw	r24, r20
    7768:	88 0f       	add	r24, r24
    776a:	99 1f       	adc	r25, r25
    776c:	88 0f       	add	r24, r24
    776e:	99 1f       	adc	r25, r25
    7770:	82 0f       	add	r24, r18
    7772:	93 1f       	adc	r25, r19
    7774:	fc 01       	movw	r30, r24
    7776:	ec 52       	subi	r30, 0x2C	; 44
    7778:	fe 4f       	sbci	r31, 0xFE	; 254
    777a:	80 81       	ld	r24, Z
    777c:	89 83       	std	Y+1, r24	; 0x01
    777e:	16 c0       	rjmp	.+44     	; 0x77ac <KEYPAD_u8GetPressedKey+0xc4>
				
				/* single press */
				while(DIO_u8LOW == Local_u8PinState)
				{
					DIO_enuGetPinVal(Local_Au8RowsPorts[Local_u8RowIndex], Local_Au8RowsPins[Local_u8RowIndex], &Local_u8PinState);
    7780:	8a 81       	ldd	r24, Y+2	; 0x02
    7782:	88 2f       	mov	r24, r24
    7784:	90 e0       	ldi	r25, 0x00	; 0
    7786:	fc 01       	movw	r30, r24
    7788:	e8 51       	subi	r30, 0x18	; 24
    778a:	fe 4f       	sbci	r31, 0xFE	; 254
    778c:	40 81       	ld	r20, Z
    778e:	8a 81       	ldd	r24, Y+2	; 0x02
    7790:	88 2f       	mov	r24, r24
    7792:	90 e0       	ldi	r25, 0x00	; 0
    7794:	fc 01       	movw	r30, r24
    7796:	ec 51       	subi	r30, 0x1C	; 28
    7798:	fe 4f       	sbci	r31, 0xFE	; 254
    779a:	90 81       	ld	r25, Z
    779c:	9e 01       	movw	r18, r28
    779e:	2c 5f       	subi	r18, 0xFC	; 252
    77a0:	3f 4f       	sbci	r19, 0xFF	; 255
    77a2:	84 2f       	mov	r24, r20
    77a4:	69 2f       	mov	r22, r25
    77a6:	a9 01       	movw	r20, r18
    77a8:	0e 94 85 19 	call	0x330a	; 0x330a <DIO_enuGetPinVal>
			if(DIO_u8LOW == Local_u8PinState)
			{
				Local_u8PressedKey = Local_KEYPAD_CHAR[Local_u8RowIndex][Local_u8ColumnIndex];
				
				/* single press */
				while(DIO_u8LOW == Local_u8PinState)
    77ac:	8c 81       	ldd	r24, Y+4	; 0x04
    77ae:	88 23       	and	r24, r24
    77b0:	39 f3       	breq	.-50     	; 0x7780 <KEYPAD_u8GetPressedKey+0x98>
				{
					DIO_enuGetPinVal(Local_Au8RowsPorts[Local_u8RowIndex], Local_Au8RowsPins[Local_u8RowIndex], &Local_u8PinState);
				}
				return Local_u8PressedKey;
    77b2:	89 81       	ldd	r24, Y+1	; 0x01
    77b4:	8d 83       	std	Y+5, r24	; 0x05
    77b6:	23 c0       	rjmp	.+70     	; 0x77fe <KEYPAD_u8GetPressedKey+0x116>
	for(Local_u8ColumnIndex = 0; Local_u8ColumnIndex < COLUMN_NUM; Local_u8ColumnIndex++)
	{
		/* Active the current column */
		DIO_enuSetPinVal(Local_Au8ColumnsPorts[Local_u8ColumnIndex], Local_Au8ColumnsPins[Local_u8ColumnIndex], DIO_u8LOW);
		
		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUM; Local_u8RowIndex++)
    77b8:	8a 81       	ldd	r24, Y+2	; 0x02
    77ba:	8f 5f       	subi	r24, 0xFF	; 255
    77bc:	8a 83       	std	Y+2, r24	; 0x02
    77be:	8a 81       	ldd	r24, Y+2	; 0x02
    77c0:	84 30       	cpi	r24, 0x04	; 4
    77c2:	08 f4       	brcc	.+2      	; 0x77c6 <KEYPAD_u8GetPressedKey+0xde>
    77c4:	b1 cf       	rjmp	.-158    	; 0x7728 <KEYPAD_u8GetPressedKey+0x40>
				return Local_u8PressedKey;
			}
		}
		
		/* Deactive the current column */
		DIO_enuSetPinVal(Local_Au8ColumnsPorts[Local_u8ColumnIndex], Local_Au8ColumnsPins[Local_u8ColumnIndex], DIO_u8HIGH);
    77c6:	8b 81       	ldd	r24, Y+3	; 0x03
    77c8:	88 2f       	mov	r24, r24
    77ca:	90 e0       	ldi	r25, 0x00	; 0
    77cc:	fc 01       	movw	r30, r24
    77ce:	e0 51       	subi	r30, 0x10	; 16
    77d0:	fe 4f       	sbci	r31, 0xFE	; 254
    77d2:	20 81       	ld	r18, Z
    77d4:	8b 81       	ldd	r24, Y+3	; 0x03
    77d6:	88 2f       	mov	r24, r24
    77d8:	90 e0       	ldi	r25, 0x00	; 0
    77da:	fc 01       	movw	r30, r24
    77dc:	e4 51       	subi	r30, 0x14	; 20
    77de:	fe 4f       	sbci	r31, 0xFE	; 254
    77e0:	90 81       	ld	r25, Z
    77e2:	82 2f       	mov	r24, r18
    77e4:	69 2f       	mov	r22, r25
    77e6:	41 e0       	ldi	r20, 0x01	; 1
    77e8:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
	static u8 Local_KEYPAD_CHAR[ROW_NUM][COLUMN_NUM] = KEYPAD_CHARACTERS;
	
	u8 Local_u8ColumnIndex, Local_u8RowIndex, Local_u8PinState;
	u8 Local_u8PressedKey = KEYPAD_No_Key_Pressed;
	
	for(Local_u8ColumnIndex = 0; Local_u8ColumnIndex < COLUMN_NUM; Local_u8ColumnIndex++)
    77ec:	8b 81       	ldd	r24, Y+3	; 0x03
    77ee:	8f 5f       	subi	r24, 0xFF	; 255
    77f0:	8b 83       	std	Y+3, r24	; 0x03
    77f2:	8b 81       	ldd	r24, Y+3	; 0x03
    77f4:	84 30       	cpi	r24, 0x04	; 4
    77f6:	08 f4       	brcc	.+2      	; 0x77fa <KEYPAD_u8GetPressedKey+0x112>
    77f8:	82 cf       	rjmp	.-252    	; 0x76fe <KEYPAD_u8GetPressedKey+0x16>
		/* Deactive the current column */
		DIO_enuSetPinVal(Local_Au8ColumnsPorts[Local_u8ColumnIndex], Local_Au8ColumnsPins[Local_u8ColumnIndex], DIO_u8HIGH);
	}
	
	
	return Local_u8PressedKey;
    77fa:	89 81       	ldd	r24, Y+1	; 0x01
    77fc:	8d 83       	std	Y+5, r24	; 0x05
    77fe:	8d 81       	ldd	r24, Y+5	; 0x05
}
    7800:	0f 90       	pop	r0
    7802:	0f 90       	pop	r0
    7804:	0f 90       	pop	r0
    7806:	0f 90       	pop	r0
    7808:	0f 90       	pop	r0
    780a:	cf 91       	pop	r28
    780c:	df 91       	pop	r29
    780e:	08 95       	ret

00007810 <DC_MOTOR_enuInit>:
#include "DC_MOTOR_config.h"

extern DC_MOTOR_t DC_MOTOR_AstrDcMotorConfig[DC_MOTOR_NUM];

ES_t DC_MOTOR_enuInit(DC_MOTOR_t *Copy_pAstrDcMotorConfig)
{
    7810:	df 93       	push	r29
    7812:	cf 93       	push	r28
    7814:	00 d0       	rcall	.+0      	; 0x7816 <DC_MOTOR_enuInit+0x6>
    7816:	00 d0       	rcall	.+0      	; 0x7818 <DC_MOTOR_enuInit+0x8>
    7818:	cd b7       	in	r28, 0x3d	; 61
    781a:	de b7       	in	r29, 0x3e	; 62
    781c:	9c 83       	std	Y+4, r25	; 0x04
    781e:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    7820:	81 e0       	ldi	r24, 0x01	; 1
    7822:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_pAstrDcMotorConfig != NULL)
    7824:	8b 81       	ldd	r24, Y+3	; 0x03
    7826:	9c 81       	ldd	r25, Y+4	; 0x04
    7828:	00 97       	sbiw	r24, 0x00	; 0
    782a:	09 f4       	brne	.+2      	; 0x782e <DC_MOTOR_enuInit+0x1e>
    782c:	4d c0       	rjmp	.+154    	; 0x78c8 <DC_MOTOR_enuInit+0xb8>
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < DC_MOTOR_NUM; Local_u8Iterator++)
    782e:	19 82       	std	Y+1, r1	; 0x01
    7830:	45 c0       	rjmp	.+138    	; 0x78bc <DC_MOTOR_enuInit+0xac>
		{
			DIO_enuSetPinDirection(Copy_pAstrDcMotorConfig[Local_u8Iterator].DC_MOTOR_u8In1PortID,Copy_pAstrDcMotorConfig[Local_u8Iterator].DC_MOTOR_u8In1PinID,DIO_u8OUTPUT);
    7832:	89 81       	ldd	r24, Y+1	; 0x01
    7834:	88 2f       	mov	r24, r24
    7836:	90 e0       	ldi	r25, 0x00	; 0
    7838:	9c 01       	movw	r18, r24
    783a:	22 0f       	add	r18, r18
    783c:	33 1f       	adc	r19, r19
    783e:	22 0f       	add	r18, r18
    7840:	33 1f       	adc	r19, r19
    7842:	8b 81       	ldd	r24, Y+3	; 0x03
    7844:	9c 81       	ldd	r25, Y+4	; 0x04
    7846:	fc 01       	movw	r30, r24
    7848:	e2 0f       	add	r30, r18
    784a:	f3 1f       	adc	r31, r19
    784c:	40 81       	ld	r20, Z
    784e:	89 81       	ldd	r24, Y+1	; 0x01
    7850:	88 2f       	mov	r24, r24
    7852:	90 e0       	ldi	r25, 0x00	; 0
    7854:	9c 01       	movw	r18, r24
    7856:	22 0f       	add	r18, r18
    7858:	33 1f       	adc	r19, r19
    785a:	22 0f       	add	r18, r18
    785c:	33 1f       	adc	r19, r19
    785e:	8b 81       	ldd	r24, Y+3	; 0x03
    7860:	9c 81       	ldd	r25, Y+4	; 0x04
    7862:	fc 01       	movw	r30, r24
    7864:	e2 0f       	add	r30, r18
    7866:	f3 1f       	adc	r31, r19
    7868:	91 81       	ldd	r25, Z+1	; 0x01
    786a:	84 2f       	mov	r24, r20
    786c:	69 2f       	mov	r22, r25
    786e:	41 e0       	ldi	r20, 0x01	; 1
    7870:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
			DIO_enuSetPinDirection(Copy_pAstrDcMotorConfig[Local_u8Iterator].DC_MOTOR_u8In2PortID,Copy_pAstrDcMotorConfig[Local_u8Iterator].DC_MOTOR_u8In2PinID,DIO_u8OUTPUT);
    7874:	89 81       	ldd	r24, Y+1	; 0x01
    7876:	88 2f       	mov	r24, r24
    7878:	90 e0       	ldi	r25, 0x00	; 0
    787a:	9c 01       	movw	r18, r24
    787c:	22 0f       	add	r18, r18
    787e:	33 1f       	adc	r19, r19
    7880:	22 0f       	add	r18, r18
    7882:	33 1f       	adc	r19, r19
    7884:	8b 81       	ldd	r24, Y+3	; 0x03
    7886:	9c 81       	ldd	r25, Y+4	; 0x04
    7888:	fc 01       	movw	r30, r24
    788a:	e2 0f       	add	r30, r18
    788c:	f3 1f       	adc	r31, r19
    788e:	42 81       	ldd	r20, Z+2	; 0x02
    7890:	89 81       	ldd	r24, Y+1	; 0x01
    7892:	88 2f       	mov	r24, r24
    7894:	90 e0       	ldi	r25, 0x00	; 0
    7896:	9c 01       	movw	r18, r24
    7898:	22 0f       	add	r18, r18
    789a:	33 1f       	adc	r19, r19
    789c:	22 0f       	add	r18, r18
    789e:	33 1f       	adc	r19, r19
    78a0:	8b 81       	ldd	r24, Y+3	; 0x03
    78a2:	9c 81       	ldd	r25, Y+4	; 0x04
    78a4:	fc 01       	movw	r30, r24
    78a6:	e2 0f       	add	r30, r18
    78a8:	f3 1f       	adc	r31, r19
    78aa:	93 81       	ldd	r25, Z+3	; 0x03
    78ac:	84 2f       	mov	r24, r20
    78ae:	69 2f       	mov	r22, r25
    78b0:	41 e0       	ldi	r20, 0x01	; 1
    78b2:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
	ES_t Local_enuErrorState = ES_NOK;

	if(Copy_pAstrDcMotorConfig != NULL)
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < DC_MOTOR_NUM; Local_u8Iterator++)
    78b6:	89 81       	ldd	r24, Y+1	; 0x01
    78b8:	8f 5f       	subi	r24, 0xFF	; 255
    78ba:	89 83       	std	Y+1, r24	; 0x01
    78bc:	89 81       	ldd	r24, Y+1	; 0x01
    78be:	88 23       	and	r24, r24
    78c0:	09 f4       	brne	.+2      	; 0x78c4 <DC_MOTOR_enuInit+0xb4>
    78c2:	b7 cf       	rjmp	.-146    	; 0x7832 <DC_MOTOR_enuInit+0x22>
		{
			DIO_enuSetPinDirection(Copy_pAstrDcMotorConfig[Local_u8Iterator].DC_MOTOR_u8In1PortID,Copy_pAstrDcMotorConfig[Local_u8Iterator].DC_MOTOR_u8In1PinID,DIO_u8OUTPUT);
			DIO_enuSetPinDirection(Copy_pAstrDcMotorConfig[Local_u8Iterator].DC_MOTOR_u8In2PortID,Copy_pAstrDcMotorConfig[Local_u8Iterator].DC_MOTOR_u8In2PinID,DIO_u8OUTPUT);
		}

		Local_enuErrorState = ES_OK;
    78c4:	1a 82       	std	Y+2, r1	; 0x02
    78c6:	02 c0       	rjmp	.+4      	; 0x78cc <DC_MOTOR_enuInit+0xbc>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    78c8:	82 e0       	ldi	r24, 0x02	; 2
    78ca:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    78cc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    78ce:	0f 90       	pop	r0
    78d0:	0f 90       	pop	r0
    78d2:	0f 90       	pop	r0
    78d4:	0f 90       	pop	r0
    78d6:	cf 91       	pop	r28
    78d8:	df 91       	pop	r29
    78da:	08 95       	ret

000078dc <DC_MOTOR_enuOnCW>:


ES_t DC_MOTOR_enuOnCW(u8 Copy_u8DcMotorID)
{
    78dc:	df 93       	push	r29
    78de:	cf 93       	push	r28
    78e0:	00 d0       	rcall	.+0      	; 0x78e2 <DC_MOTOR_enuOnCW+0x6>
    78e2:	cd b7       	in	r28, 0x3d	; 61
    78e4:	de b7       	in	r29, 0x3e	; 62
    78e6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    78e8:	81 e0       	ldi	r24, 0x01	; 1
    78ea:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8DcMotorID < DC_MOTOR_NUM)
    78ec:	8a 81       	ldd	r24, Y+2	; 0x02
    78ee:	88 23       	and	r24, r24
    78f0:	c9 f5       	brne	.+114    	; 0x7964 <DC_MOTOR_enuOnCW+0x88>
	{
		DIO_enuSetPinVal(DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In1PortID,DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In1PinID,DIO_u8HIGH);
    78f2:	8a 81       	ldd	r24, Y+2	; 0x02
    78f4:	88 2f       	mov	r24, r24
    78f6:	90 e0       	ldi	r25, 0x00	; 0
    78f8:	88 0f       	add	r24, r24
    78fa:	99 1f       	adc	r25, r25
    78fc:	88 0f       	add	r24, r24
    78fe:	99 1f       	adc	r25, r25
    7900:	fc 01       	movw	r30, r24
    7902:	ec 50       	subi	r30, 0x0C	; 12
    7904:	fe 4f       	sbci	r31, 0xFE	; 254
    7906:	20 81       	ld	r18, Z
    7908:	8a 81       	ldd	r24, Y+2	; 0x02
    790a:	88 2f       	mov	r24, r24
    790c:	90 e0       	ldi	r25, 0x00	; 0
    790e:	88 0f       	add	r24, r24
    7910:	99 1f       	adc	r25, r25
    7912:	88 0f       	add	r24, r24
    7914:	99 1f       	adc	r25, r25
    7916:	fc 01       	movw	r30, r24
    7918:	eb 50       	subi	r30, 0x0B	; 11
    791a:	fe 4f       	sbci	r31, 0xFE	; 254
    791c:	90 81       	ld	r25, Z
    791e:	82 2f       	mov	r24, r18
    7920:	69 2f       	mov	r22, r25
    7922:	41 e0       	ldi	r20, 0x01	; 1
    7924:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
		DIO_enuSetPinVal(DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In2PortID,DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In2PinID,DIO_u8LOW);
    7928:	8a 81       	ldd	r24, Y+2	; 0x02
    792a:	88 2f       	mov	r24, r24
    792c:	90 e0       	ldi	r25, 0x00	; 0
    792e:	88 0f       	add	r24, r24
    7930:	99 1f       	adc	r25, r25
    7932:	01 96       	adiw	r24, 0x01	; 1
    7934:	88 0f       	add	r24, r24
    7936:	99 1f       	adc	r25, r25
    7938:	fc 01       	movw	r30, r24
    793a:	ec 50       	subi	r30, 0x0C	; 12
    793c:	fe 4f       	sbci	r31, 0xFE	; 254
    793e:	20 81       	ld	r18, Z
    7940:	8a 81       	ldd	r24, Y+2	; 0x02
    7942:	88 2f       	mov	r24, r24
    7944:	90 e0       	ldi	r25, 0x00	; 0
    7946:	88 0f       	add	r24, r24
    7948:	99 1f       	adc	r25, r25
    794a:	88 0f       	add	r24, r24
    794c:	99 1f       	adc	r25, r25
    794e:	fc 01       	movw	r30, r24
    7950:	e9 50       	subi	r30, 0x09	; 9
    7952:	fe 4f       	sbci	r31, 0xFE	; 254
    7954:	90 81       	ld	r25, Z
    7956:	82 2f       	mov	r24, r18
    7958:	69 2f       	mov	r22, r25
    795a:	40 e0       	ldi	r20, 0x00	; 0
    795c:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
		Local_enuErrorState = ES_OK;
    7960:	19 82       	std	Y+1, r1	; 0x01
    7962:	02 c0       	rjmp	.+4      	; 0x7968 <DC_MOTOR_enuOnCW+0x8c>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    7964:	83 e0       	ldi	r24, 0x03	; 3
    7966:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    7968:	89 81       	ldd	r24, Y+1	; 0x01
}
    796a:	0f 90       	pop	r0
    796c:	0f 90       	pop	r0
    796e:	cf 91       	pop	r28
    7970:	df 91       	pop	r29
    7972:	08 95       	ret

00007974 <DC_MOTOR_enuOnCCW>:

ES_t DC_MOTOR_enuOnCCW(u8 Copy_u8DcMotorID)
{
    7974:	df 93       	push	r29
    7976:	cf 93       	push	r28
    7978:	00 d0       	rcall	.+0      	; 0x797a <DC_MOTOR_enuOnCCW+0x6>
    797a:	cd b7       	in	r28, 0x3d	; 61
    797c:	de b7       	in	r29, 0x3e	; 62
    797e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    7980:	81 e0       	ldi	r24, 0x01	; 1
    7982:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8DcMotorID < DC_MOTOR_NUM)
    7984:	8a 81       	ldd	r24, Y+2	; 0x02
    7986:	88 23       	and	r24, r24
    7988:	c9 f5       	brne	.+114    	; 0x79fc <DC_MOTOR_enuOnCCW+0x88>
	{
		DIO_enuSetPinVal(DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In1PortID,DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In1PinID,DIO_u8LOW);
    798a:	8a 81       	ldd	r24, Y+2	; 0x02
    798c:	88 2f       	mov	r24, r24
    798e:	90 e0       	ldi	r25, 0x00	; 0
    7990:	88 0f       	add	r24, r24
    7992:	99 1f       	adc	r25, r25
    7994:	88 0f       	add	r24, r24
    7996:	99 1f       	adc	r25, r25
    7998:	fc 01       	movw	r30, r24
    799a:	ec 50       	subi	r30, 0x0C	; 12
    799c:	fe 4f       	sbci	r31, 0xFE	; 254
    799e:	20 81       	ld	r18, Z
    79a0:	8a 81       	ldd	r24, Y+2	; 0x02
    79a2:	88 2f       	mov	r24, r24
    79a4:	90 e0       	ldi	r25, 0x00	; 0
    79a6:	88 0f       	add	r24, r24
    79a8:	99 1f       	adc	r25, r25
    79aa:	88 0f       	add	r24, r24
    79ac:	99 1f       	adc	r25, r25
    79ae:	fc 01       	movw	r30, r24
    79b0:	eb 50       	subi	r30, 0x0B	; 11
    79b2:	fe 4f       	sbci	r31, 0xFE	; 254
    79b4:	90 81       	ld	r25, Z
    79b6:	82 2f       	mov	r24, r18
    79b8:	69 2f       	mov	r22, r25
    79ba:	40 e0       	ldi	r20, 0x00	; 0
    79bc:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
		DIO_enuSetPinVal(DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In2PortID,DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In2PinID,DIO_u8HIGH);
    79c0:	8a 81       	ldd	r24, Y+2	; 0x02
    79c2:	88 2f       	mov	r24, r24
    79c4:	90 e0       	ldi	r25, 0x00	; 0
    79c6:	88 0f       	add	r24, r24
    79c8:	99 1f       	adc	r25, r25
    79ca:	01 96       	adiw	r24, 0x01	; 1
    79cc:	88 0f       	add	r24, r24
    79ce:	99 1f       	adc	r25, r25
    79d0:	fc 01       	movw	r30, r24
    79d2:	ec 50       	subi	r30, 0x0C	; 12
    79d4:	fe 4f       	sbci	r31, 0xFE	; 254
    79d6:	20 81       	ld	r18, Z
    79d8:	8a 81       	ldd	r24, Y+2	; 0x02
    79da:	88 2f       	mov	r24, r24
    79dc:	90 e0       	ldi	r25, 0x00	; 0
    79de:	88 0f       	add	r24, r24
    79e0:	99 1f       	adc	r25, r25
    79e2:	88 0f       	add	r24, r24
    79e4:	99 1f       	adc	r25, r25
    79e6:	fc 01       	movw	r30, r24
    79e8:	e9 50       	subi	r30, 0x09	; 9
    79ea:	fe 4f       	sbci	r31, 0xFE	; 254
    79ec:	90 81       	ld	r25, Z
    79ee:	82 2f       	mov	r24, r18
    79f0:	69 2f       	mov	r22, r25
    79f2:	41 e0       	ldi	r20, 0x01	; 1
    79f4:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
		Local_enuErrorState = ES_OK;
    79f8:	19 82       	std	Y+1, r1	; 0x01
    79fa:	02 c0       	rjmp	.+4      	; 0x7a00 <DC_MOTOR_enuOnCCW+0x8c>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    79fc:	83 e0       	ldi	r24, 0x03	; 3
    79fe:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    7a00:	89 81       	ldd	r24, Y+1	; 0x01
}
    7a02:	0f 90       	pop	r0
    7a04:	0f 90       	pop	r0
    7a06:	cf 91       	pop	r28
    7a08:	df 91       	pop	r29
    7a0a:	08 95       	ret

00007a0c <DC_MOTOR_enuOff>:

ES_t DC_MOTOR_enuOff(u8 Copy_u8DcMotorID)
{
    7a0c:	df 93       	push	r29
    7a0e:	cf 93       	push	r28
    7a10:	00 d0       	rcall	.+0      	; 0x7a12 <DC_MOTOR_enuOff+0x6>
    7a12:	cd b7       	in	r28, 0x3d	; 61
    7a14:	de b7       	in	r29, 0x3e	; 62
    7a16:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    7a18:	81 e0       	ldi	r24, 0x01	; 1
    7a1a:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8DcMotorID < DC_MOTOR_NUM)
    7a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    7a1e:	88 23       	and	r24, r24
    7a20:	c9 f5       	brne	.+114    	; 0x7a94 <DC_MOTOR_enuOff+0x88>
	{
		DIO_enuSetPinVal(DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In1PortID,DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In1PinID,DIO_u8LOW);
    7a22:	8a 81       	ldd	r24, Y+2	; 0x02
    7a24:	88 2f       	mov	r24, r24
    7a26:	90 e0       	ldi	r25, 0x00	; 0
    7a28:	88 0f       	add	r24, r24
    7a2a:	99 1f       	adc	r25, r25
    7a2c:	88 0f       	add	r24, r24
    7a2e:	99 1f       	adc	r25, r25
    7a30:	fc 01       	movw	r30, r24
    7a32:	ec 50       	subi	r30, 0x0C	; 12
    7a34:	fe 4f       	sbci	r31, 0xFE	; 254
    7a36:	20 81       	ld	r18, Z
    7a38:	8a 81       	ldd	r24, Y+2	; 0x02
    7a3a:	88 2f       	mov	r24, r24
    7a3c:	90 e0       	ldi	r25, 0x00	; 0
    7a3e:	88 0f       	add	r24, r24
    7a40:	99 1f       	adc	r25, r25
    7a42:	88 0f       	add	r24, r24
    7a44:	99 1f       	adc	r25, r25
    7a46:	fc 01       	movw	r30, r24
    7a48:	eb 50       	subi	r30, 0x0B	; 11
    7a4a:	fe 4f       	sbci	r31, 0xFE	; 254
    7a4c:	90 81       	ld	r25, Z
    7a4e:	82 2f       	mov	r24, r18
    7a50:	69 2f       	mov	r22, r25
    7a52:	40 e0       	ldi	r20, 0x00	; 0
    7a54:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
		DIO_enuSetPinVal(DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In2PortID,DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In2PinID,DIO_u8LOW);
    7a58:	8a 81       	ldd	r24, Y+2	; 0x02
    7a5a:	88 2f       	mov	r24, r24
    7a5c:	90 e0       	ldi	r25, 0x00	; 0
    7a5e:	88 0f       	add	r24, r24
    7a60:	99 1f       	adc	r25, r25
    7a62:	01 96       	adiw	r24, 0x01	; 1
    7a64:	88 0f       	add	r24, r24
    7a66:	99 1f       	adc	r25, r25
    7a68:	fc 01       	movw	r30, r24
    7a6a:	ec 50       	subi	r30, 0x0C	; 12
    7a6c:	fe 4f       	sbci	r31, 0xFE	; 254
    7a6e:	20 81       	ld	r18, Z
    7a70:	8a 81       	ldd	r24, Y+2	; 0x02
    7a72:	88 2f       	mov	r24, r24
    7a74:	90 e0       	ldi	r25, 0x00	; 0
    7a76:	88 0f       	add	r24, r24
    7a78:	99 1f       	adc	r25, r25
    7a7a:	88 0f       	add	r24, r24
    7a7c:	99 1f       	adc	r25, r25
    7a7e:	fc 01       	movw	r30, r24
    7a80:	e9 50       	subi	r30, 0x09	; 9
    7a82:	fe 4f       	sbci	r31, 0xFE	; 254
    7a84:	90 81       	ld	r25, Z
    7a86:	82 2f       	mov	r24, r18
    7a88:	69 2f       	mov	r22, r25
    7a8a:	40 e0       	ldi	r20, 0x00	; 0
    7a8c:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
		Local_enuErrorState = ES_OK;
    7a90:	19 82       	std	Y+1, r1	; 0x01
    7a92:	02 c0       	rjmp	.+4      	; 0x7a98 <DC_MOTOR_enuOff+0x8c>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    7a94:	83 e0       	ldi	r24, 0x03	; 3
    7a96:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    7a98:	89 81       	ldd	r24, Y+1	; 0x01
}
    7a9a:	0f 90       	pop	r0
    7a9c:	0f 90       	pop	r0
    7a9e:	cf 91       	pop	r28
    7aa0:	df 91       	pop	r29
    7aa2:	08 95       	ret

00007aa4 <DC_MOTOR_SetSpeed>:

/*Speed 0:100*/
ES_t DC_MOTOR_SetSpeed(u8 Copy_u8DcMotorID, u8 Copy_u8DcMotorSpeed)
{
    7aa4:	df 93       	push	r29
    7aa6:	cf 93       	push	r28
    7aa8:	00 d0       	rcall	.+0      	; 0x7aaa <DC_MOTOR_SetSpeed+0x6>
    7aaa:	0f 92       	push	r0
    7aac:	cd b7       	in	r28, 0x3d	; 61
    7aae:	de b7       	in	r29, 0x3e	; 62
    7ab0:	8a 83       	std	Y+2, r24	; 0x02
    7ab2:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    7ab4:	81 e0       	ldi	r24, 0x01	; 1
    7ab6:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8DcMotorID < DC_MOTOR_NUM && Copy_u8DcMotorSpeed <= 100)
    7ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    7aba:	88 23       	and	r24, r24
    7abc:	71 f4       	brne	.+28     	; 0x7ada <DC_MOTOR_SetSpeed+0x36>
    7abe:	8b 81       	ldd	r24, Y+3	; 0x03
    7ac0:	85 36       	cpi	r24, 0x65	; 101
    7ac2:	58 f4       	brcc	.+22     	; 0x7ada <DC_MOTOR_SetSpeed+0x36>
	{
		DIO_enuSetPinDirection(DIO_u8PORTB, DIO_u8PIN3, DIO_u8OUTPUT);
    7ac4:	81 e0       	ldi	r24, 0x01	; 1
    7ac6:	63 e0       	ldi	r22, 0x03	; 3
    7ac8:	41 e0       	ldi	r20, 0x01	; 1
    7aca:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
		TIMER0_enuInit();
    7ace:	0e 94 ba 0b 	call	0x1774	; 0x1774 <TIMER0_enuInit>
		TIMER0_enuGeneratePWM(Copy_u8DcMotorSpeed);
    7ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    7ad4:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <TIMER0_enuGeneratePWM>
    7ad8:	02 c0       	rjmp	.+4      	; 0x7ade <DC_MOTOR_SetSpeed+0x3a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    7ada:	83 e0       	ldi	r24, 0x03	; 3
    7adc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    7ade:	89 81       	ldd	r24, Y+1	; 0x01
}
    7ae0:	0f 90       	pop	r0
    7ae2:	0f 90       	pop	r0
    7ae4:	0f 90       	pop	r0
    7ae6:	cf 91       	pop	r28
    7ae8:	df 91       	pop	r29
    7aea:	08 95       	ret

00007aec <BUZZER_enuInit>:
#include "BUZZER_config.h"

extern BUZZER_t BUZZER_AstrBuzzerConfig[BUZZER_NUM];

ES_t BUZZER_enuInit(BUZZER_t *Copy_pAstrBuzzerConfig)
{
    7aec:	df 93       	push	r29
    7aee:	cf 93       	push	r28
    7af0:	00 d0       	rcall	.+0      	; 0x7af2 <BUZZER_enuInit+0x6>
    7af2:	00 d0       	rcall	.+0      	; 0x7af4 <BUZZER_enuInit+0x8>
    7af4:	cd b7       	in	r28, 0x3d	; 61
    7af6:	de b7       	in	r29, 0x3e	; 62
    7af8:	9c 83       	std	Y+4, r25	; 0x04
    7afa:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    7afc:	81 e0       	ldi	r24, 0x01	; 1
    7afe:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_pAstrBuzzerConfig != NULL)
    7b00:	8b 81       	ldd	r24, Y+3	; 0x03
    7b02:	9c 81       	ldd	r25, Y+4	; 0x04
    7b04:	00 97       	sbiw	r24, 0x00	; 0
    7b06:	09 f4       	brne	.+2      	; 0x7b0a <BUZZER_enuInit+0x1e>
    7b08:	93 c0       	rjmp	.+294    	; 0x7c30 <BUZZER_enuInit+0x144>
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < BUZZER_NUM; Local_u8Iterator++)
    7b0a:	19 82       	std	Y+1, r1	; 0x01
    7b0c:	8c c0       	rjmp	.+280    	; 0x7c26 <BUZZER_enuInit+0x13a>
		{
			DIO_enuSetPinDirection(Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8PortID, Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8PinID, DIO_u8OUTPUT);
    7b0e:	89 81       	ldd	r24, Y+1	; 0x01
    7b10:	28 2f       	mov	r18, r24
    7b12:	30 e0       	ldi	r19, 0x00	; 0
    7b14:	c9 01       	movw	r24, r18
    7b16:	88 0f       	add	r24, r24
    7b18:	99 1f       	adc	r25, r25
    7b1a:	28 0f       	add	r18, r24
    7b1c:	39 1f       	adc	r19, r25
    7b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    7b20:	9c 81       	ldd	r25, Y+4	; 0x04
    7b22:	fc 01       	movw	r30, r24
    7b24:	e2 0f       	add	r30, r18
    7b26:	f3 1f       	adc	r31, r19
    7b28:	40 81       	ld	r20, Z
    7b2a:	89 81       	ldd	r24, Y+1	; 0x01
    7b2c:	28 2f       	mov	r18, r24
    7b2e:	30 e0       	ldi	r19, 0x00	; 0
    7b30:	c9 01       	movw	r24, r18
    7b32:	88 0f       	add	r24, r24
    7b34:	99 1f       	adc	r25, r25
    7b36:	28 0f       	add	r18, r24
    7b38:	39 1f       	adc	r19, r25
    7b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    7b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    7b3e:	fc 01       	movw	r30, r24
    7b40:	e2 0f       	add	r30, r18
    7b42:	f3 1f       	adc	r31, r19
    7b44:	91 81       	ldd	r25, Z+1	; 0x01
    7b46:	84 2f       	mov	r24, r20
    7b48:	69 2f       	mov	r22, r25
    7b4a:	41 e0       	ldi	r20, 0x01	; 1
    7b4c:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
			if(Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8InitState == BUZZER_u8ON)
    7b50:	89 81       	ldd	r24, Y+1	; 0x01
    7b52:	28 2f       	mov	r18, r24
    7b54:	30 e0       	ldi	r19, 0x00	; 0
    7b56:	c9 01       	movw	r24, r18
    7b58:	88 0f       	add	r24, r24
    7b5a:	99 1f       	adc	r25, r25
    7b5c:	28 0f       	add	r18, r24
    7b5e:	39 1f       	adc	r19, r25
    7b60:	8b 81       	ldd	r24, Y+3	; 0x03
    7b62:	9c 81       	ldd	r25, Y+4	; 0x04
    7b64:	fc 01       	movw	r30, r24
    7b66:	e2 0f       	add	r30, r18
    7b68:	f3 1f       	adc	r31, r19
    7b6a:	82 81       	ldd	r24, Z+2	; 0x02
    7b6c:	8a 30       	cpi	r24, 0x0A	; 10
    7b6e:	19 f5       	brne	.+70     	; 0x7bb6 <BUZZER_enuInit+0xca>
			{
				Local_enuErrorState = DIO_enuSetPinVal(Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8PortID, Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8PinID, DIO_u8HIGH);
    7b70:	89 81       	ldd	r24, Y+1	; 0x01
    7b72:	28 2f       	mov	r18, r24
    7b74:	30 e0       	ldi	r19, 0x00	; 0
    7b76:	c9 01       	movw	r24, r18
    7b78:	88 0f       	add	r24, r24
    7b7a:	99 1f       	adc	r25, r25
    7b7c:	28 0f       	add	r18, r24
    7b7e:	39 1f       	adc	r19, r25
    7b80:	8b 81       	ldd	r24, Y+3	; 0x03
    7b82:	9c 81       	ldd	r25, Y+4	; 0x04
    7b84:	fc 01       	movw	r30, r24
    7b86:	e2 0f       	add	r30, r18
    7b88:	f3 1f       	adc	r31, r19
    7b8a:	40 81       	ld	r20, Z
    7b8c:	89 81       	ldd	r24, Y+1	; 0x01
    7b8e:	28 2f       	mov	r18, r24
    7b90:	30 e0       	ldi	r19, 0x00	; 0
    7b92:	c9 01       	movw	r24, r18
    7b94:	88 0f       	add	r24, r24
    7b96:	99 1f       	adc	r25, r25
    7b98:	28 0f       	add	r18, r24
    7b9a:	39 1f       	adc	r19, r25
    7b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    7b9e:	9c 81       	ldd	r25, Y+4	; 0x04
    7ba0:	fc 01       	movw	r30, r24
    7ba2:	e2 0f       	add	r30, r18
    7ba4:	f3 1f       	adc	r31, r19
    7ba6:	91 81       	ldd	r25, Z+1	; 0x01
    7ba8:	84 2f       	mov	r24, r20
    7baa:	69 2f       	mov	r22, r25
    7bac:	41 e0       	ldi	r20, 0x01	; 1
    7bae:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    7bb2:	8a 83       	std	Y+2, r24	; 0x02
    7bb4:	35 c0       	rjmp	.+106    	; 0x7c20 <BUZZER_enuInit+0x134>
			}
			else if(Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8InitState == BUZZER_u8OFF)
    7bb6:	89 81       	ldd	r24, Y+1	; 0x01
    7bb8:	28 2f       	mov	r18, r24
    7bba:	30 e0       	ldi	r19, 0x00	; 0
    7bbc:	c9 01       	movw	r24, r18
    7bbe:	88 0f       	add	r24, r24
    7bc0:	99 1f       	adc	r25, r25
    7bc2:	28 0f       	add	r18, r24
    7bc4:	39 1f       	adc	r19, r25
    7bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    7bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    7bca:	fc 01       	movw	r30, r24
    7bcc:	e2 0f       	add	r30, r18
    7bce:	f3 1f       	adc	r31, r19
    7bd0:	82 81       	ldd	r24, Z+2	; 0x02
    7bd2:	8b 30       	cpi	r24, 0x0B	; 11
    7bd4:	19 f5       	brne	.+70     	; 0x7c1c <BUZZER_enuInit+0x130>
			{
				Local_enuErrorState = DIO_enuSetPinVal(Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8PortID, Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8PinID, DIO_u8LOW);
    7bd6:	89 81       	ldd	r24, Y+1	; 0x01
    7bd8:	28 2f       	mov	r18, r24
    7bda:	30 e0       	ldi	r19, 0x00	; 0
    7bdc:	c9 01       	movw	r24, r18
    7bde:	88 0f       	add	r24, r24
    7be0:	99 1f       	adc	r25, r25
    7be2:	28 0f       	add	r18, r24
    7be4:	39 1f       	adc	r19, r25
    7be6:	8b 81       	ldd	r24, Y+3	; 0x03
    7be8:	9c 81       	ldd	r25, Y+4	; 0x04
    7bea:	fc 01       	movw	r30, r24
    7bec:	e2 0f       	add	r30, r18
    7bee:	f3 1f       	adc	r31, r19
    7bf0:	40 81       	ld	r20, Z
    7bf2:	89 81       	ldd	r24, Y+1	; 0x01
    7bf4:	28 2f       	mov	r18, r24
    7bf6:	30 e0       	ldi	r19, 0x00	; 0
    7bf8:	c9 01       	movw	r24, r18
    7bfa:	88 0f       	add	r24, r24
    7bfc:	99 1f       	adc	r25, r25
    7bfe:	28 0f       	add	r18, r24
    7c00:	39 1f       	adc	r19, r25
    7c02:	8b 81       	ldd	r24, Y+3	; 0x03
    7c04:	9c 81       	ldd	r25, Y+4	; 0x04
    7c06:	fc 01       	movw	r30, r24
    7c08:	e2 0f       	add	r30, r18
    7c0a:	f3 1f       	adc	r31, r19
    7c0c:	91 81       	ldd	r25, Z+1	; 0x01
    7c0e:	84 2f       	mov	r24, r20
    7c10:	69 2f       	mov	r22, r25
    7c12:	40 e0       	ldi	r20, 0x00	; 0
    7c14:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    7c18:	8a 83       	std	Y+2, r24	; 0x02
    7c1a:	02 c0       	rjmp	.+4      	; 0x7c20 <BUZZER_enuInit+0x134>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    7c1c:	83 e0       	ldi	r24, 0x03	; 3
    7c1e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;

	if(Copy_pAstrBuzzerConfig != NULL)
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < BUZZER_NUM; Local_u8Iterator++)
    7c20:	89 81       	ldd	r24, Y+1	; 0x01
    7c22:	8f 5f       	subi	r24, 0xFF	; 255
    7c24:	89 83       	std	Y+1, r24	; 0x01
    7c26:	89 81       	ldd	r24, Y+1	; 0x01
    7c28:	82 30       	cpi	r24, 0x02	; 2
    7c2a:	08 f4       	brcc	.+2      	; 0x7c2e <BUZZER_enuInit+0x142>
    7c2c:	70 cf       	rjmp	.-288    	; 0x7b0e <BUZZER_enuInit+0x22>
    7c2e:	02 c0       	rjmp	.+4      	; 0x7c34 <BUZZER_enuInit+0x148>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    7c30:	82 e0       	ldi	r24, 0x02	; 2
    7c32:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    7c34:	8a 81       	ldd	r24, Y+2	; 0x02
}
    7c36:	0f 90       	pop	r0
    7c38:	0f 90       	pop	r0
    7c3a:	0f 90       	pop	r0
    7c3c:	0f 90       	pop	r0
    7c3e:	cf 91       	pop	r28
    7c40:	df 91       	pop	r29
    7c42:	08 95       	ret

00007c44 <BUZZER_enuTurnON>:

ES_t BUZZER_enuTurnON(u8 Copy_u8BuzzerID)
{
    7c44:	df 93       	push	r29
    7c46:	cf 93       	push	r28
    7c48:	00 d0       	rcall	.+0      	; 0x7c4a <BUZZER_enuTurnON+0x6>
    7c4a:	cd b7       	in	r28, 0x3d	; 61
    7c4c:	de b7       	in	r29, 0x3e	; 62
    7c4e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    7c50:	81 e0       	ldi	r24, 0x01	; 1
    7c52:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8BuzzerID < BUZZER_NUM)
    7c54:	8a 81       	ldd	r24, Y+2	; 0x02
    7c56:	82 30       	cpi	r24, 0x02	; 2
    7c58:	e0 f5       	brcc	.+120    	; 0x7cd2 <BUZZER_enuTurnON+0x8e>
	{
		DIO_enuSetPinDirection(BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PortID, BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PinID, DIO_u8OUTPUT);
    7c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    7c5c:	28 2f       	mov	r18, r24
    7c5e:	30 e0       	ldi	r19, 0x00	; 0
    7c60:	c9 01       	movw	r24, r18
    7c62:	88 0f       	add	r24, r24
    7c64:	99 1f       	adc	r25, r25
    7c66:	82 0f       	add	r24, r18
    7c68:	93 1f       	adc	r25, r19
    7c6a:	fc 01       	movw	r30, r24
    7c6c:	e8 50       	subi	r30, 0x08	; 8
    7c6e:	fe 4f       	sbci	r31, 0xFE	; 254
    7c70:	40 81       	ld	r20, Z
    7c72:	8a 81       	ldd	r24, Y+2	; 0x02
    7c74:	28 2f       	mov	r18, r24
    7c76:	30 e0       	ldi	r19, 0x00	; 0
    7c78:	c9 01       	movw	r24, r18
    7c7a:	88 0f       	add	r24, r24
    7c7c:	99 1f       	adc	r25, r25
    7c7e:	82 0f       	add	r24, r18
    7c80:	93 1f       	adc	r25, r19
    7c82:	fc 01       	movw	r30, r24
    7c84:	e7 50       	subi	r30, 0x07	; 7
    7c86:	fe 4f       	sbci	r31, 0xFE	; 254
    7c88:	90 81       	ld	r25, Z
    7c8a:	84 2f       	mov	r24, r20
    7c8c:	69 2f       	mov	r22, r25
    7c8e:	41 e0       	ldi	r20, 0x01	; 1
    7c90:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
		Local_enuErrorState = DIO_enuSetPinVal(BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PortID, BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PinID, DIO_u8HIGH);
    7c94:	8a 81       	ldd	r24, Y+2	; 0x02
    7c96:	28 2f       	mov	r18, r24
    7c98:	30 e0       	ldi	r19, 0x00	; 0
    7c9a:	c9 01       	movw	r24, r18
    7c9c:	88 0f       	add	r24, r24
    7c9e:	99 1f       	adc	r25, r25
    7ca0:	82 0f       	add	r24, r18
    7ca2:	93 1f       	adc	r25, r19
    7ca4:	fc 01       	movw	r30, r24
    7ca6:	e8 50       	subi	r30, 0x08	; 8
    7ca8:	fe 4f       	sbci	r31, 0xFE	; 254
    7caa:	40 81       	ld	r20, Z
    7cac:	8a 81       	ldd	r24, Y+2	; 0x02
    7cae:	28 2f       	mov	r18, r24
    7cb0:	30 e0       	ldi	r19, 0x00	; 0
    7cb2:	c9 01       	movw	r24, r18
    7cb4:	88 0f       	add	r24, r24
    7cb6:	99 1f       	adc	r25, r25
    7cb8:	82 0f       	add	r24, r18
    7cba:	93 1f       	adc	r25, r19
    7cbc:	fc 01       	movw	r30, r24
    7cbe:	e7 50       	subi	r30, 0x07	; 7
    7cc0:	fe 4f       	sbci	r31, 0xFE	; 254
    7cc2:	90 81       	ld	r25, Z
    7cc4:	84 2f       	mov	r24, r20
    7cc6:	69 2f       	mov	r22, r25
    7cc8:	41 e0       	ldi	r20, 0x01	; 1
    7cca:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    7cce:	89 83       	std	Y+1, r24	; 0x01
    7cd0:	02 c0       	rjmp	.+4      	; 0x7cd6 <BUZZER_enuTurnON+0x92>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    7cd2:	83 e0       	ldi	r24, 0x03	; 3
    7cd4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    7cd6:	89 81       	ldd	r24, Y+1	; 0x01
}
    7cd8:	0f 90       	pop	r0
    7cda:	0f 90       	pop	r0
    7cdc:	cf 91       	pop	r28
    7cde:	df 91       	pop	r29
    7ce0:	08 95       	ret

00007ce2 <BUZZER_enuTurnOFF>:

ES_t BUZZER_enuTurnOFF(u8 Copy_u8BuzzerID)
{
    7ce2:	df 93       	push	r29
    7ce4:	cf 93       	push	r28
    7ce6:	00 d0       	rcall	.+0      	; 0x7ce8 <BUZZER_enuTurnOFF+0x6>
    7ce8:	cd b7       	in	r28, 0x3d	; 61
    7cea:	de b7       	in	r29, 0x3e	; 62
    7cec:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    7cee:	81 e0       	ldi	r24, 0x01	; 1
    7cf0:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8BuzzerID < BUZZER_NUM)
    7cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    7cf4:	82 30       	cpi	r24, 0x02	; 2
    7cf6:	e0 f5       	brcc	.+120    	; 0x7d70 <BUZZER_enuTurnOFF+0x8e>
	{
		DIO_enuSetPinDirection(BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PortID, BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PinID, DIO_u8OUTPUT);
    7cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    7cfa:	28 2f       	mov	r18, r24
    7cfc:	30 e0       	ldi	r19, 0x00	; 0
    7cfe:	c9 01       	movw	r24, r18
    7d00:	88 0f       	add	r24, r24
    7d02:	99 1f       	adc	r25, r25
    7d04:	82 0f       	add	r24, r18
    7d06:	93 1f       	adc	r25, r19
    7d08:	fc 01       	movw	r30, r24
    7d0a:	e8 50       	subi	r30, 0x08	; 8
    7d0c:	fe 4f       	sbci	r31, 0xFE	; 254
    7d0e:	40 81       	ld	r20, Z
    7d10:	8a 81       	ldd	r24, Y+2	; 0x02
    7d12:	28 2f       	mov	r18, r24
    7d14:	30 e0       	ldi	r19, 0x00	; 0
    7d16:	c9 01       	movw	r24, r18
    7d18:	88 0f       	add	r24, r24
    7d1a:	99 1f       	adc	r25, r25
    7d1c:	82 0f       	add	r24, r18
    7d1e:	93 1f       	adc	r25, r19
    7d20:	fc 01       	movw	r30, r24
    7d22:	e7 50       	subi	r30, 0x07	; 7
    7d24:	fe 4f       	sbci	r31, 0xFE	; 254
    7d26:	90 81       	ld	r25, Z
    7d28:	84 2f       	mov	r24, r20
    7d2a:	69 2f       	mov	r22, r25
    7d2c:	41 e0       	ldi	r20, 0x01	; 1
    7d2e:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <DIO_enuSetPinDirection>
		Local_enuErrorState = DIO_enuSetPinVal(BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PortID, BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PinID, DIO_u8LOW);
    7d32:	8a 81       	ldd	r24, Y+2	; 0x02
    7d34:	28 2f       	mov	r18, r24
    7d36:	30 e0       	ldi	r19, 0x00	; 0
    7d38:	c9 01       	movw	r24, r18
    7d3a:	88 0f       	add	r24, r24
    7d3c:	99 1f       	adc	r25, r25
    7d3e:	82 0f       	add	r24, r18
    7d40:	93 1f       	adc	r25, r19
    7d42:	fc 01       	movw	r30, r24
    7d44:	e8 50       	subi	r30, 0x08	; 8
    7d46:	fe 4f       	sbci	r31, 0xFE	; 254
    7d48:	40 81       	ld	r20, Z
    7d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    7d4c:	28 2f       	mov	r18, r24
    7d4e:	30 e0       	ldi	r19, 0x00	; 0
    7d50:	c9 01       	movw	r24, r18
    7d52:	88 0f       	add	r24, r24
    7d54:	99 1f       	adc	r25, r25
    7d56:	82 0f       	add	r24, r18
    7d58:	93 1f       	adc	r25, r19
    7d5a:	fc 01       	movw	r30, r24
    7d5c:	e7 50       	subi	r30, 0x07	; 7
    7d5e:	fe 4f       	sbci	r31, 0xFE	; 254
    7d60:	90 81       	ld	r25, Z
    7d62:	84 2f       	mov	r24, r20
    7d64:	69 2f       	mov	r22, r25
    7d66:	40 e0       	ldi	r20, 0x00	; 0
    7d68:	0e 94 99 18 	call	0x3132	; 0x3132 <DIO_enuSetPinVal>
    7d6c:	89 83       	std	Y+1, r24	; 0x01
    7d6e:	02 c0       	rjmp	.+4      	; 0x7d74 <BUZZER_enuTurnOFF+0x92>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    7d70:	83 e0       	ldi	r24, 0x03	; 3
    7d72:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    7d74:	89 81       	ldd	r24, Y+1	; 0x01
}
    7d76:	0f 90       	pop	r0
    7d78:	0f 90       	pop	r0
    7d7a:	cf 91       	pop	r28
    7d7c:	df 91       	pop	r29
    7d7e:	08 95       	ret

00007d80 <main>:
**/
#define F_CPU 1000000UL


int main(void)
{
    7d80:	df 93       	push	r29
    7d82:	cf 93       	push	r28
    7d84:	cd b7       	in	r28, 0x3d	; 61
    7d86:	de b7       	in	r29, 0x3e	; 62
    7d88:	ff cf       	rjmp	.-2      	; 0x7d88 <main+0x8>

00007d8a <__prologue_saves__>:
    7d8a:	2f 92       	push	r2
    7d8c:	3f 92       	push	r3
    7d8e:	4f 92       	push	r4
    7d90:	5f 92       	push	r5
    7d92:	6f 92       	push	r6
    7d94:	7f 92       	push	r7
    7d96:	8f 92       	push	r8
    7d98:	9f 92       	push	r9
    7d9a:	af 92       	push	r10
    7d9c:	bf 92       	push	r11
    7d9e:	cf 92       	push	r12
    7da0:	df 92       	push	r13
    7da2:	ef 92       	push	r14
    7da4:	ff 92       	push	r15
    7da6:	0f 93       	push	r16
    7da8:	1f 93       	push	r17
    7daa:	cf 93       	push	r28
    7dac:	df 93       	push	r29
    7dae:	cd b7       	in	r28, 0x3d	; 61
    7db0:	de b7       	in	r29, 0x3e	; 62
    7db2:	ca 1b       	sub	r28, r26
    7db4:	db 0b       	sbc	r29, r27
    7db6:	0f b6       	in	r0, 0x3f	; 63
    7db8:	f8 94       	cli
    7dba:	de bf       	out	0x3e, r29	; 62
    7dbc:	0f be       	out	0x3f, r0	; 63
    7dbe:	cd bf       	out	0x3d, r28	; 61
    7dc0:	09 94       	ijmp

00007dc2 <__epilogue_restores__>:
    7dc2:	2a 88       	ldd	r2, Y+18	; 0x12
    7dc4:	39 88       	ldd	r3, Y+17	; 0x11
    7dc6:	48 88       	ldd	r4, Y+16	; 0x10
    7dc8:	5f 84       	ldd	r5, Y+15	; 0x0f
    7dca:	6e 84       	ldd	r6, Y+14	; 0x0e
    7dcc:	7d 84       	ldd	r7, Y+13	; 0x0d
    7dce:	8c 84       	ldd	r8, Y+12	; 0x0c
    7dd0:	9b 84       	ldd	r9, Y+11	; 0x0b
    7dd2:	aa 84       	ldd	r10, Y+10	; 0x0a
    7dd4:	b9 84       	ldd	r11, Y+9	; 0x09
    7dd6:	c8 84       	ldd	r12, Y+8	; 0x08
    7dd8:	df 80       	ldd	r13, Y+7	; 0x07
    7dda:	ee 80       	ldd	r14, Y+6	; 0x06
    7ddc:	fd 80       	ldd	r15, Y+5	; 0x05
    7dde:	0c 81       	ldd	r16, Y+4	; 0x04
    7de0:	1b 81       	ldd	r17, Y+3	; 0x03
    7de2:	aa 81       	ldd	r26, Y+2	; 0x02
    7de4:	b9 81       	ldd	r27, Y+1	; 0x01
    7de6:	ce 0f       	add	r28, r30
    7de8:	d1 1d       	adc	r29, r1
    7dea:	0f b6       	in	r0, 0x3f	; 63
    7dec:	f8 94       	cli
    7dee:	de bf       	out	0x3e, r29	; 62
    7df0:	0f be       	out	0x3f, r0	; 63
    7df2:	cd bf       	out	0x3d, r28	; 61
    7df4:	ed 01       	movw	r28, r26
    7df6:	08 95       	ret

00007df8 <sprintf>:
    7df8:	ae e0       	ldi	r26, 0x0E	; 14
    7dfa:	b0 e0       	ldi	r27, 0x00	; 0
    7dfc:	e2 e0       	ldi	r30, 0x02	; 2
    7dfe:	ff e3       	ldi	r31, 0x3F	; 63
    7e00:	0c 94 d3 3e 	jmp	0x7da6	; 0x7da6 <__prologue_saves__+0x1c>
    7e04:	0d 89       	ldd	r16, Y+21	; 0x15
    7e06:	1e 89       	ldd	r17, Y+22	; 0x16
    7e08:	86 e0       	ldi	r24, 0x06	; 6
    7e0a:	8c 83       	std	Y+4, r24	; 0x04
    7e0c:	1a 83       	std	Y+2, r17	; 0x02
    7e0e:	09 83       	std	Y+1, r16	; 0x01
    7e10:	8f ef       	ldi	r24, 0xFF	; 255
    7e12:	9f e7       	ldi	r25, 0x7F	; 127
    7e14:	9e 83       	std	Y+6, r25	; 0x06
    7e16:	8d 83       	std	Y+5, r24	; 0x05
    7e18:	9e 01       	movw	r18, r28
    7e1a:	27 5e       	subi	r18, 0xE7	; 231
    7e1c:	3f 4f       	sbci	r19, 0xFF	; 255
    7e1e:	ce 01       	movw	r24, r28
    7e20:	01 96       	adiw	r24, 0x01	; 1
    7e22:	6f 89       	ldd	r22, Y+23	; 0x17
    7e24:	78 8d       	ldd	r23, Y+24	; 0x18
    7e26:	a9 01       	movw	r20, r18
    7e28:	0e 94 20 3f 	call	0x7e40	; 0x7e40 <vfprintf>
    7e2c:	2f 81       	ldd	r18, Y+7	; 0x07
    7e2e:	38 85       	ldd	r19, Y+8	; 0x08
    7e30:	02 0f       	add	r16, r18
    7e32:	13 1f       	adc	r17, r19
    7e34:	f8 01       	movw	r30, r16
    7e36:	10 82       	st	Z, r1
    7e38:	2e 96       	adiw	r28, 0x0e	; 14
    7e3a:	e4 e0       	ldi	r30, 0x04	; 4
    7e3c:	0c 94 ef 3e 	jmp	0x7dde	; 0x7dde <__epilogue_restores__+0x1c>

00007e40 <vfprintf>:
    7e40:	ab e0       	ldi	r26, 0x0B	; 11
    7e42:	b0 e0       	ldi	r27, 0x00	; 0
    7e44:	e6 e2       	ldi	r30, 0x26	; 38
    7e46:	ff e3       	ldi	r31, 0x3F	; 63
    7e48:	0c 94 c5 3e 	jmp	0x7d8a	; 0x7d8a <__prologue_saves__>
    7e4c:	3c 01       	movw	r6, r24
    7e4e:	2b 01       	movw	r4, r22
    7e50:	5a 01       	movw	r10, r20
    7e52:	fc 01       	movw	r30, r24
    7e54:	17 82       	std	Z+7, r1	; 0x07
    7e56:	16 82       	std	Z+6, r1	; 0x06
    7e58:	83 81       	ldd	r24, Z+3	; 0x03
    7e5a:	81 fd       	sbrc	r24, 1
    7e5c:	03 c0       	rjmp	.+6      	; 0x7e64 <vfprintf+0x24>
    7e5e:	6f ef       	ldi	r22, 0xFF	; 255
    7e60:	7f ef       	ldi	r23, 0xFF	; 255
    7e62:	c6 c1       	rjmp	.+908    	; 0x81f0 <vfprintf+0x3b0>
    7e64:	9a e0       	ldi	r25, 0x0A	; 10
    7e66:	89 2e       	mov	r8, r25
    7e68:	1e 01       	movw	r2, r28
    7e6a:	08 94       	sec
    7e6c:	21 1c       	adc	r2, r1
    7e6e:	31 1c       	adc	r3, r1
    7e70:	f3 01       	movw	r30, r6
    7e72:	23 81       	ldd	r18, Z+3	; 0x03
    7e74:	f2 01       	movw	r30, r4
    7e76:	23 fd       	sbrc	r18, 3
    7e78:	85 91       	lpm	r24, Z+
    7e7a:	23 ff       	sbrs	r18, 3
    7e7c:	81 91       	ld	r24, Z+
    7e7e:	2f 01       	movw	r4, r30
    7e80:	88 23       	and	r24, r24
    7e82:	09 f4       	brne	.+2      	; 0x7e86 <vfprintf+0x46>
    7e84:	b2 c1       	rjmp	.+868    	; 0x81ea <vfprintf+0x3aa>
    7e86:	85 32       	cpi	r24, 0x25	; 37
    7e88:	39 f4       	brne	.+14     	; 0x7e98 <vfprintf+0x58>
    7e8a:	23 fd       	sbrc	r18, 3
    7e8c:	85 91       	lpm	r24, Z+
    7e8e:	23 ff       	sbrs	r18, 3
    7e90:	81 91       	ld	r24, Z+
    7e92:	2f 01       	movw	r4, r30
    7e94:	85 32       	cpi	r24, 0x25	; 37
    7e96:	29 f4       	brne	.+10     	; 0x7ea2 <vfprintf+0x62>
    7e98:	90 e0       	ldi	r25, 0x00	; 0
    7e9a:	b3 01       	movw	r22, r6
    7e9c:	0e 94 13 41 	call	0x8226	; 0x8226 <fputc>
    7ea0:	e7 cf       	rjmp	.-50     	; 0x7e70 <vfprintf+0x30>
    7ea2:	98 2f       	mov	r25, r24
    7ea4:	ff 24       	eor	r15, r15
    7ea6:	ee 24       	eor	r14, r14
    7ea8:	99 24       	eor	r9, r9
    7eaa:	ff e1       	ldi	r31, 0x1F	; 31
    7eac:	ff 15       	cp	r31, r15
    7eae:	d0 f0       	brcs	.+52     	; 0x7ee4 <vfprintf+0xa4>
    7eb0:	9b 32       	cpi	r25, 0x2B	; 43
    7eb2:	69 f0       	breq	.+26     	; 0x7ece <vfprintf+0x8e>
    7eb4:	9c 32       	cpi	r25, 0x2C	; 44
    7eb6:	28 f4       	brcc	.+10     	; 0x7ec2 <vfprintf+0x82>
    7eb8:	90 32       	cpi	r25, 0x20	; 32
    7eba:	59 f0       	breq	.+22     	; 0x7ed2 <vfprintf+0x92>
    7ebc:	93 32       	cpi	r25, 0x23	; 35
    7ebe:	91 f4       	brne	.+36     	; 0x7ee4 <vfprintf+0xa4>
    7ec0:	0e c0       	rjmp	.+28     	; 0x7ede <vfprintf+0x9e>
    7ec2:	9d 32       	cpi	r25, 0x2D	; 45
    7ec4:	49 f0       	breq	.+18     	; 0x7ed8 <vfprintf+0x98>
    7ec6:	90 33       	cpi	r25, 0x30	; 48
    7ec8:	69 f4       	brne	.+26     	; 0x7ee4 <vfprintf+0xa4>
    7eca:	41 e0       	ldi	r20, 0x01	; 1
    7ecc:	24 c0       	rjmp	.+72     	; 0x7f16 <vfprintf+0xd6>
    7ece:	52 e0       	ldi	r21, 0x02	; 2
    7ed0:	f5 2a       	or	r15, r21
    7ed2:	84 e0       	ldi	r24, 0x04	; 4
    7ed4:	f8 2a       	or	r15, r24
    7ed6:	28 c0       	rjmp	.+80     	; 0x7f28 <vfprintf+0xe8>
    7ed8:	98 e0       	ldi	r25, 0x08	; 8
    7eda:	f9 2a       	or	r15, r25
    7edc:	25 c0       	rjmp	.+74     	; 0x7f28 <vfprintf+0xe8>
    7ede:	e0 e1       	ldi	r30, 0x10	; 16
    7ee0:	fe 2a       	or	r15, r30
    7ee2:	22 c0       	rjmp	.+68     	; 0x7f28 <vfprintf+0xe8>
    7ee4:	f7 fc       	sbrc	r15, 7
    7ee6:	29 c0       	rjmp	.+82     	; 0x7f3a <vfprintf+0xfa>
    7ee8:	89 2f       	mov	r24, r25
    7eea:	80 53       	subi	r24, 0x30	; 48
    7eec:	8a 30       	cpi	r24, 0x0A	; 10
    7eee:	70 f4       	brcc	.+28     	; 0x7f0c <vfprintf+0xcc>
    7ef0:	f6 fe       	sbrs	r15, 6
    7ef2:	05 c0       	rjmp	.+10     	; 0x7efe <vfprintf+0xbe>
    7ef4:	98 9c       	mul	r9, r8
    7ef6:	90 2c       	mov	r9, r0
    7ef8:	11 24       	eor	r1, r1
    7efa:	98 0e       	add	r9, r24
    7efc:	15 c0       	rjmp	.+42     	; 0x7f28 <vfprintf+0xe8>
    7efe:	e8 9c       	mul	r14, r8
    7f00:	e0 2c       	mov	r14, r0
    7f02:	11 24       	eor	r1, r1
    7f04:	e8 0e       	add	r14, r24
    7f06:	f0 e2       	ldi	r31, 0x20	; 32
    7f08:	ff 2a       	or	r15, r31
    7f0a:	0e c0       	rjmp	.+28     	; 0x7f28 <vfprintf+0xe8>
    7f0c:	9e 32       	cpi	r25, 0x2E	; 46
    7f0e:	29 f4       	brne	.+10     	; 0x7f1a <vfprintf+0xda>
    7f10:	f6 fc       	sbrc	r15, 6
    7f12:	6b c1       	rjmp	.+726    	; 0x81ea <vfprintf+0x3aa>
    7f14:	40 e4       	ldi	r20, 0x40	; 64
    7f16:	f4 2a       	or	r15, r20
    7f18:	07 c0       	rjmp	.+14     	; 0x7f28 <vfprintf+0xe8>
    7f1a:	9c 36       	cpi	r25, 0x6C	; 108
    7f1c:	19 f4       	brne	.+6      	; 0x7f24 <vfprintf+0xe4>
    7f1e:	50 e8       	ldi	r21, 0x80	; 128
    7f20:	f5 2a       	or	r15, r21
    7f22:	02 c0       	rjmp	.+4      	; 0x7f28 <vfprintf+0xe8>
    7f24:	98 36       	cpi	r25, 0x68	; 104
    7f26:	49 f4       	brne	.+18     	; 0x7f3a <vfprintf+0xfa>
    7f28:	f2 01       	movw	r30, r4
    7f2a:	23 fd       	sbrc	r18, 3
    7f2c:	95 91       	lpm	r25, Z+
    7f2e:	23 ff       	sbrs	r18, 3
    7f30:	91 91       	ld	r25, Z+
    7f32:	2f 01       	movw	r4, r30
    7f34:	99 23       	and	r25, r25
    7f36:	09 f0       	breq	.+2      	; 0x7f3a <vfprintf+0xfa>
    7f38:	b8 cf       	rjmp	.-144    	; 0x7eaa <vfprintf+0x6a>
    7f3a:	89 2f       	mov	r24, r25
    7f3c:	85 54       	subi	r24, 0x45	; 69
    7f3e:	83 30       	cpi	r24, 0x03	; 3
    7f40:	18 f0       	brcs	.+6      	; 0x7f48 <vfprintf+0x108>
    7f42:	80 52       	subi	r24, 0x20	; 32
    7f44:	83 30       	cpi	r24, 0x03	; 3
    7f46:	38 f4       	brcc	.+14     	; 0x7f56 <vfprintf+0x116>
    7f48:	44 e0       	ldi	r20, 0x04	; 4
    7f4a:	50 e0       	ldi	r21, 0x00	; 0
    7f4c:	a4 0e       	add	r10, r20
    7f4e:	b5 1e       	adc	r11, r21
    7f50:	5f e3       	ldi	r21, 0x3F	; 63
    7f52:	59 83       	std	Y+1, r21	; 0x01
    7f54:	0f c0       	rjmp	.+30     	; 0x7f74 <vfprintf+0x134>
    7f56:	93 36       	cpi	r25, 0x63	; 99
    7f58:	31 f0       	breq	.+12     	; 0x7f66 <vfprintf+0x126>
    7f5a:	93 37       	cpi	r25, 0x73	; 115
    7f5c:	79 f0       	breq	.+30     	; 0x7f7c <vfprintf+0x13c>
    7f5e:	93 35       	cpi	r25, 0x53	; 83
    7f60:	09 f0       	breq	.+2      	; 0x7f64 <vfprintf+0x124>
    7f62:	56 c0       	rjmp	.+172    	; 0x8010 <vfprintf+0x1d0>
    7f64:	20 c0       	rjmp	.+64     	; 0x7fa6 <vfprintf+0x166>
    7f66:	f5 01       	movw	r30, r10
    7f68:	80 81       	ld	r24, Z
    7f6a:	89 83       	std	Y+1, r24	; 0x01
    7f6c:	42 e0       	ldi	r20, 0x02	; 2
    7f6e:	50 e0       	ldi	r21, 0x00	; 0
    7f70:	a4 0e       	add	r10, r20
    7f72:	b5 1e       	adc	r11, r21
    7f74:	61 01       	movw	r12, r2
    7f76:	01 e0       	ldi	r16, 0x01	; 1
    7f78:	10 e0       	ldi	r17, 0x00	; 0
    7f7a:	12 c0       	rjmp	.+36     	; 0x7fa0 <vfprintf+0x160>
    7f7c:	f5 01       	movw	r30, r10
    7f7e:	c0 80       	ld	r12, Z
    7f80:	d1 80       	ldd	r13, Z+1	; 0x01
    7f82:	f6 fc       	sbrc	r15, 6
    7f84:	03 c0       	rjmp	.+6      	; 0x7f8c <vfprintf+0x14c>
    7f86:	6f ef       	ldi	r22, 0xFF	; 255
    7f88:	7f ef       	ldi	r23, 0xFF	; 255
    7f8a:	02 c0       	rjmp	.+4      	; 0x7f90 <vfprintf+0x150>
    7f8c:	69 2d       	mov	r22, r9
    7f8e:	70 e0       	ldi	r23, 0x00	; 0
    7f90:	42 e0       	ldi	r20, 0x02	; 2
    7f92:	50 e0       	ldi	r21, 0x00	; 0
    7f94:	a4 0e       	add	r10, r20
    7f96:	b5 1e       	adc	r11, r21
    7f98:	c6 01       	movw	r24, r12
    7f9a:	0e 94 08 41 	call	0x8210	; 0x8210 <strnlen>
    7f9e:	8c 01       	movw	r16, r24
    7fa0:	5f e7       	ldi	r21, 0x7F	; 127
    7fa2:	f5 22       	and	r15, r21
    7fa4:	14 c0       	rjmp	.+40     	; 0x7fce <vfprintf+0x18e>
    7fa6:	f5 01       	movw	r30, r10
    7fa8:	c0 80       	ld	r12, Z
    7faa:	d1 80       	ldd	r13, Z+1	; 0x01
    7fac:	f6 fc       	sbrc	r15, 6
    7fae:	03 c0       	rjmp	.+6      	; 0x7fb6 <vfprintf+0x176>
    7fb0:	6f ef       	ldi	r22, 0xFF	; 255
    7fb2:	7f ef       	ldi	r23, 0xFF	; 255
    7fb4:	02 c0       	rjmp	.+4      	; 0x7fba <vfprintf+0x17a>
    7fb6:	69 2d       	mov	r22, r9
    7fb8:	70 e0       	ldi	r23, 0x00	; 0
    7fba:	42 e0       	ldi	r20, 0x02	; 2
    7fbc:	50 e0       	ldi	r21, 0x00	; 0
    7fbe:	a4 0e       	add	r10, r20
    7fc0:	b5 1e       	adc	r11, r21
    7fc2:	c6 01       	movw	r24, r12
    7fc4:	0e 94 fd 40 	call	0x81fa	; 0x81fa <strnlen_P>
    7fc8:	8c 01       	movw	r16, r24
    7fca:	50 e8       	ldi	r21, 0x80	; 128
    7fcc:	f5 2a       	or	r15, r21
    7fce:	f3 fe       	sbrs	r15, 3
    7fd0:	07 c0       	rjmp	.+14     	; 0x7fe0 <vfprintf+0x1a0>
    7fd2:	1a c0       	rjmp	.+52     	; 0x8008 <vfprintf+0x1c8>
    7fd4:	80 e2       	ldi	r24, 0x20	; 32
    7fd6:	90 e0       	ldi	r25, 0x00	; 0
    7fd8:	b3 01       	movw	r22, r6
    7fda:	0e 94 13 41 	call	0x8226	; 0x8226 <fputc>
    7fde:	ea 94       	dec	r14
    7fe0:	8e 2d       	mov	r24, r14
    7fe2:	90 e0       	ldi	r25, 0x00	; 0
    7fe4:	08 17       	cp	r16, r24
    7fe6:	19 07       	cpc	r17, r25
    7fe8:	a8 f3       	brcs	.-22     	; 0x7fd4 <vfprintf+0x194>
    7fea:	0e c0       	rjmp	.+28     	; 0x8008 <vfprintf+0x1c8>
    7fec:	f6 01       	movw	r30, r12
    7fee:	f7 fc       	sbrc	r15, 7
    7ff0:	85 91       	lpm	r24, Z+
    7ff2:	f7 fe       	sbrs	r15, 7
    7ff4:	81 91       	ld	r24, Z+
    7ff6:	6f 01       	movw	r12, r30
    7ff8:	90 e0       	ldi	r25, 0x00	; 0
    7ffa:	b3 01       	movw	r22, r6
    7ffc:	0e 94 13 41 	call	0x8226	; 0x8226 <fputc>
    8000:	e1 10       	cpse	r14, r1
    8002:	ea 94       	dec	r14
    8004:	01 50       	subi	r16, 0x01	; 1
    8006:	10 40       	sbci	r17, 0x00	; 0
    8008:	01 15       	cp	r16, r1
    800a:	11 05       	cpc	r17, r1
    800c:	79 f7       	brne	.-34     	; 0x7fec <vfprintf+0x1ac>
    800e:	ea c0       	rjmp	.+468    	; 0x81e4 <vfprintf+0x3a4>
    8010:	94 36       	cpi	r25, 0x64	; 100
    8012:	11 f0       	breq	.+4      	; 0x8018 <vfprintf+0x1d8>
    8014:	99 36       	cpi	r25, 0x69	; 105
    8016:	69 f5       	brne	.+90     	; 0x8072 <vfprintf+0x232>
    8018:	f7 fe       	sbrs	r15, 7
    801a:	08 c0       	rjmp	.+16     	; 0x802c <vfprintf+0x1ec>
    801c:	f5 01       	movw	r30, r10
    801e:	20 81       	ld	r18, Z
    8020:	31 81       	ldd	r19, Z+1	; 0x01
    8022:	42 81       	ldd	r20, Z+2	; 0x02
    8024:	53 81       	ldd	r21, Z+3	; 0x03
    8026:	84 e0       	ldi	r24, 0x04	; 4
    8028:	90 e0       	ldi	r25, 0x00	; 0
    802a:	0a c0       	rjmp	.+20     	; 0x8040 <vfprintf+0x200>
    802c:	f5 01       	movw	r30, r10
    802e:	80 81       	ld	r24, Z
    8030:	91 81       	ldd	r25, Z+1	; 0x01
    8032:	9c 01       	movw	r18, r24
    8034:	44 27       	eor	r20, r20
    8036:	37 fd       	sbrc	r19, 7
    8038:	40 95       	com	r20
    803a:	54 2f       	mov	r21, r20
    803c:	82 e0       	ldi	r24, 0x02	; 2
    803e:	90 e0       	ldi	r25, 0x00	; 0
    8040:	a8 0e       	add	r10, r24
    8042:	b9 1e       	adc	r11, r25
    8044:	9f e6       	ldi	r25, 0x6F	; 111
    8046:	f9 22       	and	r15, r25
    8048:	57 ff       	sbrs	r21, 7
    804a:	09 c0       	rjmp	.+18     	; 0x805e <vfprintf+0x21e>
    804c:	50 95       	com	r21
    804e:	40 95       	com	r20
    8050:	30 95       	com	r19
    8052:	21 95       	neg	r18
    8054:	3f 4f       	sbci	r19, 0xFF	; 255
    8056:	4f 4f       	sbci	r20, 0xFF	; 255
    8058:	5f 4f       	sbci	r21, 0xFF	; 255
    805a:	e0 e8       	ldi	r30, 0x80	; 128
    805c:	fe 2a       	or	r15, r30
    805e:	ca 01       	movw	r24, r20
    8060:	b9 01       	movw	r22, r18
    8062:	a1 01       	movw	r20, r2
    8064:	2a e0       	ldi	r18, 0x0A	; 10
    8066:	30 e0       	ldi	r19, 0x00	; 0
    8068:	0e 94 3f 41 	call	0x827e	; 0x827e <__ultoa_invert>
    806c:	d8 2e       	mov	r13, r24
    806e:	d2 18       	sub	r13, r2
    8070:	40 c0       	rjmp	.+128    	; 0x80f2 <vfprintf+0x2b2>
    8072:	95 37       	cpi	r25, 0x75	; 117
    8074:	29 f4       	brne	.+10     	; 0x8080 <vfprintf+0x240>
    8076:	1f 2d       	mov	r17, r15
    8078:	1f 7e       	andi	r17, 0xEF	; 239
    807a:	2a e0       	ldi	r18, 0x0A	; 10
    807c:	30 e0       	ldi	r19, 0x00	; 0
    807e:	1d c0       	rjmp	.+58     	; 0x80ba <vfprintf+0x27a>
    8080:	1f 2d       	mov	r17, r15
    8082:	19 7f       	andi	r17, 0xF9	; 249
    8084:	9f 36       	cpi	r25, 0x6F	; 111
    8086:	61 f0       	breq	.+24     	; 0x80a0 <vfprintf+0x260>
    8088:	90 37       	cpi	r25, 0x70	; 112
    808a:	20 f4       	brcc	.+8      	; 0x8094 <vfprintf+0x254>
    808c:	98 35       	cpi	r25, 0x58	; 88
    808e:	09 f0       	breq	.+2      	; 0x8092 <vfprintf+0x252>
    8090:	ac c0       	rjmp	.+344    	; 0x81ea <vfprintf+0x3aa>
    8092:	0f c0       	rjmp	.+30     	; 0x80b2 <vfprintf+0x272>
    8094:	90 37       	cpi	r25, 0x70	; 112
    8096:	39 f0       	breq	.+14     	; 0x80a6 <vfprintf+0x266>
    8098:	98 37       	cpi	r25, 0x78	; 120
    809a:	09 f0       	breq	.+2      	; 0x809e <vfprintf+0x25e>
    809c:	a6 c0       	rjmp	.+332    	; 0x81ea <vfprintf+0x3aa>
    809e:	04 c0       	rjmp	.+8      	; 0x80a8 <vfprintf+0x268>
    80a0:	28 e0       	ldi	r18, 0x08	; 8
    80a2:	30 e0       	ldi	r19, 0x00	; 0
    80a4:	0a c0       	rjmp	.+20     	; 0x80ba <vfprintf+0x27a>
    80a6:	10 61       	ori	r17, 0x10	; 16
    80a8:	14 fd       	sbrc	r17, 4
    80aa:	14 60       	ori	r17, 0x04	; 4
    80ac:	20 e1       	ldi	r18, 0x10	; 16
    80ae:	30 e0       	ldi	r19, 0x00	; 0
    80b0:	04 c0       	rjmp	.+8      	; 0x80ba <vfprintf+0x27a>
    80b2:	14 fd       	sbrc	r17, 4
    80b4:	16 60       	ori	r17, 0x06	; 6
    80b6:	20 e1       	ldi	r18, 0x10	; 16
    80b8:	32 e0       	ldi	r19, 0x02	; 2
    80ba:	17 ff       	sbrs	r17, 7
    80bc:	08 c0       	rjmp	.+16     	; 0x80ce <vfprintf+0x28e>
    80be:	f5 01       	movw	r30, r10
    80c0:	60 81       	ld	r22, Z
    80c2:	71 81       	ldd	r23, Z+1	; 0x01
    80c4:	82 81       	ldd	r24, Z+2	; 0x02
    80c6:	93 81       	ldd	r25, Z+3	; 0x03
    80c8:	44 e0       	ldi	r20, 0x04	; 4
    80ca:	50 e0       	ldi	r21, 0x00	; 0
    80cc:	08 c0       	rjmp	.+16     	; 0x80de <vfprintf+0x29e>
    80ce:	f5 01       	movw	r30, r10
    80d0:	80 81       	ld	r24, Z
    80d2:	91 81       	ldd	r25, Z+1	; 0x01
    80d4:	bc 01       	movw	r22, r24
    80d6:	80 e0       	ldi	r24, 0x00	; 0
    80d8:	90 e0       	ldi	r25, 0x00	; 0
    80da:	42 e0       	ldi	r20, 0x02	; 2
    80dc:	50 e0       	ldi	r21, 0x00	; 0
    80de:	a4 0e       	add	r10, r20
    80e0:	b5 1e       	adc	r11, r21
    80e2:	a1 01       	movw	r20, r2
    80e4:	0e 94 3f 41 	call	0x827e	; 0x827e <__ultoa_invert>
    80e8:	d8 2e       	mov	r13, r24
    80ea:	d2 18       	sub	r13, r2
    80ec:	8f e7       	ldi	r24, 0x7F	; 127
    80ee:	f8 2e       	mov	r15, r24
    80f0:	f1 22       	and	r15, r17
    80f2:	f6 fe       	sbrs	r15, 6
    80f4:	0b c0       	rjmp	.+22     	; 0x810c <vfprintf+0x2cc>
    80f6:	5e ef       	ldi	r21, 0xFE	; 254
    80f8:	f5 22       	and	r15, r21
    80fa:	d9 14       	cp	r13, r9
    80fc:	38 f4       	brcc	.+14     	; 0x810c <vfprintf+0x2cc>
    80fe:	f4 fe       	sbrs	r15, 4
    8100:	07 c0       	rjmp	.+14     	; 0x8110 <vfprintf+0x2d0>
    8102:	f2 fc       	sbrc	r15, 2
    8104:	05 c0       	rjmp	.+10     	; 0x8110 <vfprintf+0x2d0>
    8106:	8f ee       	ldi	r24, 0xEF	; 239
    8108:	f8 22       	and	r15, r24
    810a:	02 c0       	rjmp	.+4      	; 0x8110 <vfprintf+0x2d0>
    810c:	1d 2d       	mov	r17, r13
    810e:	01 c0       	rjmp	.+2      	; 0x8112 <vfprintf+0x2d2>
    8110:	19 2d       	mov	r17, r9
    8112:	f4 fe       	sbrs	r15, 4
    8114:	0d c0       	rjmp	.+26     	; 0x8130 <vfprintf+0x2f0>
    8116:	fe 01       	movw	r30, r28
    8118:	ed 0d       	add	r30, r13
    811a:	f1 1d       	adc	r31, r1
    811c:	80 81       	ld	r24, Z
    811e:	80 33       	cpi	r24, 0x30	; 48
    8120:	19 f4       	brne	.+6      	; 0x8128 <vfprintf+0x2e8>
    8122:	99 ee       	ldi	r25, 0xE9	; 233
    8124:	f9 22       	and	r15, r25
    8126:	08 c0       	rjmp	.+16     	; 0x8138 <vfprintf+0x2f8>
    8128:	1f 5f       	subi	r17, 0xFF	; 255
    812a:	f2 fe       	sbrs	r15, 2
    812c:	05 c0       	rjmp	.+10     	; 0x8138 <vfprintf+0x2f8>
    812e:	03 c0       	rjmp	.+6      	; 0x8136 <vfprintf+0x2f6>
    8130:	8f 2d       	mov	r24, r15
    8132:	86 78       	andi	r24, 0x86	; 134
    8134:	09 f0       	breq	.+2      	; 0x8138 <vfprintf+0x2f8>
    8136:	1f 5f       	subi	r17, 0xFF	; 255
    8138:	0f 2d       	mov	r16, r15
    813a:	f3 fc       	sbrc	r15, 3
    813c:	14 c0       	rjmp	.+40     	; 0x8166 <vfprintf+0x326>
    813e:	f0 fe       	sbrs	r15, 0
    8140:	0f c0       	rjmp	.+30     	; 0x8160 <vfprintf+0x320>
    8142:	1e 15       	cp	r17, r14
    8144:	10 f0       	brcs	.+4      	; 0x814a <vfprintf+0x30a>
    8146:	9d 2c       	mov	r9, r13
    8148:	0b c0       	rjmp	.+22     	; 0x8160 <vfprintf+0x320>
    814a:	9d 2c       	mov	r9, r13
    814c:	9e 0c       	add	r9, r14
    814e:	91 1a       	sub	r9, r17
    8150:	1e 2d       	mov	r17, r14
    8152:	06 c0       	rjmp	.+12     	; 0x8160 <vfprintf+0x320>
    8154:	80 e2       	ldi	r24, 0x20	; 32
    8156:	90 e0       	ldi	r25, 0x00	; 0
    8158:	b3 01       	movw	r22, r6
    815a:	0e 94 13 41 	call	0x8226	; 0x8226 <fputc>
    815e:	1f 5f       	subi	r17, 0xFF	; 255
    8160:	1e 15       	cp	r17, r14
    8162:	c0 f3       	brcs	.-16     	; 0x8154 <vfprintf+0x314>
    8164:	04 c0       	rjmp	.+8      	; 0x816e <vfprintf+0x32e>
    8166:	1e 15       	cp	r17, r14
    8168:	10 f4       	brcc	.+4      	; 0x816e <vfprintf+0x32e>
    816a:	e1 1a       	sub	r14, r17
    816c:	01 c0       	rjmp	.+2      	; 0x8170 <vfprintf+0x330>
    816e:	ee 24       	eor	r14, r14
    8170:	04 ff       	sbrs	r16, 4
    8172:	0f c0       	rjmp	.+30     	; 0x8192 <vfprintf+0x352>
    8174:	80 e3       	ldi	r24, 0x30	; 48
    8176:	90 e0       	ldi	r25, 0x00	; 0
    8178:	b3 01       	movw	r22, r6
    817a:	0e 94 13 41 	call	0x8226	; 0x8226 <fputc>
    817e:	02 ff       	sbrs	r16, 2
    8180:	1d c0       	rjmp	.+58     	; 0x81bc <vfprintf+0x37c>
    8182:	01 fd       	sbrc	r16, 1
    8184:	03 c0       	rjmp	.+6      	; 0x818c <vfprintf+0x34c>
    8186:	88 e7       	ldi	r24, 0x78	; 120
    8188:	90 e0       	ldi	r25, 0x00	; 0
    818a:	0e c0       	rjmp	.+28     	; 0x81a8 <vfprintf+0x368>
    818c:	88 e5       	ldi	r24, 0x58	; 88
    818e:	90 e0       	ldi	r25, 0x00	; 0
    8190:	0b c0       	rjmp	.+22     	; 0x81a8 <vfprintf+0x368>
    8192:	80 2f       	mov	r24, r16
    8194:	86 78       	andi	r24, 0x86	; 134
    8196:	91 f0       	breq	.+36     	; 0x81bc <vfprintf+0x37c>
    8198:	01 ff       	sbrs	r16, 1
    819a:	02 c0       	rjmp	.+4      	; 0x81a0 <vfprintf+0x360>
    819c:	8b e2       	ldi	r24, 0x2B	; 43
    819e:	01 c0       	rjmp	.+2      	; 0x81a2 <vfprintf+0x362>
    81a0:	80 e2       	ldi	r24, 0x20	; 32
    81a2:	f7 fc       	sbrc	r15, 7
    81a4:	8d e2       	ldi	r24, 0x2D	; 45
    81a6:	90 e0       	ldi	r25, 0x00	; 0
    81a8:	b3 01       	movw	r22, r6
    81aa:	0e 94 13 41 	call	0x8226	; 0x8226 <fputc>
    81ae:	06 c0       	rjmp	.+12     	; 0x81bc <vfprintf+0x37c>
    81b0:	80 e3       	ldi	r24, 0x30	; 48
    81b2:	90 e0       	ldi	r25, 0x00	; 0
    81b4:	b3 01       	movw	r22, r6
    81b6:	0e 94 13 41 	call	0x8226	; 0x8226 <fputc>
    81ba:	9a 94       	dec	r9
    81bc:	d9 14       	cp	r13, r9
    81be:	c0 f3       	brcs	.-16     	; 0x81b0 <vfprintf+0x370>
    81c0:	da 94       	dec	r13
    81c2:	f1 01       	movw	r30, r2
    81c4:	ed 0d       	add	r30, r13
    81c6:	f1 1d       	adc	r31, r1
    81c8:	80 81       	ld	r24, Z
    81ca:	90 e0       	ldi	r25, 0x00	; 0
    81cc:	b3 01       	movw	r22, r6
    81ce:	0e 94 13 41 	call	0x8226	; 0x8226 <fputc>
    81d2:	dd 20       	and	r13, r13
    81d4:	a9 f7       	brne	.-22     	; 0x81c0 <vfprintf+0x380>
    81d6:	06 c0       	rjmp	.+12     	; 0x81e4 <vfprintf+0x3a4>
    81d8:	80 e2       	ldi	r24, 0x20	; 32
    81da:	90 e0       	ldi	r25, 0x00	; 0
    81dc:	b3 01       	movw	r22, r6
    81de:	0e 94 13 41 	call	0x8226	; 0x8226 <fputc>
    81e2:	ea 94       	dec	r14
    81e4:	ee 20       	and	r14, r14
    81e6:	c1 f7       	brne	.-16     	; 0x81d8 <vfprintf+0x398>
    81e8:	43 ce       	rjmp	.-890    	; 0x7e70 <vfprintf+0x30>
    81ea:	f3 01       	movw	r30, r6
    81ec:	66 81       	ldd	r22, Z+6	; 0x06
    81ee:	77 81       	ldd	r23, Z+7	; 0x07
    81f0:	cb 01       	movw	r24, r22
    81f2:	2b 96       	adiw	r28, 0x0b	; 11
    81f4:	e2 e1       	ldi	r30, 0x12	; 18
    81f6:	0c 94 e1 3e 	jmp	0x7dc2	; 0x7dc2 <__epilogue_restores__>

000081fa <strnlen_P>:
    81fa:	fc 01       	movw	r30, r24
    81fc:	05 90       	lpm	r0, Z+
    81fe:	61 50       	subi	r22, 0x01	; 1
    8200:	70 40       	sbci	r23, 0x00	; 0
    8202:	01 10       	cpse	r0, r1
    8204:	d8 f7       	brcc	.-10     	; 0x81fc <strnlen_P+0x2>
    8206:	80 95       	com	r24
    8208:	90 95       	com	r25
    820a:	8e 0f       	add	r24, r30
    820c:	9f 1f       	adc	r25, r31
    820e:	08 95       	ret

00008210 <strnlen>:
    8210:	fc 01       	movw	r30, r24
    8212:	61 50       	subi	r22, 0x01	; 1
    8214:	70 40       	sbci	r23, 0x00	; 0
    8216:	01 90       	ld	r0, Z+
    8218:	01 10       	cpse	r0, r1
    821a:	d8 f7       	brcc	.-10     	; 0x8212 <strnlen+0x2>
    821c:	80 95       	com	r24
    821e:	90 95       	com	r25
    8220:	8e 0f       	add	r24, r30
    8222:	9f 1f       	adc	r25, r31
    8224:	08 95       	ret

00008226 <fputc>:
    8226:	0f 93       	push	r16
    8228:	1f 93       	push	r17
    822a:	cf 93       	push	r28
    822c:	df 93       	push	r29
    822e:	8c 01       	movw	r16, r24
    8230:	eb 01       	movw	r28, r22
    8232:	8b 81       	ldd	r24, Y+3	; 0x03
    8234:	81 ff       	sbrs	r24, 1
    8236:	1b c0       	rjmp	.+54     	; 0x826e <fputc+0x48>
    8238:	82 ff       	sbrs	r24, 2
    823a:	0d c0       	rjmp	.+26     	; 0x8256 <fputc+0x30>
    823c:	2e 81       	ldd	r18, Y+6	; 0x06
    823e:	3f 81       	ldd	r19, Y+7	; 0x07
    8240:	8c 81       	ldd	r24, Y+4	; 0x04
    8242:	9d 81       	ldd	r25, Y+5	; 0x05
    8244:	28 17       	cp	r18, r24
    8246:	39 07       	cpc	r19, r25
    8248:	64 f4       	brge	.+24     	; 0x8262 <fputc+0x3c>
    824a:	e8 81       	ld	r30, Y
    824c:	f9 81       	ldd	r31, Y+1	; 0x01
    824e:	01 93       	st	Z+, r16
    8250:	f9 83       	std	Y+1, r31	; 0x01
    8252:	e8 83       	st	Y, r30
    8254:	06 c0       	rjmp	.+12     	; 0x8262 <fputc+0x3c>
    8256:	e8 85       	ldd	r30, Y+8	; 0x08
    8258:	f9 85       	ldd	r31, Y+9	; 0x09
    825a:	80 2f       	mov	r24, r16
    825c:	09 95       	icall
    825e:	89 2b       	or	r24, r25
    8260:	31 f4       	brne	.+12     	; 0x826e <fputc+0x48>
    8262:	8e 81       	ldd	r24, Y+6	; 0x06
    8264:	9f 81       	ldd	r25, Y+7	; 0x07
    8266:	01 96       	adiw	r24, 0x01	; 1
    8268:	9f 83       	std	Y+7, r25	; 0x07
    826a:	8e 83       	std	Y+6, r24	; 0x06
    826c:	02 c0       	rjmp	.+4      	; 0x8272 <fputc+0x4c>
    826e:	0f ef       	ldi	r16, 0xFF	; 255
    8270:	1f ef       	ldi	r17, 0xFF	; 255
    8272:	c8 01       	movw	r24, r16
    8274:	df 91       	pop	r29
    8276:	cf 91       	pop	r28
    8278:	1f 91       	pop	r17
    827a:	0f 91       	pop	r16
    827c:	08 95       	ret

0000827e <__ultoa_invert>:
    827e:	fa 01       	movw	r30, r20
    8280:	aa 27       	eor	r26, r26
    8282:	28 30       	cpi	r18, 0x08	; 8
    8284:	51 f1       	breq	.+84     	; 0x82da <__ultoa_invert+0x5c>
    8286:	20 31       	cpi	r18, 0x10	; 16
    8288:	81 f1       	breq	.+96     	; 0x82ea <__ultoa_invert+0x6c>
    828a:	e8 94       	clt
    828c:	6f 93       	push	r22
    828e:	6e 7f       	andi	r22, 0xFE	; 254
    8290:	6e 5f       	subi	r22, 0xFE	; 254
    8292:	7f 4f       	sbci	r23, 0xFF	; 255
    8294:	8f 4f       	sbci	r24, 0xFF	; 255
    8296:	9f 4f       	sbci	r25, 0xFF	; 255
    8298:	af 4f       	sbci	r26, 0xFF	; 255
    829a:	b1 e0       	ldi	r27, 0x01	; 1
    829c:	3e d0       	rcall	.+124    	; 0x831a <__ultoa_invert+0x9c>
    829e:	b4 e0       	ldi	r27, 0x04	; 4
    82a0:	3c d0       	rcall	.+120    	; 0x831a <__ultoa_invert+0x9c>
    82a2:	67 0f       	add	r22, r23
    82a4:	78 1f       	adc	r23, r24
    82a6:	89 1f       	adc	r24, r25
    82a8:	9a 1f       	adc	r25, r26
    82aa:	a1 1d       	adc	r26, r1
    82ac:	68 0f       	add	r22, r24
    82ae:	79 1f       	adc	r23, r25
    82b0:	8a 1f       	adc	r24, r26
    82b2:	91 1d       	adc	r25, r1
    82b4:	a1 1d       	adc	r26, r1
    82b6:	6a 0f       	add	r22, r26
    82b8:	71 1d       	adc	r23, r1
    82ba:	81 1d       	adc	r24, r1
    82bc:	91 1d       	adc	r25, r1
    82be:	a1 1d       	adc	r26, r1
    82c0:	20 d0       	rcall	.+64     	; 0x8302 <__ultoa_invert+0x84>
    82c2:	09 f4       	brne	.+2      	; 0x82c6 <__ultoa_invert+0x48>
    82c4:	68 94       	set
    82c6:	3f 91       	pop	r19
    82c8:	2a e0       	ldi	r18, 0x0A	; 10
    82ca:	26 9f       	mul	r18, r22
    82cc:	11 24       	eor	r1, r1
    82ce:	30 19       	sub	r19, r0
    82d0:	30 5d       	subi	r19, 0xD0	; 208
    82d2:	31 93       	st	Z+, r19
    82d4:	de f6       	brtc	.-74     	; 0x828c <__ultoa_invert+0xe>
    82d6:	cf 01       	movw	r24, r30
    82d8:	08 95       	ret
    82da:	46 2f       	mov	r20, r22
    82dc:	47 70       	andi	r20, 0x07	; 7
    82de:	40 5d       	subi	r20, 0xD0	; 208
    82e0:	41 93       	st	Z+, r20
    82e2:	b3 e0       	ldi	r27, 0x03	; 3
    82e4:	0f d0       	rcall	.+30     	; 0x8304 <__ultoa_invert+0x86>
    82e6:	c9 f7       	brne	.-14     	; 0x82da <__ultoa_invert+0x5c>
    82e8:	f6 cf       	rjmp	.-20     	; 0x82d6 <__ultoa_invert+0x58>
    82ea:	46 2f       	mov	r20, r22
    82ec:	4f 70       	andi	r20, 0x0F	; 15
    82ee:	40 5d       	subi	r20, 0xD0	; 208
    82f0:	4a 33       	cpi	r20, 0x3A	; 58
    82f2:	18 f0       	brcs	.+6      	; 0x82fa <__ultoa_invert+0x7c>
    82f4:	49 5d       	subi	r20, 0xD9	; 217
    82f6:	31 fd       	sbrc	r19, 1
    82f8:	40 52       	subi	r20, 0x20	; 32
    82fa:	41 93       	st	Z+, r20
    82fc:	02 d0       	rcall	.+4      	; 0x8302 <__ultoa_invert+0x84>
    82fe:	a9 f7       	brne	.-22     	; 0x82ea <__ultoa_invert+0x6c>
    8300:	ea cf       	rjmp	.-44     	; 0x82d6 <__ultoa_invert+0x58>
    8302:	b4 e0       	ldi	r27, 0x04	; 4
    8304:	a6 95       	lsr	r26
    8306:	97 95       	ror	r25
    8308:	87 95       	ror	r24
    830a:	77 95       	ror	r23
    830c:	67 95       	ror	r22
    830e:	ba 95       	dec	r27
    8310:	c9 f7       	brne	.-14     	; 0x8304 <__ultoa_invert+0x86>
    8312:	00 97       	sbiw	r24, 0x00	; 0
    8314:	61 05       	cpc	r22, r1
    8316:	71 05       	cpc	r23, r1
    8318:	08 95       	ret
    831a:	9b 01       	movw	r18, r22
    831c:	ac 01       	movw	r20, r24
    831e:	0a 2e       	mov	r0, r26
    8320:	06 94       	lsr	r0
    8322:	57 95       	ror	r21
    8324:	47 95       	ror	r20
    8326:	37 95       	ror	r19
    8328:	27 95       	ror	r18
    832a:	ba 95       	dec	r27
    832c:	c9 f7       	brne	.-14     	; 0x8320 <__ultoa_invert+0xa2>
    832e:	62 0f       	add	r22, r18
    8330:	73 1f       	adc	r23, r19
    8332:	84 1f       	adc	r24, r20
    8334:	95 1f       	adc	r25, r21
    8336:	a0 1d       	adc	r26, r0
    8338:	08 95       	ret

0000833a <_exit>:
    833a:	f8 94       	cli

0000833c <__stop_program>:
    833c:	ff cf       	rjmp	.-2      	; 0x833c <__stop_program>
