
Automated_Greenhouse_Monitoring_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000756a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019c  00800060  0000756a  000075fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004e  008001fc  008001fc  0000779a  2**0
                  ALLOC
  3 .stab         0000b148  00000000  00000000  0000779c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000053d8  00000000  00000000  000128e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00017cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  00017e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  0001808c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  0001a716  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  0001bbf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0001cea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0001d080  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  0001d37e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001dd28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 48 18 	jmp	0x3090	; 0x3090 <__vector_1>
       8:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__vector_2>
       c:	0c 94 b6 18 	jmp	0x316c	; 0x316c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 1f 20 	jmp	0x403e	; 0x403e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	f5 e7       	ldi	r31, 0x75	; 117
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3f       	cpi	r26, 0xFC	; 252
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac ef       	ldi	r26, 0xFC	; 252
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 34       	cpi	r26, 0x4A	; 74
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <main>
      8a:	0c 94 b3 3a 	jmp	0x7566	; 0x7566 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b7 37 	jmp	0x6f6e	; 0x6f6e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ec       	ldi	r26, 0xC7	; 199
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d3 37 	jmp	0x6fa6	; 0x6fa6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c3 37 	jmp	0x6f86	; 0x6f86 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 df 37 	jmp	0x6fbe	; 0x6fbe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c3 37 	jmp	0x6f86	; 0x6f86 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 df 37 	jmp	0x6fbe	; 0x6fbe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b7 37 	jmp	0x6f6e	; 0x6f6e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 ec       	ldi	r24, 0xC7	; 199
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d3 37 	jmp	0x6fa6	; 0x6fa6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bf 37 	jmp	0x6f7e	; 0x6f7e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 ec       	ldi	r22, 0xC7	; 199
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 db 37 	jmp	0x6fb6	; 0x6fb6 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c3 37 	jmp	0x6f86	; 0x6f86 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 df 37 	jmp	0x6fbe	; 0x6fbe <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c3 37 	jmp	0x6f86	; 0x6f86 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 df 37 	jmp	0x6fbe	; 0x6fbe <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c3 37 	jmp	0x6f86	; 0x6f86 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 df 37 	jmp	0x6fbe	; 0x6fbe <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c3 37 	jmp	0x6f86	; 0x6f86 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 df 37 	jmp	0x6fbe	; 0x6fbe <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 c7 37 	jmp	0x6f8e	; 0x6f8e <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 e3 37 	jmp	0x6fc6	; 0x6fc6 <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 bf 37 	jmp	0x6f7e	; 0x6f7e <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 db 37 	jmp	0x6fb6	; 0x6fb6 <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	e1 53       	subi	r30, 0x31	; 49
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <NodeRed_Communication_enuInit>:
#include "NodeRed_Communication_int.h"
#include "NodeRed_Communication_config.h"
#include "NodeRed_Communication_priv.h"

ES_t NodeRed_Communication_enuInit()
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	0f 92       	push	r0
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinDirection(DIO_u8PORTD, DIO_u8PIN1, DIO_u8OUTPUT);	//Tx
     e9c:	83 e0       	ldi	r24, 0x03	; 3
     e9e:	61 e0       	ldi	r22, 0x01	; 1
     ea0:	41 e0       	ldi	r20, 0x01	; 1
     ea2:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8PORTD, DIO_u8PIN0, DIO_u8INPUT);	//Rx
     ea6:	83 e0       	ldi	r24, 0x03	; 3
     ea8:	60 e0       	ldi	r22, 0x00	; 0
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <DIO_enuSetPinDirection>

	USART_enuInit();
     eb0:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <USART_enuInit>

	return Local_enuErrorState;
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb6:	0f 90       	pop	r0
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <NodeRed_Communication_enuSendDatatoServer>:


ES_t NodeRed_Communication_enuSendDatatoServer(Data_Reading_t *Copy_PstrSensorsReading)
{
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	a1 97       	sbiw	r28, 0x21	; 33
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	f8 94       	cli
     ecc:	de bf       	out	0x3e, r29	; 62
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	cd bf       	out	0x3d, r28	; 61
     ed2:	99 a3       	std	Y+33, r25	; 0x21
     ed4:	88 a3       	std	Y+32, r24	; 0x20
	ES_t Local_enuErrorState = ES_NOK;
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	89 83       	std	Y+1, r24	; 0x01

	char SensorReading_String[30];

	structToStr(Copy_PstrSensorsReading, SensorReading_String);
     eda:	88 a1       	ldd	r24, Y+32	; 0x20
     edc:	99 a1       	ldd	r25, Y+33	; 0x21
     ede:	9e 01       	movw	r18, r28
     ee0:	2e 5f       	subi	r18, 0xFE	; 254
     ee2:	3f 4f       	sbci	r19, 0xFF	; 255
     ee4:	b9 01       	movw	r22, r18
     ee6:	0e 94 63 08 	call	0x10c6	; 0x10c6 <structToStr>

	Local_enuErrorState = USART_enuSendString(SensorReading_String);
     eea:	ce 01       	movw	r24, r28
     eec:	02 96       	adiw	r24, 0x02	; 2
     eee:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <USART_enuSendString>
     ef2:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef6:	a1 96       	adiw	r28, 0x21	; 33
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	de bf       	out	0x3e, r29	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	08 95       	ret

00000f08 <reverse>:


// Helper function to reverse a string
static void reverse(char str[], int length)
{
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	29 97       	sbiw	r28, 0x09	; 9
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	9f 83       	std	Y+7, r25	; 0x07
     f1e:	8e 83       	std	Y+6, r24	; 0x06
     f20:	79 87       	std	Y+9, r23	; 0x09
     f22:	68 87       	std	Y+8, r22	; 0x08
	int start = 0;
     f24:	1d 82       	std	Y+5, r1	; 0x05
     f26:	1c 82       	std	Y+4, r1	; 0x04
	int end = length - 1;
     f28:	88 85       	ldd	r24, Y+8	; 0x08
     f2a:	99 85       	ldd	r25, Y+9	; 0x09
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	9b 83       	std	Y+3, r25	; 0x03
     f30:	8a 83       	std	Y+2, r24	; 0x02
     f32:	2c c0       	rjmp	.+88     	; 0xf8c <reverse+0x84>
	while (start < end) {
		char temp = str[start];
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	8e 81       	ldd	r24, Y+6	; 0x06
     f3a:	9f 81       	ldd	r25, Y+7	; 0x07
     f3c:	fc 01       	movw	r30, r24
     f3e:	e2 0f       	add	r30, r18
     f40:	f3 1f       	adc	r31, r19
     f42:	80 81       	ld	r24, Z
     f44:	89 83       	std	Y+1, r24	; 0x01
		str[start] = str[end];
     f46:	2c 81       	ldd	r18, Y+4	; 0x04
     f48:	3d 81       	ldd	r19, Y+5	; 0x05
     f4a:	8e 81       	ldd	r24, Y+6	; 0x06
     f4c:	9f 81       	ldd	r25, Y+7	; 0x07
     f4e:	dc 01       	movw	r26, r24
     f50:	a2 0f       	add	r26, r18
     f52:	b3 1f       	adc	r27, r19
     f54:	2a 81       	ldd	r18, Y+2	; 0x02
     f56:	3b 81       	ldd	r19, Y+3	; 0x03
     f58:	8e 81       	ldd	r24, Y+6	; 0x06
     f5a:	9f 81       	ldd	r25, Y+7	; 0x07
     f5c:	fc 01       	movw	r30, r24
     f5e:	e2 0f       	add	r30, r18
     f60:	f3 1f       	adc	r31, r19
     f62:	80 81       	ld	r24, Z
     f64:	8c 93       	st	X, r24
		str[end] = temp;
     f66:	2a 81       	ldd	r18, Y+2	; 0x02
     f68:	3b 81       	ldd	r19, Y+3	; 0x03
     f6a:	8e 81       	ldd	r24, Y+6	; 0x06
     f6c:	9f 81       	ldd	r25, Y+7	; 0x07
     f6e:	fc 01       	movw	r30, r24
     f70:	e2 0f       	add	r30, r18
     f72:	f3 1f       	adc	r31, r19
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	80 83       	st	Z, r24
		start++;
     f78:	8c 81       	ldd	r24, Y+4	; 0x04
     f7a:	9d 81       	ldd	r25, Y+5	; 0x05
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	9d 83       	std	Y+5, r25	; 0x05
     f80:	8c 83       	std	Y+4, r24	; 0x04
		end--;
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	9b 81       	ldd	r25, Y+3	; 0x03
     f86:	01 97       	sbiw	r24, 0x01	; 1
     f88:	9b 83       	std	Y+3, r25	; 0x03
     f8a:	8a 83       	std	Y+2, r24	; 0x02
// Helper function to reverse a string
static void reverse(char str[], int length)
{
	int start = 0;
	int end = length - 1;
	while (start < end) {
     f8c:	2c 81       	ldd	r18, Y+4	; 0x04
     f8e:	3d 81       	ldd	r19, Y+5	; 0x05
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	9b 81       	ldd	r25, Y+3	; 0x03
     f94:	28 17       	cp	r18, r24
     f96:	39 07       	cpc	r19, r25
     f98:	6c f2       	brlt	.-102    	; 0xf34 <reverse+0x2c>
		str[start] = str[end];
		str[end] = temp;
		start++;
		end--;
	}
}
     f9a:	29 96       	adiw	r28, 0x09	; 9
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <intToStr>:

// Function to convert an integer to a string
static void intToStr(int num, char str[])
{
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	2a 97       	sbiw	r28, 0x0a	; 10
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	98 87       	std	Y+8, r25	; 0x08
     fc2:	8f 83       	std	Y+7, r24	; 0x07
     fc4:	7a 87       	std	Y+10, r23	; 0x0a
     fc6:	69 87       	std	Y+9, r22	; 0x09
	int isNegative = 0;
     fc8:	1e 82       	std	Y+6, r1	; 0x06
     fca:	1d 82       	std	Y+5, r1	; 0x05
	int i = 0;
     fcc:	1c 82       	std	Y+4, r1	; 0x04
     fce:	1b 82       	std	Y+3, r1	; 0x03

	// Handle 0 explicitly, otherwise empty string is printed for 0
	if (num == 0) {
     fd0:	8f 81       	ldd	r24, Y+7	; 0x07
     fd2:	98 85       	ldd	r25, Y+8	; 0x08
     fd4:	00 97       	sbiw	r24, 0x00	; 0
     fd6:	b9 f4       	brne	.+46     	; 0x1006 <intToStr+0x5a>
		str[i++] = '0';
     fd8:	2b 81       	ldd	r18, Y+3	; 0x03
     fda:	3c 81       	ldd	r19, Y+4	; 0x04
     fdc:	89 85       	ldd	r24, Y+9	; 0x09
     fde:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe0:	fc 01       	movw	r30, r24
     fe2:	e2 0f       	add	r30, r18
     fe4:	f3 1f       	adc	r31, r19
     fe6:	80 e3       	ldi	r24, 0x30	; 48
     fe8:	80 83       	st	Z, r24
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	9c 81       	ldd	r25, Y+4	; 0x04
     fee:	01 96       	adiw	r24, 0x01	; 1
     ff0:	9c 83       	std	Y+4, r25	; 0x04
     ff2:	8b 83       	std	Y+3, r24	; 0x03
		str[i] = '\0';
     ff4:	2b 81       	ldd	r18, Y+3	; 0x03
     ff6:	3c 81       	ldd	r19, Y+4	; 0x04
     ff8:	89 85       	ldd	r24, Y+9	; 0x09
     ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
     ffc:	fc 01       	movw	r30, r24
     ffe:	e2 0f       	add	r30, r18
    1000:	f3 1f       	adc	r31, r19
    1002:	10 82       	st	Z, r1
    1004:	57 c0       	rjmp	.+174    	; 0x10b4 <intToStr+0x108>
		return;
	}

	// Handle negative numbers
	if (num < 0) {
    1006:	8f 81       	ldd	r24, Y+7	; 0x07
    1008:	98 85       	ldd	r25, Y+8	; 0x08
    100a:	99 23       	and	r25, r25
    100c:	74 f5       	brge	.+92     	; 0x106a <intToStr+0xbe>
		isNegative = 1;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	9e 83       	std	Y+6, r25	; 0x06
    1014:	8d 83       	std	Y+5, r24	; 0x05
		num = -num;
    1016:	8f 81       	ldd	r24, Y+7	; 0x07
    1018:	98 85       	ldd	r25, Y+8	; 0x08
    101a:	90 95       	com	r25
    101c:	81 95       	neg	r24
    101e:	9f 4f       	sbci	r25, 0xFF	; 255
    1020:	98 87       	std	Y+8, r25	; 0x08
    1022:	8f 83       	std	Y+7, r24	; 0x07
    1024:	22 c0       	rjmp	.+68     	; 0x106a <intToStr+0xbe>
	}

	// Process individual digits
	while (num != 0) {
		int rem = num % 10;
    1026:	8f 81       	ldd	r24, Y+7	; 0x07
    1028:	98 85       	ldd	r25, Y+8	; 0x08
    102a:	2a e0       	ldi	r18, 0x0A	; 10
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	b9 01       	movw	r22, r18
    1030:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <__divmodhi4>
    1034:	9a 83       	std	Y+2, r25	; 0x02
    1036:	89 83       	std	Y+1, r24	; 0x01
		str[i++] = rem + '0';
    1038:	2b 81       	ldd	r18, Y+3	; 0x03
    103a:	3c 81       	ldd	r19, Y+4	; 0x04
    103c:	89 85       	ldd	r24, Y+9	; 0x09
    103e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1040:	fc 01       	movw	r30, r24
    1042:	e2 0f       	add	r30, r18
    1044:	f3 1f       	adc	r31, r19
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	80 5d       	subi	r24, 0xD0	; 208
    104a:	80 83       	st	Z, r24
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	9c 81       	ldd	r25, Y+4	; 0x04
    1050:	01 96       	adiw	r24, 0x01	; 1
    1052:	9c 83       	std	Y+4, r25	; 0x04
    1054:	8b 83       	std	Y+3, r24	; 0x03
		num = num / 10;
    1056:	8f 81       	ldd	r24, Y+7	; 0x07
    1058:	98 85       	ldd	r25, Y+8	; 0x08
    105a:	2a e0       	ldi	r18, 0x0A	; 10
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	b9 01       	movw	r22, r18
    1060:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <__divmodhi4>
    1064:	cb 01       	movw	r24, r22
    1066:	98 87       	std	Y+8, r25	; 0x08
    1068:	8f 83       	std	Y+7, r24	; 0x07
		isNegative = 1;
		num = -num;
	}

	// Process individual digits
	while (num != 0) {
    106a:	8f 81       	ldd	r24, Y+7	; 0x07
    106c:	98 85       	ldd	r25, Y+8	; 0x08
    106e:	00 97       	sbiw	r24, 0x00	; 0
    1070:	d1 f6       	brne	.-76     	; 0x1026 <intToStr+0x7a>
		str[i++] = rem + '0';
		num = num / 10;
	}

	// If number is negative, append '-'
	if (isNegative) {
    1072:	8d 81       	ldd	r24, Y+5	; 0x05
    1074:	9e 81       	ldd	r25, Y+6	; 0x06
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	71 f0       	breq	.+28     	; 0x1096 <intToStr+0xea>
		str[i++] = '-';
    107a:	2b 81       	ldd	r18, Y+3	; 0x03
    107c:	3c 81       	ldd	r19, Y+4	; 0x04
    107e:	89 85       	ldd	r24, Y+9	; 0x09
    1080:	9a 85       	ldd	r25, Y+10	; 0x0a
    1082:	fc 01       	movw	r30, r24
    1084:	e2 0f       	add	r30, r18
    1086:	f3 1f       	adc	r31, r19
    1088:	8d e2       	ldi	r24, 0x2D	; 45
    108a:	80 83       	st	Z, r24
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	9c 81       	ldd	r25, Y+4	; 0x04
    1090:	01 96       	adiw	r24, 0x01	; 1
    1092:	9c 83       	std	Y+4, r25	; 0x04
    1094:	8b 83       	std	Y+3, r24	; 0x03
	}

	str[i] = '\0'; // Append string terminator
    1096:	2b 81       	ldd	r18, Y+3	; 0x03
    1098:	3c 81       	ldd	r19, Y+4	; 0x04
    109a:	89 85       	ldd	r24, Y+9	; 0x09
    109c:	9a 85       	ldd	r25, Y+10	; 0x0a
    109e:	fc 01       	movw	r30, r24
    10a0:	e2 0f       	add	r30, r18
    10a2:	f3 1f       	adc	r31, r19
    10a4:	10 82       	st	Z, r1

	// Reverse the string
	reverse(str, i);
    10a6:	89 85       	ldd	r24, Y+9	; 0x09
    10a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10aa:	2b 81       	ldd	r18, Y+3	; 0x03
    10ac:	3c 81       	ldd	r19, Y+4	; 0x04
    10ae:	b9 01       	movw	r22, r18
    10b0:	0e 94 84 07 	call	0xf08	; 0xf08 <reverse>
}
    10b4:	2a 96       	adiw	r28, 0x0a	; 10
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	de bf       	out	0x3e, r29	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	cd bf       	out	0x3d, r28	; 61
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <structToStr>:

// Function to convert the struct members to a single string
static void structToStr(Data_Reading_t *data, char resultStr[])
{
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	e6 97       	sbiw	r28, 0x36	; 54
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
    10da:	9c ab       	std	Y+52, r25	; 0x34
    10dc:	8b ab       	std	Y+51, r24	; 0x33
    10de:	7e ab       	std	Y+54, r23	; 0x36
    10e0:	6d ab       	std	Y+53, r22	; 0x35
	char dataStr3[10];
	char dataStr4[10];
	char dataStr5[10];

	// Convert each number to string
	intToStr(data->Temperture, dataStr1);
    10e2:	eb a9       	ldd	r30, Y+51	; 0x33
    10e4:	fc a9       	ldd	r31, Y+52	; 0x34
    10e6:	80 81       	ld	r24, Z
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	9e 01       	movw	r18, r28
    10ee:	2f 5f       	subi	r18, 0xFF	; 255
    10f0:	3f 4f       	sbci	r19, 0xFF	; 255
    10f2:	b9 01       	movw	r22, r18
    10f4:	0e 94 d6 07 	call	0xfac	; 0xfac <intToStr>
	intToStr(data->Humidity, dataStr2);
    10f8:	eb a9       	ldd	r30, Y+51	; 0x33
    10fa:	fc a9       	ldd	r31, Y+52	; 0x34
    10fc:	81 81       	ldd	r24, Z+1	; 0x01
    10fe:	88 2f       	mov	r24, r24
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	9e 01       	movw	r18, r28
    1104:	25 5f       	subi	r18, 0xF5	; 245
    1106:	3f 4f       	sbci	r19, 0xFF	; 255
    1108:	b9 01       	movw	r22, r18
    110a:	0e 94 d6 07 	call	0xfac	; 0xfac <intToStr>
	intToStr(data->Soil_Moisture, dataStr3);
    110e:	eb a9       	ldd	r30, Y+51	; 0x33
    1110:	fc a9       	ldd	r31, Y+52	; 0x34
    1112:	82 81       	ldd	r24, Z+2	; 0x02
    1114:	88 2f       	mov	r24, r24
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	9e 01       	movw	r18, r28
    111a:	2b 5e       	subi	r18, 0xEB	; 235
    111c:	3f 4f       	sbci	r19, 0xFF	; 255
    111e:	b9 01       	movw	r22, r18
    1120:	0e 94 d6 07 	call	0xfac	; 0xfac <intToStr>
	intToStr(data->Light_Intensity, dataStr4);
    1124:	eb a9       	ldd	r30, Y+51	; 0x33
    1126:	fc a9       	ldd	r31, Y+52	; 0x34
    1128:	83 81       	ldd	r24, Z+3	; 0x03
    112a:	88 2f       	mov	r24, r24
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	9e 01       	movw	r18, r28
    1130:	21 5e       	subi	r18, 0xE1	; 225
    1132:	3f 4f       	sbci	r19, 0xFF	; 255
    1134:	b9 01       	movw	r22, r18
    1136:	0e 94 d6 07 	call	0xfac	; 0xfac <intToStr>
	intToStr(data->State, dataStr5);
    113a:	eb a9       	ldd	r30, Y+51	; 0x33
    113c:	fc a9       	ldd	r31, Y+52	; 0x34
    113e:	84 81       	ldd	r24, Z+4	; 0x04
    1140:	88 2f       	mov	r24, r24
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	9e 01       	movw	r18, r28
    1146:	27 5d       	subi	r18, 0xD7	; 215
    1148:	3f 4f       	sbci	r19, 0xFF	; 255
    114a:	b9 01       	movw	r22, r18
    114c:	0e 94 d6 07 	call	0xfac	; 0xfac <intToStr>

	// Combine all strings with semicolon separators
	strcpy(resultStr, dataStr1);
    1150:	8d a9       	ldd	r24, Y+53	; 0x35
    1152:	9e a9       	ldd	r25, Y+54	; 0x36
    1154:	9e 01       	movw	r18, r28
    1156:	2f 5f       	subi	r18, 0xFF	; 255
    1158:	3f 4f       	sbci	r19, 0xFF	; 255
    115a:	b9 01       	movw	r22, r18
    115c:	0e 94 02 38 	call	0x7004	; 0x7004 <strcpy>
	strcat(resultStr, ";");
    1160:	8d a9       	ldd	r24, Y+53	; 0x35
    1162:	9e a9       	ldd	r25, Y+54	; 0x36
    1164:	0e 94 09 38 	call	0x7012	; 0x7012 <strlen>
    1168:	9c 01       	movw	r18, r24
    116a:	8d a9       	ldd	r24, Y+53	; 0x35
    116c:	9e a9       	ldd	r25, Y+54	; 0x36
    116e:	82 0f       	add	r24, r18
    1170:	93 1f       	adc	r25, r19
    1172:	20 e6       	ldi	r18, 0x60	; 96
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	b9 01       	movw	r22, r18
    1178:	42 e0       	ldi	r20, 0x02	; 2
    117a:	50 e0       	ldi	r21, 0x00	; 0
    117c:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <memcpy>
	strcat(resultStr, dataStr2);
    1180:	8d a9       	ldd	r24, Y+53	; 0x35
    1182:	9e a9       	ldd	r25, Y+54	; 0x36
    1184:	9e 01       	movw	r18, r28
    1186:	25 5f       	subi	r18, 0xF5	; 245
    1188:	3f 4f       	sbci	r19, 0xFF	; 255
    118a:	b9 01       	movw	r22, r18
    118c:	0e 94 f7 37 	call	0x6fee	; 0x6fee <strcat>
	strcat(resultStr, ";");
    1190:	8d a9       	ldd	r24, Y+53	; 0x35
    1192:	9e a9       	ldd	r25, Y+54	; 0x36
    1194:	20 e6       	ldi	r18, 0x60	; 96
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	b9 01       	movw	r22, r18
    119a:	0e 94 f7 37 	call	0x6fee	; 0x6fee <strcat>
	strcat(resultStr, dataStr3);
    119e:	8d a9       	ldd	r24, Y+53	; 0x35
    11a0:	9e a9       	ldd	r25, Y+54	; 0x36
    11a2:	9e 01       	movw	r18, r28
    11a4:	2b 5e       	subi	r18, 0xEB	; 235
    11a6:	3f 4f       	sbci	r19, 0xFF	; 255
    11a8:	b9 01       	movw	r22, r18
    11aa:	0e 94 f7 37 	call	0x6fee	; 0x6fee <strcat>
	strcat(resultStr, ";");
    11ae:	8d a9       	ldd	r24, Y+53	; 0x35
    11b0:	9e a9       	ldd	r25, Y+54	; 0x36
    11b2:	20 e6       	ldi	r18, 0x60	; 96
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	b9 01       	movw	r22, r18
    11b8:	0e 94 f7 37 	call	0x6fee	; 0x6fee <strcat>
	strcat(resultStr, dataStr4);
    11bc:	8d a9       	ldd	r24, Y+53	; 0x35
    11be:	9e a9       	ldd	r25, Y+54	; 0x36
    11c0:	9e 01       	movw	r18, r28
    11c2:	21 5e       	subi	r18, 0xE1	; 225
    11c4:	3f 4f       	sbci	r19, 0xFF	; 255
    11c6:	b9 01       	movw	r22, r18
    11c8:	0e 94 f7 37 	call	0x6fee	; 0x6fee <strcat>
	strcat(resultStr, ";");
    11cc:	8d a9       	ldd	r24, Y+53	; 0x35
    11ce:	9e a9       	ldd	r25, Y+54	; 0x36
    11d0:	20 e6       	ldi	r18, 0x60	; 96
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	b9 01       	movw	r22, r18
    11d6:	0e 94 f7 37 	call	0x6fee	; 0x6fee <strcat>
	strcat(resultStr, dataStr5);
    11da:	8d a9       	ldd	r24, Y+53	; 0x35
    11dc:	9e a9       	ldd	r25, Y+54	; 0x36
    11de:	9e 01       	movw	r18, r28
    11e0:	27 5d       	subi	r18, 0xD7	; 215
    11e2:	3f 4f       	sbci	r19, 0xFF	; 255
    11e4:	b9 01       	movw	r22, r18
    11e6:	0e 94 f7 37 	call	0x6fee	; 0x6fee <strcat>
	strcat(resultStr, ";");
    11ea:	8d a9       	ldd	r24, Y+53	; 0x35
    11ec:	9e a9       	ldd	r25, Y+54	; 0x36
    11ee:	20 e6       	ldi	r18, 0x60	; 96
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	b9 01       	movw	r22, r18
    11f4:	0e 94 f7 37 	call	0x6fee	; 0x6fee <strcat>
	strcat(resultStr, "$");
    11f8:	8d a9       	ldd	r24, Y+53	; 0x35
    11fa:	9e a9       	ldd	r25, Y+54	; 0x36
    11fc:	22 e6       	ldi	r18, 0x62	; 98
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	b9 01       	movw	r22, r18
    1202:	0e 94 f7 37 	call	0x6fee	; 0x6fee <strcat>
}
    1206:	e6 96       	adiw	r28, 0x36	; 54
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	de bf       	out	0x3e, r29	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	cd bf       	out	0x3d, r28	; 61
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <Communication_enuInitMaster>:
#include "I2C_Communication_config.h"
#include "I2C_Communication_priv.h"


ES_t Communication_enuInitMaster(void)
{
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	0f 92       	push	r0
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorState = I2C_enuInitMaster();
    1226:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <I2C_enuInitMaster>
    122a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    122c:	89 81       	ldd	r24, Y+1	; 0x01
}
    122e:	0f 90       	pop	r0
    1230:	cf 91       	pop	r28
    1232:	df 91       	pop	r29
    1234:	08 95       	ret

00001236 <Communication_enuInitSlave>:

ES_t Communication_enuInitSlave(void)
{
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	0f 92       	push	r0
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorState = I2C_enuInitSlave();
    1244:	0e 94 1a 13 	call	0x2634	; 0x2634 <I2C_enuInitSlave>
    1248:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    124a:	89 81       	ldd	r24, Y+1	; 0x01
}
    124c:	0f 90       	pop	r0
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	08 95       	ret

00001254 <Communication_enuSendFrame>:

ES_t Communication_enuSendFrame(Communication_Frame_t *Copy_uniSentFrame)
{
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	00 d0       	rcall	.+0      	; 0x125a <Communication_enuSendFrame+0x6>
    125a:	00 d0       	rcall	.+0      	; 0x125c <Communication_enuSendFrame+0x8>
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    1260:	9c 83       	std	Y+4, r25	; 0x04
    1262:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	8a 83       	std	Y+2, r24	; 0x02

	Local_enuErrorState = I2C_enuStartCondition();
    1268:	0e 94 32 13 	call	0x2664	; 0x2664 <I2C_enuStartCondition>
    126c:	8a 83       	std	Y+2, r24	; 0x02

	Copy_uniSentFrame->Check_Sum = Copy_uniSentFrame->Temp + Copy_uniSentFrame->Humi + Copy_uniSentFrame->Soil + Copy_uniSentFrame->LDRI + Copy_uniSentFrame->State;
    126e:	eb 81       	ldd	r30, Y+3	; 0x03
    1270:	fc 81       	ldd	r31, Y+4	; 0x04
    1272:	90 81       	ld	r25, Z
    1274:	eb 81       	ldd	r30, Y+3	; 0x03
    1276:	fc 81       	ldd	r31, Y+4	; 0x04
    1278:	81 81       	ldd	r24, Z+1	; 0x01
    127a:	98 0f       	add	r25, r24
    127c:	eb 81       	ldd	r30, Y+3	; 0x03
    127e:	fc 81       	ldd	r31, Y+4	; 0x04
    1280:	82 81       	ldd	r24, Z+2	; 0x02
    1282:	98 0f       	add	r25, r24
    1284:	eb 81       	ldd	r30, Y+3	; 0x03
    1286:	fc 81       	ldd	r31, Y+4	; 0x04
    1288:	83 81       	ldd	r24, Z+3	; 0x03
    128a:	98 0f       	add	r25, r24
    128c:	eb 81       	ldd	r30, Y+3	; 0x03
    128e:	fc 81       	ldd	r31, Y+4	; 0x04
    1290:	84 81       	ldd	r24, Z+4	; 0x04
    1292:	89 0f       	add	r24, r25
    1294:	eb 81       	ldd	r30, Y+3	; 0x03
    1296:	fc 81       	ldd	r31, Y+4	; 0x04
    1298:	85 83       	std	Z+5, r24	; 0x05

	if(Local_enuErrorState == ES_OK)
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	88 23       	and	r24, r24
    129e:	31 f5       	brne	.+76     	; 0x12ec <Communication_enuSendFrame+0x98>
	{
		Local_enuErrorState = I2C_enuSendSlaveAddress(Slave_Address, 0);
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	0e 94 a1 13 	call	0x2742	; 0x2742 <I2C_enuSendSlaveAddress>
    12a8:	8a 83       	std	Y+2, r24	; 0x02

		if(Local_enuErrorState == ES_OK)
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	88 23       	and	r24, r24
    12ae:	d9 f4       	brne	.+54     	; 0x12e6 <Communication_enuSendFrame+0x92>
		{
			for(u8 Local_u8Iterator = 0; Local_u8Iterator < 6; Local_u8Iterator++)
    12b0:	19 82       	std	Y+1, r1	; 0x01
    12b2:	15 c0       	rjmp	.+42     	; 0x12de <Communication_enuSendFrame+0x8a>
			{
				Local_enuErrorState = I2C_enuMasterSendData(Copy_uniSentFrame->Data[Local_u8Iterator]);
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	9c 81       	ldd	r25, Y+4	; 0x04
    12be:	fc 01       	movw	r30, r24
    12c0:	e2 0f       	add	r30, r18
    12c2:	f3 1f       	adc	r31, r19
    12c4:	80 81       	ld	r24, Z
    12c6:	0e 94 25 14 	call	0x284a	; 0x284a <I2C_enuMasterSendData>
    12ca:	8a 83       	std	Y+2, r24	; 0x02
				if(Local_enuErrorState == ES_OK)
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	88 23       	and	r24, r24
    12d0:	19 f0       	breq	.+6      	; 0x12d8 <Communication_enuSendFrame+0x84>
				{
					continue;
				}
				else
				{
					Local_enuErrorState = ES_NOK;
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	8a 83       	std	Y+2, r24	; 0x02
    12d6:	0c c0       	rjmp	.+24     	; 0x12f0 <Communication_enuSendFrame+0x9c>
	{
		Local_enuErrorState = I2C_enuSendSlaveAddress(Slave_Address, 0);

		if(Local_enuErrorState == ES_OK)
		{
			for(u8 Local_u8Iterator = 0; Local_u8Iterator < 6; Local_u8Iterator++)
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	8f 5f       	subi	r24, 0xFF	; 255
    12dc:	89 83       	std	Y+1, r24	; 0x01
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	86 30       	cpi	r24, 0x06	; 6
    12e2:	40 f3       	brcs	.-48     	; 0x12b4 <Communication_enuSendFrame+0x60>
    12e4:	05 c0       	rjmp	.+10     	; 0x12f0 <Communication_enuSendFrame+0x9c>
				}
			}
		}
		else
		{
			Local_enuErrorState = ES_NOK;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	8a 83       	std	Y+2, r24	; 0x02
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <Communication_enuSendFrame+0x9c>


	}
	else
	{
		Local_enuErrorState = ES_NOK;
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	8a 83       	std	Y+2, r24	; 0x02
	}

	I2C_enuStopCondition();
    12f0:	0e 94 86 13 	call	0x270c	; 0x270c <I2C_enuStopCondition>

	return Local_enuErrorState;
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <Communication_enuReceiveFrame>:

ES_t Communication_enuReceiveFrame(Communication_Frame_t *Copy_uniReceivedFrame)
{
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	00 d0       	rcall	.+0      	; 0x130a <Communication_enuReceiveFrame+0x6>
    130a:	00 d0       	rcall	.+0      	; 0x130c <Communication_enuReceiveFrame+0x8>
    130c:	0f 92       	push	r0
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	9d 83       	std	Y+5, r25	; 0x05
    1314:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	8b 83       	std	Y+3, r24	; 0x03

	Local_enuErrorState = I2C_enuSlaveCheckItsAdress();
    131a:	0e 94 ef 13 	call	0x27de	; 0x27de <I2C_enuSlaveCheckItsAdress>
    131e:	8b 83       	std	Y+3, r24	; 0x03

	u8 Local_u8CheckSum = 0;
    1320:	1a 82       	std	Y+2, r1	; 0x02

	if(Local_enuErrorState == ES_OK)
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	88 23       	and	r24, r24
    1326:	b1 f5       	brne	.+108    	; 0x1394 <Communication_enuReceiveFrame+0x90>
	{
		for(u8 Local_u8Iterator = 0; Local_u8Iterator < 6; Local_u8Iterator++)
    1328:	19 82       	std	Y+1, r1	; 0x01
    132a:	13 c0       	rjmp	.+38     	; 0x1352 <Communication_enuReceiveFrame+0x4e>
		{
			Local_enuErrorState = I2C_enuSlaveRecieveData(&Copy_uniReceivedFrame->Data[Local_u8Iterator]);
    132c:	2c 81       	ldd	r18, Y+4	; 0x04
    132e:	3d 81       	ldd	r19, Y+5	; 0x05
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	88 2f       	mov	r24, r24
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	82 0f       	add	r24, r18
    1338:	93 1f       	adc	r25, r19
    133a:	0e 94 4e 14 	call	0x289c	; 0x289c <I2C_enuSlaveRecieveData>
    133e:	8b 83       	std	Y+3, r24	; 0x03
			if(Local_enuErrorState == ES_OK)
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	88 23       	and	r24, r24
    1344:	19 f0       	breq	.+6      	; 0x134c <Communication_enuReceiveFrame+0x48>

				continue;
			}
			else
			{
				Local_enuErrorState = ES_NOK;
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	8b 83       	std	Y+3, r24	; 0x03
    134a:	06 c0       	rjmp	.+12     	; 0x1358 <Communication_enuReceiveFrame+0x54>

	u8 Local_u8CheckSum = 0;

	if(Local_enuErrorState == ES_OK)
	{
		for(u8 Local_u8Iterator = 0; Local_u8Iterator < 6; Local_u8Iterator++)
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	8f 5f       	subi	r24, 0xFF	; 255
    1350:	89 83       	std	Y+1, r24	; 0x01
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	86 30       	cpi	r24, 0x06	; 6
    1356:	50 f3       	brcs	.-44     	; 0x132c <Communication_enuReceiveFrame+0x28>
				break;
			}
		}


		Local_u8CheckSum = Copy_uniReceivedFrame->Temp + Copy_uniReceivedFrame->Humi + Copy_uniReceivedFrame->Soil + Copy_uniReceivedFrame->LDRI + Copy_uniReceivedFrame->State;
    1358:	ec 81       	ldd	r30, Y+4	; 0x04
    135a:	fd 81       	ldd	r31, Y+5	; 0x05
    135c:	90 81       	ld	r25, Z
    135e:	ec 81       	ldd	r30, Y+4	; 0x04
    1360:	fd 81       	ldd	r31, Y+5	; 0x05
    1362:	81 81       	ldd	r24, Z+1	; 0x01
    1364:	98 0f       	add	r25, r24
    1366:	ec 81       	ldd	r30, Y+4	; 0x04
    1368:	fd 81       	ldd	r31, Y+5	; 0x05
    136a:	82 81       	ldd	r24, Z+2	; 0x02
    136c:	98 0f       	add	r25, r24
    136e:	ec 81       	ldd	r30, Y+4	; 0x04
    1370:	fd 81       	ldd	r31, Y+5	; 0x05
    1372:	83 81       	ldd	r24, Z+3	; 0x03
    1374:	98 0f       	add	r25, r24
    1376:	ec 81       	ldd	r30, Y+4	; 0x04
    1378:	fd 81       	ldd	r31, Y+5	; 0x05
    137a:	84 81       	ldd	r24, Z+4	; 0x04
    137c:	89 0f       	add	r24, r25
    137e:	8a 83       	std	Y+2, r24	; 0x02

		if(Local_u8CheckSum == Copy_uniReceivedFrame->Check_Sum)
    1380:	ec 81       	ldd	r30, Y+4	; 0x04
    1382:	fd 81       	ldd	r31, Y+5	; 0x05
    1384:	95 81       	ldd	r25, Z+5	; 0x05
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	98 17       	cp	r25, r24
    138a:	11 f4       	brne	.+4      	; 0x1390 <Communication_enuReceiveFrame+0x8c>
		{
			Local_enuErrorState = ES_OK;
    138c:	1b 82       	std	Y+3, r1	; 0x03
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <Communication_enuReceiveFrame+0x90>
		}
		else
		{
			Local_enuErrorState = ES_NOK;
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	8b 83       	std	Y+3, r24	; 0x03
		}
	}

	return Local_enuErrorState;
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <USART_enuInit>:
#include "USART_priv.h"
#include "USART_config.h"


ES_t USART_enuInit(void)
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <USART_enuInit+0x6>
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <USART_enuInit+0x8>
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8UCSRAvalue = 0;
    13b6:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u16UBRRvalue = 0;
    13b8:	1a 82       	std	Y+2, r1	; 0x02
    13ba:	19 82       	std	Y+1, r1	; 0x01
	
	#if USART_SPEED == NORMAL_SPEED
	UCSRA &= ~(MASK_BIT << U2X);
    13bc:	ab e2       	ldi	r26, 0x2B	; 43
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	eb e2       	ldi	r30, 0x2B	; 43
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	8d 7f       	andi	r24, 0xFD	; 253
    13c8:	8c 93       	st	X, r24
	#if USART_MODE == TRANSMITTER
	UCSRB |= (MASK_BIT << TXEN);
	#elif USART_MODE == RECEIVER
	UCSRB |= (MASK_BIT << RXEN);
	#elif USART_MODE == TRANSCEIVER
	UCSRB |= (MASK_BIT << TXEN);
    13ca:	aa e2       	ldi	r26, 0x2A	; 42
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	ea e2       	ldi	r30, 0x2A	; 42
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	88 60       	ori	r24, 0x08	; 8
    13d6:	8c 93       	st	X, r24
	UCSRB |= (MASK_BIT << RXEN);
    13d8:	aa e2       	ldi	r26, 0x2A	; 42
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	ea e2       	ldi	r30, 0x2A	; 42
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	80 61       	ori	r24, 0x10	; 16
    13e4:	8c 93       	st	X, r24
	#elif USART_DATA_LENGTH == SEVEN_DATA_LENGTH
	Local_u8UCSRAvalue &= ~(MASK_BIT << UCSZ0);
	Local_u8UCSRAvalue |=  (MASK_BIT << UCSZ1);
	UCSRB &= ~(MASK_BIT << UCSZ2);
	#elif USART_DATA_LENGTH == EIGHT_DATA_LENGTH
	Local_u8UCSRAvalue |=  (MASK_BIT << UCSZ0);
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	82 60       	ori	r24, 0x02	; 2
    13ea:	8b 83       	std	Y+3, r24	; 0x03
	Local_u8UCSRAvalue |=  (MASK_BIT << UCSZ1);
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	84 60       	ori	r24, 0x04	; 4
    13f0:	8b 83       	std	Y+3, r24	; 0x03
	UCSRB &= ~(MASK_BIT << UCSZ2);
    13f2:	aa e2       	ldi	r26, 0x2A	; 42
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	ea e2       	ldi	r30, 0x2A	; 42
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	8b 7f       	andi	r24, 0xFB	; 251
    13fe:	8c 93       	st	X, r24
	#else
	#error "USART DATA LENGTH has a wrong configuration"
	#endif
	
	#if TRANSMITTION_MODE == ASYNCHRONOUS
	Local_u8UCSRAvalue &= ~(MASK_BIT << UMSEL);
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	8f 7b       	andi	r24, 0xBF	; 191
    1404:	8b 83       	std	Y+3, r24	; 0x03
	#else
	#error "USART TRANSMITTION MODE has a wrong configuration"
	#endif
	
	#if PARITY_STATE == NO_PARITY
	Local_u8UCSRAvalue &= ~(MASK_BIT << UPM0);
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	8f 7e       	andi	r24, 0xEF	; 239
    140a:	8b 83       	std	Y+3, r24	; 0x03
	Local_u8UCSRAvalue &= ~(MASK_BIT << UPM1);
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	8f 7d       	andi	r24, 0xDF	; 223
    1410:	8b 83       	std	Y+3, r24	; 0x03
	#else
	#error "USART PARITY has a wrong configuration"
	#endif
	
	#if NO_STOP_BITS == ONE_STOP_BITS
	Local_u8UCSRAvalue &= ~(MASK_BIT << USBS);
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	87 7f       	andi	r24, 0xF7	; 247
    1416:	8b 83       	std	Y+3, r24	; 0x03
	Local_u8UCSRAvalue |=  (MASK_BIT << USBS);
	#else
	#error "USART STOP BITS has a wrong configuration"
	#endif
	
	Local_u8UCSRAvalue |= (MASK_BIT << URSEL);
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	80 68       	ori	r24, 0x80	; 128
    141c:	8b 83       	std	Y+3, r24	; 0x03
	UCSRC = Local_u8UCSRAvalue;
    141e:	e0 e4       	ldi	r30, 0x40	; 64
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	80 83       	st	Z, r24
	
	
	Local_u16UBRRvalue = (u16)CALCULATE_BAUDRATE(USART_BAUD_RATE);
    1426:	83 e3       	ldi	r24, 0x33	; 51
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	9a 83       	std	Y+2, r25	; 0x02
    142c:	89 83       	std	Y+1, r24	; 0x01
	
	Local_u16UBRRvalue &= ~(MASK_BIT << 15);
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	9a 81       	ldd	r25, Y+2	; 0x02
    1432:	9f 77       	andi	r25, 0x7F	; 127
    1434:	9a 83       	std	Y+2, r25	; 0x02
    1436:	89 83       	std	Y+1, r24	; 0x01
	UBRRL = (u8)Local_u16UBRRvalue;
    1438:	e9 e2       	ldi	r30, 0x29	; 41
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	80 83       	st	Z, r24
	UBRRH = (Local_u16UBRRvalue >> 8);
    1440:	e0 e4       	ldi	r30, 0x40	; 64
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	9a 81       	ldd	r25, Y+2	; 0x02
    1448:	89 2f       	mov	r24, r25
    144a:	99 27       	eor	r25, r25
    144c:	80 83       	st	Z, r24
	
	Local_enuErrorState = ES_OK;
    144e:	1c 82       	std	Y+4, r1	; 0x04
	
	return Local_enuErrorState;
    1450:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <USART_enuSendCharacter>:

ES_t USART_enuSendCharacter(u8 Copy_u8SendedChar)
{
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	00 d0       	rcall	.+0      	; 0x1466 <USART_enuSendCharacter+0x6>
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	89 83       	std	Y+1, r24	; 0x01
	
	while(!((UCSRA >> UDRE) & 1));
    1470:	eb e2       	ldi	r30, 0x2B	; 43
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	82 95       	swap	r24
    1478:	86 95       	lsr	r24
    147a:	87 70       	andi	r24, 0x07	; 7
    147c:	88 2f       	mov	r24, r24
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	81 70       	andi	r24, 0x01	; 1
    1482:	90 70       	andi	r25, 0x00	; 0
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	a1 f3       	breq	.-24     	; 0x1470 <USART_enuSendCharacter+0x10>
	UDR = Copy_u8SendedChar;
    1488:	ec e2       	ldi	r30, 0x2C	; 44
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	80 83       	st	Z, r24
	
	Local_enuErrorState = ES_OK;
    1490:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    1492:	89 81       	ldd	r24, Y+1	; 0x01
}
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <USART_enuReceiveCharacter>:

ES_t USART_enuReceiveCharacter(u8 *Copy_Pu8ReceivedChar)
{
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <USART_enuReceiveCharacter+0x6>
    14a4:	0f 92       	push	r0
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	9b 83       	std	Y+3, r25	; 0x03
    14ac:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_Pu8ReceivedChar != NULL)
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	9b 81       	ldd	r25, Y+3	; 0x03
    14b6:	00 97       	sbiw	r24, 0x00	; 0
    14b8:	69 f0       	breq	.+26     	; 0x14d4 <USART_enuReceiveCharacter+0x36>
	{
		while(!((UCSRA >> RXC) & 1));
    14ba:	eb e2       	ldi	r30, 0x2B	; 43
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	88 23       	and	r24, r24
    14c2:	dc f7       	brge	.-10     	; 0x14ba <USART_enuReceiveCharacter+0x1c>
		*Copy_Pu8ReceivedChar = UDR;
    14c4:	ec e2       	ldi	r30, 0x2C	; 44
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	ea 81       	ldd	r30, Y+2	; 0x02
    14cc:	fb 81       	ldd	r31, Y+3	; 0x03
    14ce:	80 83       	st	Z, r24
		
		Local_enuErrorState = ES_OK;
    14d0:	19 82       	std	Y+1, r1	; 0x01
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <USART_enuReceiveCharacter+0x3a>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    14d4:	82 e0       	ldi	r24, 0x02	; 2
    14d6:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	08 95       	ret

000014e6 <USART_enuSendString>:

ES_t USART_enuSendString(u8 *Copy_Pu8SendedString)
{
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <USART_enuSendString+0x6>
    14ec:	0f 92       	push	r0
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	9b 83       	std	Y+3, r25	; 0x03
    14f4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_Pu8SendedString != NULL)
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	9b 81       	ldd	r25, Y+3	; 0x03
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	f9 f0       	breq	.+62     	; 0x1540 <USART_enuSendString+0x5a>
    1502:	17 c0       	rjmp	.+46     	; 0x1532 <USART_enuSendString+0x4c>
	{
		while(*Copy_Pu8SendedString != '\0')
		{
			while(!((UCSRA >> UDRE) & 1));
    1504:	eb e2       	ldi	r30, 0x2B	; 43
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	82 95       	swap	r24
    150c:	86 95       	lsr	r24
    150e:	87 70       	andi	r24, 0x07	; 7
    1510:	88 2f       	mov	r24, r24
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	81 70       	andi	r24, 0x01	; 1
    1516:	90 70       	andi	r25, 0x00	; 0
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	a1 f3       	breq	.-24     	; 0x1504 <USART_enuSendString+0x1e>
			UDR = *Copy_Pu8SendedString;
    151c:	ac e2       	ldi	r26, 0x2C	; 44
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	ea 81       	ldd	r30, Y+2	; 0x02
    1522:	fb 81       	ldd	r31, Y+3	; 0x03
    1524:	80 81       	ld	r24, Z
    1526:	8c 93       	st	X, r24
			Copy_Pu8SendedString++;
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	9b 81       	ldd	r25, Y+3	; 0x03
    152c:	01 96       	adiw	r24, 0x01	; 1
    152e:	9b 83       	std	Y+3, r25	; 0x03
    1530:	8a 83       	std	Y+2, r24	; 0x02
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_Pu8SendedString != NULL)
	{
		while(*Copy_Pu8SendedString != '\0')
    1532:	ea 81       	ldd	r30, Y+2	; 0x02
    1534:	fb 81       	ldd	r31, Y+3	; 0x03
    1536:	80 81       	ld	r24, Z
    1538:	88 23       	and	r24, r24
    153a:	21 f7       	brne	.-56     	; 0x1504 <USART_enuSendString+0x1e>
			while(!((UCSRA >> UDRE) & 1));
			UDR = *Copy_Pu8SendedString;
			Copy_Pu8SendedString++;
		}
		
		Local_enuErrorState = ES_OK;
    153c:	19 82       	std	Y+1, r1	; 0x01
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <USART_enuSendString+0x5e>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1540:	82 e0       	ldi	r24, 0x02	; 2
    1542:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    1544:	89 81       	ldd	r24, Y+1	; 0x01
}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <USART_enuReceiveStringUntilEnter>:

/* we will stop receive string (end of string) when we press 'Enter' --> (\r = 13), \n */
ES_t USART_enuReceiveStringUntilEnter(u8 *Copy_Pu8ReceivedString)
{
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	00 d0       	rcall	.+0      	; 0x1558 <USART_enuReceiveStringUntilEnter+0x6>
    1558:	00 d0       	rcall	.+0      	; 0x155a <USART_enuReceiveStringUntilEnter+0x8>
    155a:	0f 92       	push	r0
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	9d 83       	std	Y+5, r25	; 0x05
    1562:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	8b 83       	std	Y+3, r24	; 0x03
	
	u8 Local_u8String = 0, Local_u8CharIndex = 0;
    1568:	1a 82       	std	Y+2, r1	; 0x02
    156a:	19 82       	std	Y+1, r1	; 0x01
	
	if(Copy_Pu8ReceivedString != NULL)
    156c:	8c 81       	ldd	r24, Y+4	; 0x04
    156e:	9d 81       	ldd	r25, Y+5	; 0x05
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	41 f1       	breq	.+80     	; 0x15c4 <USART_enuReceiveStringUntilEnter+0x72>
	{
		while(1)
		{
			while(!((UCSRA >> RXC) & 1));
    1574:	eb e2       	ldi	r30, 0x2B	; 43
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	88 23       	and	r24, r24
    157c:	dc f7       	brge	.-10     	; 0x1574 <USART_enuReceiveStringUntilEnter+0x22>
			Local_u8String = UDR;
    157e:	ec e2       	ldi	r30, 0x2C	; 44
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	8a 83       	std	Y+2, r24	; 0x02
			
			if(Local_u8String == '\r' || Local_u8String == '\n')
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	8d 30       	cpi	r24, 0x0D	; 13
    158a:	19 f0       	breq	.+6      	; 0x1592 <USART_enuReceiveStringUntilEnter+0x40>
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	8a 30       	cpi	r24, 0x0A	; 10
    1590:	51 f4       	brne	.+20     	; 0x15a6 <USART_enuReceiveStringUntilEnter+0x54>
			{
				Copy_Pu8ReceivedString[Local_u8CharIndex] = '\0';
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	8c 81       	ldd	r24, Y+4	; 0x04
    159a:	9d 81       	ldd	r25, Y+5	; 0x05
    159c:	fc 01       	movw	r30, r24
    159e:	e2 0f       	add	r30, r18
    15a0:	f3 1f       	adc	r31, r19
    15a2:	10 82       	st	Z, r1
    15a4:	11 c0       	rjmp	.+34     	; 0x15c8 <USART_enuReceiveStringUntilEnter+0x76>
				break;
			}
			else
			{
				Copy_Pu8ReceivedString[Local_u8CharIndex++] = Local_u8String;
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	8c 81       	ldd	r24, Y+4	; 0x04
    15ae:	9d 81       	ldd	r25, Y+5	; 0x05
    15b0:	fc 01       	movw	r30, r24
    15b2:	e2 0f       	add	r30, r18
    15b4:	f3 1f       	adc	r31, r19
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	80 83       	st	Z, r24
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	8f 5f       	subi	r24, 0xFF	; 255
    15be:	89 83       	std	Y+1, r24	; 0x01
			}
			
			Local_enuErrorState = ES_OK;
    15c0:	1b 82       	std	Y+3, r1	; 0x03
    15c2:	d8 cf       	rjmp	.-80     	; 0x1574 <USART_enuReceiveStringUntilEnter+0x22>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    15c4:	82 e0       	ldi	r24, 0x02	; 2
    15c6:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return Local_enuErrorState;
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <USART_enuReceiveStringWithKey>:


ES_t USART_enuReceiveStringWithKey(u8 *Copy_Pu8ReceivedString)
{
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <USART_enuReceiveStringWithKey+0x6>
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <USART_enuReceiveStringWithKey+0x8>
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <USART_enuReceiveStringWithKey+0xa>
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	9e 83       	std	Y+6, r25	; 0x06
    15ea:	8d 83       	std	Y+5, r24	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	8c 83       	std	Y+4, r24	; 0x04
	
	u8 Local_u8String = 0, Local_u8CharIndex = 0;
    15f0:	1b 82       	std	Y+3, r1	; 0x03
    15f2:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8StringKey = 0;
    15f4:	19 82       	std	Y+1, r1	; 0x01
	
	if(Copy_Pu8ReceivedString != NULL)
    15f6:	8d 81       	ldd	r24, Y+5	; 0x05
    15f8:	9e 81       	ldd	r25, Y+6	; 0x06
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	79 f1       	breq	.+94     	; 0x165c <USART_enuReceiveStringWithKey+0x82>
	{
		while(!((UCSRA >> RXC) & 1));
    15fe:	eb e2       	ldi	r30, 0x2B	; 43
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	88 23       	and	r24, r24
    1606:	dc f7       	brge	.-10     	; 0x15fe <USART_enuReceiveStringWithKey+0x24>
		Local_u8StringKey = UDR;
    1608:	ec e2       	ldi	r30, 0x2C	; 44
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	89 83       	std	Y+1, r24	; 0x01
		
		while(1)
		{
			while(!((UCSRA >> RXC) & 1));
    1610:	eb e2       	ldi	r30, 0x2B	; 43
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	88 23       	and	r24, r24
    1618:	dc f7       	brge	.-10     	; 0x1610 <USART_enuReceiveStringWithKey+0x36>
			Local_u8String = UDR;
    161a:	ec e2       	ldi	r30, 0x2C	; 44
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	8b 83       	std	Y+3, r24	; 0x03
			
			if(Local_u8String == Local_u8StringKey)
    1622:	9b 81       	ldd	r25, Y+3	; 0x03
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	98 17       	cp	r25, r24
    1628:	51 f4       	brne	.+20     	; 0x163e <USART_enuReceiveStringWithKey+0x64>
			{
				Copy_Pu8ReceivedString[Local_u8CharIndex] = '\0';
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	8d 81       	ldd	r24, Y+5	; 0x05
    1632:	9e 81       	ldd	r25, Y+6	; 0x06
    1634:	fc 01       	movw	r30, r24
    1636:	e2 0f       	add	r30, r18
    1638:	f3 1f       	adc	r31, r19
    163a:	10 82       	st	Z, r1
    163c:	11 c0       	rjmp	.+34     	; 0x1660 <USART_enuReceiveStringWithKey+0x86>
				break;
			}
			else
			{
				Copy_Pu8ReceivedString[Local_u8CharIndex++] = Local_u8String;
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	8d 81       	ldd	r24, Y+5	; 0x05
    1646:	9e 81       	ldd	r25, Y+6	; 0x06
    1648:	fc 01       	movw	r30, r24
    164a:	e2 0f       	add	r30, r18
    164c:	f3 1f       	adc	r31, r19
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	80 83       	st	Z, r24
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	8f 5f       	subi	r24, 0xFF	; 255
    1656:	8a 83       	std	Y+2, r24	; 0x02
			}
			
			Local_enuErrorState = ES_OK;
    1658:	1c 82       	std	Y+4, r1	; 0x04
    165a:	da cf       	rjmp	.-76     	; 0x1610 <USART_enuReceiveStringWithKey+0x36>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    165c:	82 e0       	ldi	r24, 0x02	; 2
    165e:	8c 83       	std	Y+4, r24	; 0x04
	}
	
	return Local_enuErrorState;
    1660:	8c 81       	ldd	r24, Y+4	; 0x04
    1662:	26 96       	adiw	r28, 0x06	; 6
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	de bf       	out	0x3e, r29	; 62
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	cd bf       	out	0x3d, r28	; 61
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <TIMER2_enuInit>:
u8 TIMER2_PRELOAD = 0;
u32 TIMER2_NUM_OVF = 0;
f32 TIMER2_f32OC2Value = 0;

ES_t TIMER2_enuInit(void)
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	0f 92       	push	r0
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	89 83       	std	Y+1, r24	; 0x01

	/* Mask the two bits of Wave Generation Mode */
	TCCR2 &= WGM_MASK;
    1682:	a5 e4       	ldi	r26, 0x45	; 69
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e5 e4       	ldi	r30, 0x45	; 69
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	87 7b       	andi	r24, 0xB7	; 183
    168e:	8c 93       	st	X, r24
	TCCR2 &= ~(MASK_BIT << TCCR2_WGM21	);
	#elif TIMER2_MODE == CTC
	TCCR2 &= ~(MASK_BIT << TCCR2_WGM20);
	TCCR2 |=  (MASK_BIT <<TCCR2_WGM21	);
	#elif TIMER2_MODE== FAST_PWM
	TCCR2 |=  (MASK_BIT << TCCR2_WGM20);
    1690:	a5 e4       	ldi	r26, 0x45	; 69
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e5 e4       	ldi	r30, 0x45	; 69
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	80 64       	ori	r24, 0x40	; 64
    169c:	8c 93       	st	X, r24
	TCCR2 |=  (MASK_BIT << TCCR2_WGM21	);
    169e:	a5 e4       	ldi	r26, 0x45	; 69
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e5 e4       	ldi	r30, 0x45	; 69
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	88 60       	ori	r24, 0x08	; 8
    16aa:	8c 93       	st	X, r24
	#else
	#error "Timer2 Mode has a wrong configuration"
	#endif

	/* Mask the three bits of Timer0 Prescaler */
	TCCR2 &= PRESCALER_MASK;
    16ac:	a5 e4       	ldi	r26, 0x45	; 69
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e5 e4       	ldi	r30, 0x45	; 69
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	88 7f       	andi	r24, 0xF8	; 248
    16b8:	8c 93       	st	X, r24
	#elif TIMER2_PRES == PRES_NO
	TCCR2 |=  (MASK_BIT << TCCR2_CS20	);
	TCCR2 &= ~(MASK_BIT << TCCR2_CS21	);
	TCCR2 &= ~(MASK_BIT << TCCR2_CS22	);
	#elif TIMER2_PRES == PRES_8
	TCCR2 &= ~(MASK_BIT <<TCCR2_CS20	);
    16ba:	a5 e4       	ldi	r26, 0x45	; 69
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e5 e4       	ldi	r30, 0x45	; 69
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	8e 7f       	andi	r24, 0xFE	; 254
    16c6:	8c 93       	st	X, r24
	TCCR2 |=  (MASK_BIT <<TCCR2_CS21	);
    16c8:	a5 e4       	ldi	r26, 0x45	; 69
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e5 e4       	ldi	r30, 0x45	; 69
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	82 60       	ori	r24, 0x02	; 2
    16d4:	8c 93       	st	X, r24
	TCCR2 &= ~(MASK_BIT <<TCCR2_CS22	);
    16d6:	a5 e4       	ldi	r26, 0x45	; 69
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e5 e4       	ldi	r30, 0x45	; 69
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	8b 7f       	andi	r24, 0xFB	; 251
    16e2:	8c 93       	st	X, r24
	#else
	#error "Timer2 Prescaler has a wrong configuration"
	#endif

	/* Mask the two bits of Output Compare Pin (OC2) */
	TCCR2 &= COM_OC2_MASK;
    16e4:	a5 e4       	ldi	r26, 0x45	; 69
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e5 e4       	ldi	r30, 0x45	; 69
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	8f 7c       	andi	r24, 0xCF	; 207
    16f0:	8c 93       	st	X, r24
	TCCR2 |=  (MASK_BIT << TCCR2_COM21);
	#elif (OC2_MODE == SET_OC2 && (TIMER2_MODE == CTC))
	TCCR2 |=  (MASK_BIT << TCCR2_COM20);
	TCCR2 |=  (MASK_BIT << TCCR2_COM21);
	#elif ((OC2_MODE == NON_INVERTED) && (TIMER2_MODE == PHCO_PWM || TIMER2_MODE == FAST_PWM))
	TCCR2 &= ~(MASK_BIT << TCCR2_COM20);
    16f2:	a5 e4       	ldi	r26, 0x45	; 69
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e5 e4       	ldi	r30, 0x45	; 69
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	8f 7e       	andi	r24, 0xEF	; 239
    16fe:	8c 93       	st	X, r24
	TCCR2 |=  (MASK_BIT << TCCR2_COM21);
    1700:	a5 e4       	ldi	r26, 0x45	; 69
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e5 e4       	ldi	r30, 0x45	; 69
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	80 62       	ori	r24, 0x20	; 32
    170c:	8c 93       	st	X, r24
	TCCR2 |=  (MASK_BIT << TCCR2_COM21);
	#else
	#error "OC2 has a wrong configuration"
	#endif

	Local_enuErrorState = ES_OK;
    170e:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    1710:	89 81       	ldd	r24, Y+1	; 0x01
}
    1712:	0f 90       	pop	r0
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <TIMER2_enuGeneratePWM>:

ES_t TIMER2_enuGeneratePWM(u8 Copy_u8DutyCycle)
{
    171a:	0f 93       	push	r16
    171c:	1f 93       	push	r17
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	00 d0       	rcall	.+0      	; 0x1724 <TIMER2_enuGeneratePWM+0xa>
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	89 83       	std	Y+1, r24	; 0x01
	#error "OC2 has a wrong configuration"
	#endif

	#elif TIMER2_MODE == FAST_PWM
	#if OC2_MODE == NON_INVERTED
	TIMER2_f32OC2Value = (Copy_u8DutyCycle * TIMER2_NO_OVF_COUNTS) / (PRESENTAGE_100);
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	88 2f       	mov	r24, r24
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	a0 e0       	ldi	r26, 0x00	; 0
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	ba 2f       	mov	r27, r26
    173a:	a9 2f       	mov	r26, r25
    173c:	98 2f       	mov	r25, r24
    173e:	88 27       	eor	r24, r24
    1740:	bc 01       	movw	r22, r24
    1742:	cd 01       	movw	r24, r26
    1744:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	bc 01       	movw	r22, r24
    174e:	cd 01       	movw	r24, r26
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	48 ec       	ldi	r20, 0xC8	; 200
    1756:	52 e4       	ldi	r21, 0x42	; 66
    1758:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	80 93 09 02 	sts	0x0209, r24
    1764:	90 93 0a 02 	sts	0x020A, r25
    1768:	a0 93 0b 02 	sts	0x020B, r26
    176c:	b0 93 0c 02 	sts	0x020C, r27
	Local_enuErrorState = ES_OK;
    1770:	19 82       	std	Y+1, r1	; 0x01
	#else
	#error "OC2 has a wrong configuration"
	#endif
	#endif

	OCR2 = TIMER2_f32OC2Value;
    1772:	03 e4       	ldi	r16, 0x43	; 67
    1774:	10 e0       	ldi	r17, 0x00	; 0
    1776:	80 91 09 02 	lds	r24, 0x0209
    177a:	90 91 0a 02 	lds	r25, 0x020A
    177e:	a0 91 0b 02 	lds	r26, 0x020B
    1782:	b0 91 0c 02 	lds	r27, 0x020C
    1786:	bc 01       	movw	r22, r24
    1788:	cd 01       	movw	r24, r26
    178a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	f8 01       	movw	r30, r16
    1794:	80 83       	st	Z, r24

	return Local_enuErrorState;
    1796:	89 81       	ldd	r24, Y+1	; 0x01
}
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	1f 91       	pop	r17
    17a2:	0f 91       	pop	r16
    17a4:	08 95       	ret

000017a6 <TIMER1_enuInit>:
#include "TIMER1_config.h"

#include "../interrupt.h"

ES_t TIMER1_enuInit(void)
{
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	0f 92       	push	r0
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	89 83       	std	Y+1, r24	; 0x01
	
	/* Mask the four bits of Waveform Generation Mode */
	TCCR1A &= 0xFC;
    17b4:	af e4       	ldi	r26, 0x4F	; 79
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	ef e4       	ldi	r30, 0x4F	; 79
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	8c 7f       	andi	r24, 0xFC	; 252
    17c0:	8c 93       	st	X, r24
	TCCR1B &= 0xE7;
    17c2:	ae e4       	ldi	r26, 0x4E	; 78
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	ee e4       	ldi	r30, 0x4E	; 78
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	87 7e       	andi	r24, 0xE7	; 231
    17ce:	8c 93       	st	X, r24
	TCCR1A &= ~(MASK_BIT << WGM10);
	TCCR1A &= ~(MASK_BIT << WGM11);
	TCCR1B |=  (MASK_BIT << WGM12);
	TCCR1B &= ~(MASK_BIT << WGM13);
	#elif TIMER1_MODE == TIMER1_FAST_PWM_8B
	TCCR1A |=  (MASK_BIT << WGM10);
    17d0:	af e4       	ldi	r26, 0x4F	; 79
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	ef e4       	ldi	r30, 0x4F	; 79
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	81 60       	ori	r24, 0x01	; 1
    17dc:	8c 93       	st	X, r24
	TCCR1A &= ~(MASK_BIT << WGM11);
    17de:	af e4       	ldi	r26, 0x4F	; 79
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	ef e4       	ldi	r30, 0x4F	; 79
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	8d 7f       	andi	r24, 0xFD	; 253
    17ea:	8c 93       	st	X, r24
	TCCR1B |=  (MASK_BIT << WGM12);
    17ec:	ae e4       	ldi	r26, 0x4E	; 78
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	ee e4       	ldi	r30, 0x4E	; 78
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	88 60       	ori	r24, 0x08	; 8
    17f8:	8c 93       	st	X, r24
	TCCR1B &= ~(MASK_BIT << WGM13);
    17fa:	ae e4       	ldi	r26, 0x4E	; 78
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	ee e4       	ldi	r30, 0x4E	; 78
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	8f 7e       	andi	r24, 0xEF	; 239
    1806:	8c 93       	st	X, r24
	#else
	#error "Timer1 Mode has a wrong configuration"
	#endif
	
	/* Mask the three bits of Timer1 Prescaler */
	TCCR1B &= 0xF8;
    1808:	ae e4       	ldi	r26, 0x4E	; 78
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	ee e4       	ldi	r30, 0x4E	; 78
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	88 7f       	andi	r24, 0xF8	; 248
    1814:	8c 93       	st	X, r24
	#elif TIMER1_PRES == PRES_NO
	TCCR1B |=  (MASK_BIT << CS10);
	TCCR1B &= ~(MASK_BIT << CS11);
	TCCR1B &= ~(MASK_BIT << CS12);
	#elif TIMER1_PRES == PRES_8
	TCCR1B &= ~(MASK_BIT << CS10);
    1816:	ae e4       	ldi	r26, 0x4E	; 78
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	ee e4       	ldi	r30, 0x4E	; 78
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	8e 7f       	andi	r24, 0xFE	; 254
    1822:	8c 93       	st	X, r24
	TCCR1B |=  (MASK_BIT << CS11);
    1824:	ae e4       	ldi	r26, 0x4E	; 78
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	ee e4       	ldi	r30, 0x4E	; 78
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	82 60       	ori	r24, 0x02	; 2
    1830:	8c 93       	st	X, r24
	TCCR1B &= ~(MASK_BIT << CS12);
    1832:	ae e4       	ldi	r26, 0x4E	; 78
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	ee e4       	ldi	r30, 0x4E	; 78
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	8b 7f       	andi	r24, 0xFB	; 251
    183e:	8c 93       	st	X, r24
	#elif OC1A_MODE == OCRB_TOGGLE
	SET_BIT(TCCR1A,COM1A0);
	CLR_BIT(TCCR1A,COM1A1);
	
	#elif OC1A_MODE == OCRB_NON_INVERTING
	CLR_BIT(TCCR1A,COM1A0);
    1840:	af e4       	ldi	r26, 0x4F	; 79
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	ef e4       	ldi	r30, 0x4F	; 79
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	8f 7b       	andi	r24, 0xBF	; 191
    184c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
    184e:	af e4       	ldi	r26, 0x4F	; 79
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	ef e4       	ldi	r30, 0x4F	; 79
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	80 68       	ori	r24, 0x80	; 128
    185a:	8c 93       	st	X, r24
	#elif OC1B_MODE == OCRB_TOGGLE
	SET_BIT(TCCR1A,COM1B0);
	CLR_BIT(TCCR1A,COM1B1);
	
	#elif OC1B_MODE == OCRB_NON_INVERTING
	CLR_BIT(TCCR1A,COM1B0);
    185c:	af e4       	ldi	r26, 0x4F	; 79
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	ef e4       	ldi	r30, 0x4F	; 79
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	8f 7e       	andi	r24, 0xEF	; 239
    1868:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1B1);
    186a:	af e4       	ldi	r26, 0x4F	; 79
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	ef e4       	ldi	r30, 0x4F	; 79
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	80 62       	ori	r24, 0x20	; 32
    1876:	8c 93       	st	X, r24
	
	#else
	#error "Timer1 OCRB mode wrong cmofigration"
	#endif

	return Local_enuErrorState;	
    1878:	89 81       	ldd	r24, Y+1	; 0x01
}
    187a:	0f 90       	pop	r0
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <TIMER1_enuDelayMilliSecondSyn>:

ES_t TIMER1_enuDelayMilliSecondSyn(u32 Copy_u32DelayTime_ms)
{
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	00 d0       	rcall	.+0      	; 0x1888 <TIMER1_enuDelayMilliSecondSyn+0x6>
    1888:	00 d0       	rcall	.+0      	; 0x188a <TIMER1_enuDelayMilliSecondSyn+0x8>
    188a:	0f 92       	push	r0
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	6a 83       	std	Y+2, r22	; 0x02
    1892:	7b 83       	std	Y+3, r23	; 0x03
    1894:	8c 83       	std	Y+4, r24	; 0x04
    1896:	9d 83       	std	Y+5, r25	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    189c:	89 81       	ldd	r24, Y+1	; 0x01
}
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <TIMER1_enuDelayMilliSecondASyn>:

ES_t TIMER1_enuDelayMilliSecondASyn(u32 Copy_u32DelayTime_ms, void (*Copy_PFunApp)(void *), void *Copy_PParameterApp)
{
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	29 97       	sbiw	r28, 0x09	; 9
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	de bf       	out	0x3e, r29	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	cd bf       	out	0x3d, r28	; 61
    18c2:	6a 83       	std	Y+2, r22	; 0x02
    18c4:	7b 83       	std	Y+3, r23	; 0x03
    18c6:	8c 83       	std	Y+4, r24	; 0x04
    18c8:	9d 83       	std	Y+5, r25	; 0x05
    18ca:	5f 83       	std	Y+7, r21	; 0x07
    18cc:	4e 83       	std	Y+6, r20	; 0x06
    18ce:	39 87       	std	Y+9, r19	; 0x09
    18d0:	28 87       	std	Y+8, r18	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    18d8:	29 96       	adiw	r28, 0x09	; 9
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	de bf       	out	0x3e, r29	; 62
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	cd bf       	out	0x3d, r28	; 61
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	08 95       	ret

000018ea <TIMER1_enuSetPreload>:

ES_t TIMER1_enuSetPreload(u8 Copy_u8PreloadValue)
{
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <TIMER1_enuSetPreload+0x6>
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <TIMER1_enuSetOutputCompareRegisterChannelA>:

ES_t TIMER1_enuSetOutputCompareRegisterChannelA(u16 Copy_u8OCRValue)
{
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	00 d0       	rcall	.+0      	; 0x190c <TIMER1_enuSetOutputCompareRegisterChannelA+0x6>
    190c:	0f 92       	push	r0
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
    1912:	9b 83       	std	Y+3, r25	; 0x03
    1914:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	89 83       	std	Y+1, r24	; 0x01

	OCR1A = Copy_u8OCRValue;
    191a:	ea e4       	ldi	r30, 0x4A	; 74
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	9b 81       	ldd	r25, Y+3	; 0x03
    1922:	91 83       	std	Z+1, r25	; 0x01
    1924:	80 83       	st	Z, r24
	Local_enuErrorState = ES_OK;
    1926:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    1928:	89 81       	ldd	r24, Y+1	; 0x01
}
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <TIMER1_enuSetOutputCompareRegisterChannelB>:

ES_t TIMER1_enuSetOutputCompareRegisterChannelB(u16 Copy_u8OCRValue)
{
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	00 d0       	rcall	.+0      	; 0x193c <TIMER1_enuSetOutputCompareRegisterChannelB+0x6>
    193c:	0f 92       	push	r0
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	9b 83       	std	Y+3, r25	; 0x03
    1944:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	89 83       	std	Y+1, r24	; 0x01

	OCR1B = Copy_u8OCRValue;
    194a:	e8 e4       	ldi	r30, 0x48	; 72
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	9b 81       	ldd	r25, Y+3	; 0x03
    1952:	91 83       	std	Z+1, r25	; 0x01
    1954:	80 83       	st	Z, r24
	Local_enuErrorState = ES_OK;
    1956:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    1958:	89 81       	ldd	r24, Y+1	; 0x01
}
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	08 95       	ret

00001966 <TIMER1_enuSetCALLBACK_OVF>:

ES_t TIMER1_enuSetCALLBACK_OVF(void (*Copy_PFunApp)(void *), void *Copy_PParameterApp)
{
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	00 d0       	rcall	.+0      	; 0x196c <TIMER1_enuSetCALLBACK_OVF+0x6>
    196c:	00 d0       	rcall	.+0      	; 0x196e <TIMER1_enuSetCALLBACK_OVF+0x8>
    196e:	0f 92       	push	r0
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	9b 83       	std	Y+3, r25	; 0x03
    1976:	8a 83       	std	Y+2, r24	; 0x02
    1978:	7d 83       	std	Y+5, r23	; 0x05
    197a:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    1980:	89 81       	ldd	r24, Y+1	; 0x01
}
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	08 95       	ret

00001992 <TIMER1_enuSetCALLBACK_CTC_ChannelA>:

ES_t TIMER1_enuSetCALLBACK_CTC_ChannelA(void (*Copy_PFunApp)(void *), void *Copy_PParameterApp)
{
    1992:	df 93       	push	r29
    1994:	cf 93       	push	r28
    1996:	00 d0       	rcall	.+0      	; 0x1998 <TIMER1_enuSetCALLBACK_CTC_ChannelA+0x6>
    1998:	00 d0       	rcall	.+0      	; 0x199a <TIMER1_enuSetCALLBACK_CTC_ChannelA+0x8>
    199a:	0f 92       	push	r0
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	9b 83       	std	Y+3, r25	; 0x03
    19a2:	8a 83       	std	Y+2, r24	; 0x02
    19a4:	7d 83       	std	Y+5, r23	; 0x05
    19a6:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	cf 91       	pop	r28
    19ba:	df 91       	pop	r29
    19bc:	08 95       	ret

000019be <TIMER1_enuSetCALLBACK_CTC_ChannelB>:

ES_t TIMER1_enuSetCALLBACK_CTC_ChannelB(void (*Copy_PFunApp)(void *), void *Copy_PParameterApp)
{
    19be:	df 93       	push	r29
    19c0:	cf 93       	push	r28
    19c2:	00 d0       	rcall	.+0      	; 0x19c4 <TIMER1_enuSetCALLBACK_CTC_ChannelB+0x6>
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <TIMER1_enuSetCALLBACK_CTC_ChannelB+0x8>
    19c6:	0f 92       	push	r0
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	9b 83       	std	Y+3, r25	; 0x03
    19ce:	8a 83       	std	Y+2, r24	; 0x02
    19d0:	7d 83       	std	Y+5, r23	; 0x05
    19d2:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <TIMER1_enuSetCALLBACK_ICU>:

ES_t TIMER1_enuSetCALLBACK_ICU(void (*Copy_PFunApp)(void *), void *Copy_PParameterApp)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <TIMER1_enuSetCALLBACK_ICU+0x6>
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <TIMER1_enuSetCALLBACK_ICU+0x8>
    19f2:	0f 92       	push	r0
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	9b 83       	std	Y+3, r25	; 0x03
    19fa:	8a 83       	std	Y+2, r24	; 0x02
    19fc:	7d 83       	std	Y+5, r23	; 0x05
    19fe:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <TIMER1_enuEnableOVFInterrupt>:

ES_t TIMER1_enuEnableOVFInterrupt(void)
{
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	0f 92       	push	r0
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a26:	0f 90       	pop	r0
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <TIMER1_enuEnableCTCInterruptChannelA>:

ES_t TIMER1_enuEnableCTCInterruptChannelA(void)
{
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	0f 92       	push	r0
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a3e:	0f 90       	pop	r0
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	08 95       	ret

00001a46 <TIMER1_enuEnableCTCInterruptChannelB>:

ES_t TIMER1_enuEnableCTCInterruptChannelB(void)
{
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	0f 92       	push	r0
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a56:	0f 90       	pop	r0
    1a58:	cf 91       	pop	r28
    1a5a:	df 91       	pop	r29
    1a5c:	08 95       	ret

00001a5e <TIMER1_enuPrepareICU>:
EDGE_STATE_t ICU_enuEdgeDetect = FAILLING_DETECT;
ICU_STATE_t ICU_enuState = start;
u16 TimeOn = 0, TimeTotal = 0;

ES_t TIMER1_enuPrepareICU(EDGE_STATE_t Copy_enuEdgeState, NOISE_CANCELER_STATE_t Copy_enuNoiseCancelerState)
{
    1a5e:	df 93       	push	r29
    1a60:	cf 93       	push	r28
    1a62:	00 d0       	rcall	.+0      	; 0x1a64 <TIMER1_enuPrepareICU+0x6>
    1a64:	0f 92       	push	r0
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
    1a6a:	8a 83       	std	Y+2, r24	; 0x02
    1a6c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	89 83       	std	Y+1, r24	; 0x01

	/* Mask the three bits of Timer1 Prescaler */
	TCCR1B &= 0xF8;
    1a72:	ae e4       	ldi	r26, 0x4E	; 78
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	ee e4       	ldi	r30, 0x4E	; 78
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	88 7f       	andi	r24, 0xF8	; 248
    1a7e:	8c 93       	st	X, r24
	#elif TIMER1_PRES == PRES_NO
	TCCR1B |=  (MASK_BIT << CS10);
	TCCR1B &= ~(MASK_BIT << CS11);
	TCCR1B &= ~(MASK_BIT << CS12);
	#elif TIMER1_PRES == PRES_8
	TCCR1B &= ~(MASK_BIT << CS10);
    1a80:	ae e4       	ldi	r26, 0x4E	; 78
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	ee e4       	ldi	r30, 0x4E	; 78
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	8e 7f       	andi	r24, 0xFE	; 254
    1a8c:	8c 93       	st	X, r24
	TCCR1B |=  (MASK_BIT << CS11);
    1a8e:	ae e4       	ldi	r26, 0x4E	; 78
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	ee e4       	ldi	r30, 0x4E	; 78
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	82 60       	ori	r24, 0x02	; 2
    1a9a:	8c 93       	st	X, r24
	TCCR1B &= ~(MASK_BIT << CS12);
    1a9c:	ae e4       	ldi	r26, 0x4E	; 78
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	ee e4       	ldi	r30, 0x4E	; 78
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	8b 7f       	andi	r24, 0xFB	; 251
    1aa8:	8c 93       	st	X, r24
	TCCR1B |=  (MASK_BIT << CS12);
	#else
	#error "Timer1 Prescaler has a wrong configuration"
	#endif
	
	ICU_enuEdgeDetect = Copy_enuEdgeState;
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	80 93 0d 02 	sts	0x020D, r24
	if(Copy_enuEdgeState == FAILLING_DETECT)
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	88 23       	and	r24, r24
    1ab4:	41 f4       	brne	.+16     	; 0x1ac6 <TIMER1_enuPrepareICU+0x68>
	{
		TCCR1B &= ~(MASK_BIT << ICES1);
    1ab6:	ae e4       	ldi	r26, 0x4E	; 78
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	ee e4       	ldi	r30, 0x4E	; 78
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	8f 7b       	andi	r24, 0xBF	; 191
    1ac2:	8c 93       	st	X, r24
    1ac4:	0a c0       	rjmp	.+20     	; 0x1ada <TIMER1_enuPrepareICU+0x7c>
	}
	else if (Copy_enuEdgeState == RISING_DETECT)
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	39 f4       	brne	.+14     	; 0x1ada <TIMER1_enuPrepareICU+0x7c>
	{
		TCCR1B |=  (MASK_BIT << ICES1);
    1acc:	ae e4       	ldi	r26, 0x4E	; 78
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	ee e4       	ldi	r30, 0x4E	; 78
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	80 64       	ori	r24, 0x40	; 64
    1ad8:	8c 93       	st	X, r24
	}
	
	if(Copy_enuNoiseCancelerState == DISABLE_NOISE_CANCELER)
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	88 23       	and	r24, r24
    1ade:	41 f4       	brne	.+16     	; 0x1af0 <TIMER1_enuPrepareICU+0x92>
	{
		TCCR1B &= ~(MASK_BIT << ICNC1);
    1ae0:	ae e4       	ldi	r26, 0x4E	; 78
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	ee e4       	ldi	r30, 0x4E	; 78
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	8f 77       	andi	r24, 0x7F	; 127
    1aec:	8c 93       	st	X, r24
    1aee:	0a c0       	rjmp	.+20     	; 0x1b04 <TIMER1_enuPrepareICU+0xa6>
	}
	else if (Copy_enuNoiseCancelerState == ENABLE_NOISE_CANCELER)
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	81 30       	cpi	r24, 0x01	; 1
    1af4:	39 f4       	brne	.+14     	; 0x1b04 <TIMER1_enuPrepareICU+0xa6>
	{
		TCCR1B |=  (MASK_BIT << ICNC1);
    1af6:	ae e4       	ldi	r26, 0x4E	; 78
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	ee e4       	ldi	r30, 0x4E	; 78
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	80 68       	ori	r24, 0x80	; 128
    1b02:	8c 93       	st	X, r24
	}

	/* put 0 at the registers as initial value */
	ICR1H = 0;
    1b04:	e7 e4       	ldi	r30, 0x47	; 71
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	10 82       	st	Z, r1
	ICR1L = 0;
    1b0a:	e6 e4       	ldi	r30, 0x46	; 70
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	10 82       	st	Z, r1
	TCNT1H = 0;
    1b10:	ed e4       	ldi	r30, 0x4D	; 77
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	10 82       	st	Z, r1
	TCNT1L = 0;
    1b16:	ec e4       	ldi	r30, 0x4C	; 76
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	10 82       	st	Z, r1
	
	Local_enuErrorState = ES_OK;
    1b1c:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <TIMER1_enuCalculateICUResults>:

ES_t TIMER1_enuCalculateICUResults(f32 *Copy_Pf32Frequency, f32 *Copy_Pf32DutyCycle)
{
    1b2c:	ef 92       	push	r14
    1b2e:	ff 92       	push	r15
    1b30:	0f 93       	push	r16
    1b32:	1f 93       	push	r17
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	29 97       	sbiw	r28, 0x09	; 9
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	9f 83       	std	Y+7, r25	; 0x07
    1b4a:	8e 83       	std	Y+6, r24	; 0x06
    1b4c:	79 87       	std	Y+9, r23	; 0x09
    1b4e:	68 87       	std	Y+8, r22	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	8d 83       	std	Y+5, r24	; 0x05
	
	f32 Local_f32Time = 0;
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	a0 e0       	ldi	r26, 0x00	; 0
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	89 83       	std	Y+1, r24	; 0x01
    1b5e:	9a 83       	std	Y+2, r25	; 0x02
    1b60:	ab 83       	std	Y+3, r26	; 0x03
    1b62:	bc 83       	std	Y+4, r27	; 0x04

	if(Copy_Pf32DutyCycle != NULL && Copy_Pf32Frequency != NULL)
    1b64:	88 85       	ldd	r24, Y+8	; 0x08
    1b66:	99 85       	ldd	r25, Y+9	; 0x09
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <TIMER1_enuCalculateICUResults+0x42>
    1b6c:	72 c0       	rjmp	.+228    	; 0x1c52 <TIMER1_enuCalculateICUResults+0x126>
    1b6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b70:	9f 81       	ldd	r25, Y+7	; 0x07
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <TIMER1_enuCalculateICUResults+0x4c>
    1b76:	6d c0       	rjmp	.+218    	; 0x1c52 <TIMER1_enuCalculateICUResults+0x126>
	{
		if(ICU_enuState == Off)
    1b78:	80 91 0e 02 	lds	r24, 0x020E
    1b7c:	83 30       	cpi	r24, 0x03	; 3
    1b7e:	09 f0       	breq	.+2      	; 0x1b82 <TIMER1_enuCalculateICUResults+0x56>
    1b80:	6a c0       	rjmp	.+212    	; 0x1c56 <TIMER1_enuCalculateICUResults+0x12a>
		{
			*Copy_Pf32DutyCycle = (f32)(TimeOn * 100.0 / TimeTotal);
    1b82:	80 91 0f 02 	lds	r24, 0x020F
    1b86:	90 91 10 02 	lds	r25, 0x0210
    1b8a:	cc 01       	movw	r24, r24
    1b8c:	a0 e0       	ldi	r26, 0x00	; 0
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	bc 01       	movw	r22, r24
    1b92:	cd 01       	movw	r24, r26
    1b94:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	bc 01       	movw	r22, r24
    1b9e:	cd 01       	movw	r24, r26
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	48 ec       	ldi	r20, 0xC8	; 200
    1ba6:	52 e4       	ldi	r21, 0x42	; 66
    1ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	7c 01       	movw	r14, r24
    1bb2:	8d 01       	movw	r16, r26
    1bb4:	80 91 11 02 	lds	r24, 0x0211
    1bb8:	90 91 12 02 	lds	r25, 0x0212
    1bbc:	cc 01       	movw	r24, r24
    1bbe:	a0 e0       	ldi	r26, 0x00	; 0
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	bc 01       	movw	r22, r24
    1bc4:	cd 01       	movw	r24, r26
    1bc6:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1bca:	9b 01       	movw	r18, r22
    1bcc:	ac 01       	movw	r20, r24
    1bce:	c8 01       	movw	r24, r16
    1bd0:	b7 01       	movw	r22, r14
    1bd2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	e8 85       	ldd	r30, Y+8	; 0x08
    1bdc:	f9 85       	ldd	r31, Y+9	; 0x09
    1bde:	80 83       	st	Z, r24
    1be0:	91 83       	std	Z+1, r25	; 0x01
    1be2:	a2 83       	std	Z+2, r26	; 0x02
    1be4:	b3 83       	std	Z+3, r27	; 0x03
			Local_f32Time = ((f32)((TimeTotal * TIMER1_PRES) / (F_SYSTEM * 1000.0)));
    1be6:	80 91 11 02 	lds	r24, 0x0211
    1bea:	90 91 12 02 	lds	r25, 0x0212
    1bee:	88 0f       	add	r24, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	88 0f       	add	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	cc 01       	movw	r24, r24
    1bfc:	a0 e0       	ldi	r26, 0x00	; 0
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	bc 01       	movw	r22, r24
    1c02:	cd 01       	movw	r24, r26
    1c04:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	bc 01       	movw	r22, r24
    1c0e:	cd 01       	movw	r24, r26
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	34 e2       	ldi	r19, 0x24	; 36
    1c14:	44 ef       	ldi	r20, 0xF4	; 244
    1c16:	5a e4       	ldi	r21, 0x4A	; 74
    1c18:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	89 83       	std	Y+1, r24	; 0x01
    1c22:	9a 83       	std	Y+2, r25	; 0x02
    1c24:	ab 83       	std	Y+3, r26	; 0x03
    1c26:	bc 83       	std	Y+4, r27	; 0x04
			*Copy_Pf32Frequency = ((f32)(1.0 / Local_f32Time));
    1c28:	60 e0       	ldi	r22, 0x00	; 0
    1c2a:	70 e0       	ldi	r23, 0x00	; 0
    1c2c:	80 e8       	ldi	r24, 0x80	; 128
    1c2e:	9f e3       	ldi	r25, 0x3F	; 63
    1c30:	29 81       	ldd	r18, Y+1	; 0x01
    1c32:	3a 81       	ldd	r19, Y+2	; 0x02
    1c34:	4b 81       	ldd	r20, Y+3	; 0x03
    1c36:	5c 81       	ldd	r21, Y+4	; 0x04
    1c38:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	ee 81       	ldd	r30, Y+6	; 0x06
    1c42:	ff 81       	ldd	r31, Y+7	; 0x07
    1c44:	80 83       	st	Z, r24
    1c46:	91 83       	std	Z+1, r25	; 0x01
    1c48:	a2 83       	std	Z+2, r26	; 0x02
    1c4a:	b3 83       	std	Z+3, r27	; 0x03
			
			ICU_enuState = start;
    1c4c:	10 92 0e 02 	sts	0x020E, r1
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <TIMER1_enuCalculateICUResults+0x12a>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1c52:	82 e0       	ldi	r24, 0x02	; 2
    1c54:	8d 83       	std	Y+5, r24	; 0x05
	}

	return Local_enuErrorState;
    1c56:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1c58:	29 96       	adiw	r28, 0x09	; 9
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	1f 91       	pop	r17
    1c6a:	0f 91       	pop	r16
    1c6c:	ff 90       	pop	r15
    1c6e:	ef 90       	pop	r14
    1c70:	08 95       	ret

00001c72 <TIMER1_enuEnableInputCaptureUnitInterrupt>:


ES_t TIMER1_enuEnableInputCaptureUnitInterrupt(void)
{
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	0f 92       	push	r0
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	89 83       	std	Y+1, r24	; 0x01

	TIMSK |= (MASK_BIT << TICIE1);
    1c80:	a9 e5       	ldi	r26, 0x59	; 89
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e9 e5       	ldi	r30, 0x59	; 89
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	80 62       	ori	r24, 0x20	; 32
    1c8c:	8c 93       	st	X, r24

	Local_enuErrorState = ES_OK;
    1c8e:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    1c90:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c92:	0f 90       	pop	r0
    1c94:	cf 91       	pop	r28
    1c96:	df 91       	pop	r29
    1c98:	08 95       	ret

00001c9a <TIMER1_enuGeneratePWM_OCR1A>:



ES_t TIMER1_enuGeneratePWM_OCR1A(u8 Copy_u8DutyCycle)
{
    1c9a:	0f 93       	push	r16
    1c9c:	1f 93       	push	r17
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	00 d0       	rcall	.+0      	; 0x1ca4 <TIMER1_enuGeneratePWM_OCR1A+0xa>
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    1ca8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	89 83       	std	Y+1, r24	; 0x01
	
	#if OC1A_MODE == OCRA_NON_INVERTING
		#if TIMER1_MODE == TIMER1_FAST_PWM_8B || TIMER1_MODE == TIMER1_PWM_PHCO_8B
		OCR1A = ((u32)Copy_u8DutyCycle*256)/100;
    1cae:	0a e4       	ldi	r16, 0x4A	; 74
    1cb0:	10 e0       	ldi	r17, 0x00	; 0
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	88 2f       	mov	r24, r24
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	a0 e0       	ldi	r26, 0x00	; 0
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	ba 2f       	mov	r27, r26
    1cbe:	a9 2f       	mov	r26, r25
    1cc0:	98 2f       	mov	r25, r24
    1cc2:	88 27       	eor	r24, r24
    1cc4:	24 e6       	ldi	r18, 0x64	; 100
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e0       	ldi	r20, 0x00	; 0
    1cca:	50 e0       	ldi	r21, 0x00	; 0
    1ccc:	bc 01       	movw	r22, r24
    1cce:	cd 01       	movw	r24, r26
    1cd0:	0e 94 66 37 	call	0x6ecc	; 0x6ecc <__udivmodsi4>
    1cd4:	da 01       	movw	r26, r20
    1cd6:	c9 01       	movw	r24, r18
    1cd8:	f8 01       	movw	r30, r16
    1cda:	91 83       	std	Z+1, r25	; 0x01
    1cdc:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    1cde:	19 82       	std	Y+1, r1	; 0x01
	#else
	#error "Timer 1 OCRA Mode error For PWM"
	Local_enuErrorState = ES_OK;
	#endif
	
	return Local_enuErrorState;
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	1f 91       	pop	r17
    1cec:	0f 91       	pop	r16
    1cee:	08 95       	ret

00001cf0 <TIMER1_enuGeneratePWM_OCR1B>:

ES_t TIMER1_enuGeneratePWM_OCR1B(u8 Copy_u8DutyCycle)
{
    1cf0:	0f 93       	push	r16
    1cf2:	1f 93       	push	r17
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	00 d0       	rcall	.+0      	; 0x1cfa <TIMER1_enuGeneratePWM_OCR1B+0xa>
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	89 83       	std	Y+1, r24	; 0x01
	#if OC1B_MODE == OCRB_NON_INVERTING
		#if TIMER1_MODE == TIMER1_FAST_PWM_8B || TIMER1_MODE == TIMER1_PWM_PHCO_8B
		OCR1B = ((u32)Copy_u8DutyCycle*256)/100;
    1d04:	08 e4       	ldi	r16, 0x48	; 72
    1d06:	10 e0       	ldi	r17, 0x00	; 0
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	88 2f       	mov	r24, r24
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	a0 e0       	ldi	r26, 0x00	; 0
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	ba 2f       	mov	r27, r26
    1d14:	a9 2f       	mov	r26, r25
    1d16:	98 2f       	mov	r25, r24
    1d18:	88 27       	eor	r24, r24
    1d1a:	24 e6       	ldi	r18, 0x64	; 100
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	40 e0       	ldi	r20, 0x00	; 0
    1d20:	50 e0       	ldi	r21, 0x00	; 0
    1d22:	bc 01       	movw	r22, r24
    1d24:	cd 01       	movw	r24, r26
    1d26:	0e 94 66 37 	call	0x6ecc	; 0x6ecc <__udivmodsi4>
    1d2a:	da 01       	movw	r26, r20
    1d2c:	c9 01       	movw	r24, r18
    1d2e:	f8 01       	movw	r30, r16
    1d30:	91 83       	std	Z+1, r25	; 0x01
    1d32:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    1d34:	19 82       	std	Y+1, r1	; 0x01
	#else
	#error "Timer 1 OCRB Mode error For PWM"
	Local_enuErrorState = ES_OK;
	#endif
		
	return Local_enuErrorState;
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	1f 91       	pop	r17
    1d42:	0f 91       	pop	r16
    1d44:	08 95       	ret

00001d46 <VECT_TIMER1_ICU>:




ISR(VECT_TIMER1_ICU)
{
    1d46:	1f 92       	push	r1
    1d48:	0f 92       	push	r0
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	0f 92       	push	r0
    1d4e:	11 24       	eor	r1, r1
    1d50:	2f 93       	push	r18
    1d52:	3f 93       	push	r19
    1d54:	8f 93       	push	r24
    1d56:	9f 93       	push	r25
    1d58:	af 93       	push	r26
    1d5a:	bf 93       	push	r27
    1d5c:	ef 93       	push	r30
    1d5e:	ff 93       	push	r31
    1d60:	df 93       	push	r29
    1d62:	cf 93       	push	r28
    1d64:	00 d0       	rcall	.+0      	; 0x1d66 <VECT_TIMER1_ICU+0x20>
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
	if(ICU_enuState == start)
    1d6a:	80 91 0e 02 	lds	r24, 0x020E
    1d6e:	88 23       	and	r24, r24
    1d70:	89 f5       	brne	.+98     	; 0x1dd4 <VECT_TIMER1_ICU+0x8e>
	{
		/* put 0 at the registers as initial value */
		ICR1H = 0;
    1d72:	e7 e4       	ldi	r30, 0x47	; 71
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	10 82       	st	Z, r1
		ICR1L = 0;
    1d78:	e6 e4       	ldi	r30, 0x46	; 70
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	10 82       	st	Z, r1
		TCNT1H = 0;
    1d7e:	ed e4       	ldi	r30, 0x4D	; 77
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	10 82       	st	Z, r1
		TCNT1L = 0;
    1d84:	ec e4       	ldi	r30, 0x4C	; 76
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	10 82       	st	Z, r1
		
		ICU_enuEdgeDetect = !ICU_enuEdgeDetect;
    1d8a:	80 91 0d 02 	lds	r24, 0x020D
    1d8e:	1a 82       	std	Y+2, r1	; 0x02
    1d90:	88 23       	and	r24, r24
    1d92:	11 f4       	brne	.+4      	; 0x1d98 <VECT_TIMER1_ICU+0x52>
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	8a 83       	std	Y+2, r24	; 0x02
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	80 93 0d 02 	sts	0x020D, r24
		if(ICU_enuEdgeDetect == FAILLING_DETECT)
    1d9e:	80 91 0d 02 	lds	r24, 0x020D
    1da2:	88 23       	and	r24, r24
    1da4:	41 f4       	brne	.+16     	; 0x1db6 <VECT_TIMER1_ICU+0x70>
		{
			TCCR1B &= ~(MASK_BIT << ICES1);
    1da6:	ae e4       	ldi	r26, 0x4E	; 78
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	ee e4       	ldi	r30, 0x4E	; 78
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	8f 7b       	andi	r24, 0xBF	; 191
    1db2:	8c 93       	st	X, r24
    1db4:	0b c0       	rjmp	.+22     	; 0x1dcc <VECT_TIMER1_ICU+0x86>
		}
		else if (ICU_enuEdgeDetect == RISING_DETECT)
    1db6:	80 91 0d 02 	lds	r24, 0x020D
    1dba:	81 30       	cpi	r24, 0x01	; 1
    1dbc:	39 f4       	brne	.+14     	; 0x1dcc <VECT_TIMER1_ICU+0x86>
		{
			TCCR1B |=  (MASK_BIT << ICES1);
    1dbe:	ae e4       	ldi	r26, 0x4E	; 78
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	ee e4       	ldi	r30, 0x4E	; 78
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	80 64       	ori	r24, 0x40	; 64
    1dca:	8c 93       	st	X, r24
		}
		
		ICU_enuState = Ton;
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	80 93 0e 02 	sts	0x020E, r24
    1dd2:	67 c0       	rjmp	.+206    	; 0x1ea2 <VECT_TIMER1_ICU+0x15c>
	}
	else if(ICU_enuState == Ton)
    1dd4:	80 91 0e 02 	lds	r24, 0x020E
    1dd8:	81 30       	cpi	r24, 0x01	; 1
    1dda:	09 f0       	breq	.+2      	; 0x1dde <VECT_TIMER1_ICU+0x98>
    1ddc:	40 c0       	rjmp	.+128    	; 0x1e5e <VECT_TIMER1_ICU+0x118>
	{
		TimeOn = ICR1L;
    1dde:	e6 e4       	ldi	r30, 0x46	; 70
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	88 2f       	mov	r24, r24
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	90 93 10 02 	sts	0x0210, r25
    1dec:	80 93 0f 02 	sts	0x020F, r24
		TimeOn |= ((u16)(ICR1H << 8));
    1df0:	e7 e4       	ldi	r30, 0x47	; 71
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	88 2f       	mov	r24, r24
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	98 2f       	mov	r25, r24
    1dfc:	88 27       	eor	r24, r24
    1dfe:	9c 01       	movw	r18, r24
    1e00:	80 91 0f 02 	lds	r24, 0x020F
    1e04:	90 91 10 02 	lds	r25, 0x0210
    1e08:	82 2b       	or	r24, r18
    1e0a:	93 2b       	or	r25, r19
    1e0c:	90 93 10 02 	sts	0x0210, r25
    1e10:	80 93 0f 02 	sts	0x020F, r24
		
		ICU_enuEdgeDetect = !ICU_enuEdgeDetect;
    1e14:	80 91 0d 02 	lds	r24, 0x020D
    1e18:	19 82       	std	Y+1, r1	; 0x01
    1e1a:	88 23       	and	r24, r24
    1e1c:	11 f4       	brne	.+4      	; 0x1e22 <VECT_TIMER1_ICU+0xdc>
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	89 83       	std	Y+1, r24	; 0x01
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	80 93 0d 02 	sts	0x020D, r24
		if(ICU_enuEdgeDetect == FAILLING_DETECT)
    1e28:	80 91 0d 02 	lds	r24, 0x020D
    1e2c:	88 23       	and	r24, r24
    1e2e:	41 f4       	brne	.+16     	; 0x1e40 <VECT_TIMER1_ICU+0xfa>
		{
			TCCR1B &= ~(MASK_BIT << ICES1);
    1e30:	ae e4       	ldi	r26, 0x4E	; 78
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	ee e4       	ldi	r30, 0x4E	; 78
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	8f 7b       	andi	r24, 0xBF	; 191
    1e3c:	8c 93       	st	X, r24
    1e3e:	0b c0       	rjmp	.+22     	; 0x1e56 <VECT_TIMER1_ICU+0x110>
		}
		else if (ICU_enuEdgeDetect == RISING_DETECT)
    1e40:	80 91 0d 02 	lds	r24, 0x020D
    1e44:	81 30       	cpi	r24, 0x01	; 1
    1e46:	39 f4       	brne	.+14     	; 0x1e56 <VECT_TIMER1_ICU+0x110>
		{
			TCCR1B |=  (MASK_BIT << ICES1);
    1e48:	ae e4       	ldi	r26, 0x4E	; 78
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	ee e4       	ldi	r30, 0x4E	; 78
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	80 64       	ori	r24, 0x40	; 64
    1e54:	8c 93       	st	X, r24
		}
		
		ICU_enuState = Ttotal;
    1e56:	82 e0       	ldi	r24, 0x02	; 2
    1e58:	80 93 0e 02 	sts	0x020E, r24
    1e5c:	22 c0       	rjmp	.+68     	; 0x1ea2 <VECT_TIMER1_ICU+0x15c>
	}
	else if(ICU_enuState == Ttotal)
    1e5e:	80 91 0e 02 	lds	r24, 0x020E
    1e62:	82 30       	cpi	r24, 0x02	; 2
    1e64:	f1 f4       	brne	.+60     	; 0x1ea2 <VECT_TIMER1_ICU+0x15c>
	{
		TimeTotal = ICR1L;
    1e66:	e6 e4       	ldi	r30, 0x46	; 70
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	88 2f       	mov	r24, r24
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	90 93 12 02 	sts	0x0212, r25
    1e74:	80 93 11 02 	sts	0x0211, r24
		TimeTotal |= ((u16)(ICR1H << 8));
    1e78:	e7 e4       	ldi	r30, 0x47	; 71
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	88 2f       	mov	r24, r24
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	98 2f       	mov	r25, r24
    1e84:	88 27       	eor	r24, r24
    1e86:	9c 01       	movw	r18, r24
    1e88:	80 91 11 02 	lds	r24, 0x0211
    1e8c:	90 91 12 02 	lds	r25, 0x0212
    1e90:	82 2b       	or	r24, r18
    1e92:	93 2b       	or	r25, r19
    1e94:	90 93 12 02 	sts	0x0212, r25
    1e98:	80 93 11 02 	sts	0x0211, r24
		
		ICU_enuState = Off;
    1e9c:	83 e0       	ldi	r24, 0x03	; 3
    1e9e:	80 93 0e 02 	sts	0x020E, r24
	}
    1ea2:	0f 90       	pop	r0
    1ea4:	0f 90       	pop	r0
    1ea6:	cf 91       	pop	r28
    1ea8:	df 91       	pop	r29
    1eaa:	ff 91       	pop	r31
    1eac:	ef 91       	pop	r30
    1eae:	bf 91       	pop	r27
    1eb0:	af 91       	pop	r26
    1eb2:	9f 91       	pop	r25
    1eb4:	8f 91       	pop	r24
    1eb6:	3f 91       	pop	r19
    1eb8:	2f 91       	pop	r18
    1eba:	0f 90       	pop	r0
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	0f 90       	pop	r0
    1ec0:	1f 90       	pop	r1
    1ec2:	18 95       	reti

00001ec4 <TIMER0_enuInit>:
u8 TIMER0_PRELOAD = 0;
u32 TIMER0_NUM_OVF = 0;
f32 TIMER0_f32OC0Value = 0;

ES_t TIMER0_enuInit(void)
{
    1ec4:	df 93       	push	r29
    1ec6:	cf 93       	push	r28
    1ec8:	0f 92       	push	r0
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	89 83       	std	Y+1, r24	; 0x01
	
	/* Mask the two bits of Wave Generation Mode */
	TCCR0 &= WGM_MASK;
    1ed2:	a3 e5       	ldi	r26, 0x53	; 83
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e3 e5       	ldi	r30, 0x53	; 83
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	87 7b       	andi	r24, 0xB7	; 183
    1ede:	8c 93       	st	X, r24
	TCCR0 &= ~(MASK_BIT << WGM01);
	#elif TIMER0_MODE == CTC
	TCCR0 &= ~(MASK_BIT << WGM00);
	TCCR0 |=  (MASK_BIT << WGM01);
	#elif TIMER0_MODE == FAST_PWM
	TCCR0 |=  (MASK_BIT << WGM00);
    1ee0:	a3 e5       	ldi	r26, 0x53	; 83
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	e3 e5       	ldi	r30, 0x53	; 83
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	80 64       	ori	r24, 0x40	; 64
    1eec:	8c 93       	st	X, r24
	TCCR0 |=  (MASK_BIT << WGM01);
    1eee:	a3 e5       	ldi	r26, 0x53	; 83
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	e3 e5       	ldi	r30, 0x53	; 83
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	88 60       	ori	r24, 0x08	; 8
    1efa:	8c 93       	st	X, r24
	#else
	#error "Timer0 Mode has a wrong configuration"
	#endif
	
	/* Mask the three bits of Timer0 Prescaler */
	TCCR0 &= PRESCALER_MASK;
    1efc:	a3 e5       	ldi	r26, 0x53	; 83
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	e3 e5       	ldi	r30, 0x53	; 83
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	88 7f       	andi	r24, 0xF8	; 248
    1f08:	8c 93       	st	X, r24
	#elif TIMER0_PRES == PRES_NO
	TCCR0 |=  (MASK_BIT << CS00);
	TCCR0 &= ~(MASK_BIT << CS01);
	TCCR0 &= ~(MASK_BIT << CS02);
	#elif TIMER0_PRES == PRES_8
	TCCR0 &= ~(MASK_BIT << CS00);
    1f0a:	a3 e5       	ldi	r26, 0x53	; 83
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	e3 e5       	ldi	r30, 0x53	; 83
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	8e 7f       	andi	r24, 0xFE	; 254
    1f16:	8c 93       	st	X, r24
	TCCR0 |=  (MASK_BIT << CS01);
    1f18:	a3 e5       	ldi	r26, 0x53	; 83
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	e3 e5       	ldi	r30, 0x53	; 83
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	82 60       	ori	r24, 0x02	; 2
    1f24:	8c 93       	st	X, r24
	TCCR0 &= ~(MASK_BIT << CS02);
    1f26:	a3 e5       	ldi	r26, 0x53	; 83
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	e3 e5       	ldi	r30, 0x53	; 83
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	8b 7f       	andi	r24, 0xFB	; 251
    1f32:	8c 93       	st	X, r24
	#else
	#error "Timer0 Prescaler has a wrong configuration"
	#endif
	
	/* Mask the two bits of Output Compare Pin (OC0) */
	TCCR0 &= COM_OC0_MASK;
    1f34:	a3 e5       	ldi	r26, 0x53	; 83
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e3 e5       	ldi	r30, 0x53	; 83
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	8f 7c       	andi	r24, 0xCF	; 207
    1f40:	8c 93       	st	X, r24
	TCCR0 |=  (MASK_BIT << COM01);
	#elif (OC0_MODE == SET_OC0 && (TIMER0_MODE == CTC))
	TCCR0 |=  (MASK_BIT << COM00);
	TCCR0 |=  (MASK_BIT << COM01);
	#elif ((OC0_MODE == NON_INVERTED) && (TIMER0_MODE == PHCO_PWM || TIMER0_MODE == FAST_PWM))
	TCCR0 &= ~(MASK_BIT << COM00);
    1f42:	a3 e5       	ldi	r26, 0x53	; 83
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	e3 e5       	ldi	r30, 0x53	; 83
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	8f 7e       	andi	r24, 0xEF	; 239
    1f4e:	8c 93       	st	X, r24
	TCCR0 |=  (MASK_BIT << COM01);
    1f50:	a3 e5       	ldi	r26, 0x53	; 83
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	e3 e5       	ldi	r30, 0x53	; 83
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	80 62       	ori	r24, 0x20	; 32
    1f5c:	8c 93       	st	X, r24
	TCCR0 |=  (MASK_BIT << COM01);
	#else
	#error "OC0 has a wrong configuration"
	#endif
	
	Local_enuErrorState = ES_OK;
    1f5e:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f62:	0f 90       	pop	r0
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	08 95       	ret

00001f6a <TIMER0_enuDelayMilliSecondSyn>:

ES_t TIMER0_enuDelayMilliSecondSyn(u32 Copy_u32DelayTime_ms)
{
    1f6a:	df 93       	push	r29
    1f6c:	cf 93       	push	r28
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
    1f72:	66 97       	sbiw	r28, 0x16	; 22
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	cd bf       	out	0x3d, r28	; 61
    1f7e:	6b 8b       	std	Y+19, r22	; 0x13
    1f80:	7c 8b       	std	Y+20, r23	; 0x14
    1f82:	8d 8b       	std	Y+21, r24	; 0x15
    1f84:	9e 8b       	std	Y+22, r25	; 0x16
	ES_t Local_enuErrorState = ES_NOK;
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	8a 8b       	std	Y+18, r24	; 0x12
	
	f32 Local_f32TimeOverFlow = 256.0 * TIMER0_PRES / F_SYSTEM;
    1f8a:	8f e6       	ldi	r24, 0x6F	; 111
    1f8c:	92 e1       	ldi	r25, 0x12	; 18
    1f8e:	a3 e8       	ldi	r26, 0x83	; 131
    1f90:	be e3       	ldi	r27, 0x3E	; 62
    1f92:	8e 87       	std	Y+14, r24	; 0x0e
    1f94:	9f 87       	std	Y+15, r25	; 0x0f
    1f96:	a8 8b       	std	Y+16, r26	; 0x10
    1f98:	b9 8b       	std	Y+17, r27	; 0x11
	f32 Local_f32Num_OVF_FLOAT = (f32)Copy_u32DelayTime_ms / Local_f32TimeOverFlow;
    1f9a:	6b 89       	ldd	r22, Y+19	; 0x13
    1f9c:	7c 89       	ldd	r23, Y+20	; 0x14
    1f9e:	8d 89       	ldd	r24, Y+21	; 0x15
    1fa0:	9e 89       	ldd	r25, Y+22	; 0x16
    1fa2:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	bc 01       	movw	r22, r24
    1fac:	cd 01       	movw	r24, r26
    1fae:	2e 85       	ldd	r18, Y+14	; 0x0e
    1fb0:	3f 85       	ldd	r19, Y+15	; 0x0f
    1fb2:	48 89       	ldd	r20, Y+16	; 0x10
    1fb4:	59 89       	ldd	r21, Y+17	; 0x11
    1fb6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	8a 87       	std	Y+10, r24	; 0x0a
    1fc0:	9b 87       	std	Y+11, r25	; 0x0b
    1fc2:	ac 87       	std	Y+12, r26	; 0x0c
    1fc4:	bd 87       	std	Y+13, r27	; 0x0d
	
	if((Local_f32Num_OVF_FLOAT - (u32)Local_f32Num_OVF_FLOAT) != 0.0)
    1fc6:	6a 85       	ldd	r22, Y+10	; 0x0a
    1fc8:	7b 85       	ldd	r23, Y+11	; 0x0b
    1fca:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fcc:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	bc 01       	movw	r22, r24
    1fd8:	cd 01       	movw	r24, r26
    1fda:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1fde:	9b 01       	movw	r18, r22
    1fe0:	ac 01       	movw	r20, r24
    1fe2:	6a 85       	ldd	r22, Y+10	; 0x0a
    1fe4:	7b 85       	ldd	r23, Y+11	; 0x0b
    1fe6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fe8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fea:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	bc 01       	movw	r22, r24
    1ff4:	cd 01       	movw	r24, r26
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	40 e0       	ldi	r20, 0x00	; 0
    1ffc:	50 e0       	ldi	r21, 0x00	; 0
    1ffe:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    2002:	88 23       	and	r24, r24
    2004:	09 f4       	brne	.+2      	; 0x2008 <TIMER0_enuDelayMilliSecondSyn+0x9e>
    2006:	6f c0       	rjmp	.+222    	; 0x20e6 <TIMER0_enuDelayMilliSecondSyn+0x17c>
	{
		u32 Local_u32Num_OVF_INT = (u32)Local_f32Num_OVF_FLOAT + 1;
    2008:	6a 85       	ldd	r22, Y+10	; 0x0a
    200a:	7b 85       	ldd	r23, Y+11	; 0x0b
    200c:	8c 85       	ldd	r24, Y+12	; 0x0c
    200e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	01 96       	adiw	r24, 0x01	; 1
    201a:	a1 1d       	adc	r26, r1
    201c:	b1 1d       	adc	r27, r1
    201e:	8e 83       	std	Y+6, r24	; 0x06
    2020:	9f 83       	std	Y+7, r25	; 0x07
    2022:	a8 87       	std	Y+8, r26	; 0x08
    2024:	b9 87       	std	Y+9, r27	; 0x09
		Local_f32Num_OVF_FLOAT = Local_f32Num_OVF_FLOAT - (u32)Local_f32Num_OVF_FLOAT;
    2026:	6a 85       	ldd	r22, Y+10	; 0x0a
    2028:	7b 85       	ldd	r23, Y+11	; 0x0b
    202a:	8c 85       	ldd	r24, Y+12	; 0x0c
    202c:	9d 85       	ldd	r25, Y+13	; 0x0d
    202e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	bc 01       	movw	r22, r24
    2038:	cd 01       	movw	r24, r26
    203a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    203e:	9b 01       	movw	r18, r22
    2040:	ac 01       	movw	r20, r24
    2042:	6a 85       	ldd	r22, Y+10	; 0x0a
    2044:	7b 85       	ldd	r23, Y+11	; 0x0b
    2046:	8c 85       	ldd	r24, Y+12	; 0x0c
    2048:	9d 85       	ldd	r25, Y+13	; 0x0d
    204a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	8a 87       	std	Y+10, r24	; 0x0a
    2054:	9b 87       	std	Y+11, r25	; 0x0b
    2056:	ac 87       	std	Y+12, r26	; 0x0c
    2058:	bd 87       	std	Y+13, r27	; 0x0d
		u8 Local_u32PreLoad = 256 - (256 * Local_f32Num_OVF_FLOAT);
    205a:	6a 85       	ldd	r22, Y+10	; 0x0a
    205c:	7b 85       	ldd	r23, Y+11	; 0x0b
    205e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2060:	9d 85       	ldd	r25, Y+13	; 0x0d
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e8       	ldi	r20, 0x80	; 128
    2068:	53 ec       	ldi	r21, 0xC3	; 195
    206a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	bc 01       	movw	r22, r24
    2074:	cd 01       	movw	r24, r26
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e8       	ldi	r20, 0x80	; 128
    207c:	53 e4       	ldi	r21, 0x43	; 67
    207e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	bc 01       	movw	r22, r24
    2088:	cd 01       	movw	r24, r26
    208a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	8d 83       	std	Y+5, r24	; 0x05
		TCNT0 = Local_u32PreLoad;
    2094:	e2 e5       	ldi	r30, 0x52	; 82
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	8d 81       	ldd	r24, Y+5	; 0x05
    209a:	80 83       	st	Z, r24
    209c:	1b c0       	rjmp	.+54     	; 0x20d4 <TIMER0_enuDelayMilliSecondSyn+0x16a>
		while(Local_u32Num_OVF_INT)
		{
			while(!((TIFR >> TOV0) & MASK_BIT));
    209e:	e8 e5       	ldi	r30, 0x58	; 88
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	88 2f       	mov	r24, r24
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	81 70       	andi	r24, 0x01	; 1
    20aa:	90 70       	andi	r25, 0x00	; 0
    20ac:	00 97       	sbiw	r24, 0x00	; 0
    20ae:	b9 f3       	breq	.-18     	; 0x209e <TIMER0_enuDelayMilliSecondSyn+0x134>
			TIFR |= (MASK_BIT << TOV0);
    20b0:	a8 e5       	ldi	r26, 0x58	; 88
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e8 e5       	ldi	r30, 0x58	; 88
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	81 60       	ori	r24, 0x01	; 1
    20bc:	8c 93       	st	X, r24
			Local_u32Num_OVF_INT--;
    20be:	8e 81       	ldd	r24, Y+6	; 0x06
    20c0:	9f 81       	ldd	r25, Y+7	; 0x07
    20c2:	a8 85       	ldd	r26, Y+8	; 0x08
    20c4:	b9 85       	ldd	r27, Y+9	; 0x09
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	a1 09       	sbc	r26, r1
    20ca:	b1 09       	sbc	r27, r1
    20cc:	8e 83       	std	Y+6, r24	; 0x06
    20ce:	9f 83       	std	Y+7, r25	; 0x07
    20d0:	a8 87       	std	Y+8, r26	; 0x08
    20d2:	b9 87       	std	Y+9, r27	; 0x09
	{
		u32 Local_u32Num_OVF_INT = (u32)Local_f32Num_OVF_FLOAT + 1;
		Local_f32Num_OVF_FLOAT = Local_f32Num_OVF_FLOAT - (u32)Local_f32Num_OVF_FLOAT;
		u8 Local_u32PreLoad = 256 - (256 * Local_f32Num_OVF_FLOAT);
		TCNT0 = Local_u32PreLoad;
		while(Local_u32Num_OVF_INT)
    20d4:	8e 81       	ldd	r24, Y+6	; 0x06
    20d6:	9f 81       	ldd	r25, Y+7	; 0x07
    20d8:	a8 85       	ldd	r26, Y+8	; 0x08
    20da:	b9 85       	ldd	r27, Y+9	; 0x09
    20dc:	00 97       	sbiw	r24, 0x00	; 0
    20de:	a1 05       	cpc	r26, r1
    20e0:	b1 05       	cpc	r27, r1
    20e2:	e9 f6       	brne	.-70     	; 0x209e <TIMER0_enuDelayMilliSecondSyn+0x134>
    20e4:	30 c0       	rjmp	.+96     	; 0x2146 <TIMER0_enuDelayMilliSecondSyn+0x1dc>
			Local_u32Num_OVF_INT--;
		}	
	}
	else
	{
		u32 Local_u32Num_OVF_INT = (u32)Local_f32TimeOverFlow;
    20e6:	6e 85       	ldd	r22, Y+14	; 0x0e
    20e8:	7f 85       	ldd	r23, Y+15	; 0x0f
    20ea:	88 89       	ldd	r24, Y+16	; 0x10
    20ec:	99 89       	ldd	r25, Y+17	; 0x11
    20ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	89 83       	std	Y+1, r24	; 0x01
    20f8:	9a 83       	std	Y+2, r25	; 0x02
    20fa:	ab 83       	std	Y+3, r26	; 0x03
    20fc:	bc 83       	std	Y+4, r27	; 0x04
    20fe:	1b c0       	rjmp	.+54     	; 0x2136 <TIMER0_enuDelayMilliSecondSyn+0x1cc>
		while(Local_u32Num_OVF_INT)
		{
			while(!((TIFR >> TOV0) & MASK_BIT));
    2100:	e8 e5       	ldi	r30, 0x58	; 88
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	88 2f       	mov	r24, r24
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	81 70       	andi	r24, 0x01	; 1
    210c:	90 70       	andi	r25, 0x00	; 0
    210e:	00 97       	sbiw	r24, 0x00	; 0
    2110:	b9 f3       	breq	.-18     	; 0x2100 <TIMER0_enuDelayMilliSecondSyn+0x196>
			TIFR |= (MASK_BIT << TOV0);
    2112:	a8 e5       	ldi	r26, 0x58	; 88
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	e8 e5       	ldi	r30, 0x58	; 88
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	81 60       	ori	r24, 0x01	; 1
    211e:	8c 93       	st	X, r24
			Local_u32Num_OVF_INT--;
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	9a 81       	ldd	r25, Y+2	; 0x02
    2124:	ab 81       	ldd	r26, Y+3	; 0x03
    2126:	bc 81       	ldd	r27, Y+4	; 0x04
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	a1 09       	sbc	r26, r1
    212c:	b1 09       	sbc	r27, r1
    212e:	89 83       	std	Y+1, r24	; 0x01
    2130:	9a 83       	std	Y+2, r25	; 0x02
    2132:	ab 83       	std	Y+3, r26	; 0x03
    2134:	bc 83       	std	Y+4, r27	; 0x04
		}	
	}
	else
	{
		u32 Local_u32Num_OVF_INT = (u32)Local_f32TimeOverFlow;
		while(Local_u32Num_OVF_INT)
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	9a 81       	ldd	r25, Y+2	; 0x02
    213a:	ab 81       	ldd	r26, Y+3	; 0x03
    213c:	bc 81       	ldd	r27, Y+4	; 0x04
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	a1 05       	cpc	r26, r1
    2142:	b1 05       	cpc	r27, r1
    2144:	e9 f6       	brne	.-70     	; 0x2100 <TIMER0_enuDelayMilliSecondSyn+0x196>
			TIFR |= (MASK_BIT << TOV0);
			Local_u32Num_OVF_INT--;
		}
	}
	
	Local_enuErrorState = ES_OK;
    2146:	1a 8a       	std	Y+18, r1	; 0x12
	return Local_enuErrorState;
    2148:	8a 89       	ldd	r24, Y+18	; 0x12
}
    214a:	66 96       	adiw	r28, 0x16	; 22
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	f8 94       	cli
    2150:	de bf       	out	0x3e, r29	; 62
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	08 95       	ret

0000215c <TIMER0_enuDelayMilliSecondASyn>:

ES_t TIMER0_enuDelayMilliSecondASyn(u32 Copy_u32DelayTime_ms, void (*Copy_PFunApp)(void *), void *Copy_PParameterApp)
{
    215c:	df 93       	push	r29
    215e:	cf 93       	push	r28
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
    2164:	66 97       	sbiw	r28, 0x16	; 22
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	f8 94       	cli
    216a:	de bf       	out	0x3e, r29	; 62
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	cd bf       	out	0x3d, r28	; 61
    2170:	6f 87       	std	Y+15, r22	; 0x0f
    2172:	78 8b       	std	Y+16, r23	; 0x10
    2174:	89 8b       	std	Y+17, r24	; 0x11
    2176:	9a 8b       	std	Y+18, r25	; 0x12
    2178:	5c 8b       	std	Y+20, r21	; 0x14
    217a:	4b 8b       	std	Y+19, r20	; 0x13
    217c:	3e 8b       	std	Y+22, r19	; 0x16
    217e:	2d 8b       	std	Y+21, r18	; 0x15
	ES_t Local_enuErrorState = ES_NOK;
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	8e 87       	std	Y+14, r24	; 0x0e
	
	TIMSK &= ~(MASK_BIT << TOIE0);
    2184:	a9 e5       	ldi	r26, 0x59	; 89
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	e9 e5       	ldi	r30, 0x59	; 89
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	8e 7f       	andi	r24, 0xFE	; 254
    2190:	8c 93       	st	X, r24
	
	f32 Local_f32TimeOverFlow = 256.0 * TIMER0_PRES / F_SYSTEM;
    2192:	8f e6       	ldi	r24, 0x6F	; 111
    2194:	92 e1       	ldi	r25, 0x12	; 18
    2196:	a3 e8       	ldi	r26, 0x83	; 131
    2198:	be e3       	ldi	r27, 0x3E	; 62
    219a:	8a 87       	std	Y+10, r24	; 0x0a
    219c:	9b 87       	std	Y+11, r25	; 0x0b
    219e:	ac 87       	std	Y+12, r26	; 0x0c
    21a0:	bd 87       	std	Y+13, r27	; 0x0d
	f32 Local_f32Num_OVF_FLOAT = (f32)Copy_u32DelayTime_ms / Local_f32TimeOverFlow;
    21a2:	6f 85       	ldd	r22, Y+15	; 0x0f
    21a4:	78 89       	ldd	r23, Y+16	; 0x10
    21a6:	89 89       	ldd	r24, Y+17	; 0x11
    21a8:	9a 89       	ldd	r25, Y+18	; 0x12
    21aa:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	bc 01       	movw	r22, r24
    21b4:	cd 01       	movw	r24, r26
    21b6:	2a 85       	ldd	r18, Y+10	; 0x0a
    21b8:	3b 85       	ldd	r19, Y+11	; 0x0b
    21ba:	4c 85       	ldd	r20, Y+12	; 0x0c
    21bc:	5d 85       	ldd	r21, Y+13	; 0x0d
    21be:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	8e 83       	std	Y+6, r24	; 0x06
    21c8:	9f 83       	std	Y+7, r25	; 0x07
    21ca:	a8 87       	std	Y+8, r26	; 0x08
    21cc:	b9 87       	std	Y+9, r27	; 0x09
	
	if((Local_f32Num_OVF_FLOAT - (u32)Local_f32Num_OVF_FLOAT) != 0.0)
    21ce:	6e 81       	ldd	r22, Y+6	; 0x06
    21d0:	7f 81       	ldd	r23, Y+7	; 0x07
    21d2:	88 85       	ldd	r24, Y+8	; 0x08
    21d4:	99 85       	ldd	r25, Y+9	; 0x09
    21d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	bc 01       	movw	r22, r24
    21e0:	cd 01       	movw	r24, r26
    21e2:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    21e6:	9b 01       	movw	r18, r22
    21e8:	ac 01       	movw	r20, r24
    21ea:	6e 81       	ldd	r22, Y+6	; 0x06
    21ec:	7f 81       	ldd	r23, Y+7	; 0x07
    21ee:	88 85       	ldd	r24, Y+8	; 0x08
    21f0:	99 85       	ldd	r25, Y+9	; 0x09
    21f2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	bc 01       	movw	r22, r24
    21fc:	cd 01       	movw	r24, r26
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e0       	ldi	r20, 0x00	; 0
    2204:	50 e0       	ldi	r21, 0x00	; 0
    2206:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    220a:	88 23       	and	r24, r24
    220c:	09 f4       	brne	.+2      	; 0x2210 <TIMER0_enuDelayMilliSecondASyn+0xb4>
    220e:	5b c0       	rjmp	.+182    	; 0x22c6 <TIMER0_enuDelayMilliSecondASyn+0x16a>
	{
		u32 Local_u32Num_OVF_INT = (u32)Local_f32Num_OVF_FLOAT + 1;
    2210:	6e 81       	ldd	r22, Y+6	; 0x06
    2212:	7f 81       	ldd	r23, Y+7	; 0x07
    2214:	88 85       	ldd	r24, Y+8	; 0x08
    2216:	99 85       	ldd	r25, Y+9	; 0x09
    2218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	01 96       	adiw	r24, 0x01	; 1
    2222:	a1 1d       	adc	r26, r1
    2224:	b1 1d       	adc	r27, r1
    2226:	8a 83       	std	Y+2, r24	; 0x02
    2228:	9b 83       	std	Y+3, r25	; 0x03
    222a:	ac 83       	std	Y+4, r26	; 0x04
    222c:	bd 83       	std	Y+5, r27	; 0x05
		Local_f32Num_OVF_FLOAT = Local_f32Num_OVF_FLOAT - (u32)Local_f32Num_OVF_FLOAT;
    222e:	6e 81       	ldd	r22, Y+6	; 0x06
    2230:	7f 81       	ldd	r23, Y+7	; 0x07
    2232:	88 85       	ldd	r24, Y+8	; 0x08
    2234:	99 85       	ldd	r25, Y+9	; 0x09
    2236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	bc 01       	movw	r22, r24
    2240:	cd 01       	movw	r24, r26
    2242:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    2246:	9b 01       	movw	r18, r22
    2248:	ac 01       	movw	r20, r24
    224a:	6e 81       	ldd	r22, Y+6	; 0x06
    224c:	7f 81       	ldd	r23, Y+7	; 0x07
    224e:	88 85       	ldd	r24, Y+8	; 0x08
    2250:	99 85       	ldd	r25, Y+9	; 0x09
    2252:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	8e 83       	std	Y+6, r24	; 0x06
    225c:	9f 83       	std	Y+7, r25	; 0x07
    225e:	a8 87       	std	Y+8, r26	; 0x08
    2260:	b9 87       	std	Y+9, r27	; 0x09
		u8 Local_u32PreLoad = 256 - (256 * Local_f32Num_OVF_FLOAT);
    2262:	6e 81       	ldd	r22, Y+6	; 0x06
    2264:	7f 81       	ldd	r23, Y+7	; 0x07
    2266:	88 85       	ldd	r24, Y+8	; 0x08
    2268:	99 85       	ldd	r25, Y+9	; 0x09
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	40 e8       	ldi	r20, 0x80	; 128
    2270:	53 ec       	ldi	r21, 0xC3	; 195
    2272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	bc 01       	movw	r22, r24
    227c:	cd 01       	movw	r24, r26
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	40 e8       	ldi	r20, 0x80	; 128
    2284:	53 e4       	ldi	r21, 0x43	; 67
    2286:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	bc 01       	movw	r22, r24
    2290:	cd 01       	movw	r24, r26
    2292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	89 83       	std	Y+1, r24	; 0x01
		TIMER0_NUM_OVF = Local_u32Num_OVF_INT;
    229c:	8a 81       	ldd	r24, Y+2	; 0x02
    229e:	9b 81       	ldd	r25, Y+3	; 0x03
    22a0:	ac 81       	ldd	r26, Y+4	; 0x04
    22a2:	bd 81       	ldd	r27, Y+5	; 0x05
    22a4:	80 93 1c 02 	sts	0x021C, r24
    22a8:	90 93 1d 02 	sts	0x021D, r25
    22ac:	a0 93 1e 02 	sts	0x021E, r26
    22b0:	b0 93 1f 02 	sts	0x021F, r27
		TIMER0_PRELOAD = Local_u32PreLoad;
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	80 93 1b 02 	sts	0x021B, r24
		TCNT0 = Local_u32PreLoad;
    22ba:	e2 e5       	ldi	r30, 0x52	; 82
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    22c2:	1e 86       	std	Y+14, r1	; 0x0e
    22c4:	11 c0       	rjmp	.+34     	; 0x22e8 <TIMER0_enuDelayMilliSecondASyn+0x18c>
	}
	else
	{
		TIMER0_NUM_OVF = (u32)Local_f32Num_OVF_FLOAT;
    22c6:	6e 81       	ldd	r22, Y+6	; 0x06
    22c8:	7f 81       	ldd	r23, Y+7	; 0x07
    22ca:	88 85       	ldd	r24, Y+8	; 0x08
    22cc:	99 85       	ldd	r25, Y+9	; 0x09
    22ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	80 93 1c 02 	sts	0x021C, r24
    22da:	90 93 1d 02 	sts	0x021D, r25
    22de:	a0 93 1e 02 	sts	0x021E, r26
    22e2:	b0 93 1f 02 	sts	0x021F, r27
		Local_enuErrorState = ES_OK;
    22e6:	1e 86       	std	Y+14, r1	; 0x0e
	}
	
	if(Copy_PFunApp != NULL)
    22e8:	8b 89       	ldd	r24, Y+19	; 0x13
    22ea:	9c 89       	ldd	r25, Y+20	; 0x14
    22ec:	00 97       	sbiw	r24, 0x00	; 0
    22ee:	71 f0       	breq	.+28     	; 0x230c <TIMER0_enuDelayMilliSecondASyn+0x1b0>
	{
		TIMER0_PFunISRfun_OVF = Copy_PFunApp;
    22f0:	8b 89       	ldd	r24, Y+19	; 0x13
    22f2:	9c 89       	ldd	r25, Y+20	; 0x14
    22f4:	90 93 14 02 	sts	0x0214, r25
    22f8:	80 93 13 02 	sts	0x0213, r24
		TIMER0_PvidISRparameter_OVF = Copy_PParameterApp;
    22fc:	8d 89       	ldd	r24, Y+21	; 0x15
    22fe:	9e 89       	ldd	r25, Y+22	; 0x16
    2300:	90 93 16 02 	sts	0x0216, r25
    2304:	80 93 15 02 	sts	0x0215, r24
		Local_enuErrorState = ES_OK;
    2308:	1e 86       	std	Y+14, r1	; 0x0e
    230a:	02 c0       	rjmp	.+4      	; 0x2310 <TIMER0_enuDelayMilliSecondASyn+0x1b4>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    230c:	82 e0       	ldi	r24, 0x02	; 2
    230e:	8e 87       	std	Y+14, r24	; 0x0e
	}
	
	TIMSK |= (MASK_BIT << TOIE0);
    2310:	a9 e5       	ldi	r26, 0x59	; 89
    2312:	b0 e0       	ldi	r27, 0x00	; 0
    2314:	e9 e5       	ldi	r30, 0x59	; 89
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	81 60       	ori	r24, 0x01	; 1
    231c:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    231e:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    2320:	66 96       	adiw	r28, 0x16	; 22
    2322:	0f b6       	in	r0, 0x3f	; 63
    2324:	f8 94       	cli
    2326:	de bf       	out	0x3e, r29	; 62
    2328:	0f be       	out	0x3f, r0	; 63
    232a:	cd bf       	out	0x3d, r28	; 61
    232c:	cf 91       	pop	r28
    232e:	df 91       	pop	r29
    2330:	08 95       	ret

00002332 <TIMER0_enuGeneratePWM>:

ES_t TIMER0_enuGeneratePWM(u8 Copy_u8DutyCycle)
{
    2332:	0f 93       	push	r16
    2334:	1f 93       	push	r17
    2336:	df 93       	push	r29
    2338:	cf 93       	push	r28
    233a:	00 d0       	rcall	.+0      	; 0x233c <TIMER0_enuGeneratePWM+0xa>
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
    2340:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	89 83       	std	Y+1, r24	; 0x01
	#error "OC0 has a wrong configuration"
	#endif	
	
	#elif TIMER0_MODE == FAST_PWM
	#if OC0_MODE == NON_INVERTED
	TIMER0_f32OC0Value = (Copy_u8DutyCycle * TIMER0_NO_OVF_COUNTS) / (PRESENTAGE_100);
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	88 2f       	mov	r24, r24
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	a0 e0       	ldi	r26, 0x00	; 0
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	ba 2f       	mov	r27, r26
    2352:	a9 2f       	mov	r26, r25
    2354:	98 2f       	mov	r25, r24
    2356:	88 27       	eor	r24, r24
    2358:	bc 01       	movw	r22, r24
    235a:	cd 01       	movw	r24, r26
    235c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	bc 01       	movw	r22, r24
    2366:	cd 01       	movw	r24, r26
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	48 ec       	ldi	r20, 0xC8	; 200
    236e:	52 e4       	ldi	r21, 0x42	; 66
    2370:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	80 93 20 02 	sts	0x0220, r24
    237c:	90 93 21 02 	sts	0x0221, r25
    2380:	a0 93 22 02 	sts	0x0222, r26
    2384:	b0 93 23 02 	sts	0x0223, r27
	Local_enuErrorState = ES_OK;
    2388:	19 82       	std	Y+1, r1	; 0x01
	#else
	#error "OC0 has a wrong configuration"
	#endif
	#endif
	
	OCR0 = TIMER0_f32OC0Value;	
    238a:	0c e5       	ldi	r16, 0x5C	; 92
    238c:	10 e0       	ldi	r17, 0x00	; 0
    238e:	80 91 20 02 	lds	r24, 0x0220
    2392:	90 91 21 02 	lds	r25, 0x0221
    2396:	a0 91 22 02 	lds	r26, 0x0222
    239a:	b0 91 23 02 	lds	r27, 0x0223
    239e:	bc 01       	movw	r22, r24
    23a0:	cd 01       	movw	r24, r26
    23a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	f8 01       	movw	r30, r16
    23ac:	80 83       	st	Z, r24
	
	return Local_enuErrorState;
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    23b0:	0f 90       	pop	r0
    23b2:	0f 90       	pop	r0
    23b4:	cf 91       	pop	r28
    23b6:	df 91       	pop	r29
    23b8:	1f 91       	pop	r17
    23ba:	0f 91       	pop	r16
    23bc:	08 95       	ret

000023be <TIMER0_enuSetOutputCompareRegister>:

ES_t TIMER0_enuSetOutputCompareRegister(u8 Copy_u8OCRValue)
{
    23be:	df 93       	push	r29
    23c0:	cf 93       	push	r28
    23c2:	00 d0       	rcall	.+0      	; 0x23c4 <TIMER0_enuSetOutputCompareRegister+0x6>
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
    23c8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	89 83       	std	Y+1, r24	; 0x01
	
	OCR0 = Copy_u8OCRValue;
    23ce:	ec e5       	ldi	r30, 0x5C	; 92
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	8a 81       	ldd	r24, Y+2	; 0x02
    23d4:	80 83       	st	Z, r24
	Local_enuErrorState = ES_OK;
    23d6:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	08 95       	ret

000023e4 <TIMER0_enuSetPreload>:

ES_t TIMER0_enuSetPreload(u8 Copy_u8PreloadValue)
{
    23e4:	df 93       	push	r29
    23e6:	cf 93       	push	r28
    23e8:	00 d0       	rcall	.+0      	; 0x23ea <TIMER0_enuSetPreload+0x6>
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
    23ee:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	89 83       	std	Y+1, r24	; 0x01
	
	TCNT0 = Copy_u8PreloadValue;
    23f4:	e2 e5       	ldi	r30, 0x52	; 82
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	8a 81       	ldd	r24, Y+2	; 0x02
    23fa:	80 83       	st	Z, r24
	Local_enuErrorState = ES_OK;
    23fc:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2400:	0f 90       	pop	r0
    2402:	0f 90       	pop	r0
    2404:	cf 91       	pop	r28
    2406:	df 91       	pop	r29
    2408:	08 95       	ret

0000240a <TIMER0_enuSetCALLBACK_CTC>:

ES_t TIMER0_enuSetCALLBACK_CTC(void (*Copy_PFunApp)(void *), void *Copy_PParameterApp)
{
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	00 d0       	rcall	.+0      	; 0x2410 <TIMER0_enuSetCALLBACK_CTC+0x6>
    2410:	00 d0       	rcall	.+0      	; 0x2412 <TIMER0_enuSetCALLBACK_CTC+0x8>
    2412:	0f 92       	push	r0
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
    2418:	9b 83       	std	Y+3, r25	; 0x03
    241a:	8a 83       	std	Y+2, r24	; 0x02
    241c:	7d 83       	std	Y+5, r23	; 0x05
    241e:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_PFunApp != NULL)
    2424:	8a 81       	ldd	r24, Y+2	; 0x02
    2426:	9b 81       	ldd	r25, Y+3	; 0x03
    2428:	00 97       	sbiw	r24, 0x00	; 0
    242a:	71 f0       	breq	.+28     	; 0x2448 <TIMER0_enuSetCALLBACK_CTC+0x3e>
	{
		TIMER0_PFunISRfun_CTC = Copy_PFunApp;
    242c:	8a 81       	ldd	r24, Y+2	; 0x02
    242e:	9b 81       	ldd	r25, Y+3	; 0x03
    2430:	90 93 18 02 	sts	0x0218, r25
    2434:	80 93 17 02 	sts	0x0217, r24
		TIMER0_PvidISRparameter_CTC = Copy_PParameterApp;
    2438:	8c 81       	ldd	r24, Y+4	; 0x04
    243a:	9d 81       	ldd	r25, Y+5	; 0x05
    243c:	90 93 1a 02 	sts	0x021A, r25
    2440:	80 93 19 02 	sts	0x0219, r24
		Local_enuErrorState = ES_OK;
    2444:	19 82       	std	Y+1, r1	; 0x01
    2446:	02 c0       	rjmp	.+4      	; 0x244c <TIMER0_enuSetCALLBACK_CTC+0x42>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2448:	82 e0       	ldi	r24, 0x02	; 2
    244a:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    244c:	89 81       	ldd	r24, Y+1	; 0x01
}
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	08 95       	ret

0000245e <TIMER0_enuEnableOVFInterrupt>:

ES_t TIMER0_enuEnableOVFInterrupt(void)
{
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	0f 92       	push	r0
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	89 83       	std	Y+1, r24	; 0x01
	
	TIMSK |= (MASK_BIT << TOIE0);
    246c:	a9 e5       	ldi	r26, 0x59	; 89
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	e9 e5       	ldi	r30, 0x59	; 89
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	81 60       	ori	r24, 0x01	; 1
    2478:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    247a:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    247c:	89 81       	ldd	r24, Y+1	; 0x01
}
    247e:	0f 90       	pop	r0
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	08 95       	ret

00002486 <TIMER0_enuEnableCTCInterrupt>:

ES_t TIMER0_enuEnableCTCInterrupt(void)
{
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	0f 92       	push	r0
    248c:	cd b7       	in	r28, 0x3d	; 61
    248e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	89 83       	std	Y+1, r24	; 0x01
	
	TIMSK |= (MASK_BIT << OCIE0);
    2494:	a9 e5       	ldi	r26, 0x59	; 89
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	e9 e5       	ldi	r30, 0x59	; 89
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	82 60       	ori	r24, 0x02	; 2
    24a0:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    24a2:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    24a6:	0f 90       	pop	r0
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	08 95       	ret

000024ae <VECT_TIMER0_OVF>:

ISR(VECT_TIMER0_OVF)
{
    24ae:	1f 92       	push	r1
    24b0:	0f 92       	push	r0
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	0f 92       	push	r0
    24b6:	11 24       	eor	r1, r1
    24b8:	2f 93       	push	r18
    24ba:	3f 93       	push	r19
    24bc:	4f 93       	push	r20
    24be:	5f 93       	push	r21
    24c0:	6f 93       	push	r22
    24c2:	7f 93       	push	r23
    24c4:	8f 93       	push	r24
    24c6:	9f 93       	push	r25
    24c8:	af 93       	push	r26
    24ca:	bf 93       	push	r27
    24cc:	ef 93       	push	r30
    24ce:	ff 93       	push	r31
    24d0:	df 93       	push	r29
    24d2:	cf 93       	push	r28
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_PFunISRfun_OVF != NULL)
    24d8:	80 91 13 02 	lds	r24, 0x0213
    24dc:	90 91 14 02 	lds	r25, 0x0214
    24e0:	00 97       	sbiw	r24, 0x00	; 0
    24e2:	09 f4       	brne	.+2      	; 0x24e6 <VECT_TIMER0_OVF+0x38>
    24e4:	3e c0       	rjmp	.+124    	; 0x2562 <VECT_TIMER0_OVF+0xb4>
	{
		static u32 Local_u32Counter = 0;
		Local_u32Counter++;
    24e6:	80 91 24 02 	lds	r24, 0x0224
    24ea:	90 91 25 02 	lds	r25, 0x0225
    24ee:	a0 91 26 02 	lds	r26, 0x0226
    24f2:	b0 91 27 02 	lds	r27, 0x0227
    24f6:	01 96       	adiw	r24, 0x01	; 1
    24f8:	a1 1d       	adc	r26, r1
    24fa:	b1 1d       	adc	r27, r1
    24fc:	80 93 24 02 	sts	0x0224, r24
    2500:	90 93 25 02 	sts	0x0225, r25
    2504:	a0 93 26 02 	sts	0x0226, r26
    2508:	b0 93 27 02 	sts	0x0227, r27
		if(Local_u32Counter == TIMER0_NUM_OVF)
    250c:	20 91 24 02 	lds	r18, 0x0224
    2510:	30 91 25 02 	lds	r19, 0x0225
    2514:	40 91 26 02 	lds	r20, 0x0226
    2518:	50 91 27 02 	lds	r21, 0x0227
    251c:	80 91 1c 02 	lds	r24, 0x021C
    2520:	90 91 1d 02 	lds	r25, 0x021D
    2524:	a0 91 1e 02 	lds	r26, 0x021E
    2528:	b0 91 1f 02 	lds	r27, 0x021F
    252c:	28 17       	cp	r18, r24
    252e:	39 07       	cpc	r19, r25
    2530:	4a 07       	cpc	r20, r26
    2532:	5b 07       	cpc	r21, r27
    2534:	b1 f4       	brne	.+44     	; 0x2562 <VECT_TIMER0_OVF+0xb4>
		{
			TCNT0 = TIMER0_PRELOAD;
    2536:	e2 e5       	ldi	r30, 0x52	; 82
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 91 1b 02 	lds	r24, 0x021B
    253e:	80 83       	st	Z, r24
			TIMER0_PFunISRfun_OVF((void *)TIMER0_PvidISRparameter_OVF);
    2540:	e0 91 13 02 	lds	r30, 0x0213
    2544:	f0 91 14 02 	lds	r31, 0x0214
    2548:	80 91 15 02 	lds	r24, 0x0215
    254c:	90 91 16 02 	lds	r25, 0x0216
    2550:	09 95       	icall
			Local_u32Counter = 0;
    2552:	10 92 24 02 	sts	0x0224, r1
    2556:	10 92 25 02 	sts	0x0225, r1
    255a:	10 92 26 02 	sts	0x0226, r1
    255e:	10 92 27 02 	sts	0x0227, r1
		}
	}
}
    2562:	cf 91       	pop	r28
    2564:	df 91       	pop	r29
    2566:	ff 91       	pop	r31
    2568:	ef 91       	pop	r30
    256a:	bf 91       	pop	r27
    256c:	af 91       	pop	r26
    256e:	9f 91       	pop	r25
    2570:	8f 91       	pop	r24
    2572:	7f 91       	pop	r23
    2574:	6f 91       	pop	r22
    2576:	5f 91       	pop	r21
    2578:	4f 91       	pop	r20
    257a:	3f 91       	pop	r19
    257c:	2f 91       	pop	r18
    257e:	0f 90       	pop	r0
    2580:	0f be       	out	0x3f, r0	; 63
    2582:	0f 90       	pop	r0
    2584:	1f 90       	pop	r1
    2586:	18 95       	reti

00002588 <VECT_TIMER0_CTC>:

ISR(VECT_TIMER0_CTC)
{
    2588:	1f 92       	push	r1
    258a:	0f 92       	push	r0
    258c:	0f b6       	in	r0, 0x3f	; 63
    258e:	0f 92       	push	r0
    2590:	11 24       	eor	r1, r1
    2592:	2f 93       	push	r18
    2594:	3f 93       	push	r19
    2596:	4f 93       	push	r20
    2598:	5f 93       	push	r21
    259a:	6f 93       	push	r22
    259c:	7f 93       	push	r23
    259e:	8f 93       	push	r24
    25a0:	9f 93       	push	r25
    25a2:	af 93       	push	r26
    25a4:	bf 93       	push	r27
    25a6:	ef 93       	push	r30
    25a8:	ff 93       	push	r31
    25aa:	df 93       	push	r29
    25ac:	cf 93       	push	r28
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_PFunISRfun_CTC != NULL)
    25b2:	80 91 17 02 	lds	r24, 0x0217
    25b6:	90 91 18 02 	lds	r25, 0x0218
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	49 f0       	breq	.+18     	; 0x25d0 <VECT_TIMER0_CTC+0x48>
	{
		TIMER0_PFunISRfun_CTC((void *)TIMER0_PvidISRparameter_CTC);
    25be:	e0 91 17 02 	lds	r30, 0x0217
    25c2:	f0 91 18 02 	lds	r31, 0x0218
    25c6:	80 91 19 02 	lds	r24, 0x0219
    25ca:	90 91 1a 02 	lds	r25, 0x021A
    25ce:	09 95       	icall
	}
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	ff 91       	pop	r31
    25d6:	ef 91       	pop	r30
    25d8:	bf 91       	pop	r27
    25da:	af 91       	pop	r26
    25dc:	9f 91       	pop	r25
    25de:	8f 91       	pop	r24
    25e0:	7f 91       	pop	r23
    25e2:	6f 91       	pop	r22
    25e4:	5f 91       	pop	r21
    25e6:	4f 91       	pop	r20
    25e8:	3f 91       	pop	r19
    25ea:	2f 91       	pop	r18
    25ec:	0f 90       	pop	r0
    25ee:	0f be       	out	0x3f, r0	; 63
    25f0:	0f 90       	pop	r0
    25f2:	1f 90       	pop	r1
    25f4:	18 95       	reti

000025f6 <I2C_enuInitMaster>:
#include "I2C_Priv.h"



ES_t I2C_enuInitMaster	(void)
{
    25f6:	df 93       	push	r29
    25f8:	cf 93       	push	r28
    25fa:	0f 92       	push	r0
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	89 83       	std	Y+1, r24	; 0x01

#if I2C_PRESCALER == I2C_PRESCALER_1
	SET_I2C_PRESCALER_1;
    2604:	a1 e2       	ldi	r26, 0x21	; 33
    2606:	b0 e0       	ldi	r27, 0x00	; 0
    2608:	e1 e2       	ldi	r30, 0x21	; 33
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	80 81       	ld	r24, Z
    260e:	8c 7f       	andi	r24, 0xFC	; 252
    2610:	8c 93       	st	X, r24
	SET_TWBR_VALUE;
    2612:	e0 e2       	ldi	r30, 0x20	; 32
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	8f ed       	ldi	r24, 0xDF	; 223
    2618:	80 83       	st	Z, r24
	SET_I2C_ENABLE;
    261a:	a6 e5       	ldi	r26, 0x56	; 86
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	e6 e5       	ldi	r30, 0x56	; 86
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	84 60       	ori	r24, 0x04	; 4
    2626:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    2628:	19 82       	std	Y+1, r1	; 0x01

#else
#error"The Selection of I2C_PRESCALER is Wrong"
#endif

	return Local_enuErrorState ;
    262a:	89 81       	ldd	r24, Y+1	; 0x01
}
    262c:	0f 90       	pop	r0
    262e:	cf 91       	pop	r28
    2630:	df 91       	pop	r29
    2632:	08 95       	ret

00002634 <I2C_enuInitSlave>:



ES_t I2C_enuInitSlave	(void)
{
    2634:	df 93       	push	r29
    2636:	cf 93       	push	r28
    2638:	0f 92       	push	r0
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	89 83       	std	Y+1, r24	; 0x01

	SET_ECU_ADDRESS;
    2642:	e2 e2       	ldi	r30, 0x22	; 34
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	83 e0       	ldi	r24, 0x03	; 3
    2648:	80 83       	st	Z, r24
	SET_I2C_ENABLE;
    264a:	a6 e5       	ldi	r26, 0x56	; 86
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	e6 e5       	ldi	r30, 0x56	; 86
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	80 81       	ld	r24, Z
    2654:	84 60       	ori	r24, 0x04	; 4
    2656:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    2658:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    265a:	89 81       	ldd	r24, Y+1	; 0x01
}
    265c:	0f 90       	pop	r0
    265e:	cf 91       	pop	r28
    2660:	df 91       	pop	r29
    2662:	08 95       	ret

00002664 <I2C_enuStartCondition>:



ES_t I2C_enuStartCondition	(void)
{
    2664:	df 93       	push	r29
    2666:	cf 93       	push	r28
    2668:	0f 92       	push	r0
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	89 83       	std	Y+1, r24	; 0x01

	SET_START_CONDITION;
    2672:	a6 e5       	ldi	r26, 0x56	; 86
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	e6 e5       	ldi	r30, 0x56	; 86
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	80 62       	ori	r24, 0x20	; 32
    267e:	8c 93       	st	X, r24
	CLEAR_FLAG;
    2680:	a6 e5       	ldi	r26, 0x56	; 86
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	e6 e5       	ldi	r30, 0x56	; 86
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	80 81       	ld	r24, Z
    268a:	80 68       	ori	r24, 0x80	; 128
    268c:	8c 93       	st	X, r24
	while (WAIT_FLAG);
    268e:	e6 e5       	ldi	r30, 0x56	; 86
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
    2694:	88 23       	and	r24, r24
    2696:	dc f7       	brge	.-10     	; 0x268e <I2C_enuStartCondition+0x2a>
	if (START_CONDITION_TRANSMIT)
    2698:	e1 e2       	ldi	r30, 0x21	; 33
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	88 2f       	mov	r24, r24
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	88 7f       	andi	r24, 0xF8	; 248
    26a4:	90 70       	andi	r25, 0x00	; 0
    26a6:	88 30       	cpi	r24, 0x08	; 8
    26a8:	91 05       	cpc	r25, r1
    26aa:	09 f4       	brne	.+2      	; 0x26ae <I2C_enuStartCondition+0x4a>
		Local_enuErrorState = ES_OK;
    26ac:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    26b0:	0f 90       	pop	r0
    26b2:	cf 91       	pop	r28
    26b4:	df 91       	pop	r29
    26b6:	08 95       	ret

000026b8 <I2C_enuRepeatStartCondition>:




ES_t I2C_enuRepeatStartCondition	(void)
{
    26b8:	df 93       	push	r29
    26ba:	cf 93       	push	r28
    26bc:	0f 92       	push	r0
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	89 83       	std	Y+1, r24	; 0x01

	SET_START_CONDITION;
    26c6:	a6 e5       	ldi	r26, 0x56	; 86
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	e6 e5       	ldi	r30, 0x56	; 86
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	80 81       	ld	r24, Z
    26d0:	80 62       	ori	r24, 0x20	; 32
    26d2:	8c 93       	st	X, r24
	CLEAR_FLAG;
    26d4:	a6 e5       	ldi	r26, 0x56	; 86
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	e6 e5       	ldi	r30, 0x56	; 86
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	80 68       	ori	r24, 0x80	; 128
    26e0:	8c 93       	st	X, r24
	while (WAIT_FLAG);
    26e2:	e6 e5       	ldi	r30, 0x56	; 86
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	80 81       	ld	r24, Z
    26e8:	88 23       	and	r24, r24
    26ea:	dc f7       	brge	.-10     	; 0x26e2 <I2C_enuRepeatStartCondition+0x2a>
	if (REPEAT_START_CONDITION_TRANSMIT)
    26ec:	e1 e2       	ldi	r30, 0x21	; 33
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	88 2f       	mov	r24, r24
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	88 7f       	andi	r24, 0xF8	; 248
    26f8:	90 70       	andi	r25, 0x00	; 0
    26fa:	80 31       	cpi	r24, 0x10	; 16
    26fc:	91 05       	cpc	r25, r1
    26fe:	09 f4       	brne	.+2      	; 0x2702 <I2C_enuRepeatStartCondition+0x4a>
		Local_enuErrorState = ES_OK;
    2700:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    2702:	89 81       	ldd	r24, Y+1	; 0x01
}
    2704:	0f 90       	pop	r0
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <I2C_enuStopCondition>:



ES_t I2C_enuStopCondition	(void)
{
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	0f 92       	push	r0
    2712:	cd b7       	in	r28, 0x3d	; 61
    2714:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	89 83       	std	Y+1, r24	; 0x01

	SET_STOP_CONDITION;
    271a:	a6 e5       	ldi	r26, 0x56	; 86
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	e6 e5       	ldi	r30, 0x56	; 86
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	80 61       	ori	r24, 0x10	; 16
    2726:	8c 93       	st	X, r24
	CLEAR_FLAG;
    2728:	a6 e5       	ldi	r26, 0x56	; 86
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	e6 e5       	ldi	r30, 0x56	; 86
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	80 68       	ori	r24, 0x80	; 128
    2734:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    2736:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    2738:	89 81       	ldd	r24, Y+1	; 0x01
}
    273a:	0f 90       	pop	r0
    273c:	cf 91       	pop	r28
    273e:	df 91       	pop	r29
    2740:	08 95       	ret

00002742 <I2C_enuSendSlaveAddress>:



ES_t I2C_enuSendSlaveAddress	(u8 Copy_u8SlaveAddress , u8 Copy_u8Action)
{
    2742:	df 93       	push	r29
    2744:	cf 93       	push	r28
    2746:	00 d0       	rcall	.+0      	; 0x2748 <I2C_enuSendSlaveAddress+0x6>
    2748:	0f 92       	push	r0
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
    274e:	8a 83       	std	Y+2, r24	; 0x02
    2750:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	89 83       	std	Y+1, r24	; 0x01


	if (Copy_u8SlaveAddress <= I2C_MAX_SLAVES) SET_SLAVE_ADDRESS(Copy_u8SlaveAddress);
    2756:	8a 81       	ldd	r24, Y+2	; 0x02
    2758:	88 23       	and	r24, r24
    275a:	2c f0       	brlt	.+10     	; 0x2766 <I2C_enuSendSlaveAddress+0x24>
    275c:	e3 e2       	ldi	r30, 0x23	; 35
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	8a 81       	ldd	r24, Y+2	; 0x02
    2762:	88 0f       	add	r24, r24
    2764:	80 83       	st	Z, r24
	if (Copy_u8Action <= I2C_ONE)              SET_SLAVE_ACTION (Copy_u8Action);
    2766:	8b 81       	ldd	r24, Y+3	; 0x03
    2768:	82 30       	cpi	r24, 0x02	; 2
    276a:	40 f4       	brcc	.+16     	; 0x277c <I2C_enuSendSlaveAddress+0x3a>
    276c:	a3 e2       	ldi	r26, 0x23	; 35
    276e:	b0 e0       	ldi	r27, 0x00	; 0
    2770:	e3 e2       	ldi	r30, 0x23	; 35
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	90 81       	ld	r25, Z
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	89 2b       	or	r24, r25
    277a:	8c 93       	st	X, r24
	CLEAR_START_CONDITION;
    277c:	a6 e5       	ldi	r26, 0x56	; 86
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	e6 e5       	ldi	r30, 0x56	; 86
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	8f 7d       	andi	r24, 0xDF	; 223
    2788:	8c 93       	st	X, r24
	CLEAR_FLAG;
    278a:	a6 e5       	ldi	r26, 0x56	; 86
    278c:	b0 e0       	ldi	r27, 0x00	; 0
    278e:	e6 e5       	ldi	r30, 0x56	; 86
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	80 68       	ori	r24, 0x80	; 128
    2796:	8c 93       	st	X, r24
	while (WAIT_FLAG);
    2798:	e6 e5       	ldi	r30, 0x56	; 86
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 81       	ld	r24, Z
    279e:	88 23       	and	r24, r24
    27a0:	dc f7       	brge	.-10     	; 0x2798 <I2C_enuSendSlaveAddress+0x56>
	if (SLA_WRITE_TRANSMIT)
    27a2:	e1 e2       	ldi	r30, 0x21	; 33
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	88 2f       	mov	r24, r24
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	88 7f       	andi	r24, 0xF8	; 248
    27ae:	90 70       	andi	r25, 0x00	; 0
    27b0:	88 31       	cpi	r24, 0x18	; 24
    27b2:	91 05       	cpc	r25, r1
    27b4:	11 f4       	brne	.+4      	; 0x27ba <I2C_enuSendSlaveAddress+0x78>
		Local_enuErrorState = ES_OK;
    27b6:	19 82       	std	Y+1, r1	; 0x01
    27b8:	0b c0       	rjmp	.+22     	; 0x27d0 <I2C_enuSendSlaveAddress+0x8e>

	else if (SLA_READ_TRANSMIT)
    27ba:	e1 e2       	ldi	r30, 0x21	; 33
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	80 81       	ld	r24, Z
    27c0:	88 2f       	mov	r24, r24
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	88 7f       	andi	r24, 0xF8	; 248
    27c6:	90 70       	andi	r25, 0x00	; 0
    27c8:	80 34       	cpi	r24, 0x40	; 64
    27ca:	91 05       	cpc	r25, r1
    27cc:	09 f4       	brne	.+2      	; 0x27d0 <I2C_enuSendSlaveAddress+0x8e>
		Local_enuErrorState = ES_OK;
    27ce:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    27d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    27d2:	0f 90       	pop	r0
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	cf 91       	pop	r28
    27da:	df 91       	pop	r29
    27dc:	08 95       	ret

000027de <I2C_enuSlaveCheckItsAdress>:



ES_t I2C_enuSlaveCheckItsAdress (void)
{
    27de:	df 93       	push	r29
    27e0:	cf 93       	push	r28
    27e2:	0f 92       	push	r0
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	89 83       	std	Y+1, r24	; 0x01

	SET_ACKNOWLEDGE;
    27ec:	a6 e5       	ldi	r26, 0x56	; 86
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	e6 e5       	ldi	r30, 0x56	; 86
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	80 64       	ori	r24, 0x40	; 64
    27f8:	8c 93       	st	X, r24
	CLEAR_FLAG;
    27fa:	a6 e5       	ldi	r26, 0x56	; 86
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	e6 e5       	ldi	r30, 0x56	; 86
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	80 68       	ori	r24, 0x80	; 128
    2806:	8c 93       	st	X, r24
	while (WAIT_FLAG);
    2808:	e6 e5       	ldi	r30, 0x56	; 86
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	80 81       	ld	r24, Z
    280e:	88 23       	and	r24, r24
    2810:	dc f7       	brge	.-10     	; 0x2808 <I2C_enuSlaveCheckItsAdress+0x2a>
	if (SLAVE_WRITE_RECIEVE_ADDRESS)
    2812:	e1 e2       	ldi	r30, 0x21	; 33
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	88 2f       	mov	r24, r24
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	88 7f       	andi	r24, 0xF8	; 248
    281e:	90 70       	andi	r25, 0x00	; 0
    2820:	80 36       	cpi	r24, 0x60	; 96
    2822:	91 05       	cpc	r25, r1
    2824:	11 f4       	brne	.+4      	; 0x282a <I2C_enuSlaveCheckItsAdress+0x4c>
		Local_enuErrorState = ES_OK;
    2826:	19 82       	std	Y+1, r1	; 0x01
    2828:	0b c0       	rjmp	.+22     	; 0x2840 <I2C_enuSlaveCheckItsAdress+0x62>
	else if(SLAVE_READ_RECIEVE_ADDRESS)
    282a:	e1 e2       	ldi	r30, 0x21	; 33
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	80 81       	ld	r24, Z
    2830:	88 2f       	mov	r24, r24
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	88 7f       	andi	r24, 0xF8	; 248
    2836:	90 70       	andi	r25, 0x00	; 0
    2838:	88 3a       	cpi	r24, 0xA8	; 168
    283a:	91 05       	cpc	r25, r1
    283c:	09 f4       	brne	.+2      	; 0x2840 <I2C_enuSlaveCheckItsAdress+0x62>
		Local_enuErrorState = ES_OK;
    283e:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    2840:	89 81       	ldd	r24, Y+1	; 0x01
}
    2842:	0f 90       	pop	r0
    2844:	cf 91       	pop	r28
    2846:	df 91       	pop	r29
    2848:	08 95       	ret

0000284a <I2C_enuMasterSendData>:




ES_t I2C_enuMasterSendData	(u8 Copy_u8Data)
{
    284a:	df 93       	push	r29
    284c:	cf 93       	push	r28
    284e:	00 d0       	rcall	.+0      	; 0x2850 <I2C_enuMasterSendData+0x6>
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
    2854:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	89 83       	std	Y+1, r24	; 0x01

	TWDR=Copy_u8Data;
    285a:	e3 e2       	ldi	r30, 0x23	; 35
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	8a 81       	ldd	r24, Y+2	; 0x02
    2860:	80 83       	st	Z, r24
	CLEAR_FLAG;
    2862:	a6 e5       	ldi	r26, 0x56	; 86
    2864:	b0 e0       	ldi	r27, 0x00	; 0
    2866:	e6 e5       	ldi	r30, 0x56	; 86
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	80 81       	ld	r24, Z
    286c:	80 68       	ori	r24, 0x80	; 128
    286e:	8c 93       	st	X, r24
	while (WAIT_FLAG);
    2870:	e6 e5       	ldi	r30, 0x56	; 86
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	80 81       	ld	r24, Z
    2876:	88 23       	and	r24, r24
    2878:	dc f7       	brge	.-10     	; 0x2870 <I2C_enuMasterSendData+0x26>
	if (MASTER_DATA_TRANSMIT)
    287a:	e1 e2       	ldi	r30, 0x21	; 33
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	80 81       	ld	r24, Z
    2880:	88 2f       	mov	r24, r24
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	88 7f       	andi	r24, 0xF8	; 248
    2886:	90 70       	andi	r25, 0x00	; 0
    2888:	88 32       	cpi	r24, 0x28	; 40
    288a:	91 05       	cpc	r25, r1
    288c:	09 f4       	brne	.+2      	; 0x2890 <I2C_enuMasterSendData+0x46>
		Local_enuErrorState = ES_OK;
    288e:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    2890:	89 81       	ldd	r24, Y+1	; 0x01
}
    2892:	0f 90       	pop	r0
    2894:	0f 90       	pop	r0
    2896:	cf 91       	pop	r28
    2898:	df 91       	pop	r29
    289a:	08 95       	ret

0000289c <I2C_enuSlaveRecieveData>:


ES_t I2C_enuSlaveRecieveData	(u8 * Copy_Pu8Data)
{
    289c:	df 93       	push	r29
    289e:	cf 93       	push	r28
    28a0:	00 d0       	rcall	.+0      	; 0x28a2 <I2C_enuSlaveRecieveData+0x6>
    28a2:	0f 92       	push	r0
    28a4:	cd b7       	in	r28, 0x3d	; 61
    28a6:	de b7       	in	r29, 0x3e	; 62
    28a8:	9b 83       	std	Y+3, r25	; 0x03
    28aa:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	89 83       	std	Y+1, r24	; 0x01

	CLEAR_FLAG;
    28b0:	a6 e5       	ldi	r26, 0x56	; 86
    28b2:	b0 e0       	ldi	r27, 0x00	; 0
    28b4:	e6 e5       	ldi	r30, 0x56	; 86
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	80 81       	ld	r24, Z
    28ba:	80 68       	ori	r24, 0x80	; 128
    28bc:	8c 93       	st	X, r24
	while (WAIT_FLAG);
    28be:	e6 e5       	ldi	r30, 0x56	; 86
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	80 81       	ld	r24, Z
    28c4:	88 23       	and	r24, r24
    28c6:	dc f7       	brge	.-10     	; 0x28be <I2C_enuSlaveRecieveData+0x22>
	if (SLAVE_DATA_RECIEVED)
    28c8:	e1 e2       	ldi	r30, 0x21	; 33
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	80 81       	ld	r24, Z
    28ce:	88 2f       	mov	r24, r24
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	88 7f       	andi	r24, 0xF8	; 248
    28d4:	90 70       	andi	r25, 0x00	; 0
    28d6:	80 38       	cpi	r24, 0x80	; 128
    28d8:	91 05       	cpc	r25, r1
    28da:	39 f4       	brne	.+14     	; 0x28ea <I2C_enuSlaveRecieveData+0x4e>
	{
		*Copy_Pu8Data=TWDR; //RECIEVE_DATA
    28dc:	e3 e2       	ldi	r30, 0x23	; 35
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	80 81       	ld	r24, Z
    28e2:	ea 81       	ldd	r30, Y+2	; 0x02
    28e4:	fb 81       	ldd	r31, Y+3	; 0x03
    28e6:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    28e8:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	cf 91       	pop	r28
    28f4:	df 91       	pop	r29
    28f6:	08 95       	ret

000028f8 <GIE_enuGloable_Interrupt_Enable>:
#include "../../LIB/Error_States.h"

#include "GIE_priv.h"

ES_t GIE_enuGloable_Interrupt_Enable(void)
{
    28f8:	df 93       	push	r29
    28fa:	cf 93       	push	r28
    28fc:	0f 92       	push	r0
    28fe:	cd b7       	in	r28, 0x3d	; 61
    2900:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	89 83       	std	Y+1, r24	; 0x01
	
	SREG &= ~(MASK_BIT << GIE_I);
    2906:	af e5       	ldi	r26, 0x5F	; 95
    2908:	b0 e0       	ldi	r27, 0x00	; 0
    290a:	ef e5       	ldi	r30, 0x5F	; 95
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	80 81       	ld	r24, Z
    2910:	8f 77       	andi	r24, 0x7F	; 127
    2912:	8c 93       	st	X, r24
	SREG |= (MASK_BIT << GIE_I);
    2914:	af e5       	ldi	r26, 0x5F	; 95
    2916:	b0 e0       	ldi	r27, 0x00	; 0
    2918:	ef e5       	ldi	r30, 0x5F	; 95
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	80 81       	ld	r24, Z
    291e:	80 68       	ori	r24, 0x80	; 128
    2920:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    2922:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    2924:	89 81       	ldd	r24, Y+1	; 0x01
}
    2926:	0f 90       	pop	r0
    2928:	cf 91       	pop	r28
    292a:	df 91       	pop	r29
    292c:	08 95       	ret

0000292e <GIE_enuGloable_Interrupt_Disable>:

ES_t GIE_enuGloable_Interrupt_Disable(void)
{
    292e:	df 93       	push	r29
    2930:	cf 93       	push	r28
    2932:	0f 92       	push	r0
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	89 83       	std	Y+1, r24	; 0x01
	
	SREG &= ~(MASK_BIT << GIE_I);
    293c:	af e5       	ldi	r26, 0x5F	; 95
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	ef e5       	ldi	r30, 0x5F	; 95
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	80 81       	ld	r24, Z
    2946:	8f 77       	andi	r24, 0x7F	; 127
    2948:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    294a:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    294c:	89 81       	ldd	r24, Y+1	; 0x01
    294e:	0f 90       	pop	r0
    2950:	cf 91       	pop	r28
    2952:	df 91       	pop	r29
    2954:	08 95       	ret

00002956 <EXTI_enuInit>:
/* array of pointers to the parameters of the function that will be executed when the interrupt is happen */
static volatile void *EXTI_APvidGenericParameters[MAX_NUM_EXTI] = {NULL, NULL, NULL};
	

ES_t EXTI_enuInit(EXTI_Configuration_t *Copy_PEXTI_Config)
{
    2956:	df 93       	push	r29
    2958:	cf 93       	push	r28
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
    295e:	2c 97       	sbiw	r28, 0x0c	; 12
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	f8 94       	cli
    2964:	de bf       	out	0x3e, r29	; 62
    2966:	0f be       	out	0x3f, r0	; 63
    2968:	cd bf       	out	0x3d, r28	; 61
    296a:	9c 83       	std	Y+4, r25	; 0x04
    296c:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	8a 83       	std	Y+2, r24	; 0x02
	
	if(Copy_PEXTI_Config != NULL)
    2972:	8b 81       	ldd	r24, Y+3	; 0x03
    2974:	9c 81       	ldd	r25, Y+4	; 0x04
    2976:	00 97       	sbiw	r24, 0x00	; 0
    2978:	09 f4       	brne	.+2      	; 0x297c <EXTI_enuInit+0x26>
    297a:	7d c1       	rjmp	.+762    	; 0x2c76 <EXTI_enuInit+0x320>
	{
		u8 Local_u8Iterator = 0;
    297c:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8Iterator = 0; Local_u8Iterator < MAX_NUM_EXTI; Local_u8Iterator++)
    297e:	19 82       	std	Y+1, r1	; 0x01
    2980:	75 c1       	rjmp	.+746    	; 0x2c6c <EXTI_enuInit+0x316>
		{
			switch(Copy_PEXTI_Config[Local_u8Iterator].EXTI_id)
    2982:	89 81       	ldd	r24, Y+1	; 0x01
    2984:	28 2f       	mov	r18, r24
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	c9 01       	movw	r24, r18
    298a:	88 0f       	add	r24, r24
    298c:	99 1f       	adc	r25, r25
    298e:	28 0f       	add	r18, r24
    2990:	39 1f       	adc	r19, r25
    2992:	8b 81       	ldd	r24, Y+3	; 0x03
    2994:	9c 81       	ldd	r25, Y+4	; 0x04
    2996:	fc 01       	movw	r30, r24
    2998:	e2 0f       	add	r30, r18
    299a:	f3 1f       	adc	r31, r19
    299c:	80 81       	ld	r24, Z
    299e:	28 2f       	mov	r18, r24
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	3c 87       	std	Y+12, r19	; 0x0c
    29a4:	2b 87       	std	Y+11, r18	; 0x0b
    29a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    29a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    29aa:	81 30       	cpi	r24, 0x01	; 1
    29ac:	91 05       	cpc	r25, r1
    29ae:	09 f4       	brne	.+2      	; 0x29b2 <EXTI_enuInit+0x5c>
    29b0:	8e c0       	rjmp	.+284    	; 0x2ace <EXTI_enuInit+0x178>
    29b2:	2b 85       	ldd	r18, Y+11	; 0x0b
    29b4:	3c 85       	ldd	r19, Y+12	; 0x0c
    29b6:	22 30       	cpi	r18, 0x02	; 2
    29b8:	31 05       	cpc	r19, r1
    29ba:	09 f4       	brne	.+2      	; 0x29be <EXTI_enuInit+0x68>
    29bc:	0b c1       	rjmp	.+534    	; 0x2bd4 <EXTI_enuInit+0x27e>
    29be:	8b 85       	ldd	r24, Y+11	; 0x0b
    29c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    29c2:	00 97       	sbiw	r24, 0x00	; 0
    29c4:	09 f0       	breq	.+2      	; 0x29c8 <EXTI_enuInit+0x72>
    29c6:	4d c1       	rjmp	.+666    	; 0x2c62 <EXTI_enuInit+0x30c>
			{
				case EXTI0:
				if(Copy_PEXTI_Config[Local_u8Iterator].EXTI_state == ENABLED)
    29c8:	89 81       	ldd	r24, Y+1	; 0x01
    29ca:	28 2f       	mov	r18, r24
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	c9 01       	movw	r24, r18
    29d0:	88 0f       	add	r24, r24
    29d2:	99 1f       	adc	r25, r25
    29d4:	28 0f       	add	r18, r24
    29d6:	39 1f       	adc	r19, r25
    29d8:	8b 81       	ldd	r24, Y+3	; 0x03
    29da:	9c 81       	ldd	r25, Y+4	; 0x04
    29dc:	fc 01       	movw	r30, r24
    29de:	e2 0f       	add	r30, r18
    29e0:	f3 1f       	adc	r31, r19
    29e2:	81 81       	ldd	r24, Z+1	; 0x01
    29e4:	88 23       	and	r24, r24
    29e6:	09 f0       	breq	.+2      	; 0x29ea <EXTI_enuInit+0x94>
    29e8:	3e c1       	rjmp	.+636    	; 0x2c66 <EXTI_enuInit+0x310>
				{
					//Masking the 2 bits --> ISC00, ISC01
					MCUCR &= ~(3 << 0);
    29ea:	a5 e5       	ldi	r26, 0x55	; 85
    29ec:	b0 e0       	ldi	r27, 0x00	; 0
    29ee:	e5 e5       	ldi	r30, 0x55	; 85
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	80 81       	ld	r24, Z
    29f4:	8c 7f       	andi	r24, 0xFC	; 252
    29f6:	8c 93       	st	X, r24
					switch(Copy_PEXTI_Config[Local_u8Iterator].EXTI_control_state)
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	28 2f       	mov	r18, r24
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	c9 01       	movw	r24, r18
    2a00:	88 0f       	add	r24, r24
    2a02:	99 1f       	adc	r25, r25
    2a04:	28 0f       	add	r18, r24
    2a06:	39 1f       	adc	r19, r25
    2a08:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a0c:	fc 01       	movw	r30, r24
    2a0e:	e2 0f       	add	r30, r18
    2a10:	f3 1f       	adc	r31, r19
    2a12:	82 81       	ldd	r24, Z+2	; 0x02
    2a14:	28 2f       	mov	r18, r24
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	3a 87       	std	Y+10, r19	; 0x0a
    2a1a:	29 87       	std	Y+9, r18	; 0x09
    2a1c:	89 85       	ldd	r24, Y+9	; 0x09
    2a1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a20:	81 30       	cpi	r24, 0x01	; 1
    2a22:	91 05       	cpc	r25, r1
    2a24:	21 f1       	breq	.+72     	; 0x2a6e <EXTI_enuInit+0x118>
    2a26:	29 85       	ldd	r18, Y+9	; 0x09
    2a28:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a2a:	22 30       	cpi	r18, 0x02	; 2
    2a2c:	31 05       	cpc	r19, r1
    2a2e:	2c f4       	brge	.+10     	; 0x2a3a <EXTI_enuInit+0xe4>
    2a30:	89 85       	ldd	r24, Y+9	; 0x09
    2a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a34:	00 97       	sbiw	r24, 0x00	; 0
    2a36:	61 f0       	breq	.+24     	; 0x2a50 <EXTI_enuInit+0xfa>
    2a38:	47 c0       	rjmp	.+142    	; 0x2ac8 <EXTI_enuInit+0x172>
    2a3a:	29 85       	ldd	r18, Y+9	; 0x09
    2a3c:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a3e:	22 30       	cpi	r18, 0x02	; 2
    2a40:	31 05       	cpc	r19, r1
    2a42:	21 f1       	breq	.+72     	; 0x2a8c <EXTI_enuInit+0x136>
    2a44:	89 85       	ldd	r24, Y+9	; 0x09
    2a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a48:	83 30       	cpi	r24, 0x03	; 3
    2a4a:	91 05       	cpc	r25, r1
    2a4c:	71 f1       	breq	.+92     	; 0x2aaa <EXTI_enuInit+0x154>
    2a4e:	3c c0       	rjmp	.+120    	; 0x2ac8 <EXTI_enuInit+0x172>
					{
						case LOW_LEVEL:
						MCUCR &= ~(MASK_BIT << ISC00);
    2a50:	a5 e5       	ldi	r26, 0x55	; 85
    2a52:	b0 e0       	ldi	r27, 0x00	; 0
    2a54:	e5 e5       	ldi	r30, 0x55	; 85
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	80 81       	ld	r24, Z
    2a5a:	8e 7f       	andi	r24, 0xFE	; 254
    2a5c:	8c 93       	st	X, r24
						MCUCR &= ~(MASK_BIT << ISC01);
    2a5e:	a5 e5       	ldi	r26, 0x55	; 85
    2a60:	b0 e0       	ldi	r27, 0x00	; 0
    2a62:	e5 e5       	ldi	r30, 0x55	; 85
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	80 81       	ld	r24, Z
    2a68:	8d 7f       	andi	r24, 0xFD	; 253
    2a6a:	8c 93       	st	X, r24
    2a6c:	fc c0       	rjmp	.+504    	; 0x2c66 <EXTI_enuInit+0x310>
						break;
						
						case LOGICAL:
						MCUCR |= (MASK_BIT << ISC00);
    2a6e:	a5 e5       	ldi	r26, 0x55	; 85
    2a70:	b0 e0       	ldi	r27, 0x00	; 0
    2a72:	e5 e5       	ldi	r30, 0x55	; 85
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	80 81       	ld	r24, Z
    2a78:	81 60       	ori	r24, 0x01	; 1
    2a7a:	8c 93       	st	X, r24
						MCUCR &= ~(MASK_BIT << ISC01);
    2a7c:	a5 e5       	ldi	r26, 0x55	; 85
    2a7e:	b0 e0       	ldi	r27, 0x00	; 0
    2a80:	e5 e5       	ldi	r30, 0x55	; 85
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	80 81       	ld	r24, Z
    2a86:	8d 7f       	andi	r24, 0xFD	; 253
    2a88:	8c 93       	st	X, r24
    2a8a:	ed c0       	rjmp	.+474    	; 0x2c66 <EXTI_enuInit+0x310>
						break;
						
						case FAILLING:
						MCUCR &= ~(MASK_BIT << ISC00);
    2a8c:	a5 e5       	ldi	r26, 0x55	; 85
    2a8e:	b0 e0       	ldi	r27, 0x00	; 0
    2a90:	e5 e5       	ldi	r30, 0x55	; 85
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	80 81       	ld	r24, Z
    2a96:	8e 7f       	andi	r24, 0xFE	; 254
    2a98:	8c 93       	st	X, r24
						MCUCR |= (MASK_BIT << ISC01);
    2a9a:	a5 e5       	ldi	r26, 0x55	; 85
    2a9c:	b0 e0       	ldi	r27, 0x00	; 0
    2a9e:	e5 e5       	ldi	r30, 0x55	; 85
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	80 81       	ld	r24, Z
    2aa4:	82 60       	ori	r24, 0x02	; 2
    2aa6:	8c 93       	st	X, r24
    2aa8:	de c0       	rjmp	.+444    	; 0x2c66 <EXTI_enuInit+0x310>
						break;
						
						case RISING:
						MCUCR |= (MASK_BIT << ISC00);
    2aaa:	a5 e5       	ldi	r26, 0x55	; 85
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	e5 e5       	ldi	r30, 0x55	; 85
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
    2ab4:	81 60       	ori	r24, 0x01	; 1
    2ab6:	8c 93       	st	X, r24
						MCUCR |= (MASK_BIT << ISC01);
    2ab8:	a5 e5       	ldi	r26, 0x55	; 85
    2aba:	b0 e0       	ldi	r27, 0x00	; 0
    2abc:	e5 e5       	ldi	r30, 0x55	; 85
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	80 81       	ld	r24, Z
    2ac2:	82 60       	ori	r24, 0x02	; 2
    2ac4:	8c 93       	st	X, r24
    2ac6:	cf c0       	rjmp	.+414    	; 0x2c66 <EXTI_enuInit+0x310>
						break;
						
						default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
    2ac8:	83 e0       	ldi	r24, 0x03	; 3
    2aca:	8a 83       	std	Y+2, r24	; 0x02
    2acc:	cc c0       	rjmp	.+408    	; 0x2c66 <EXTI_enuInit+0x310>
					}
				}
				break;
				
				case EXTI1:
				if(Copy_PEXTI_Config[Local_u8Iterator].EXTI_state == ENABLED)
    2ace:	89 81       	ldd	r24, Y+1	; 0x01
    2ad0:	28 2f       	mov	r18, r24
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	c9 01       	movw	r24, r18
    2ad6:	88 0f       	add	r24, r24
    2ad8:	99 1f       	adc	r25, r25
    2ada:	28 0f       	add	r18, r24
    2adc:	39 1f       	adc	r19, r25
    2ade:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae2:	fc 01       	movw	r30, r24
    2ae4:	e2 0f       	add	r30, r18
    2ae6:	f3 1f       	adc	r31, r19
    2ae8:	81 81       	ldd	r24, Z+1	; 0x01
    2aea:	88 23       	and	r24, r24
    2aec:	09 f0       	breq	.+2      	; 0x2af0 <EXTI_enuInit+0x19a>
    2aee:	bb c0       	rjmp	.+374    	; 0x2c66 <EXTI_enuInit+0x310>
				{
					//Masking the 2 bits --> ISC10, ISC11
					MCUCR &= ~(3 << 2);
    2af0:	a5 e5       	ldi	r26, 0x55	; 85
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	e5 e5       	ldi	r30, 0x55	; 85
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	80 81       	ld	r24, Z
    2afa:	83 7f       	andi	r24, 0xF3	; 243
    2afc:	8c 93       	st	X, r24
					switch(Copy_PEXTI_Config[Local_u8Iterator].EXTI_control_state)
    2afe:	89 81       	ldd	r24, Y+1	; 0x01
    2b00:	28 2f       	mov	r18, r24
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	c9 01       	movw	r24, r18
    2b06:	88 0f       	add	r24, r24
    2b08:	99 1f       	adc	r25, r25
    2b0a:	28 0f       	add	r18, r24
    2b0c:	39 1f       	adc	r19, r25
    2b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b10:	9c 81       	ldd	r25, Y+4	; 0x04
    2b12:	fc 01       	movw	r30, r24
    2b14:	e2 0f       	add	r30, r18
    2b16:	f3 1f       	adc	r31, r19
    2b18:	82 81       	ldd	r24, Z+2	; 0x02
    2b1a:	28 2f       	mov	r18, r24
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	38 87       	std	Y+8, r19	; 0x08
    2b20:	2f 83       	std	Y+7, r18	; 0x07
    2b22:	8f 81       	ldd	r24, Y+7	; 0x07
    2b24:	98 85       	ldd	r25, Y+8	; 0x08
    2b26:	81 30       	cpi	r24, 0x01	; 1
    2b28:	91 05       	cpc	r25, r1
    2b2a:	21 f1       	breq	.+72     	; 0x2b74 <EXTI_enuInit+0x21e>
    2b2c:	2f 81       	ldd	r18, Y+7	; 0x07
    2b2e:	38 85       	ldd	r19, Y+8	; 0x08
    2b30:	22 30       	cpi	r18, 0x02	; 2
    2b32:	31 05       	cpc	r19, r1
    2b34:	2c f4       	brge	.+10     	; 0x2b40 <EXTI_enuInit+0x1ea>
    2b36:	8f 81       	ldd	r24, Y+7	; 0x07
    2b38:	98 85       	ldd	r25, Y+8	; 0x08
    2b3a:	00 97       	sbiw	r24, 0x00	; 0
    2b3c:	61 f0       	breq	.+24     	; 0x2b56 <EXTI_enuInit+0x200>
    2b3e:	47 c0       	rjmp	.+142    	; 0x2bce <EXTI_enuInit+0x278>
    2b40:	2f 81       	ldd	r18, Y+7	; 0x07
    2b42:	38 85       	ldd	r19, Y+8	; 0x08
    2b44:	22 30       	cpi	r18, 0x02	; 2
    2b46:	31 05       	cpc	r19, r1
    2b48:	21 f1       	breq	.+72     	; 0x2b92 <EXTI_enuInit+0x23c>
    2b4a:	8f 81       	ldd	r24, Y+7	; 0x07
    2b4c:	98 85       	ldd	r25, Y+8	; 0x08
    2b4e:	83 30       	cpi	r24, 0x03	; 3
    2b50:	91 05       	cpc	r25, r1
    2b52:	71 f1       	breq	.+92     	; 0x2bb0 <EXTI_enuInit+0x25a>
    2b54:	3c c0       	rjmp	.+120    	; 0x2bce <EXTI_enuInit+0x278>
					{
						case LOW_LEVEL:
						MCUCR &= ~(MASK_BIT << ISC10);
    2b56:	a5 e5       	ldi	r26, 0x55	; 85
    2b58:	b0 e0       	ldi	r27, 0x00	; 0
    2b5a:	e5 e5       	ldi	r30, 0x55	; 85
    2b5c:	f0 e0       	ldi	r31, 0x00	; 0
    2b5e:	80 81       	ld	r24, Z
    2b60:	8b 7f       	andi	r24, 0xFB	; 251
    2b62:	8c 93       	st	X, r24
						MCUCR &= ~(MASK_BIT << ISC11);
    2b64:	a5 e5       	ldi	r26, 0x55	; 85
    2b66:	b0 e0       	ldi	r27, 0x00	; 0
    2b68:	e5 e5       	ldi	r30, 0x55	; 85
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	80 81       	ld	r24, Z
    2b6e:	87 7f       	andi	r24, 0xF7	; 247
    2b70:	8c 93       	st	X, r24
    2b72:	79 c0       	rjmp	.+242    	; 0x2c66 <EXTI_enuInit+0x310>
						break;
						
						case LOGICAL:
						MCUCR |= (MASK_BIT << ISC10);
    2b74:	a5 e5       	ldi	r26, 0x55	; 85
    2b76:	b0 e0       	ldi	r27, 0x00	; 0
    2b78:	e5 e5       	ldi	r30, 0x55	; 85
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	80 81       	ld	r24, Z
    2b7e:	84 60       	ori	r24, 0x04	; 4
    2b80:	8c 93       	st	X, r24
						MCUCR &= ~(MASK_BIT << ISC11);
    2b82:	a5 e5       	ldi	r26, 0x55	; 85
    2b84:	b0 e0       	ldi	r27, 0x00	; 0
    2b86:	e5 e5       	ldi	r30, 0x55	; 85
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	80 81       	ld	r24, Z
    2b8c:	87 7f       	andi	r24, 0xF7	; 247
    2b8e:	8c 93       	st	X, r24
    2b90:	6a c0       	rjmp	.+212    	; 0x2c66 <EXTI_enuInit+0x310>
						break;
						
						case FAILLING:
						MCUCR &= ~(MASK_BIT << ISC10);
    2b92:	a5 e5       	ldi	r26, 0x55	; 85
    2b94:	b0 e0       	ldi	r27, 0x00	; 0
    2b96:	e5 e5       	ldi	r30, 0x55	; 85
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	80 81       	ld	r24, Z
    2b9c:	8b 7f       	andi	r24, 0xFB	; 251
    2b9e:	8c 93       	st	X, r24
						MCUCR |= (MASK_BIT << ISC11);
    2ba0:	a5 e5       	ldi	r26, 0x55	; 85
    2ba2:	b0 e0       	ldi	r27, 0x00	; 0
    2ba4:	e5 e5       	ldi	r30, 0x55	; 85
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	80 81       	ld	r24, Z
    2baa:	88 60       	ori	r24, 0x08	; 8
    2bac:	8c 93       	st	X, r24
    2bae:	5b c0       	rjmp	.+182    	; 0x2c66 <EXTI_enuInit+0x310>
						break;
						
						case RISING:
						MCUCR |= (MASK_BIT << ISC10);
    2bb0:	a5 e5       	ldi	r26, 0x55	; 85
    2bb2:	b0 e0       	ldi	r27, 0x00	; 0
    2bb4:	e5 e5       	ldi	r30, 0x55	; 85
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	80 81       	ld	r24, Z
    2bba:	84 60       	ori	r24, 0x04	; 4
    2bbc:	8c 93       	st	X, r24
						MCUCR |= (MASK_BIT << ISC11);
    2bbe:	a5 e5       	ldi	r26, 0x55	; 85
    2bc0:	b0 e0       	ldi	r27, 0x00	; 0
    2bc2:	e5 e5       	ldi	r30, 0x55	; 85
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	80 81       	ld	r24, Z
    2bc8:	88 60       	ori	r24, 0x08	; 8
    2bca:	8c 93       	st	X, r24
    2bcc:	4c c0       	rjmp	.+152    	; 0x2c66 <EXTI_enuInit+0x310>
						break;
						
						default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
    2bce:	83 e0       	ldi	r24, 0x03	; 3
    2bd0:	8a 83       	std	Y+2, r24	; 0x02
    2bd2:	49 c0       	rjmp	.+146    	; 0x2c66 <EXTI_enuInit+0x310>
					}
				}
				break;
				
				case EXTI2:
				if(Copy_PEXTI_Config[Local_u8Iterator].EXTI_state == ENABLED)
    2bd4:	89 81       	ldd	r24, Y+1	; 0x01
    2bd6:	28 2f       	mov	r18, r24
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	c9 01       	movw	r24, r18
    2bdc:	88 0f       	add	r24, r24
    2bde:	99 1f       	adc	r25, r25
    2be0:	28 0f       	add	r18, r24
    2be2:	39 1f       	adc	r19, r25
    2be4:	8b 81       	ldd	r24, Y+3	; 0x03
    2be6:	9c 81       	ldd	r25, Y+4	; 0x04
    2be8:	fc 01       	movw	r30, r24
    2bea:	e2 0f       	add	r30, r18
    2bec:	f3 1f       	adc	r31, r19
    2bee:	81 81       	ldd	r24, Z+1	; 0x01
    2bf0:	88 23       	and	r24, r24
    2bf2:	c9 f5       	brne	.+114    	; 0x2c66 <EXTI_enuInit+0x310>
				{
					//Masking the bit --> ISC2
					MCUCSR &= ~(1 << 6);
    2bf4:	a4 e5       	ldi	r26, 0x54	; 84
    2bf6:	b0 e0       	ldi	r27, 0x00	; 0
    2bf8:	e4 e5       	ldi	r30, 0x54	; 84
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	80 81       	ld	r24, Z
    2bfe:	8f 7b       	andi	r24, 0xBF	; 191
    2c00:	8c 93       	st	X, r24
					switch(Copy_PEXTI_Config[Local_u8Iterator].EXTI_control_state)
    2c02:	89 81       	ldd	r24, Y+1	; 0x01
    2c04:	28 2f       	mov	r18, r24
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	c9 01       	movw	r24, r18
    2c0a:	88 0f       	add	r24, r24
    2c0c:	99 1f       	adc	r25, r25
    2c0e:	28 0f       	add	r18, r24
    2c10:	39 1f       	adc	r19, r25
    2c12:	8b 81       	ldd	r24, Y+3	; 0x03
    2c14:	9c 81       	ldd	r25, Y+4	; 0x04
    2c16:	fc 01       	movw	r30, r24
    2c18:	e2 0f       	add	r30, r18
    2c1a:	f3 1f       	adc	r31, r19
    2c1c:	82 81       	ldd	r24, Z+2	; 0x02
    2c1e:	28 2f       	mov	r18, r24
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	3e 83       	std	Y+6, r19	; 0x06
    2c24:	2d 83       	std	Y+5, r18	; 0x05
    2c26:	8d 81       	ldd	r24, Y+5	; 0x05
    2c28:	9e 81       	ldd	r25, Y+6	; 0x06
    2c2a:	82 30       	cpi	r24, 0x02	; 2
    2c2c:	91 05       	cpc	r25, r1
    2c2e:	31 f0       	breq	.+12     	; 0x2c3c <EXTI_enuInit+0x2e6>
    2c30:	2d 81       	ldd	r18, Y+5	; 0x05
    2c32:	3e 81       	ldd	r19, Y+6	; 0x06
    2c34:	23 30       	cpi	r18, 0x03	; 3
    2c36:	31 05       	cpc	r19, r1
    2c38:	49 f0       	breq	.+18     	; 0x2c4c <EXTI_enuInit+0x2f6>
    2c3a:	10 c0       	rjmp	.+32     	; 0x2c5c <EXTI_enuInit+0x306>
					{			
						case FAILLING:
						MCUCSR &= ~(MASK_BIT << ISC2);
    2c3c:	a4 e5       	ldi	r26, 0x54	; 84
    2c3e:	b0 e0       	ldi	r27, 0x00	; 0
    2c40:	e4 e5       	ldi	r30, 0x54	; 84
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	80 81       	ld	r24, Z
    2c46:	8f 7b       	andi	r24, 0xBF	; 191
    2c48:	8c 93       	st	X, r24
    2c4a:	0d c0       	rjmp	.+26     	; 0x2c66 <EXTI_enuInit+0x310>
						break;
						
						case RISING:
						MCUCSR |= (MASK_BIT << ISC2);
    2c4c:	a4 e5       	ldi	r26, 0x54	; 84
    2c4e:	b0 e0       	ldi	r27, 0x00	; 0
    2c50:	e4 e5       	ldi	r30, 0x54	; 84
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	80 81       	ld	r24, Z
    2c56:	80 64       	ori	r24, 0x40	; 64
    2c58:	8c 93       	st	X, r24
    2c5a:	05 c0       	rjmp	.+10     	; 0x2c66 <EXTI_enuInit+0x310>
						break;
						
						default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
    2c5c:	83 e0       	ldi	r24, 0x03	; 3
    2c5e:	8a 83       	std	Y+2, r24	; 0x02
    2c60:	02 c0       	rjmp	.+4      	; 0x2c66 <EXTI_enuInit+0x310>
					}			
				}
				break;
				
				default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    2c62:	83 e0       	ldi	r24, 0x03	; 3
    2c64:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_PEXTI_Config != NULL)
	{
		u8 Local_u8Iterator = 0;
		for(Local_u8Iterator = 0; Local_u8Iterator < MAX_NUM_EXTI; Local_u8Iterator++)
    2c66:	89 81       	ldd	r24, Y+1	; 0x01
    2c68:	8f 5f       	subi	r24, 0xFF	; 255
    2c6a:	89 83       	std	Y+1, r24	; 0x01
    2c6c:	89 81       	ldd	r24, Y+1	; 0x01
    2c6e:	83 30       	cpi	r24, 0x03	; 3
    2c70:	08 f4       	brcc	.+2      	; 0x2c74 <EXTI_enuInit+0x31e>
    2c72:	87 ce       	rjmp	.-754    	; 0x2982 <EXTI_enuInit+0x2c>
    2c74:	02 c0       	rjmp	.+4      	; 0x2c7a <EXTI_enuInit+0x324>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2c76:	82 e0       	ldi	r24, 0x02	; 2
    2c78:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	return Local_enuErrorState;
    2c7a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2c7c:	2c 96       	adiw	r28, 0x0c	; 12
    2c7e:	0f b6       	in	r0, 0x3f	; 63
    2c80:	f8 94       	cli
    2c82:	de bf       	out	0x3e, r29	; 62
    2c84:	0f be       	out	0x3f, r0	; 63
    2c86:	cd bf       	out	0x3d, r28	; 61
    2c88:	cf 91       	pop	r28
    2c8a:	df 91       	pop	r29
    2c8c:	08 95       	ret

00002c8e <EXTI_enuChange_Control_State>:

ES_t EXTI_enuChange_Control_State(EXTI_ID_t Copy_enuEXTI_Id, EXTI_CTL_STATE_t Copy_enuControlState)
{
    2c8e:	df 93       	push	r29
    2c90:	cf 93       	push	r28
    2c92:	cd b7       	in	r28, 0x3d	; 61
    2c94:	de b7       	in	r29, 0x3e	; 62
    2c96:	2b 97       	sbiw	r28, 0x0b	; 11
    2c98:	0f b6       	in	r0, 0x3f	; 63
    2c9a:	f8 94       	cli
    2c9c:	de bf       	out	0x3e, r29	; 62
    2c9e:	0f be       	out	0x3f, r0	; 63
    2ca0:	cd bf       	out	0x3d, r28	; 61
    2ca2:	8a 83       	std	Y+2, r24	; 0x02
    2ca4:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_enuEXTI_Id < MAX_NUM_EXTI)
    2caa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cac:	83 30       	cpi	r24, 0x03	; 3
    2cae:	08 f0       	brcs	.+2      	; 0x2cb2 <EXTI_enuChange_Control_State+0x24>
    2cb0:	0d c1       	rjmp	.+538    	; 0x2ecc <EXTI_enuChange_Control_State+0x23e>
	{
		switch(Copy_enuEXTI_Id)
    2cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb4:	28 2f       	mov	r18, r24
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	3b 87       	std	Y+11, r19	; 0x0b
    2cba:	2a 87       	std	Y+10, r18	; 0x0a
    2cbc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cbe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cc0:	81 30       	cpi	r24, 0x01	; 1
    2cc2:	91 05       	cpc	r25, r1
    2cc4:	09 f4       	brne	.+2      	; 0x2cc8 <EXTI_enuChange_Control_State+0x3a>
    2cc6:	70 c0       	rjmp	.+224    	; 0x2da8 <EXTI_enuChange_Control_State+0x11a>
    2cc8:	2a 85       	ldd	r18, Y+10	; 0x0a
    2cca:	3b 85       	ldd	r19, Y+11	; 0x0b
    2ccc:	22 30       	cpi	r18, 0x02	; 2
    2cce:	31 05       	cpc	r19, r1
    2cd0:	09 f4       	brne	.+2      	; 0x2cd4 <EXTI_enuChange_Control_State+0x46>
    2cd2:	cf c0       	rjmp	.+414    	; 0x2e72 <EXTI_enuChange_Control_State+0x1e4>
    2cd4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cd6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cd8:	00 97       	sbiw	r24, 0x00	; 0
    2cda:	09 f0       	breq	.+2      	; 0x2cde <EXTI_enuChange_Control_State+0x50>
    2cdc:	f4 c0       	rjmp	.+488    	; 0x2ec6 <EXTI_enuChange_Control_State+0x238>
		{
			case EXTI0:
			//Masking the 2 bits --> ISC00, ISC01
			MCUCR &= ~(3 << 0);
    2cde:	a5 e5       	ldi	r26, 0x55	; 85
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	e5 e5       	ldi	r30, 0x55	; 85
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	8c 7f       	andi	r24, 0xFC	; 252
    2cea:	8c 93       	st	X, r24
			switch(Copy_enuControlState)
    2cec:	8b 81       	ldd	r24, Y+3	; 0x03
    2cee:	28 2f       	mov	r18, r24
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	39 87       	std	Y+9, r19	; 0x09
    2cf4:	28 87       	std	Y+8, r18	; 0x08
    2cf6:	88 85       	ldd	r24, Y+8	; 0x08
    2cf8:	99 85       	ldd	r25, Y+9	; 0x09
    2cfa:	81 30       	cpi	r24, 0x01	; 1
    2cfc:	91 05       	cpc	r25, r1
    2cfe:	21 f1       	breq	.+72     	; 0x2d48 <EXTI_enuChange_Control_State+0xba>
    2d00:	28 85       	ldd	r18, Y+8	; 0x08
    2d02:	39 85       	ldd	r19, Y+9	; 0x09
    2d04:	22 30       	cpi	r18, 0x02	; 2
    2d06:	31 05       	cpc	r19, r1
    2d08:	2c f4       	brge	.+10     	; 0x2d14 <EXTI_enuChange_Control_State+0x86>
    2d0a:	88 85       	ldd	r24, Y+8	; 0x08
    2d0c:	99 85       	ldd	r25, Y+9	; 0x09
    2d0e:	00 97       	sbiw	r24, 0x00	; 0
    2d10:	61 f0       	breq	.+24     	; 0x2d2a <EXTI_enuChange_Control_State+0x9c>
    2d12:	47 c0       	rjmp	.+142    	; 0x2da2 <EXTI_enuChange_Control_State+0x114>
    2d14:	28 85       	ldd	r18, Y+8	; 0x08
    2d16:	39 85       	ldd	r19, Y+9	; 0x09
    2d18:	22 30       	cpi	r18, 0x02	; 2
    2d1a:	31 05       	cpc	r19, r1
    2d1c:	21 f1       	breq	.+72     	; 0x2d66 <EXTI_enuChange_Control_State+0xd8>
    2d1e:	88 85       	ldd	r24, Y+8	; 0x08
    2d20:	99 85       	ldd	r25, Y+9	; 0x09
    2d22:	83 30       	cpi	r24, 0x03	; 3
    2d24:	91 05       	cpc	r25, r1
    2d26:	71 f1       	breq	.+92     	; 0x2d84 <EXTI_enuChange_Control_State+0xf6>
    2d28:	3c c0       	rjmp	.+120    	; 0x2da2 <EXTI_enuChange_Control_State+0x114>
			{
				case LOW_LEVEL:
				MCUCR &= ~(MASK_BIT << ISC00);
    2d2a:	a5 e5       	ldi	r26, 0x55	; 85
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	e5 e5       	ldi	r30, 0x55	; 85
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	8e 7f       	andi	r24, 0xFE	; 254
    2d36:	8c 93       	st	X, r24
				MCUCR &= ~(MASK_BIT << ISC01);
    2d38:	a5 e5       	ldi	r26, 0x55	; 85
    2d3a:	b0 e0       	ldi	r27, 0x00	; 0
    2d3c:	e5 e5       	ldi	r30, 0x55	; 85
    2d3e:	f0 e0       	ldi	r31, 0x00	; 0
    2d40:	80 81       	ld	r24, Z
    2d42:	8d 7f       	andi	r24, 0xFD	; 253
    2d44:	8c 93       	st	X, r24
    2d46:	c4 c0       	rjmp	.+392    	; 0x2ed0 <EXTI_enuChange_Control_State+0x242>
				break;
				
				case LOGICAL:
				MCUCR |= (MASK_BIT << ISC00);
    2d48:	a5 e5       	ldi	r26, 0x55	; 85
    2d4a:	b0 e0       	ldi	r27, 0x00	; 0
    2d4c:	e5 e5       	ldi	r30, 0x55	; 85
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	80 81       	ld	r24, Z
    2d52:	81 60       	ori	r24, 0x01	; 1
    2d54:	8c 93       	st	X, r24
				MCUCR &= ~(MASK_BIT << ISC01);
    2d56:	a5 e5       	ldi	r26, 0x55	; 85
    2d58:	b0 e0       	ldi	r27, 0x00	; 0
    2d5a:	e5 e5       	ldi	r30, 0x55	; 85
    2d5c:	f0 e0       	ldi	r31, 0x00	; 0
    2d5e:	80 81       	ld	r24, Z
    2d60:	8d 7f       	andi	r24, 0xFD	; 253
    2d62:	8c 93       	st	X, r24
    2d64:	b5 c0       	rjmp	.+362    	; 0x2ed0 <EXTI_enuChange_Control_State+0x242>
				break;
				
				case FAILLING:
				MCUCR &= ~(MASK_BIT << ISC00);
    2d66:	a5 e5       	ldi	r26, 0x55	; 85
    2d68:	b0 e0       	ldi	r27, 0x00	; 0
    2d6a:	e5 e5       	ldi	r30, 0x55	; 85
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	80 81       	ld	r24, Z
    2d70:	8e 7f       	andi	r24, 0xFE	; 254
    2d72:	8c 93       	st	X, r24
				MCUCR |= (MASK_BIT << ISC01);
    2d74:	a5 e5       	ldi	r26, 0x55	; 85
    2d76:	b0 e0       	ldi	r27, 0x00	; 0
    2d78:	e5 e5       	ldi	r30, 0x55	; 85
    2d7a:	f0 e0       	ldi	r31, 0x00	; 0
    2d7c:	80 81       	ld	r24, Z
    2d7e:	82 60       	ori	r24, 0x02	; 2
    2d80:	8c 93       	st	X, r24
    2d82:	a6 c0       	rjmp	.+332    	; 0x2ed0 <EXTI_enuChange_Control_State+0x242>
				break;
				
				case RISING:
				MCUCR |= (MASK_BIT << ISC00);
    2d84:	a5 e5       	ldi	r26, 0x55	; 85
    2d86:	b0 e0       	ldi	r27, 0x00	; 0
    2d88:	e5 e5       	ldi	r30, 0x55	; 85
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	80 81       	ld	r24, Z
    2d8e:	81 60       	ori	r24, 0x01	; 1
    2d90:	8c 93       	st	X, r24
				MCUCR |= (MASK_BIT << ISC01);
    2d92:	a5 e5       	ldi	r26, 0x55	; 85
    2d94:	b0 e0       	ldi	r27, 0x00	; 0
    2d96:	e5 e5       	ldi	r30, 0x55	; 85
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	80 81       	ld	r24, Z
    2d9c:	82 60       	ori	r24, 0x02	; 2
    2d9e:	8c 93       	st	X, r24
    2da0:	97 c0       	rjmp	.+302    	; 0x2ed0 <EXTI_enuChange_Control_State+0x242>
				break;
				
				default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    2da2:	83 e0       	ldi	r24, 0x03	; 3
    2da4:	89 83       	std	Y+1, r24	; 0x01
    2da6:	94 c0       	rjmp	.+296    	; 0x2ed0 <EXTI_enuChange_Control_State+0x242>
			}
			break;
			
			case EXTI1:
			//Masking the 2 bits --> ISC10, ISC11
			MCUCR &= ~(3 << 2);
    2da8:	a5 e5       	ldi	r26, 0x55	; 85
    2daa:	b0 e0       	ldi	r27, 0x00	; 0
    2dac:	e5 e5       	ldi	r30, 0x55	; 85
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	80 81       	ld	r24, Z
    2db2:	83 7f       	andi	r24, 0xF3	; 243
    2db4:	8c 93       	st	X, r24
			switch(Copy_enuControlState)
    2db6:	8b 81       	ldd	r24, Y+3	; 0x03
    2db8:	28 2f       	mov	r18, r24
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	3f 83       	std	Y+7, r19	; 0x07
    2dbe:	2e 83       	std	Y+6, r18	; 0x06
    2dc0:	8e 81       	ldd	r24, Y+6	; 0x06
    2dc2:	9f 81       	ldd	r25, Y+7	; 0x07
    2dc4:	81 30       	cpi	r24, 0x01	; 1
    2dc6:	91 05       	cpc	r25, r1
    2dc8:	21 f1       	breq	.+72     	; 0x2e12 <EXTI_enuChange_Control_State+0x184>
    2dca:	2e 81       	ldd	r18, Y+6	; 0x06
    2dcc:	3f 81       	ldd	r19, Y+7	; 0x07
    2dce:	22 30       	cpi	r18, 0x02	; 2
    2dd0:	31 05       	cpc	r19, r1
    2dd2:	2c f4       	brge	.+10     	; 0x2dde <EXTI_enuChange_Control_State+0x150>
    2dd4:	8e 81       	ldd	r24, Y+6	; 0x06
    2dd6:	9f 81       	ldd	r25, Y+7	; 0x07
    2dd8:	00 97       	sbiw	r24, 0x00	; 0
    2dda:	61 f0       	breq	.+24     	; 0x2df4 <EXTI_enuChange_Control_State+0x166>
    2ddc:	47 c0       	rjmp	.+142    	; 0x2e6c <EXTI_enuChange_Control_State+0x1de>
    2dde:	2e 81       	ldd	r18, Y+6	; 0x06
    2de0:	3f 81       	ldd	r19, Y+7	; 0x07
    2de2:	22 30       	cpi	r18, 0x02	; 2
    2de4:	31 05       	cpc	r19, r1
    2de6:	21 f1       	breq	.+72     	; 0x2e30 <EXTI_enuChange_Control_State+0x1a2>
    2de8:	8e 81       	ldd	r24, Y+6	; 0x06
    2dea:	9f 81       	ldd	r25, Y+7	; 0x07
    2dec:	83 30       	cpi	r24, 0x03	; 3
    2dee:	91 05       	cpc	r25, r1
    2df0:	71 f1       	breq	.+92     	; 0x2e4e <EXTI_enuChange_Control_State+0x1c0>
    2df2:	3c c0       	rjmp	.+120    	; 0x2e6c <EXTI_enuChange_Control_State+0x1de>
			{
				case LOW_LEVEL:
				MCUCR &= ~(MASK_BIT << ISC10);
    2df4:	a5 e5       	ldi	r26, 0x55	; 85
    2df6:	b0 e0       	ldi	r27, 0x00	; 0
    2df8:	e5 e5       	ldi	r30, 0x55	; 85
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	80 81       	ld	r24, Z
    2dfe:	8b 7f       	andi	r24, 0xFB	; 251
    2e00:	8c 93       	st	X, r24
				MCUCR &= ~(MASK_BIT << ISC11);
    2e02:	a5 e5       	ldi	r26, 0x55	; 85
    2e04:	b0 e0       	ldi	r27, 0x00	; 0
    2e06:	e5 e5       	ldi	r30, 0x55	; 85
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	80 81       	ld	r24, Z
    2e0c:	87 7f       	andi	r24, 0xF7	; 247
    2e0e:	8c 93       	st	X, r24
    2e10:	5f c0       	rjmp	.+190    	; 0x2ed0 <EXTI_enuChange_Control_State+0x242>
				break;
				
				case LOGICAL:
				MCUCR |= (MASK_BIT << ISC10);
    2e12:	a5 e5       	ldi	r26, 0x55	; 85
    2e14:	b0 e0       	ldi	r27, 0x00	; 0
    2e16:	e5 e5       	ldi	r30, 0x55	; 85
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	80 81       	ld	r24, Z
    2e1c:	84 60       	ori	r24, 0x04	; 4
    2e1e:	8c 93       	st	X, r24
				MCUCR &= ~(MASK_BIT << ISC11);
    2e20:	a5 e5       	ldi	r26, 0x55	; 85
    2e22:	b0 e0       	ldi	r27, 0x00	; 0
    2e24:	e5 e5       	ldi	r30, 0x55	; 85
    2e26:	f0 e0       	ldi	r31, 0x00	; 0
    2e28:	80 81       	ld	r24, Z
    2e2a:	87 7f       	andi	r24, 0xF7	; 247
    2e2c:	8c 93       	st	X, r24
    2e2e:	50 c0       	rjmp	.+160    	; 0x2ed0 <EXTI_enuChange_Control_State+0x242>
				break;
				
				case FAILLING:
				MCUCR &= ~(MASK_BIT << ISC10);
    2e30:	a5 e5       	ldi	r26, 0x55	; 85
    2e32:	b0 e0       	ldi	r27, 0x00	; 0
    2e34:	e5 e5       	ldi	r30, 0x55	; 85
    2e36:	f0 e0       	ldi	r31, 0x00	; 0
    2e38:	80 81       	ld	r24, Z
    2e3a:	8b 7f       	andi	r24, 0xFB	; 251
    2e3c:	8c 93       	st	X, r24
				MCUCR |= (MASK_BIT << ISC11);
    2e3e:	a5 e5       	ldi	r26, 0x55	; 85
    2e40:	b0 e0       	ldi	r27, 0x00	; 0
    2e42:	e5 e5       	ldi	r30, 0x55	; 85
    2e44:	f0 e0       	ldi	r31, 0x00	; 0
    2e46:	80 81       	ld	r24, Z
    2e48:	88 60       	ori	r24, 0x08	; 8
    2e4a:	8c 93       	st	X, r24
    2e4c:	41 c0       	rjmp	.+130    	; 0x2ed0 <EXTI_enuChange_Control_State+0x242>
				break;
				
				case RISING:
				MCUCR |= (MASK_BIT << ISC10);
    2e4e:	a5 e5       	ldi	r26, 0x55	; 85
    2e50:	b0 e0       	ldi	r27, 0x00	; 0
    2e52:	e5 e5       	ldi	r30, 0x55	; 85
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	80 81       	ld	r24, Z
    2e58:	84 60       	ori	r24, 0x04	; 4
    2e5a:	8c 93       	st	X, r24
				MCUCR |= (MASK_BIT << ISC11);
    2e5c:	a5 e5       	ldi	r26, 0x55	; 85
    2e5e:	b0 e0       	ldi	r27, 0x00	; 0
    2e60:	e5 e5       	ldi	r30, 0x55	; 85
    2e62:	f0 e0       	ldi	r31, 0x00	; 0
    2e64:	80 81       	ld	r24, Z
    2e66:	88 60       	ori	r24, 0x08	; 8
    2e68:	8c 93       	st	X, r24
    2e6a:	32 c0       	rjmp	.+100    	; 0x2ed0 <EXTI_enuChange_Control_State+0x242>
				break;
				
				default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    2e6c:	83 e0       	ldi	r24, 0x03	; 3
    2e6e:	89 83       	std	Y+1, r24	; 0x01
    2e70:	2f c0       	rjmp	.+94     	; 0x2ed0 <EXTI_enuChange_Control_State+0x242>
			}
			break;
			
			case EXTI2:
			//Masking the bit --> ISC2
			MCUCSR &= ~(1 << 6);
    2e72:	a4 e5       	ldi	r26, 0x54	; 84
    2e74:	b0 e0       	ldi	r27, 0x00	; 0
    2e76:	e4 e5       	ldi	r30, 0x54	; 84
    2e78:	f0 e0       	ldi	r31, 0x00	; 0
    2e7a:	80 81       	ld	r24, Z
    2e7c:	8f 7b       	andi	r24, 0xBF	; 191
    2e7e:	8c 93       	st	X, r24
			switch(Copy_enuControlState)
    2e80:	8b 81       	ldd	r24, Y+3	; 0x03
    2e82:	28 2f       	mov	r18, r24
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	3d 83       	std	Y+5, r19	; 0x05
    2e88:	2c 83       	std	Y+4, r18	; 0x04
    2e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e8c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e8e:	82 30       	cpi	r24, 0x02	; 2
    2e90:	91 05       	cpc	r25, r1
    2e92:	31 f0       	breq	.+12     	; 0x2ea0 <EXTI_enuChange_Control_State+0x212>
    2e94:	2c 81       	ldd	r18, Y+4	; 0x04
    2e96:	3d 81       	ldd	r19, Y+5	; 0x05
    2e98:	23 30       	cpi	r18, 0x03	; 3
    2e9a:	31 05       	cpc	r19, r1
    2e9c:	49 f0       	breq	.+18     	; 0x2eb0 <EXTI_enuChange_Control_State+0x222>
    2e9e:	10 c0       	rjmp	.+32     	; 0x2ec0 <EXTI_enuChange_Control_State+0x232>
			{
				case FAILLING:
				MCUCSR &= ~(MASK_BIT << ISC2);
    2ea0:	a4 e5       	ldi	r26, 0x54	; 84
    2ea2:	b0 e0       	ldi	r27, 0x00	; 0
    2ea4:	e4 e5       	ldi	r30, 0x54	; 84
    2ea6:	f0 e0       	ldi	r31, 0x00	; 0
    2ea8:	80 81       	ld	r24, Z
    2eaa:	8f 7b       	andi	r24, 0xBF	; 191
    2eac:	8c 93       	st	X, r24
    2eae:	10 c0       	rjmp	.+32     	; 0x2ed0 <EXTI_enuChange_Control_State+0x242>
				break;
				
				case RISING:
				MCUCSR |= (MASK_BIT << ISC2);
    2eb0:	a4 e5       	ldi	r26, 0x54	; 84
    2eb2:	b0 e0       	ldi	r27, 0x00	; 0
    2eb4:	e4 e5       	ldi	r30, 0x54	; 84
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	80 81       	ld	r24, Z
    2eba:	80 64       	ori	r24, 0x40	; 64
    2ebc:	8c 93       	st	X, r24
    2ebe:	08 c0       	rjmp	.+16     	; 0x2ed0 <EXTI_enuChange_Control_State+0x242>
				break;
				
				default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    2ec0:	83 e0       	ldi	r24, 0x03	; 3
    2ec2:	89 83       	std	Y+1, r24	; 0x01
    2ec4:	05 c0       	rjmp	.+10     	; 0x2ed0 <EXTI_enuChange_Control_State+0x242>
				break;
			}
			break;
			
			default:
			Local_enuErrorState = ES_OUT_OF_RANGE;
    2ec6:	83 e0       	ldi	r24, 0x03	; 3
    2ec8:	89 83       	std	Y+1, r24	; 0x01
    2eca:	02 c0       	rjmp	.+4      	; 0x2ed0 <EXTI_enuChange_Control_State+0x242>
			break;
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2ecc:	83 e0       	ldi	r24, 0x03	; 3
    2ece:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    2ed0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ed2:	2b 96       	adiw	r28, 0x0b	; 11
    2ed4:	0f b6       	in	r0, 0x3f	; 63
    2ed6:	f8 94       	cli
    2ed8:	de bf       	out	0x3e, r29	; 62
    2eda:	0f be       	out	0x3f, r0	; 63
    2edc:	cd bf       	out	0x3d, r28	; 61
    2ede:	cf 91       	pop	r28
    2ee0:	df 91       	pop	r29
    2ee2:	08 95       	ret

00002ee4 <EXTI_enuEnable>:

ES_t EXTI_enuEnable(EXTI_ID_t Copy_enuEXTI_Id)
{
    2ee4:	df 93       	push	r29
    2ee6:	cf 93       	push	r28
    2ee8:	00 d0       	rcall	.+0      	; 0x2eea <EXTI_enuEnable+0x6>
    2eea:	00 d0       	rcall	.+0      	; 0x2eec <EXTI_enuEnable+0x8>
    2eec:	cd b7       	in	r28, 0x3d	; 61
    2eee:	de b7       	in	r29, 0x3e	; 62
    2ef0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2ef2:	81 e0       	ldi	r24, 0x01	; 1
    2ef4:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_enuEXTI_Id < MAX_NUM_EXTI)
    2ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef8:	83 30       	cpi	r24, 0x03	; 3
    2efa:	08 f0       	brcs	.+2      	; 0x2efe <EXTI_enuEnable+0x1a>
    2efc:	40 c0       	rjmp	.+128    	; 0x2f7e <EXTI_enuEnable+0x9a>
	{
		switch(Copy_enuEXTI_Id)
    2efe:	8a 81       	ldd	r24, Y+2	; 0x02
    2f00:	28 2f       	mov	r18, r24
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	3c 83       	std	Y+4, r19	; 0x04
    2f06:	2b 83       	std	Y+3, r18	; 0x03
    2f08:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0c:	81 30       	cpi	r24, 0x01	; 1
    2f0e:	91 05       	cpc	r25, r1
    2f10:	c1 f0       	breq	.+48     	; 0x2f42 <EXTI_enuEnable+0x5e>
    2f12:	2b 81       	ldd	r18, Y+3	; 0x03
    2f14:	3c 81       	ldd	r19, Y+4	; 0x04
    2f16:	22 30       	cpi	r18, 0x02	; 2
    2f18:	31 05       	cpc	r19, r1
    2f1a:	11 f1       	breq	.+68     	; 0x2f60 <EXTI_enuEnable+0x7c>
    2f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f20:	00 97       	sbiw	r24, 0x00	; 0
    2f22:	79 f5       	brne	.+94     	; 0x2f82 <EXTI_enuEnable+0x9e>
		{
			case EXTI0:
			GICR &= ~(MASK_BIT << INT0);
    2f24:	ab e5       	ldi	r26, 0x5B	; 91
    2f26:	b0 e0       	ldi	r27, 0x00	; 0
    2f28:	eb e5       	ldi	r30, 0x5B	; 91
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	80 81       	ld	r24, Z
    2f2e:	8f 7b       	andi	r24, 0xBF	; 191
    2f30:	8c 93       	st	X, r24
			GICR |= (MASK_BIT << INT0);
    2f32:	ab e5       	ldi	r26, 0x5B	; 91
    2f34:	b0 e0       	ldi	r27, 0x00	; 0
    2f36:	eb e5       	ldi	r30, 0x5B	; 91
    2f38:	f0 e0       	ldi	r31, 0x00	; 0
    2f3a:	80 81       	ld	r24, Z
    2f3c:	80 64       	ori	r24, 0x40	; 64
    2f3e:	8c 93       	st	X, r24
    2f40:	20 c0       	rjmp	.+64     	; 0x2f82 <EXTI_enuEnable+0x9e>
			break;
			
			case EXTI1:
			GICR &= ~(MASK_BIT << INT1);
    2f42:	ab e5       	ldi	r26, 0x5B	; 91
    2f44:	b0 e0       	ldi	r27, 0x00	; 0
    2f46:	eb e5       	ldi	r30, 0x5B	; 91
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	80 81       	ld	r24, Z
    2f4c:	8f 77       	andi	r24, 0x7F	; 127
    2f4e:	8c 93       	st	X, r24
			GICR |= (MASK_BIT << INT1);
    2f50:	ab e5       	ldi	r26, 0x5B	; 91
    2f52:	b0 e0       	ldi	r27, 0x00	; 0
    2f54:	eb e5       	ldi	r30, 0x5B	; 91
    2f56:	f0 e0       	ldi	r31, 0x00	; 0
    2f58:	80 81       	ld	r24, Z
    2f5a:	80 68       	ori	r24, 0x80	; 128
    2f5c:	8c 93       	st	X, r24
    2f5e:	11 c0       	rjmp	.+34     	; 0x2f82 <EXTI_enuEnable+0x9e>
			break;
			
			case EXTI2:
			GICR &= ~(MASK_BIT << INT2);
    2f60:	ab e5       	ldi	r26, 0x5B	; 91
    2f62:	b0 e0       	ldi	r27, 0x00	; 0
    2f64:	eb e5       	ldi	r30, 0x5B	; 91
    2f66:	f0 e0       	ldi	r31, 0x00	; 0
    2f68:	80 81       	ld	r24, Z
    2f6a:	8f 7d       	andi	r24, 0xDF	; 223
    2f6c:	8c 93       	st	X, r24
			GICR |= (MASK_BIT << INT2);
    2f6e:	ab e5       	ldi	r26, 0x5B	; 91
    2f70:	b0 e0       	ldi	r27, 0x00	; 0
    2f72:	eb e5       	ldi	r30, 0x5B	; 91
    2f74:	f0 e0       	ldi	r31, 0x00	; 0
    2f76:	80 81       	ld	r24, Z
    2f78:	80 62       	ori	r24, 0x20	; 32
    2f7a:	8c 93       	st	X, r24
    2f7c:	02 c0       	rjmp	.+4      	; 0x2f82 <EXTI_enuEnable+0x9e>
			break;
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2f7e:	83 e0       	ldi	r24, 0x03	; 3
    2f80:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    2f82:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f84:	0f 90       	pop	r0
    2f86:	0f 90       	pop	r0
    2f88:	0f 90       	pop	r0
    2f8a:	0f 90       	pop	r0
    2f8c:	cf 91       	pop	r28
    2f8e:	df 91       	pop	r29
    2f90:	08 95       	ret

00002f92 <EXTI_enuDisable>:

ES_t EXTI_enuDisable(EXTI_ID_t Copy_enuEXTI_Id)
{
    2f92:	df 93       	push	r29
    2f94:	cf 93       	push	r28
    2f96:	00 d0       	rcall	.+0      	; 0x2f98 <EXTI_enuDisable+0x6>
    2f98:	00 d0       	rcall	.+0      	; 0x2f9a <EXTI_enuDisable+0x8>
    2f9a:	cd b7       	in	r28, 0x3d	; 61
    2f9c:	de b7       	in	r29, 0x3e	; 62
    2f9e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_enuEXTI_Id < MAX_NUM_EXTI)
    2fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa6:	83 30       	cpi	r24, 0x03	; 3
    2fa8:	58 f5       	brcc	.+86     	; 0x3000 <EXTI_enuDisable+0x6e>
	{
		switch(Copy_enuEXTI_Id)
    2faa:	8a 81       	ldd	r24, Y+2	; 0x02
    2fac:	28 2f       	mov	r18, r24
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	3c 83       	std	Y+4, r19	; 0x04
    2fb2:	2b 83       	std	Y+3, r18	; 0x03
    2fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb8:	81 30       	cpi	r24, 0x01	; 1
    2fba:	91 05       	cpc	r25, r1
    2fbc:	89 f0       	breq	.+34     	; 0x2fe0 <EXTI_enuDisable+0x4e>
    2fbe:	2b 81       	ldd	r18, Y+3	; 0x03
    2fc0:	3c 81       	ldd	r19, Y+4	; 0x04
    2fc2:	22 30       	cpi	r18, 0x02	; 2
    2fc4:	31 05       	cpc	r19, r1
    2fc6:	a1 f0       	breq	.+40     	; 0x2ff0 <EXTI_enuDisable+0x5e>
    2fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fca:	9c 81       	ldd	r25, Y+4	; 0x04
    2fcc:	00 97       	sbiw	r24, 0x00	; 0
    2fce:	d1 f4       	brne	.+52     	; 0x3004 <EXTI_enuDisable+0x72>
		{
			case EXTI0:
			GICR &= ~(1 << INT0);
    2fd0:	ab e5       	ldi	r26, 0x5B	; 91
    2fd2:	b0 e0       	ldi	r27, 0x00	; 0
    2fd4:	eb e5       	ldi	r30, 0x5B	; 91
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	80 81       	ld	r24, Z
    2fda:	8f 7b       	andi	r24, 0xBF	; 191
    2fdc:	8c 93       	st	X, r24
    2fde:	12 c0       	rjmp	.+36     	; 0x3004 <EXTI_enuDisable+0x72>
			break;
			
			case EXTI1:
			GICR &= ~(1 << INT1);
    2fe0:	ab e5       	ldi	r26, 0x5B	; 91
    2fe2:	b0 e0       	ldi	r27, 0x00	; 0
    2fe4:	eb e5       	ldi	r30, 0x5B	; 91
    2fe6:	f0 e0       	ldi	r31, 0x00	; 0
    2fe8:	80 81       	ld	r24, Z
    2fea:	8f 77       	andi	r24, 0x7F	; 127
    2fec:	8c 93       	st	X, r24
    2fee:	0a c0       	rjmp	.+20     	; 0x3004 <EXTI_enuDisable+0x72>
			break;
			
			case EXTI2:
			GICR &= ~(1 << INT2);
    2ff0:	ab e5       	ldi	r26, 0x5B	; 91
    2ff2:	b0 e0       	ldi	r27, 0x00	; 0
    2ff4:	eb e5       	ldi	r30, 0x5B	; 91
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	80 81       	ld	r24, Z
    2ffa:	8f 7d       	andi	r24, 0xDF	; 223
    2ffc:	8c 93       	st	X, r24
    2ffe:	02 c0       	rjmp	.+4      	; 0x3004 <EXTI_enuDisable+0x72>
			break;
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    3000:	83 e0       	ldi	r24, 0x03	; 3
    3002:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    3004:	89 81       	ldd	r24, Y+1	; 0x01
}
    3006:	0f 90       	pop	r0
    3008:	0f 90       	pop	r0
    300a:	0f 90       	pop	r0
    300c:	0f 90       	pop	r0
    300e:	cf 91       	pop	r28
    3010:	df 91       	pop	r29
    3012:	08 95       	ret

00003014 <EXTI_enuCallBackFunc>:

ES_t EXTI_enuCallBackFunc(volatile void (*Copy_PFunc)(void*), volatile void *Copy_PvidAppParameter, EXTI_ID_t Copy_enuEXTI_Id)
{
    3014:	df 93       	push	r29
    3016:	cf 93       	push	r28
    3018:	00 d0       	rcall	.+0      	; 0x301a <EXTI_enuCallBackFunc+0x6>
    301a:	00 d0       	rcall	.+0      	; 0x301c <EXTI_enuCallBackFunc+0x8>
    301c:	00 d0       	rcall	.+0      	; 0x301e <EXTI_enuCallBackFunc+0xa>
    301e:	cd b7       	in	r28, 0x3d	; 61
    3020:	de b7       	in	r29, 0x3e	; 62
    3022:	9b 83       	std	Y+3, r25	; 0x03
    3024:	8a 83       	std	Y+2, r24	; 0x02
    3026:	7d 83       	std	Y+5, r23	; 0x05
    3028:	6c 83       	std	Y+4, r22	; 0x04
    302a:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
    302c:	81 e0       	ldi	r24, 0x01	; 1
    302e:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_PFunc != NULL)
    3030:	8a 81       	ldd	r24, Y+2	; 0x02
    3032:	9b 81       	ldd	r25, Y+3	; 0x03
    3034:	00 97       	sbiw	r24, 0x00	; 0
    3036:	01 f1       	breq	.+64     	; 0x3078 <EXTI_enuCallBackFunc+0x64>
	{
		if(Copy_enuEXTI_Id < MAX_NUM_EXTI)
    3038:	8e 81       	ldd	r24, Y+6	; 0x06
    303a:	83 30       	cpi	r24, 0x03	; 3
    303c:	d0 f4       	brcc	.+52     	; 0x3072 <EXTI_enuCallBackFunc+0x5e>
		{
			EXTI_APFunc[Copy_enuEXTI_Id] = Copy_PFunc;
    303e:	8e 81       	ldd	r24, Y+6	; 0x06
    3040:	88 2f       	mov	r24, r24
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	88 0f       	add	r24, r24
    3046:	99 1f       	adc	r25, r25
    3048:	fc 01       	movw	r30, r24
    304a:	e8 5d       	subi	r30, 0xD8	; 216
    304c:	fd 4f       	sbci	r31, 0xFD	; 253
    304e:	8a 81       	ldd	r24, Y+2	; 0x02
    3050:	9b 81       	ldd	r25, Y+3	; 0x03
    3052:	91 83       	std	Z+1, r25	; 0x01
    3054:	80 83       	st	Z, r24
			EXTI_APvidGenericParameters[Copy_enuEXTI_Id] = Copy_PvidAppParameter;
    3056:	8e 81       	ldd	r24, Y+6	; 0x06
    3058:	88 2f       	mov	r24, r24
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	88 0f       	add	r24, r24
    305e:	99 1f       	adc	r25, r25
    3060:	fc 01       	movw	r30, r24
    3062:	e2 5d       	subi	r30, 0xD2	; 210
    3064:	fd 4f       	sbci	r31, 0xFD	; 253
    3066:	8c 81       	ldd	r24, Y+4	; 0x04
    3068:	9d 81       	ldd	r25, Y+5	; 0x05
    306a:	91 83       	std	Z+1, r25	; 0x01
    306c:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK;
    306e:	19 82       	std	Y+1, r1	; 0x01
    3070:	05 c0       	rjmp	.+10     	; 0x307c <EXTI_enuCallBackFunc+0x68>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    3072:	83 e0       	ldi	r24, 0x03	; 3
    3074:	89 83       	std	Y+1, r24	; 0x01
    3076:	02 c0       	rjmp	.+4      	; 0x307c <EXTI_enuCallBackFunc+0x68>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    3078:	82 e0       	ldi	r24, 0x02	; 2
    307a:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    307c:	89 81       	ldd	r24, Y+1	; 0x01
}
    307e:	26 96       	adiw	r28, 0x06	; 6
    3080:	0f b6       	in	r0, 0x3f	; 63
    3082:	f8 94       	cli
    3084:	de bf       	out	0x3e, r29	; 62
    3086:	0f be       	out	0x3f, r0	; 63
    3088:	cd bf       	out	0x3d, r28	; 61
    308a:	cf 91       	pop	r28
    308c:	df 91       	pop	r29
    308e:	08 95       	ret

00003090 <__vector_1>:

/* ISR for EXTI0 */
ISR(VECT_INT0)
{	
    3090:	1f 92       	push	r1
    3092:	0f 92       	push	r0
    3094:	0f b6       	in	r0, 0x3f	; 63
    3096:	0f 92       	push	r0
    3098:	11 24       	eor	r1, r1
    309a:	2f 93       	push	r18
    309c:	3f 93       	push	r19
    309e:	4f 93       	push	r20
    30a0:	5f 93       	push	r21
    30a2:	6f 93       	push	r22
    30a4:	7f 93       	push	r23
    30a6:	8f 93       	push	r24
    30a8:	9f 93       	push	r25
    30aa:	af 93       	push	r26
    30ac:	bf 93       	push	r27
    30ae:	ef 93       	push	r30
    30b0:	ff 93       	push	r31
    30b2:	df 93       	push	r29
    30b4:	cf 93       	push	r28
    30b6:	cd b7       	in	r28, 0x3d	; 61
    30b8:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_APFunc[EXTI0] != NULL)
    30ba:	80 91 28 02 	lds	r24, 0x0228
    30be:	90 91 29 02 	lds	r25, 0x0229
    30c2:	00 97       	sbiw	r24, 0x00	; 0
    30c4:	49 f0       	breq	.+18     	; 0x30d8 <__vector_1+0x48>
	{
		EXTI_APFunc[EXTI0](EXTI_APvidGenericParameters[EXTI0]);
    30c6:	e0 91 28 02 	lds	r30, 0x0228
    30ca:	f0 91 29 02 	lds	r31, 0x0229
    30ce:	80 91 2e 02 	lds	r24, 0x022E
    30d2:	90 91 2f 02 	lds	r25, 0x022F
    30d6:	09 95       	icall
	}
}
    30d8:	cf 91       	pop	r28
    30da:	df 91       	pop	r29
    30dc:	ff 91       	pop	r31
    30de:	ef 91       	pop	r30
    30e0:	bf 91       	pop	r27
    30e2:	af 91       	pop	r26
    30e4:	9f 91       	pop	r25
    30e6:	8f 91       	pop	r24
    30e8:	7f 91       	pop	r23
    30ea:	6f 91       	pop	r22
    30ec:	5f 91       	pop	r21
    30ee:	4f 91       	pop	r20
    30f0:	3f 91       	pop	r19
    30f2:	2f 91       	pop	r18
    30f4:	0f 90       	pop	r0
    30f6:	0f be       	out	0x3f, r0	; 63
    30f8:	0f 90       	pop	r0
    30fa:	1f 90       	pop	r1
    30fc:	18 95       	reti

000030fe <__vector_2>:

/* ISR for EXTI1 */
ISR(VECT_INT1)
{
    30fe:	1f 92       	push	r1
    3100:	0f 92       	push	r0
    3102:	0f b6       	in	r0, 0x3f	; 63
    3104:	0f 92       	push	r0
    3106:	11 24       	eor	r1, r1
    3108:	2f 93       	push	r18
    310a:	3f 93       	push	r19
    310c:	4f 93       	push	r20
    310e:	5f 93       	push	r21
    3110:	6f 93       	push	r22
    3112:	7f 93       	push	r23
    3114:	8f 93       	push	r24
    3116:	9f 93       	push	r25
    3118:	af 93       	push	r26
    311a:	bf 93       	push	r27
    311c:	ef 93       	push	r30
    311e:	ff 93       	push	r31
    3120:	df 93       	push	r29
    3122:	cf 93       	push	r28
    3124:	cd b7       	in	r28, 0x3d	; 61
    3126:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_APFunc[EXTI1] != NULL)
    3128:	80 91 2a 02 	lds	r24, 0x022A
    312c:	90 91 2b 02 	lds	r25, 0x022B
    3130:	00 97       	sbiw	r24, 0x00	; 0
    3132:	49 f0       	breq	.+18     	; 0x3146 <__vector_2+0x48>
	{
		EXTI_APFunc[EXTI1](EXTI_APvidGenericParameters[EXTI1]);
    3134:	e0 91 2a 02 	lds	r30, 0x022A
    3138:	f0 91 2b 02 	lds	r31, 0x022B
    313c:	80 91 30 02 	lds	r24, 0x0230
    3140:	90 91 31 02 	lds	r25, 0x0231
    3144:	09 95       	icall
	}
}
    3146:	cf 91       	pop	r28
    3148:	df 91       	pop	r29
    314a:	ff 91       	pop	r31
    314c:	ef 91       	pop	r30
    314e:	bf 91       	pop	r27
    3150:	af 91       	pop	r26
    3152:	9f 91       	pop	r25
    3154:	8f 91       	pop	r24
    3156:	7f 91       	pop	r23
    3158:	6f 91       	pop	r22
    315a:	5f 91       	pop	r21
    315c:	4f 91       	pop	r20
    315e:	3f 91       	pop	r19
    3160:	2f 91       	pop	r18
    3162:	0f 90       	pop	r0
    3164:	0f be       	out	0x3f, r0	; 63
    3166:	0f 90       	pop	r0
    3168:	1f 90       	pop	r1
    316a:	18 95       	reti

0000316c <__vector_3>:

/* ISR for EXTI2 */
ISR(VECT_INT2)
{	
    316c:	1f 92       	push	r1
    316e:	0f 92       	push	r0
    3170:	0f b6       	in	r0, 0x3f	; 63
    3172:	0f 92       	push	r0
    3174:	11 24       	eor	r1, r1
    3176:	2f 93       	push	r18
    3178:	3f 93       	push	r19
    317a:	4f 93       	push	r20
    317c:	5f 93       	push	r21
    317e:	6f 93       	push	r22
    3180:	7f 93       	push	r23
    3182:	8f 93       	push	r24
    3184:	9f 93       	push	r25
    3186:	af 93       	push	r26
    3188:	bf 93       	push	r27
    318a:	ef 93       	push	r30
    318c:	ff 93       	push	r31
    318e:	df 93       	push	r29
    3190:	cf 93       	push	r28
    3192:	cd b7       	in	r28, 0x3d	; 61
    3194:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_APFunc[EXTI2] != NULL)
    3196:	80 91 2c 02 	lds	r24, 0x022C
    319a:	90 91 2d 02 	lds	r25, 0x022D
    319e:	00 97       	sbiw	r24, 0x00	; 0
    31a0:	49 f0       	breq	.+18     	; 0x31b4 <__vector_3+0x48>
	{
		EXTI_APFunc[EXTI2](EXTI_APvidGenericParameters[EXTI2]);
    31a2:	e0 91 2c 02 	lds	r30, 0x022C
    31a6:	f0 91 2d 02 	lds	r31, 0x022D
    31aa:	80 91 32 02 	lds	r24, 0x0232
    31ae:	90 91 33 02 	lds	r25, 0x0233
    31b2:	09 95       	icall
	}
    31b4:	cf 91       	pop	r28
    31b6:	df 91       	pop	r29
    31b8:	ff 91       	pop	r31
    31ba:	ef 91       	pop	r30
    31bc:	bf 91       	pop	r27
    31be:	af 91       	pop	r26
    31c0:	9f 91       	pop	r25
    31c2:	8f 91       	pop	r24
    31c4:	7f 91       	pop	r23
    31c6:	6f 91       	pop	r22
    31c8:	5f 91       	pop	r21
    31ca:	4f 91       	pop	r20
    31cc:	3f 91       	pop	r19
    31ce:	2f 91       	pop	r18
    31d0:	0f 90       	pop	r0
    31d2:	0f be       	out	0x3f, r0	; 63
    31d4:	0f 90       	pop	r0
    31d6:	1f 90       	pop	r1
    31d8:	18 95       	reti

000031da <DIO_enuINIT>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: Atmega32 has 4 ports A, B, C, D and each port consist of 8 pins
 ******************************************************************************
**/
ES_t DIO_enuINIT(void)
{
    31da:	df 93       	push	r29
    31dc:	cf 93       	push	r28
    31de:	0f 92       	push	r0
    31e0:	cd b7       	in	r28, 0x3d	; 61
    31e2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    31e4:	81 e0       	ldi	r24, 0x01	; 1
    31e6:	89 83       	std	Y+1, r24	; 0x01
	
	/* initialize of DDR register of 4 ports */
	DDRA = CONC(PA_DDR7,PA_DDR6,PA_DDR5,PA_DDR4,PA_DDR3,PA_DDR2,PA_DDR1,PA_DDR0);
    31e8:	ea e3       	ldi	r30, 0x3A	; 58
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	8e ef       	ldi	r24, 0xFE	; 254
    31ee:	80 83       	st	Z, r24
	DDRB = CONC(PB_DDR7,PB_DDR6,PB_DDR5,PB_DDR4,PB_DDR3,PB_DDR2,PB_DDR1,PB_DDR0);
    31f0:	e7 e3       	ldi	r30, 0x37	; 55
    31f2:	f0 e0       	ldi	r31, 0x00	; 0
    31f4:	8f ef       	ldi	r24, 0xFF	; 255
    31f6:	80 83       	st	Z, r24
	DDRC = CONC(PC_DDR7,PC_DDR6,PC_DDR5,PC_DDR4,PC_DDR3,PC_DDR2,PC_DDR1,PC_DDR0);
    31f8:	e4 e3       	ldi	r30, 0x34	; 52
    31fa:	f0 e0       	ldi	r31, 0x00	; 0
    31fc:	8f ef       	ldi	r24, 0xFF	; 255
    31fe:	80 83       	st	Z, r24
	DDRD = CONC(PD_DDR7,PD_DDR6,PD_DDR5,PD_DDR4,PD_DDR3,PD_DDR2,PD_DDR1,PD_DDR0);
    3200:	e1 e3       	ldi	r30, 0x31	; 49
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	8a e4       	ldi	r24, 0x4A	; 74
    3206:	80 83       	st	Z, r24
	
	/* initialize of PORT register of 4 ports */
	PORTA = CONC(PA_PORT7,PA_PORT6,PA_PORT5,PA_PORT4,PA_PORT3,PA_PORT2,PA_PORT1,PA_PORT0);
    3208:	eb e3       	ldi	r30, 0x3B	; 59
    320a:	f0 e0       	ldi	r31, 0x00	; 0
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	80 83       	st	Z, r24
	PORTB = CONC(PB_PORT7,PB_PORT6,PB_PORT5,PB_PORT4,PB_PORT3,PB_PORT2,PB_PORT1,PB_DDR0);
    3210:	e8 e3       	ldi	r30, 0x38	; 56
    3212:	f0 e0       	ldi	r31, 0x00	; 0
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	80 83       	st	Z, r24
	PORTC = CONC(PC_PORT7,PC_PORT6,PC_PORT5,PC_PORT4,PC_PORT3,PC_PORT2,PC_PORT1,PC_PORT0);
    3218:	e5 e3       	ldi	r30, 0x35	; 53
    321a:	f0 e0       	ldi	r31, 0x00	; 0
    321c:	10 82       	st	Z, r1
	PORTD = CONC(PD_PORT7,PD_PORT6,PD_PORT5,PD_PORT4,PD_PORT3,PD_PORT2,PD_PORT1,PD_PORT0);
    321e:	e2 e3       	ldi	r30, 0x32	; 50
    3220:	f0 e0       	ldi	r31, 0x00	; 0
    3222:	86 e7       	ldi	r24, 0x76	; 118
    3224:	80 83       	st	Z, r24
	
	Local_enuErrorState = ES_OK;
    3226:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
    3228:	89 81       	ldd	r24, Y+1	; 0x01
}
    322a:	0f 90       	pop	r0
    322c:	cf 91       	pop	r28
    322e:	df 91       	pop	r29
    3230:	08 95       	ret

00003232 <DIO_enuSetPortDirection>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    3232:	df 93       	push	r29
    3234:	cf 93       	push	r28
    3236:	00 d0       	rcall	.+0      	; 0x3238 <DIO_enuSetPortDirection+0x6>
    3238:	00 d0       	rcall	.+0      	; 0x323a <DIO_enuSetPortDirection+0x8>
    323a:	0f 92       	push	r0
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
    3240:	8a 83       	std	Y+2, r24	; 0x02
    3242:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_u8PortID <= DIO_PORTD)
    3248:	8a 81       	ldd	r24, Y+2	; 0x02
    324a:	84 30       	cpi	r24, 0x04	; 4
    324c:	a0 f5       	brcc	.+104    	; 0x32b6 <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
    324e:	8a 81       	ldd	r24, Y+2	; 0x02
    3250:	28 2f       	mov	r18, r24
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	3d 83       	std	Y+5, r19	; 0x05
    3256:	2c 83       	std	Y+4, r18	; 0x04
    3258:	8c 81       	ldd	r24, Y+4	; 0x04
    325a:	9d 81       	ldd	r25, Y+5	; 0x05
    325c:	81 30       	cpi	r24, 0x01	; 1
    325e:	91 05       	cpc	r25, r1
    3260:	d1 f0       	breq	.+52     	; 0x3296 <DIO_enuSetPortDirection+0x64>
    3262:	2c 81       	ldd	r18, Y+4	; 0x04
    3264:	3d 81       	ldd	r19, Y+5	; 0x05
    3266:	22 30       	cpi	r18, 0x02	; 2
    3268:	31 05       	cpc	r19, r1
    326a:	2c f4       	brge	.+10     	; 0x3276 <DIO_enuSetPortDirection+0x44>
    326c:	8c 81       	ldd	r24, Y+4	; 0x04
    326e:	9d 81       	ldd	r25, Y+5	; 0x05
    3270:	00 97       	sbiw	r24, 0x00	; 0
    3272:	61 f0       	breq	.+24     	; 0x328c <DIO_enuSetPortDirection+0x5a>
    3274:	1e c0       	rjmp	.+60     	; 0x32b2 <DIO_enuSetPortDirection+0x80>
    3276:	2c 81       	ldd	r18, Y+4	; 0x04
    3278:	3d 81       	ldd	r19, Y+5	; 0x05
    327a:	22 30       	cpi	r18, 0x02	; 2
    327c:	31 05       	cpc	r19, r1
    327e:	81 f0       	breq	.+32     	; 0x32a0 <DIO_enuSetPortDirection+0x6e>
    3280:	8c 81       	ldd	r24, Y+4	; 0x04
    3282:	9d 81       	ldd	r25, Y+5	; 0x05
    3284:	83 30       	cpi	r24, 0x03	; 3
    3286:	91 05       	cpc	r25, r1
    3288:	81 f0       	breq	.+32     	; 0x32aa <DIO_enuSetPortDirection+0x78>
    328a:	13 c0       	rjmp	.+38     	; 0x32b2 <DIO_enuSetPortDirection+0x80>
		{
			case DIO_PORTA:
			DDRA = Copy_u8Value;
    328c:	ea e3       	ldi	r30, 0x3A	; 58
    328e:	f0 e0       	ldi	r31, 0x00	; 0
    3290:	8b 81       	ldd	r24, Y+3	; 0x03
    3292:	80 83       	st	Z, r24
    3294:	0e c0       	rjmp	.+28     	; 0x32b2 <DIO_enuSetPortDirection+0x80>
			break;
			
			case DIO_PORTB:
			DDRB = Copy_u8Value;
    3296:	e7 e3       	ldi	r30, 0x37	; 55
    3298:	f0 e0       	ldi	r31, 0x00	; 0
    329a:	8b 81       	ldd	r24, Y+3	; 0x03
    329c:	80 83       	st	Z, r24
    329e:	09 c0       	rjmp	.+18     	; 0x32b2 <DIO_enuSetPortDirection+0x80>
			break;
			
			case DIO_PORTC:
			DDRC = Copy_u8Value;
    32a0:	e4 e3       	ldi	r30, 0x34	; 52
    32a2:	f0 e0       	ldi	r31, 0x00	; 0
    32a4:	8b 81       	ldd	r24, Y+3	; 0x03
    32a6:	80 83       	st	Z, r24
    32a8:	04 c0       	rjmp	.+8      	; 0x32b2 <DIO_enuSetPortDirection+0x80>
			break;
			
			case DIO_PORTD:
			DDRD = Copy_u8Value;
    32aa:	e1 e3       	ldi	r30, 0x31	; 49
    32ac:	f0 e0       	ldi	r31, 0x00	; 0
    32ae:	8b 81       	ldd	r24, Y+3	; 0x03
    32b0:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    32b2:	19 82       	std	Y+1, r1	; 0x01
    32b4:	02 c0       	rjmp	.+4      	; 0x32ba <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    32b6:	83 e0       	ldi	r24, 0x03	; 3
    32b8:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    32ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    32bc:	0f 90       	pop	r0
    32be:	0f 90       	pop	r0
    32c0:	0f 90       	pop	r0
    32c2:	0f 90       	pop	r0
    32c4:	0f 90       	pop	r0
    32c6:	cf 91       	pop	r28
    32c8:	df 91       	pop	r29
    32ca:	08 95       	ret

000032cc <DIO_enuSetPortVal>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t DIO_enuSetPortVal(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    32cc:	df 93       	push	r29
    32ce:	cf 93       	push	r28
    32d0:	00 d0       	rcall	.+0      	; 0x32d2 <DIO_enuSetPortVal+0x6>
    32d2:	00 d0       	rcall	.+0      	; 0x32d4 <DIO_enuSetPortVal+0x8>
    32d4:	0f 92       	push	r0
    32d6:	cd b7       	in	r28, 0x3d	; 61
    32d8:	de b7       	in	r29, 0x3e	; 62
    32da:	8a 83       	std	Y+2, r24	; 0x02
    32dc:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    32de:	81 e0       	ldi	r24, 0x01	; 1
    32e0:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_u8PortID <= DIO_PORTD)
    32e2:	8a 81       	ldd	r24, Y+2	; 0x02
    32e4:	84 30       	cpi	r24, 0x04	; 4
    32e6:	a0 f5       	brcc	.+104    	; 0x3350 <DIO_enuSetPortVal+0x84>
	{
		switch(Copy_u8PortID)
    32e8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ea:	28 2f       	mov	r18, r24
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	3d 83       	std	Y+5, r19	; 0x05
    32f0:	2c 83       	std	Y+4, r18	; 0x04
    32f2:	8c 81       	ldd	r24, Y+4	; 0x04
    32f4:	9d 81       	ldd	r25, Y+5	; 0x05
    32f6:	81 30       	cpi	r24, 0x01	; 1
    32f8:	91 05       	cpc	r25, r1
    32fa:	d1 f0       	breq	.+52     	; 0x3330 <DIO_enuSetPortVal+0x64>
    32fc:	2c 81       	ldd	r18, Y+4	; 0x04
    32fe:	3d 81       	ldd	r19, Y+5	; 0x05
    3300:	22 30       	cpi	r18, 0x02	; 2
    3302:	31 05       	cpc	r19, r1
    3304:	2c f4       	brge	.+10     	; 0x3310 <DIO_enuSetPortVal+0x44>
    3306:	8c 81       	ldd	r24, Y+4	; 0x04
    3308:	9d 81       	ldd	r25, Y+5	; 0x05
    330a:	00 97       	sbiw	r24, 0x00	; 0
    330c:	61 f0       	breq	.+24     	; 0x3326 <DIO_enuSetPortVal+0x5a>
    330e:	1e c0       	rjmp	.+60     	; 0x334c <DIO_enuSetPortVal+0x80>
    3310:	2c 81       	ldd	r18, Y+4	; 0x04
    3312:	3d 81       	ldd	r19, Y+5	; 0x05
    3314:	22 30       	cpi	r18, 0x02	; 2
    3316:	31 05       	cpc	r19, r1
    3318:	81 f0       	breq	.+32     	; 0x333a <DIO_enuSetPortVal+0x6e>
    331a:	8c 81       	ldd	r24, Y+4	; 0x04
    331c:	9d 81       	ldd	r25, Y+5	; 0x05
    331e:	83 30       	cpi	r24, 0x03	; 3
    3320:	91 05       	cpc	r25, r1
    3322:	81 f0       	breq	.+32     	; 0x3344 <DIO_enuSetPortVal+0x78>
    3324:	13 c0       	rjmp	.+38     	; 0x334c <DIO_enuSetPortVal+0x80>
		{
			case DIO_PORTA:
			PORTA = Copy_u8Value;
    3326:	eb e3       	ldi	r30, 0x3B	; 59
    3328:	f0 e0       	ldi	r31, 0x00	; 0
    332a:	8b 81       	ldd	r24, Y+3	; 0x03
    332c:	80 83       	st	Z, r24
    332e:	0e c0       	rjmp	.+28     	; 0x334c <DIO_enuSetPortVal+0x80>
			break;
			
			case DIO_PORTB:
			PORTB = Copy_u8Value;
    3330:	e8 e3       	ldi	r30, 0x38	; 56
    3332:	f0 e0       	ldi	r31, 0x00	; 0
    3334:	8b 81       	ldd	r24, Y+3	; 0x03
    3336:	80 83       	st	Z, r24
    3338:	09 c0       	rjmp	.+18     	; 0x334c <DIO_enuSetPortVal+0x80>
			break;
			
			case DIO_PORTC:
			PORTC = Copy_u8Value;
    333a:	e5 e3       	ldi	r30, 0x35	; 53
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	8b 81       	ldd	r24, Y+3	; 0x03
    3340:	80 83       	st	Z, r24
    3342:	04 c0       	rjmp	.+8      	; 0x334c <DIO_enuSetPortVal+0x80>
			break;
			
			case DIO_PORTD:
			PORTD = Copy_u8Value;
    3344:	e2 e3       	ldi	r30, 0x32	; 50
    3346:	f0 e0       	ldi	r31, 0x00	; 0
    3348:	8b 81       	ldd	r24, Y+3	; 0x03
    334a:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    334c:	19 82       	std	Y+1, r1	; 0x01
    334e:	02 c0       	rjmp	.+4      	; 0x3354 <DIO_enuSetPortVal+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    3350:	83 e0       	ldi	r24, 0x03	; 3
    3352:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    3354:	89 81       	ldd	r24, Y+1	; 0x01
}
    3356:	0f 90       	pop	r0
    3358:	0f 90       	pop	r0
    335a:	0f 90       	pop	r0
    335c:	0f 90       	pop	r0
    335e:	0f 90       	pop	r0
    3360:	cf 91       	pop	r28
    3362:	df 91       	pop	r29
    3364:	08 95       	ret

00003366 <DIO_enuGetPortVal>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t DIO_enuGetPortVal(u8 Copy_u8PortID, u8 *Copy_pu8Value)
{
    3366:	df 93       	push	r29
    3368:	cf 93       	push	r28
    336a:	00 d0       	rcall	.+0      	; 0x336c <DIO_enuGetPortVal+0x6>
    336c:	00 d0       	rcall	.+0      	; 0x336e <DIO_enuGetPortVal+0x8>
    336e:	00 d0       	rcall	.+0      	; 0x3370 <DIO_enuGetPortVal+0xa>
    3370:	cd b7       	in	r28, 0x3d	; 61
    3372:	de b7       	in	r29, 0x3e	; 62
    3374:	8a 83       	std	Y+2, r24	; 0x02
    3376:	7c 83       	std	Y+4, r23	; 0x04
    3378:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_u8PortID <= DIO_PORTD)
    337e:	8a 81       	ldd	r24, Y+2	; 0x02
    3380:	84 30       	cpi	r24, 0x04	; 4
    3382:	08 f0       	brcs	.+2      	; 0x3386 <DIO_enuGetPortVal+0x20>
    3384:	43 c0       	rjmp	.+134    	; 0x340c <DIO_enuGetPortVal+0xa6>
	{
		if(Copy_pu8Value != NULL)
    3386:	8b 81       	ldd	r24, Y+3	; 0x03
    3388:	9c 81       	ldd	r25, Y+4	; 0x04
    338a:	00 97       	sbiw	r24, 0x00	; 0
    338c:	e1 f1       	breq	.+120    	; 0x3406 <DIO_enuGetPortVal+0xa0>
		{
			switch(Copy_u8PortID)
    338e:	8a 81       	ldd	r24, Y+2	; 0x02
    3390:	28 2f       	mov	r18, r24
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	3e 83       	std	Y+6, r19	; 0x06
    3396:	2d 83       	std	Y+5, r18	; 0x05
    3398:	8d 81       	ldd	r24, Y+5	; 0x05
    339a:	9e 81       	ldd	r25, Y+6	; 0x06
    339c:	81 30       	cpi	r24, 0x01	; 1
    339e:	91 05       	cpc	r25, r1
    33a0:	e1 f0       	breq	.+56     	; 0x33da <DIO_enuGetPortVal+0x74>
    33a2:	2d 81       	ldd	r18, Y+5	; 0x05
    33a4:	3e 81       	ldd	r19, Y+6	; 0x06
    33a6:	22 30       	cpi	r18, 0x02	; 2
    33a8:	31 05       	cpc	r19, r1
    33aa:	2c f4       	brge	.+10     	; 0x33b6 <DIO_enuGetPortVal+0x50>
    33ac:	8d 81       	ldd	r24, Y+5	; 0x05
    33ae:	9e 81       	ldd	r25, Y+6	; 0x06
    33b0:	00 97       	sbiw	r24, 0x00	; 0
    33b2:	61 f0       	breq	.+24     	; 0x33cc <DIO_enuGetPortVal+0x66>
    33b4:	26 c0       	rjmp	.+76     	; 0x3402 <DIO_enuGetPortVal+0x9c>
    33b6:	2d 81       	ldd	r18, Y+5	; 0x05
    33b8:	3e 81       	ldd	r19, Y+6	; 0x06
    33ba:	22 30       	cpi	r18, 0x02	; 2
    33bc:	31 05       	cpc	r19, r1
    33be:	a1 f0       	breq	.+40     	; 0x33e8 <DIO_enuGetPortVal+0x82>
    33c0:	8d 81       	ldd	r24, Y+5	; 0x05
    33c2:	9e 81       	ldd	r25, Y+6	; 0x06
    33c4:	83 30       	cpi	r24, 0x03	; 3
    33c6:	91 05       	cpc	r25, r1
    33c8:	b1 f0       	breq	.+44     	; 0x33f6 <DIO_enuGetPortVal+0x90>
    33ca:	1b c0       	rjmp	.+54     	; 0x3402 <DIO_enuGetPortVal+0x9c>
			{
				case DIO_PORTA:
				*Copy_pu8Value = PINA;
    33cc:	e9 e3       	ldi	r30, 0x39	; 57
    33ce:	f0 e0       	ldi	r31, 0x00	; 0
    33d0:	80 81       	ld	r24, Z
    33d2:	eb 81       	ldd	r30, Y+3	; 0x03
    33d4:	fc 81       	ldd	r31, Y+4	; 0x04
    33d6:	80 83       	st	Z, r24
    33d8:	14 c0       	rjmp	.+40     	; 0x3402 <DIO_enuGetPortVal+0x9c>
				break;
				
				case DIO_PORTB:
				*Copy_pu8Value = PINB;
    33da:	e6 e3       	ldi	r30, 0x36	; 54
    33dc:	f0 e0       	ldi	r31, 0x00	; 0
    33de:	80 81       	ld	r24, Z
    33e0:	eb 81       	ldd	r30, Y+3	; 0x03
    33e2:	fc 81       	ldd	r31, Y+4	; 0x04
    33e4:	80 83       	st	Z, r24
    33e6:	0d c0       	rjmp	.+26     	; 0x3402 <DIO_enuGetPortVal+0x9c>
				break;
				
				case DIO_PORTC:
				*Copy_pu8Value = PINC;
    33e8:	e3 e3       	ldi	r30, 0x33	; 51
    33ea:	f0 e0       	ldi	r31, 0x00	; 0
    33ec:	80 81       	ld	r24, Z
    33ee:	eb 81       	ldd	r30, Y+3	; 0x03
    33f0:	fc 81       	ldd	r31, Y+4	; 0x04
    33f2:	80 83       	st	Z, r24
    33f4:	06 c0       	rjmp	.+12     	; 0x3402 <DIO_enuGetPortVal+0x9c>
				break;
				
				case DIO_PORTD:
				*Copy_pu8Value = PIND;
    33f6:	e0 e3       	ldi	r30, 0x30	; 48
    33f8:	f0 e0       	ldi	r31, 0x00	; 0
    33fa:	80 81       	ld	r24, Z
    33fc:	eb 81       	ldd	r30, Y+3	; 0x03
    33fe:	fc 81       	ldd	r31, Y+4	; 0x04
    3400:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    3402:	19 82       	std	Y+1, r1	; 0x01
    3404:	05 c0       	rjmp	.+10     	; 0x3410 <DIO_enuGetPortVal+0xaa>
		}
		else
		{
			Local_enuErrorState = ES_NULL_POINTER;
    3406:	82 e0       	ldi	r24, 0x02	; 2
    3408:	89 83       	std	Y+1, r24	; 0x01
    340a:	02 c0       	rjmp	.+4      	; 0x3410 <DIO_enuGetPortVal+0xaa>
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    340c:	83 e0       	ldi	r24, 0x03	; 3
    340e:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    3410:	89 81       	ldd	r24, Y+1	; 0x01
}
    3412:	26 96       	adiw	r28, 0x06	; 6
    3414:	0f b6       	in	r0, 0x3f	; 63
    3416:	f8 94       	cli
    3418:	de bf       	out	0x3e, r29	; 62
    341a:	0f be       	out	0x3f, r0	; 63
    341c:	cd bf       	out	0x3d, r28	; 61
    341e:	cf 91       	pop	r28
    3420:	df 91       	pop	r29
    3422:	08 95       	ret

00003424 <DIO_enuTogPortVal>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t DIO_enuTogPortVal(u8 Copy_u8PortID)
{
    3424:	df 93       	push	r29
    3426:	cf 93       	push	r28
    3428:	00 d0       	rcall	.+0      	; 0x342a <DIO_enuTogPortVal+0x6>
    342a:	00 d0       	rcall	.+0      	; 0x342c <DIO_enuTogPortVal+0x8>
    342c:	cd b7       	in	r28, 0x3d	; 61
    342e:	de b7       	in	r29, 0x3e	; 62
    3430:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3432:	81 e0       	ldi	r24, 0x01	; 1
    3434:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_u8PortID <= DIO_PORTD)
    3436:	8a 81       	ldd	r24, Y+2	; 0x02
    3438:	84 30       	cpi	r24, 0x04	; 4
    343a:	08 f0       	brcs	.+2      	; 0x343e <DIO_enuTogPortVal+0x1a>
    343c:	40 c0       	rjmp	.+128    	; 0x34be <DIO_enuTogPortVal+0x9a>
	{
		switch(Copy_u8PortID)
    343e:	8a 81       	ldd	r24, Y+2	; 0x02
    3440:	28 2f       	mov	r18, r24
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	3c 83       	std	Y+4, r19	; 0x04
    3446:	2b 83       	std	Y+3, r18	; 0x03
    3448:	8b 81       	ldd	r24, Y+3	; 0x03
    344a:	9c 81       	ldd	r25, Y+4	; 0x04
    344c:	81 30       	cpi	r24, 0x01	; 1
    344e:	91 05       	cpc	r25, r1
    3450:	e9 f0       	breq	.+58     	; 0x348c <DIO_enuTogPortVal+0x68>
    3452:	2b 81       	ldd	r18, Y+3	; 0x03
    3454:	3c 81       	ldd	r19, Y+4	; 0x04
    3456:	22 30       	cpi	r18, 0x02	; 2
    3458:	31 05       	cpc	r19, r1
    345a:	2c f4       	brge	.+10     	; 0x3466 <DIO_enuTogPortVal+0x42>
    345c:	8b 81       	ldd	r24, Y+3	; 0x03
    345e:	9c 81       	ldd	r25, Y+4	; 0x04
    3460:	00 97       	sbiw	r24, 0x00	; 0
    3462:	61 f0       	breq	.+24     	; 0x347c <DIO_enuTogPortVal+0x58>
    3464:	2a c0       	rjmp	.+84     	; 0x34ba <DIO_enuTogPortVal+0x96>
    3466:	2b 81       	ldd	r18, Y+3	; 0x03
    3468:	3c 81       	ldd	r19, Y+4	; 0x04
    346a:	22 30       	cpi	r18, 0x02	; 2
    346c:	31 05       	cpc	r19, r1
    346e:	b1 f0       	breq	.+44     	; 0x349c <DIO_enuTogPortVal+0x78>
    3470:	8b 81       	ldd	r24, Y+3	; 0x03
    3472:	9c 81       	ldd	r25, Y+4	; 0x04
    3474:	83 30       	cpi	r24, 0x03	; 3
    3476:	91 05       	cpc	r25, r1
    3478:	c9 f0       	breq	.+50     	; 0x34ac <DIO_enuTogPortVal+0x88>
    347a:	1f c0       	rjmp	.+62     	; 0x34ba <DIO_enuTogPortVal+0x96>
		{
			case DIO_PORTA:
			PORTA = ~PORTA;
    347c:	ab e3       	ldi	r26, 0x3B	; 59
    347e:	b0 e0       	ldi	r27, 0x00	; 0
    3480:	eb e3       	ldi	r30, 0x3B	; 59
    3482:	f0 e0       	ldi	r31, 0x00	; 0
    3484:	80 81       	ld	r24, Z
    3486:	80 95       	com	r24
    3488:	8c 93       	st	X, r24
    348a:	17 c0       	rjmp	.+46     	; 0x34ba <DIO_enuTogPortVal+0x96>
			break;
			
			case DIO_PORTB:
			PORTB = ~PORTB;
    348c:	a8 e3       	ldi	r26, 0x38	; 56
    348e:	b0 e0       	ldi	r27, 0x00	; 0
    3490:	e8 e3       	ldi	r30, 0x38	; 56
    3492:	f0 e0       	ldi	r31, 0x00	; 0
    3494:	80 81       	ld	r24, Z
    3496:	80 95       	com	r24
    3498:	8c 93       	st	X, r24
    349a:	0f c0       	rjmp	.+30     	; 0x34ba <DIO_enuTogPortVal+0x96>
			break;
			
			case DIO_PORTC:
			PORTC = ~PORTC;
    349c:	a5 e3       	ldi	r26, 0x35	; 53
    349e:	b0 e0       	ldi	r27, 0x00	; 0
    34a0:	e5 e3       	ldi	r30, 0x35	; 53
    34a2:	f0 e0       	ldi	r31, 0x00	; 0
    34a4:	80 81       	ld	r24, Z
    34a6:	80 95       	com	r24
    34a8:	8c 93       	st	X, r24
    34aa:	07 c0       	rjmp	.+14     	; 0x34ba <DIO_enuTogPortVal+0x96>
			break;
			
			case DIO_PORTD:
			PORTD = ~PORTD;
    34ac:	a2 e3       	ldi	r26, 0x32	; 50
    34ae:	b0 e0       	ldi	r27, 0x00	; 0
    34b0:	e2 e3       	ldi	r30, 0x32	; 50
    34b2:	f0 e0       	ldi	r31, 0x00	; 0
    34b4:	80 81       	ld	r24, Z
    34b6:	80 95       	com	r24
    34b8:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    34ba:	19 82       	std	Y+1, r1	; 0x01
    34bc:	02 c0       	rjmp	.+4      	; 0x34c2 <DIO_enuTogPortVal+0x9e>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    34be:	83 e0       	ldi	r24, 0x03	; 3
    34c0:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    34c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    34c4:	0f 90       	pop	r0
    34c6:	0f 90       	pop	r0
    34c8:	0f 90       	pop	r0
    34ca:	0f 90       	pop	r0
    34cc:	cf 91       	pop	r28
    34ce:	df 91       	pop	r29
    34d0:	08 95       	ret

000034d2 <DIO_enuSetPinDirection>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    34d2:	df 93       	push	r29
    34d4:	cf 93       	push	r28
    34d6:	00 d0       	rcall	.+0      	; 0x34d8 <DIO_enuSetPinDirection+0x6>
    34d8:	00 d0       	rcall	.+0      	; 0x34da <DIO_enuSetPinDirection+0x8>
    34da:	00 d0       	rcall	.+0      	; 0x34dc <DIO_enuSetPinDirection+0xa>
    34dc:	cd b7       	in	r28, 0x3d	; 61
    34de:	de b7       	in	r29, 0x3e	; 62
    34e0:	8a 83       	std	Y+2, r24	; 0x02
    34e2:	6b 83       	std	Y+3, r22	; 0x03
    34e4:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    34e8:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
    34ea:	8a 81       	ldd	r24, Y+2	; 0x02
    34ec:	84 30       	cpi	r24, 0x04	; 4
    34ee:	08 f0       	brcs	.+2      	; 0x34f2 <DIO_enuSetPinDirection+0x20>
    34f0:	d0 c0       	rjmp	.+416    	; 0x3692 <DIO_enuSetPinDirection+0x1c0>
    34f2:	8b 81       	ldd	r24, Y+3	; 0x03
    34f4:	88 30       	cpi	r24, 0x08	; 8
    34f6:	08 f0       	brcs	.+2      	; 0x34fa <DIO_enuSetPinDirection+0x28>
    34f8:	cc c0       	rjmp	.+408    	; 0x3692 <DIO_enuSetPinDirection+0x1c0>
    34fa:	8c 81       	ldd	r24, Y+4	; 0x04
    34fc:	82 30       	cpi	r24, 0x02	; 2
    34fe:	08 f0       	brcs	.+2      	; 0x3502 <DIO_enuSetPinDirection+0x30>
    3500:	c8 c0       	rjmp	.+400    	; 0x3692 <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
    3502:	8a 81       	ldd	r24, Y+2	; 0x02
    3504:	28 2f       	mov	r18, r24
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	3e 83       	std	Y+6, r19	; 0x06
    350a:	2d 83       	std	Y+5, r18	; 0x05
    350c:	6d 81       	ldd	r22, Y+5	; 0x05
    350e:	7e 81       	ldd	r23, Y+6	; 0x06
    3510:	61 30       	cpi	r22, 0x01	; 1
    3512:	71 05       	cpc	r23, r1
    3514:	09 f4       	brne	.+2      	; 0x3518 <DIO_enuSetPinDirection+0x46>
    3516:	41 c0       	rjmp	.+130    	; 0x359a <DIO_enuSetPinDirection+0xc8>
    3518:	8d 81       	ldd	r24, Y+5	; 0x05
    351a:	9e 81       	ldd	r25, Y+6	; 0x06
    351c:	82 30       	cpi	r24, 0x02	; 2
    351e:	91 05       	cpc	r25, r1
    3520:	34 f4       	brge	.+12     	; 0x352e <DIO_enuSetPinDirection+0x5c>
    3522:	2d 81       	ldd	r18, Y+5	; 0x05
    3524:	3e 81       	ldd	r19, Y+6	; 0x06
    3526:	21 15       	cp	r18, r1
    3528:	31 05       	cpc	r19, r1
    352a:	71 f0       	breq	.+28     	; 0x3548 <DIO_enuSetPinDirection+0x76>
    352c:	b0 c0       	rjmp	.+352    	; 0x368e <DIO_enuSetPinDirection+0x1bc>
    352e:	6d 81       	ldd	r22, Y+5	; 0x05
    3530:	7e 81       	ldd	r23, Y+6	; 0x06
    3532:	62 30       	cpi	r22, 0x02	; 2
    3534:	71 05       	cpc	r23, r1
    3536:	09 f4       	brne	.+2      	; 0x353a <DIO_enuSetPinDirection+0x68>
    3538:	59 c0       	rjmp	.+178    	; 0x35ec <DIO_enuSetPinDirection+0x11a>
    353a:	8d 81       	ldd	r24, Y+5	; 0x05
    353c:	9e 81       	ldd	r25, Y+6	; 0x06
    353e:	83 30       	cpi	r24, 0x03	; 3
    3540:	91 05       	cpc	r25, r1
    3542:	09 f4       	brne	.+2      	; 0x3546 <DIO_enuSetPinDirection+0x74>
    3544:	7c c0       	rjmp	.+248    	; 0x363e <DIO_enuSetPinDirection+0x16c>
    3546:	a3 c0       	rjmp	.+326    	; 0x368e <DIO_enuSetPinDirection+0x1bc>
		{
			case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    3548:	aa e3       	ldi	r26, 0x3A	; 58
    354a:	b0 e0       	ldi	r27, 0x00	; 0
    354c:	ea e3       	ldi	r30, 0x3A	; 58
    354e:	f0 e0       	ldi	r31, 0x00	; 0
    3550:	80 81       	ld	r24, Z
    3552:	48 2f       	mov	r20, r24
    3554:	8b 81       	ldd	r24, Y+3	; 0x03
    3556:	28 2f       	mov	r18, r24
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	81 e0       	ldi	r24, 0x01	; 1
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	02 c0       	rjmp	.+4      	; 0x3564 <DIO_enuSetPinDirection+0x92>
    3560:	88 0f       	add	r24, r24
    3562:	99 1f       	adc	r25, r25
    3564:	2a 95       	dec	r18
    3566:	e2 f7       	brpl	.-8      	; 0x3560 <DIO_enuSetPinDirection+0x8e>
    3568:	80 95       	com	r24
    356a:	84 23       	and	r24, r20
    356c:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
    356e:	aa e3       	ldi	r26, 0x3A	; 58
    3570:	b0 e0       	ldi	r27, 0x00	; 0
    3572:	ea e3       	ldi	r30, 0x3A	; 58
    3574:	f0 e0       	ldi	r31, 0x00	; 0
    3576:	80 81       	ld	r24, Z
    3578:	48 2f       	mov	r20, r24
    357a:	8c 81       	ldd	r24, Y+4	; 0x04
    357c:	28 2f       	mov	r18, r24
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	8b 81       	ldd	r24, Y+3	; 0x03
    3582:	88 2f       	mov	r24, r24
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	b9 01       	movw	r22, r18
    3588:	02 c0       	rjmp	.+4      	; 0x358e <DIO_enuSetPinDirection+0xbc>
    358a:	66 0f       	add	r22, r22
    358c:	77 1f       	adc	r23, r23
    358e:	8a 95       	dec	r24
    3590:	e2 f7       	brpl	.-8      	; 0x358a <DIO_enuSetPinDirection+0xb8>
    3592:	cb 01       	movw	r24, r22
    3594:	84 2b       	or	r24, r20
    3596:	8c 93       	st	X, r24
    3598:	7a c0       	rjmp	.+244    	; 0x368e <DIO_enuSetPinDirection+0x1bc>
			break;
			
			case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    359a:	a7 e3       	ldi	r26, 0x37	; 55
    359c:	b0 e0       	ldi	r27, 0x00	; 0
    359e:	e7 e3       	ldi	r30, 0x37	; 55
    35a0:	f0 e0       	ldi	r31, 0x00	; 0
    35a2:	80 81       	ld	r24, Z
    35a4:	48 2f       	mov	r20, r24
    35a6:	8b 81       	ldd	r24, Y+3	; 0x03
    35a8:	28 2f       	mov	r18, r24
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	81 e0       	ldi	r24, 0x01	; 1
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	02 c0       	rjmp	.+4      	; 0x35b6 <DIO_enuSetPinDirection+0xe4>
    35b2:	88 0f       	add	r24, r24
    35b4:	99 1f       	adc	r25, r25
    35b6:	2a 95       	dec	r18
    35b8:	e2 f7       	brpl	.-8      	; 0x35b2 <DIO_enuSetPinDirection+0xe0>
    35ba:	80 95       	com	r24
    35bc:	84 23       	and	r24, r20
    35be:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
    35c0:	a7 e3       	ldi	r26, 0x37	; 55
    35c2:	b0 e0       	ldi	r27, 0x00	; 0
    35c4:	e7 e3       	ldi	r30, 0x37	; 55
    35c6:	f0 e0       	ldi	r31, 0x00	; 0
    35c8:	80 81       	ld	r24, Z
    35ca:	48 2f       	mov	r20, r24
    35cc:	8c 81       	ldd	r24, Y+4	; 0x04
    35ce:	28 2f       	mov	r18, r24
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	8b 81       	ldd	r24, Y+3	; 0x03
    35d4:	88 2f       	mov	r24, r24
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	b9 01       	movw	r22, r18
    35da:	02 c0       	rjmp	.+4      	; 0x35e0 <DIO_enuSetPinDirection+0x10e>
    35dc:	66 0f       	add	r22, r22
    35de:	77 1f       	adc	r23, r23
    35e0:	8a 95       	dec	r24
    35e2:	e2 f7       	brpl	.-8      	; 0x35dc <DIO_enuSetPinDirection+0x10a>
    35e4:	cb 01       	movw	r24, r22
    35e6:	84 2b       	or	r24, r20
    35e8:	8c 93       	st	X, r24
    35ea:	51 c0       	rjmp	.+162    	; 0x368e <DIO_enuSetPinDirection+0x1bc>
			break;
			
			case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    35ec:	a4 e3       	ldi	r26, 0x34	; 52
    35ee:	b0 e0       	ldi	r27, 0x00	; 0
    35f0:	e4 e3       	ldi	r30, 0x34	; 52
    35f2:	f0 e0       	ldi	r31, 0x00	; 0
    35f4:	80 81       	ld	r24, Z
    35f6:	48 2f       	mov	r20, r24
    35f8:	8b 81       	ldd	r24, Y+3	; 0x03
    35fa:	28 2f       	mov	r18, r24
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	81 e0       	ldi	r24, 0x01	; 1
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	02 c0       	rjmp	.+4      	; 0x3608 <DIO_enuSetPinDirection+0x136>
    3604:	88 0f       	add	r24, r24
    3606:	99 1f       	adc	r25, r25
    3608:	2a 95       	dec	r18
    360a:	e2 f7       	brpl	.-8      	; 0x3604 <DIO_enuSetPinDirection+0x132>
    360c:	80 95       	com	r24
    360e:	84 23       	and	r24, r20
    3610:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
    3612:	a4 e3       	ldi	r26, 0x34	; 52
    3614:	b0 e0       	ldi	r27, 0x00	; 0
    3616:	e4 e3       	ldi	r30, 0x34	; 52
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	80 81       	ld	r24, Z
    361c:	48 2f       	mov	r20, r24
    361e:	8c 81       	ldd	r24, Y+4	; 0x04
    3620:	28 2f       	mov	r18, r24
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	8b 81       	ldd	r24, Y+3	; 0x03
    3626:	88 2f       	mov	r24, r24
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	b9 01       	movw	r22, r18
    362c:	02 c0       	rjmp	.+4      	; 0x3632 <DIO_enuSetPinDirection+0x160>
    362e:	66 0f       	add	r22, r22
    3630:	77 1f       	adc	r23, r23
    3632:	8a 95       	dec	r24
    3634:	e2 f7       	brpl	.-8      	; 0x362e <DIO_enuSetPinDirection+0x15c>
    3636:	cb 01       	movw	r24, r22
    3638:	84 2b       	or	r24, r20
    363a:	8c 93       	st	X, r24
    363c:	28 c0       	rjmp	.+80     	; 0x368e <DIO_enuSetPinDirection+0x1bc>
			break;
			
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    363e:	a1 e3       	ldi	r26, 0x31	; 49
    3640:	b0 e0       	ldi	r27, 0x00	; 0
    3642:	e1 e3       	ldi	r30, 0x31	; 49
    3644:	f0 e0       	ldi	r31, 0x00	; 0
    3646:	80 81       	ld	r24, Z
    3648:	48 2f       	mov	r20, r24
    364a:	8b 81       	ldd	r24, Y+3	; 0x03
    364c:	28 2f       	mov	r18, r24
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	02 c0       	rjmp	.+4      	; 0x365a <DIO_enuSetPinDirection+0x188>
    3656:	88 0f       	add	r24, r24
    3658:	99 1f       	adc	r25, r25
    365a:	2a 95       	dec	r18
    365c:	e2 f7       	brpl	.-8      	; 0x3656 <DIO_enuSetPinDirection+0x184>
    365e:	80 95       	com	r24
    3660:	84 23       	and	r24, r20
    3662:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
    3664:	a1 e3       	ldi	r26, 0x31	; 49
    3666:	b0 e0       	ldi	r27, 0x00	; 0
    3668:	e1 e3       	ldi	r30, 0x31	; 49
    366a:	f0 e0       	ldi	r31, 0x00	; 0
    366c:	80 81       	ld	r24, Z
    366e:	48 2f       	mov	r20, r24
    3670:	8c 81       	ldd	r24, Y+4	; 0x04
    3672:	28 2f       	mov	r18, r24
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	8b 81       	ldd	r24, Y+3	; 0x03
    3678:	88 2f       	mov	r24, r24
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	b9 01       	movw	r22, r18
    367e:	02 c0       	rjmp	.+4      	; 0x3684 <DIO_enuSetPinDirection+0x1b2>
    3680:	66 0f       	add	r22, r22
    3682:	77 1f       	adc	r23, r23
    3684:	8a 95       	dec	r24
    3686:	e2 f7       	brpl	.-8      	; 0x3680 <DIO_enuSetPinDirection+0x1ae>
    3688:	cb 01       	movw	r24, r22
    368a:	84 2b       	or	r24, r20
    368c:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    368e:	19 82       	std	Y+1, r1	; 0x01
    3690:	02 c0       	rjmp	.+4      	; 0x3696 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    3692:	83 e0       	ldi	r24, 0x03	; 3
    3694:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    3696:	89 81       	ldd	r24, Y+1	; 0x01
}
    3698:	26 96       	adiw	r28, 0x06	; 6
    369a:	0f b6       	in	r0, 0x3f	; 63
    369c:	f8 94       	cli
    369e:	de bf       	out	0x3e, r29	; 62
    36a0:	0f be       	out	0x3f, r0	; 63
    36a2:	cd bf       	out	0x3d, r28	; 61
    36a4:	cf 91       	pop	r28
    36a6:	df 91       	pop	r29
    36a8:	08 95       	ret

000036aa <DIO_enuSetPinVal>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t DIO_enuSetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    36aa:	df 93       	push	r29
    36ac:	cf 93       	push	r28
    36ae:	00 d0       	rcall	.+0      	; 0x36b0 <DIO_enuSetPinVal+0x6>
    36b0:	00 d0       	rcall	.+0      	; 0x36b2 <DIO_enuSetPinVal+0x8>
    36b2:	00 d0       	rcall	.+0      	; 0x36b4 <DIO_enuSetPinVal+0xa>
    36b4:	cd b7       	in	r28, 0x3d	; 61
    36b6:	de b7       	in	r29, 0x3e	; 62
    36b8:	8a 83       	std	Y+2, r24	; 0x02
    36ba:	6b 83       	std	Y+3, r22	; 0x03
    36bc:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    36be:	81 e0       	ldi	r24, 0x01	; 1
    36c0:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
    36c2:	8a 81       	ldd	r24, Y+2	; 0x02
    36c4:	84 30       	cpi	r24, 0x04	; 4
    36c6:	08 f0       	brcs	.+2      	; 0x36ca <DIO_enuSetPinVal+0x20>
    36c8:	d0 c0       	rjmp	.+416    	; 0x386a <DIO_enuSetPinVal+0x1c0>
    36ca:	8b 81       	ldd	r24, Y+3	; 0x03
    36cc:	88 30       	cpi	r24, 0x08	; 8
    36ce:	08 f0       	brcs	.+2      	; 0x36d2 <DIO_enuSetPinVal+0x28>
    36d0:	cc c0       	rjmp	.+408    	; 0x386a <DIO_enuSetPinVal+0x1c0>
    36d2:	8c 81       	ldd	r24, Y+4	; 0x04
    36d4:	82 30       	cpi	r24, 0x02	; 2
    36d6:	08 f0       	brcs	.+2      	; 0x36da <DIO_enuSetPinVal+0x30>
    36d8:	c8 c0       	rjmp	.+400    	; 0x386a <DIO_enuSetPinVal+0x1c0>
	{
		switch(Copy_u8PortID)
    36da:	8a 81       	ldd	r24, Y+2	; 0x02
    36dc:	28 2f       	mov	r18, r24
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	3e 83       	std	Y+6, r19	; 0x06
    36e2:	2d 83       	std	Y+5, r18	; 0x05
    36e4:	6d 81       	ldd	r22, Y+5	; 0x05
    36e6:	7e 81       	ldd	r23, Y+6	; 0x06
    36e8:	61 30       	cpi	r22, 0x01	; 1
    36ea:	71 05       	cpc	r23, r1
    36ec:	09 f4       	brne	.+2      	; 0x36f0 <DIO_enuSetPinVal+0x46>
    36ee:	41 c0       	rjmp	.+130    	; 0x3772 <DIO_enuSetPinVal+0xc8>
    36f0:	8d 81       	ldd	r24, Y+5	; 0x05
    36f2:	9e 81       	ldd	r25, Y+6	; 0x06
    36f4:	82 30       	cpi	r24, 0x02	; 2
    36f6:	91 05       	cpc	r25, r1
    36f8:	34 f4       	brge	.+12     	; 0x3706 <DIO_enuSetPinVal+0x5c>
    36fa:	2d 81       	ldd	r18, Y+5	; 0x05
    36fc:	3e 81       	ldd	r19, Y+6	; 0x06
    36fe:	21 15       	cp	r18, r1
    3700:	31 05       	cpc	r19, r1
    3702:	71 f0       	breq	.+28     	; 0x3720 <DIO_enuSetPinVal+0x76>
    3704:	b0 c0       	rjmp	.+352    	; 0x3866 <DIO_enuSetPinVal+0x1bc>
    3706:	6d 81       	ldd	r22, Y+5	; 0x05
    3708:	7e 81       	ldd	r23, Y+6	; 0x06
    370a:	62 30       	cpi	r22, 0x02	; 2
    370c:	71 05       	cpc	r23, r1
    370e:	09 f4       	brne	.+2      	; 0x3712 <DIO_enuSetPinVal+0x68>
    3710:	59 c0       	rjmp	.+178    	; 0x37c4 <DIO_enuSetPinVal+0x11a>
    3712:	8d 81       	ldd	r24, Y+5	; 0x05
    3714:	9e 81       	ldd	r25, Y+6	; 0x06
    3716:	83 30       	cpi	r24, 0x03	; 3
    3718:	91 05       	cpc	r25, r1
    371a:	09 f4       	brne	.+2      	; 0x371e <DIO_enuSetPinVal+0x74>
    371c:	7c c0       	rjmp	.+248    	; 0x3816 <DIO_enuSetPinVal+0x16c>
    371e:	a3 c0       	rjmp	.+326    	; 0x3866 <DIO_enuSetPinVal+0x1bc>
		{
			case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    3720:	ab e3       	ldi	r26, 0x3B	; 59
    3722:	b0 e0       	ldi	r27, 0x00	; 0
    3724:	eb e3       	ldi	r30, 0x3B	; 59
    3726:	f0 e0       	ldi	r31, 0x00	; 0
    3728:	80 81       	ld	r24, Z
    372a:	48 2f       	mov	r20, r24
    372c:	8b 81       	ldd	r24, Y+3	; 0x03
    372e:	28 2f       	mov	r18, r24
    3730:	30 e0       	ldi	r19, 0x00	; 0
    3732:	81 e0       	ldi	r24, 0x01	; 1
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	02 c0       	rjmp	.+4      	; 0x373c <DIO_enuSetPinVal+0x92>
    3738:	88 0f       	add	r24, r24
    373a:	99 1f       	adc	r25, r25
    373c:	2a 95       	dec	r18
    373e:	e2 f7       	brpl	.-8      	; 0x3738 <DIO_enuSetPinVal+0x8e>
    3740:	80 95       	com	r24
    3742:	84 23       	and	r24, r20
    3744:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
    3746:	ab e3       	ldi	r26, 0x3B	; 59
    3748:	b0 e0       	ldi	r27, 0x00	; 0
    374a:	eb e3       	ldi	r30, 0x3B	; 59
    374c:	f0 e0       	ldi	r31, 0x00	; 0
    374e:	80 81       	ld	r24, Z
    3750:	48 2f       	mov	r20, r24
    3752:	8c 81       	ldd	r24, Y+4	; 0x04
    3754:	28 2f       	mov	r18, r24
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	8b 81       	ldd	r24, Y+3	; 0x03
    375a:	88 2f       	mov	r24, r24
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	b9 01       	movw	r22, r18
    3760:	02 c0       	rjmp	.+4      	; 0x3766 <DIO_enuSetPinVal+0xbc>
    3762:	66 0f       	add	r22, r22
    3764:	77 1f       	adc	r23, r23
    3766:	8a 95       	dec	r24
    3768:	e2 f7       	brpl	.-8      	; 0x3762 <DIO_enuSetPinVal+0xb8>
    376a:	cb 01       	movw	r24, r22
    376c:	84 2b       	or	r24, r20
    376e:	8c 93       	st	X, r24
    3770:	7a c0       	rjmp	.+244    	; 0x3866 <DIO_enuSetPinVal+0x1bc>
			break;
			
			case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    3772:	a8 e3       	ldi	r26, 0x38	; 56
    3774:	b0 e0       	ldi	r27, 0x00	; 0
    3776:	e8 e3       	ldi	r30, 0x38	; 56
    3778:	f0 e0       	ldi	r31, 0x00	; 0
    377a:	80 81       	ld	r24, Z
    377c:	48 2f       	mov	r20, r24
    377e:	8b 81       	ldd	r24, Y+3	; 0x03
    3780:	28 2f       	mov	r18, r24
    3782:	30 e0       	ldi	r19, 0x00	; 0
    3784:	81 e0       	ldi	r24, 0x01	; 1
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	02 c0       	rjmp	.+4      	; 0x378e <DIO_enuSetPinVal+0xe4>
    378a:	88 0f       	add	r24, r24
    378c:	99 1f       	adc	r25, r25
    378e:	2a 95       	dec	r18
    3790:	e2 f7       	brpl	.-8      	; 0x378a <DIO_enuSetPinVal+0xe0>
    3792:	80 95       	com	r24
    3794:	84 23       	and	r24, r20
    3796:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
    3798:	a8 e3       	ldi	r26, 0x38	; 56
    379a:	b0 e0       	ldi	r27, 0x00	; 0
    379c:	e8 e3       	ldi	r30, 0x38	; 56
    379e:	f0 e0       	ldi	r31, 0x00	; 0
    37a0:	80 81       	ld	r24, Z
    37a2:	48 2f       	mov	r20, r24
    37a4:	8c 81       	ldd	r24, Y+4	; 0x04
    37a6:	28 2f       	mov	r18, r24
    37a8:	30 e0       	ldi	r19, 0x00	; 0
    37aa:	8b 81       	ldd	r24, Y+3	; 0x03
    37ac:	88 2f       	mov	r24, r24
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	b9 01       	movw	r22, r18
    37b2:	02 c0       	rjmp	.+4      	; 0x37b8 <DIO_enuSetPinVal+0x10e>
    37b4:	66 0f       	add	r22, r22
    37b6:	77 1f       	adc	r23, r23
    37b8:	8a 95       	dec	r24
    37ba:	e2 f7       	brpl	.-8      	; 0x37b4 <DIO_enuSetPinVal+0x10a>
    37bc:	cb 01       	movw	r24, r22
    37be:	84 2b       	or	r24, r20
    37c0:	8c 93       	st	X, r24
    37c2:	51 c0       	rjmp	.+162    	; 0x3866 <DIO_enuSetPinVal+0x1bc>
			break;
			
			case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    37c4:	a5 e3       	ldi	r26, 0x35	; 53
    37c6:	b0 e0       	ldi	r27, 0x00	; 0
    37c8:	e5 e3       	ldi	r30, 0x35	; 53
    37ca:	f0 e0       	ldi	r31, 0x00	; 0
    37cc:	80 81       	ld	r24, Z
    37ce:	48 2f       	mov	r20, r24
    37d0:	8b 81       	ldd	r24, Y+3	; 0x03
    37d2:	28 2f       	mov	r18, r24
    37d4:	30 e0       	ldi	r19, 0x00	; 0
    37d6:	81 e0       	ldi	r24, 0x01	; 1
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	02 c0       	rjmp	.+4      	; 0x37e0 <DIO_enuSetPinVal+0x136>
    37dc:	88 0f       	add	r24, r24
    37de:	99 1f       	adc	r25, r25
    37e0:	2a 95       	dec	r18
    37e2:	e2 f7       	brpl	.-8      	; 0x37dc <DIO_enuSetPinVal+0x132>
    37e4:	80 95       	com	r24
    37e6:	84 23       	and	r24, r20
    37e8:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
    37ea:	a5 e3       	ldi	r26, 0x35	; 53
    37ec:	b0 e0       	ldi	r27, 0x00	; 0
    37ee:	e5 e3       	ldi	r30, 0x35	; 53
    37f0:	f0 e0       	ldi	r31, 0x00	; 0
    37f2:	80 81       	ld	r24, Z
    37f4:	48 2f       	mov	r20, r24
    37f6:	8c 81       	ldd	r24, Y+4	; 0x04
    37f8:	28 2f       	mov	r18, r24
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	8b 81       	ldd	r24, Y+3	; 0x03
    37fe:	88 2f       	mov	r24, r24
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	b9 01       	movw	r22, r18
    3804:	02 c0       	rjmp	.+4      	; 0x380a <DIO_enuSetPinVal+0x160>
    3806:	66 0f       	add	r22, r22
    3808:	77 1f       	adc	r23, r23
    380a:	8a 95       	dec	r24
    380c:	e2 f7       	brpl	.-8      	; 0x3806 <DIO_enuSetPinVal+0x15c>
    380e:	cb 01       	movw	r24, r22
    3810:	84 2b       	or	r24, r20
    3812:	8c 93       	st	X, r24
    3814:	28 c0       	rjmp	.+80     	; 0x3866 <DIO_enuSetPinVal+0x1bc>
			break;
			
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    3816:	a2 e3       	ldi	r26, 0x32	; 50
    3818:	b0 e0       	ldi	r27, 0x00	; 0
    381a:	e2 e3       	ldi	r30, 0x32	; 50
    381c:	f0 e0       	ldi	r31, 0x00	; 0
    381e:	80 81       	ld	r24, Z
    3820:	48 2f       	mov	r20, r24
    3822:	8b 81       	ldd	r24, Y+3	; 0x03
    3824:	28 2f       	mov	r18, r24
    3826:	30 e0       	ldi	r19, 0x00	; 0
    3828:	81 e0       	ldi	r24, 0x01	; 1
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	02 c0       	rjmp	.+4      	; 0x3832 <DIO_enuSetPinVal+0x188>
    382e:	88 0f       	add	r24, r24
    3830:	99 1f       	adc	r25, r25
    3832:	2a 95       	dec	r18
    3834:	e2 f7       	brpl	.-8      	; 0x382e <DIO_enuSetPinVal+0x184>
    3836:	80 95       	com	r24
    3838:	84 23       	and	r24, r20
    383a:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
    383c:	a2 e3       	ldi	r26, 0x32	; 50
    383e:	b0 e0       	ldi	r27, 0x00	; 0
    3840:	e2 e3       	ldi	r30, 0x32	; 50
    3842:	f0 e0       	ldi	r31, 0x00	; 0
    3844:	80 81       	ld	r24, Z
    3846:	48 2f       	mov	r20, r24
    3848:	8c 81       	ldd	r24, Y+4	; 0x04
    384a:	28 2f       	mov	r18, r24
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	8b 81       	ldd	r24, Y+3	; 0x03
    3850:	88 2f       	mov	r24, r24
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	b9 01       	movw	r22, r18
    3856:	02 c0       	rjmp	.+4      	; 0x385c <DIO_enuSetPinVal+0x1b2>
    3858:	66 0f       	add	r22, r22
    385a:	77 1f       	adc	r23, r23
    385c:	8a 95       	dec	r24
    385e:	e2 f7       	brpl	.-8      	; 0x3858 <DIO_enuSetPinVal+0x1ae>
    3860:	cb 01       	movw	r24, r22
    3862:	84 2b       	or	r24, r20
    3864:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    3866:	19 82       	std	Y+1, r1	; 0x01
    3868:	02 c0       	rjmp	.+4      	; 0x386e <DIO_enuSetPinVal+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    386a:	83 e0       	ldi	r24, 0x03	; 3
    386c:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    386e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3870:	26 96       	adiw	r28, 0x06	; 6
    3872:	0f b6       	in	r0, 0x3f	; 63
    3874:	f8 94       	cli
    3876:	de bf       	out	0x3e, r29	; 62
    3878:	0f be       	out	0x3f, r0	; 63
    387a:	cd bf       	out	0x3d, r28	; 61
    387c:	cf 91       	pop	r28
    387e:	df 91       	pop	r29
    3880:	08 95       	ret

00003882 <DIO_enuGetPinVal>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t DIO_enuGetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 *Copy_pu8Value)
{
    3882:	df 93       	push	r29
    3884:	cf 93       	push	r28
    3886:	cd b7       	in	r28, 0x3d	; 61
    3888:	de b7       	in	r29, 0x3e	; 62
    388a:	27 97       	sbiw	r28, 0x07	; 7
    388c:	0f b6       	in	r0, 0x3f	; 63
    388e:	f8 94       	cli
    3890:	de bf       	out	0x3e, r29	; 62
    3892:	0f be       	out	0x3f, r0	; 63
    3894:	cd bf       	out	0x3d, r28	; 61
    3896:	8a 83       	std	Y+2, r24	; 0x02
    3898:	6b 83       	std	Y+3, r22	; 0x03
    389a:	5d 83       	std	Y+5, r21	; 0x05
    389c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    389e:	81 e0       	ldi	r24, 0x01	; 1
    38a0:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_pu8Value != NULL)
    38a2:	8c 81       	ldd	r24, Y+4	; 0x04
    38a4:	9d 81       	ldd	r25, Y+5	; 0x05
    38a6:	00 97       	sbiw	r24, 0x00	; 0
    38a8:	09 f4       	brne	.+2      	; 0x38ac <DIO_enuGetPinVal+0x2a>
    38aa:	7d c0       	rjmp	.+250    	; 0x39a6 <DIO_enuGetPinVal+0x124>
	{
		if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7)
    38ac:	8a 81       	ldd	r24, Y+2	; 0x02
    38ae:	84 30       	cpi	r24, 0x04	; 4
    38b0:	08 f0       	brcs	.+2      	; 0x38b4 <DIO_enuGetPinVal+0x32>
    38b2:	75 c0       	rjmp	.+234    	; 0x399e <DIO_enuGetPinVal+0x11c>
    38b4:	8b 81       	ldd	r24, Y+3	; 0x03
    38b6:	88 30       	cpi	r24, 0x08	; 8
    38b8:	08 f0       	brcs	.+2      	; 0x38bc <DIO_enuGetPinVal+0x3a>
    38ba:	71 c0       	rjmp	.+226    	; 0x399e <DIO_enuGetPinVal+0x11c>
		{
			switch(Copy_u8PortID)
    38bc:	8a 81       	ldd	r24, Y+2	; 0x02
    38be:	28 2f       	mov	r18, r24
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	3f 83       	std	Y+7, r19	; 0x07
    38c4:	2e 83       	std	Y+6, r18	; 0x06
    38c6:	4e 81       	ldd	r20, Y+6	; 0x06
    38c8:	5f 81       	ldd	r21, Y+7	; 0x07
    38ca:	41 30       	cpi	r20, 0x01	; 1
    38cc:	51 05       	cpc	r21, r1
    38ce:	59 f1       	breq	.+86     	; 0x3926 <DIO_enuGetPinVal+0xa4>
    38d0:	8e 81       	ldd	r24, Y+6	; 0x06
    38d2:	9f 81       	ldd	r25, Y+7	; 0x07
    38d4:	82 30       	cpi	r24, 0x02	; 2
    38d6:	91 05       	cpc	r25, r1
    38d8:	34 f4       	brge	.+12     	; 0x38e6 <DIO_enuGetPinVal+0x64>
    38da:	2e 81       	ldd	r18, Y+6	; 0x06
    38dc:	3f 81       	ldd	r19, Y+7	; 0x07
    38de:	21 15       	cp	r18, r1
    38e0:	31 05       	cpc	r19, r1
    38e2:	69 f0       	breq	.+26     	; 0x38fe <DIO_enuGetPinVal+0x7c>
    38e4:	5e c0       	rjmp	.+188    	; 0x39a2 <DIO_enuGetPinVal+0x120>
    38e6:	4e 81       	ldd	r20, Y+6	; 0x06
    38e8:	5f 81       	ldd	r21, Y+7	; 0x07
    38ea:	42 30       	cpi	r20, 0x02	; 2
    38ec:	51 05       	cpc	r21, r1
    38ee:	79 f1       	breq	.+94     	; 0x394e <DIO_enuGetPinVal+0xcc>
    38f0:	8e 81       	ldd	r24, Y+6	; 0x06
    38f2:	9f 81       	ldd	r25, Y+7	; 0x07
    38f4:	83 30       	cpi	r24, 0x03	; 3
    38f6:	91 05       	cpc	r25, r1
    38f8:	09 f4       	brne	.+2      	; 0x38fc <DIO_enuGetPinVal+0x7a>
    38fa:	3d c0       	rjmp	.+122    	; 0x3976 <DIO_enuGetPinVal+0xf4>
    38fc:	52 c0       	rjmp	.+164    	; 0x39a2 <DIO_enuGetPinVal+0x120>
			{
				case DIO_PORTA:
				*Copy_pu8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
    38fe:	e9 e3       	ldi	r30, 0x39	; 57
    3900:	f0 e0       	ldi	r31, 0x00	; 0
    3902:	80 81       	ld	r24, Z
    3904:	28 2f       	mov	r18, r24
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	8b 81       	ldd	r24, Y+3	; 0x03
    390a:	88 2f       	mov	r24, r24
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	a9 01       	movw	r20, r18
    3910:	02 c0       	rjmp	.+4      	; 0x3916 <DIO_enuGetPinVal+0x94>
    3912:	55 95       	asr	r21
    3914:	47 95       	ror	r20
    3916:	8a 95       	dec	r24
    3918:	e2 f7       	brpl	.-8      	; 0x3912 <DIO_enuGetPinVal+0x90>
    391a:	ca 01       	movw	r24, r20
    391c:	81 70       	andi	r24, 0x01	; 1
    391e:	ec 81       	ldd	r30, Y+4	; 0x04
    3920:	fd 81       	ldd	r31, Y+5	; 0x05
    3922:	80 83       	st	Z, r24
    3924:	3e c0       	rjmp	.+124    	; 0x39a2 <DIO_enuGetPinVal+0x120>
				break;
				
				case DIO_PORTB:
				*Copy_pu8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
    3926:	e6 e3       	ldi	r30, 0x36	; 54
    3928:	f0 e0       	ldi	r31, 0x00	; 0
    392a:	80 81       	ld	r24, Z
    392c:	28 2f       	mov	r18, r24
    392e:	30 e0       	ldi	r19, 0x00	; 0
    3930:	8b 81       	ldd	r24, Y+3	; 0x03
    3932:	88 2f       	mov	r24, r24
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	a9 01       	movw	r20, r18
    3938:	02 c0       	rjmp	.+4      	; 0x393e <DIO_enuGetPinVal+0xbc>
    393a:	55 95       	asr	r21
    393c:	47 95       	ror	r20
    393e:	8a 95       	dec	r24
    3940:	e2 f7       	brpl	.-8      	; 0x393a <DIO_enuGetPinVal+0xb8>
    3942:	ca 01       	movw	r24, r20
    3944:	81 70       	andi	r24, 0x01	; 1
    3946:	ec 81       	ldd	r30, Y+4	; 0x04
    3948:	fd 81       	ldd	r31, Y+5	; 0x05
    394a:	80 83       	st	Z, r24
    394c:	2a c0       	rjmp	.+84     	; 0x39a2 <DIO_enuGetPinVal+0x120>
				break;
				
				case DIO_PORTC:
				*Copy_pu8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
    394e:	e3 e3       	ldi	r30, 0x33	; 51
    3950:	f0 e0       	ldi	r31, 0x00	; 0
    3952:	80 81       	ld	r24, Z
    3954:	28 2f       	mov	r18, r24
    3956:	30 e0       	ldi	r19, 0x00	; 0
    3958:	8b 81       	ldd	r24, Y+3	; 0x03
    395a:	88 2f       	mov	r24, r24
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	a9 01       	movw	r20, r18
    3960:	02 c0       	rjmp	.+4      	; 0x3966 <DIO_enuGetPinVal+0xe4>
    3962:	55 95       	asr	r21
    3964:	47 95       	ror	r20
    3966:	8a 95       	dec	r24
    3968:	e2 f7       	brpl	.-8      	; 0x3962 <DIO_enuGetPinVal+0xe0>
    396a:	ca 01       	movw	r24, r20
    396c:	81 70       	andi	r24, 0x01	; 1
    396e:	ec 81       	ldd	r30, Y+4	; 0x04
    3970:	fd 81       	ldd	r31, Y+5	; 0x05
    3972:	80 83       	st	Z, r24
    3974:	16 c0       	rjmp	.+44     	; 0x39a2 <DIO_enuGetPinVal+0x120>
				break;
				
				case DIO_PORTD:
				*Copy_pu8Value = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
    3976:	e0 e3       	ldi	r30, 0x30	; 48
    3978:	f0 e0       	ldi	r31, 0x00	; 0
    397a:	80 81       	ld	r24, Z
    397c:	28 2f       	mov	r18, r24
    397e:	30 e0       	ldi	r19, 0x00	; 0
    3980:	8b 81       	ldd	r24, Y+3	; 0x03
    3982:	88 2f       	mov	r24, r24
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	a9 01       	movw	r20, r18
    3988:	02 c0       	rjmp	.+4      	; 0x398e <DIO_enuGetPinVal+0x10c>
    398a:	55 95       	asr	r21
    398c:	47 95       	ror	r20
    398e:	8a 95       	dec	r24
    3990:	e2 f7       	brpl	.-8      	; 0x398a <DIO_enuGetPinVal+0x108>
    3992:	ca 01       	movw	r24, r20
    3994:	81 70       	andi	r24, 0x01	; 1
    3996:	ec 81       	ldd	r30, Y+4	; 0x04
    3998:	fd 81       	ldd	r31, Y+5	; 0x05
    399a:	80 83       	st	Z, r24
    399c:	02 c0       	rjmp	.+4      	; 0x39a2 <DIO_enuGetPinVal+0x120>
				break;
			}
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    399e:	83 e0       	ldi	r24, 0x03	; 3
    39a0:	89 83       	std	Y+1, r24	; 0x01
		}
		Local_enuErrorState = ES_OK;
    39a2:	19 82       	std	Y+1, r1	; 0x01
    39a4:	02 c0       	rjmp	.+4      	; 0x39aa <DIO_enuGetPinVal+0x128>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    39a6:	82 e0       	ldi	r24, 0x02	; 2
    39a8:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    39aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    39ac:	27 96       	adiw	r28, 0x07	; 7
    39ae:	0f b6       	in	r0, 0x3f	; 63
    39b0:	f8 94       	cli
    39b2:	de bf       	out	0x3e, r29	; 62
    39b4:	0f be       	out	0x3f, r0	; 63
    39b6:	cd bf       	out	0x3d, r28	; 61
    39b8:	cf 91       	pop	r28
    39ba:	df 91       	pop	r29
    39bc:	08 95       	ret

000039be <DIO_enuTogPinVal>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t DIO_enuTogPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID)
{
    39be:	df 93       	push	r29
    39c0:	cf 93       	push	r28
    39c2:	00 d0       	rcall	.+0      	; 0x39c4 <DIO_enuTogPinVal+0x6>
    39c4:	00 d0       	rcall	.+0      	; 0x39c6 <DIO_enuTogPinVal+0x8>
    39c6:	0f 92       	push	r0
    39c8:	cd b7       	in	r28, 0x3d	; 61
    39ca:	de b7       	in	r29, 0x3e	; 62
    39cc:	8a 83       	std	Y+2, r24	; 0x02
    39ce:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    39d0:	81 e0       	ldi	r24, 0x01	; 1
    39d2:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7)
    39d4:	8a 81       	ldd	r24, Y+2	; 0x02
    39d6:	84 30       	cpi	r24, 0x04	; 4
    39d8:	08 f0       	brcs	.+2      	; 0x39dc <DIO_enuTogPinVal+0x1e>
    39da:	74 c0       	rjmp	.+232    	; 0x3ac4 <DIO_enuTogPinVal+0x106>
    39dc:	8b 81       	ldd	r24, Y+3	; 0x03
    39de:	88 30       	cpi	r24, 0x08	; 8
    39e0:	08 f0       	brcs	.+2      	; 0x39e4 <DIO_enuTogPinVal+0x26>
    39e2:	70 c0       	rjmp	.+224    	; 0x3ac4 <DIO_enuTogPinVal+0x106>
	{
		switch(Copy_u8PortID)
    39e4:	8a 81       	ldd	r24, Y+2	; 0x02
    39e6:	28 2f       	mov	r18, r24
    39e8:	30 e0       	ldi	r19, 0x00	; 0
    39ea:	3d 83       	std	Y+5, r19	; 0x05
    39ec:	2c 83       	std	Y+4, r18	; 0x04
    39ee:	8c 81       	ldd	r24, Y+4	; 0x04
    39f0:	9d 81       	ldd	r25, Y+5	; 0x05
    39f2:	81 30       	cpi	r24, 0x01	; 1
    39f4:	91 05       	cpc	r25, r1
    39f6:	49 f1       	breq	.+82     	; 0x3a4a <DIO_enuTogPinVal+0x8c>
    39f8:	2c 81       	ldd	r18, Y+4	; 0x04
    39fa:	3d 81       	ldd	r19, Y+5	; 0x05
    39fc:	22 30       	cpi	r18, 0x02	; 2
    39fe:	31 05       	cpc	r19, r1
    3a00:	2c f4       	brge	.+10     	; 0x3a0c <DIO_enuTogPinVal+0x4e>
    3a02:	8c 81       	ldd	r24, Y+4	; 0x04
    3a04:	9d 81       	ldd	r25, Y+5	; 0x05
    3a06:	00 97       	sbiw	r24, 0x00	; 0
    3a08:	61 f0       	breq	.+24     	; 0x3a22 <DIO_enuTogPinVal+0x64>
    3a0a:	5a c0       	rjmp	.+180    	; 0x3ac0 <DIO_enuTogPinVal+0x102>
    3a0c:	2c 81       	ldd	r18, Y+4	; 0x04
    3a0e:	3d 81       	ldd	r19, Y+5	; 0x05
    3a10:	22 30       	cpi	r18, 0x02	; 2
    3a12:	31 05       	cpc	r19, r1
    3a14:	71 f1       	breq	.+92     	; 0x3a72 <DIO_enuTogPinVal+0xb4>
    3a16:	8c 81       	ldd	r24, Y+4	; 0x04
    3a18:	9d 81       	ldd	r25, Y+5	; 0x05
    3a1a:	83 30       	cpi	r24, 0x03	; 3
    3a1c:	91 05       	cpc	r25, r1
    3a1e:	e9 f1       	breq	.+122    	; 0x3a9a <DIO_enuTogPinVal+0xdc>
    3a20:	4f c0       	rjmp	.+158    	; 0x3ac0 <DIO_enuTogPinVal+0x102>
		{
			case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT << Copy_u8PinID);
    3a22:	ab e3       	ldi	r26, 0x3B	; 59
    3a24:	b0 e0       	ldi	r27, 0x00	; 0
    3a26:	eb e3       	ldi	r30, 0x3B	; 59
    3a28:	f0 e0       	ldi	r31, 0x00	; 0
    3a2a:	80 81       	ld	r24, Z
    3a2c:	48 2f       	mov	r20, r24
    3a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a30:	28 2f       	mov	r18, r24
    3a32:	30 e0       	ldi	r19, 0x00	; 0
    3a34:	81 e0       	ldi	r24, 0x01	; 1
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	02 2e       	mov	r0, r18
    3a3a:	02 c0       	rjmp	.+4      	; 0x3a40 <DIO_enuTogPinVal+0x82>
    3a3c:	88 0f       	add	r24, r24
    3a3e:	99 1f       	adc	r25, r25
    3a40:	0a 94       	dec	r0
    3a42:	e2 f7       	brpl	.-8      	; 0x3a3c <DIO_enuTogPinVal+0x7e>
    3a44:	84 27       	eor	r24, r20
    3a46:	8c 93       	st	X, r24
    3a48:	3b c0       	rjmp	.+118    	; 0x3ac0 <DIO_enuTogPinVal+0x102>
			break;
			
			case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT << Copy_u8PinID);
    3a4a:	a8 e3       	ldi	r26, 0x38	; 56
    3a4c:	b0 e0       	ldi	r27, 0x00	; 0
    3a4e:	e8 e3       	ldi	r30, 0x38	; 56
    3a50:	f0 e0       	ldi	r31, 0x00	; 0
    3a52:	80 81       	ld	r24, Z
    3a54:	48 2f       	mov	r20, r24
    3a56:	8b 81       	ldd	r24, Y+3	; 0x03
    3a58:	28 2f       	mov	r18, r24
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	81 e0       	ldi	r24, 0x01	; 1
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	02 2e       	mov	r0, r18
    3a62:	02 c0       	rjmp	.+4      	; 0x3a68 <DIO_enuTogPinVal+0xaa>
    3a64:	88 0f       	add	r24, r24
    3a66:	99 1f       	adc	r25, r25
    3a68:	0a 94       	dec	r0
    3a6a:	e2 f7       	brpl	.-8      	; 0x3a64 <DIO_enuTogPinVal+0xa6>
    3a6c:	84 27       	eor	r24, r20
    3a6e:	8c 93       	st	X, r24
    3a70:	27 c0       	rjmp	.+78     	; 0x3ac0 <DIO_enuTogPinVal+0x102>
			break;
			
			case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT << Copy_u8PinID);
    3a72:	a5 e3       	ldi	r26, 0x35	; 53
    3a74:	b0 e0       	ldi	r27, 0x00	; 0
    3a76:	e5 e3       	ldi	r30, 0x35	; 53
    3a78:	f0 e0       	ldi	r31, 0x00	; 0
    3a7a:	80 81       	ld	r24, Z
    3a7c:	48 2f       	mov	r20, r24
    3a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a80:	28 2f       	mov	r18, r24
    3a82:	30 e0       	ldi	r19, 0x00	; 0
    3a84:	81 e0       	ldi	r24, 0x01	; 1
    3a86:	90 e0       	ldi	r25, 0x00	; 0
    3a88:	02 2e       	mov	r0, r18
    3a8a:	02 c0       	rjmp	.+4      	; 0x3a90 <DIO_enuTogPinVal+0xd2>
    3a8c:	88 0f       	add	r24, r24
    3a8e:	99 1f       	adc	r25, r25
    3a90:	0a 94       	dec	r0
    3a92:	e2 f7       	brpl	.-8      	; 0x3a8c <DIO_enuTogPinVal+0xce>
    3a94:	84 27       	eor	r24, r20
    3a96:	8c 93       	st	X, r24
    3a98:	13 c0       	rjmp	.+38     	; 0x3ac0 <DIO_enuTogPinVal+0x102>
			break;
			
			case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT << Copy_u8PinID);
    3a9a:	a2 e3       	ldi	r26, 0x32	; 50
    3a9c:	b0 e0       	ldi	r27, 0x00	; 0
    3a9e:	e2 e3       	ldi	r30, 0x32	; 50
    3aa0:	f0 e0       	ldi	r31, 0x00	; 0
    3aa2:	80 81       	ld	r24, Z
    3aa4:	48 2f       	mov	r20, r24
    3aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa8:	28 2f       	mov	r18, r24
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	81 e0       	ldi	r24, 0x01	; 1
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	02 2e       	mov	r0, r18
    3ab2:	02 c0       	rjmp	.+4      	; 0x3ab8 <DIO_enuTogPinVal+0xfa>
    3ab4:	88 0f       	add	r24, r24
    3ab6:	99 1f       	adc	r25, r25
    3ab8:	0a 94       	dec	r0
    3aba:	e2 f7       	brpl	.-8      	; 0x3ab4 <DIO_enuTogPinVal+0xf6>
    3abc:	84 27       	eor	r24, r20
    3abe:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    3ac0:	19 82       	std	Y+1, r1	; 0x01
    3ac2:	02 c0       	rjmp	.+4      	; 0x3ac8 <DIO_enuTogPinVal+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    3ac4:	83 e0       	ldi	r24, 0x03	; 3
    3ac6:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    3ac8:	89 81       	ldd	r24, Y+1	; 0x01
    3aca:	0f 90       	pop	r0
    3acc:	0f 90       	pop	r0
    3ace:	0f 90       	pop	r0
    3ad0:	0f 90       	pop	r0
    3ad2:	0f 90       	pop	r0
    3ad4:	cf 91       	pop	r28
    3ad6:	df 91       	pop	r29
    3ad8:	08 95       	ret

00003ada <ADC_enuInit>:

static volatile void (*ADC_PFuncISRFunc)(void *) = NULL;
static volatile void *ADC_PvidISRParameter = NULL;

ES_t ADC_enuInit(void)
{
    3ada:	df 93       	push	r29
    3adc:	cf 93       	push	r28
    3ade:	0f 92       	push	r0
    3ae0:	cd b7       	in	r28, 0x3d	; 61
    3ae2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    3ae4:	81 e0       	ldi	r24, 0x01	; 1
    3ae6:	89 83       	std	Y+1, r24	; 0x01
	
	/* Configure Voltage Reference */
	/* Mask the two bits of voltage reference */
	ADMUX &= VOLT_REF_MASK;
    3ae8:	a7 e2       	ldi	r26, 0x27	; 39
    3aea:	b0 e0       	ldi	r27, 0x00	; 0
    3aec:	e7 e2       	ldi	r30, 0x27	; 39
    3aee:	f0 e0       	ldi	r31, 0x00	; 0
    3af0:	80 81       	ld	r24, Z
    3af2:	8f 73       	andi	r24, 0x3F	; 63
    3af4:	8c 93       	st	X, r24
	#if ADC_VOLT_REF == AREF_REF
	ADMUX &= ~(MASK_BIT << REFS0);
    3af6:	a7 e2       	ldi	r26, 0x27	; 39
    3af8:	b0 e0       	ldi	r27, 0x00	; 0
    3afa:	e7 e2       	ldi	r30, 0x27	; 39
    3afc:	f0 e0       	ldi	r31, 0x00	; 0
    3afe:	80 81       	ld	r24, Z
    3b00:	8f 7b       	andi	r24, 0xBF	; 191
    3b02:	8c 93       	st	X, r24
	ADMUX &= ~(MASK_BIT << REFS1);
    3b04:	a7 e2       	ldi	r26, 0x27	; 39
    3b06:	b0 e0       	ldi	r27, 0x00	; 0
    3b08:	e7 e2       	ldi	r30, 0x27	; 39
    3b0a:	f0 e0       	ldi	r31, 0x00	; 0
    3b0c:	80 81       	ld	r24, Z
    3b0e:	8f 77       	andi	r24, 0x7F	; 127
    3b10:	8c 93       	st	X, r24
	#error "ADC Voltage Referance has a wrong configuration"
	#endif
	
	/* Configure Adjustment */
	/* Mask the bit of adjustment */
	ADMUX &= ~(MASK_BIT << ADLAR);
    3b12:	a7 e2       	ldi	r26, 0x27	; 39
    3b14:	b0 e0       	ldi	r27, 0x00	; 0
    3b16:	e7 e2       	ldi	r30, 0x27	; 39
    3b18:	f0 e0       	ldi	r31, 0x00	; 0
    3b1a:	80 81       	ld	r24, Z
    3b1c:	8f 7d       	andi	r24, 0xDF	; 223
    3b1e:	8c 93       	st	X, r24
	#if ADC_ADJUST == RIGHT_ADJUST
	ADMUX &= ~(MASK_BIT << ADLAR);
    3b20:	a7 e2       	ldi	r26, 0x27	; 39
    3b22:	b0 e0       	ldi	r27, 0x00	; 0
    3b24:	e7 e2       	ldi	r30, 0x27	; 39
    3b26:	f0 e0       	ldi	r31, 0x00	; 0
    3b28:	80 81       	ld	r24, Z
    3b2a:	8f 7d       	andi	r24, 0xDF	; 223
    3b2c:	8c 93       	st	X, r24
	#error "ADC Adjustment has a wrong configuration"
	#endif
	
	/* Configure ADC Prescaler */
	/* Mask the three bits of Prescaler */
	ADCSRA &= PRESCALER_MASK;
    3b2e:	a6 e2       	ldi	r26, 0x26	; 38
    3b30:	b0 e0       	ldi	r27, 0x00	; 0
    3b32:	e6 e2       	ldi	r30, 0x26	; 38
    3b34:	f0 e0       	ldi	r31, 0x00	; 0
    3b36:	80 81       	ld	r24, Z
    3b38:	88 7f       	andi	r24, 0xF8	; 248
    3b3a:	8c 93       	st	X, r24
	#elif ADC_PRESCALER == DIVISION_FACTOR_4
	ADCSRA &= ~(MASK_BIT << ADPS0);
	ADCSRA |=  (MASK_BIT << ADPS1);
	ADCSRA &= ~(MASK_BIT << ADPS2);
	#elif ADC_PRESCALER == DIVISION_FACTOR_8
	ADCSRA |=  (MASK_BIT << ADPS0);
    3b3c:	a6 e2       	ldi	r26, 0x26	; 38
    3b3e:	b0 e0       	ldi	r27, 0x00	; 0
    3b40:	e6 e2       	ldi	r30, 0x26	; 38
    3b42:	f0 e0       	ldi	r31, 0x00	; 0
    3b44:	80 81       	ld	r24, Z
    3b46:	81 60       	ori	r24, 0x01	; 1
    3b48:	8c 93       	st	X, r24
	ADCSRA |=  (MASK_BIT << ADPS1);
    3b4a:	a6 e2       	ldi	r26, 0x26	; 38
    3b4c:	b0 e0       	ldi	r27, 0x00	; 0
    3b4e:	e6 e2       	ldi	r30, 0x26	; 38
    3b50:	f0 e0       	ldi	r31, 0x00	; 0
    3b52:	80 81       	ld	r24, Z
    3b54:	82 60       	ori	r24, 0x02	; 2
    3b56:	8c 93       	st	X, r24
	ADCSRA &= ~(MASK_BIT << ADPS2);
    3b58:	a6 e2       	ldi	r26, 0x26	; 38
    3b5a:	b0 e0       	ldi	r27, 0x00	; 0
    3b5c:	e6 e2       	ldi	r30, 0x26	; 38
    3b5e:	f0 e0       	ldi	r31, 0x00	; 0
    3b60:	80 81       	ld	r24, Z
    3b62:	8b 7f       	andi	r24, 0xFB	; 251
    3b64:	8c 93       	st	X, r24
	ADCSRA |=  (MASK_BIT << ADPS2);
	#else
	#error "ADC PreScaler has a wrong configuration"
	#endif
	
	return Local_enuErrorState;
    3b66:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b68:	0f 90       	pop	r0
    3b6a:	cf 91       	pop	r28
    3b6c:	df 91       	pop	r29
    3b6e:	08 95       	ret

00003b70 <ADC_enuEnable>:

ES_t ADC_enuEnable(void)
{
    3b70:	df 93       	push	r29
    3b72:	cf 93       	push	r28
    3b74:	0f 92       	push	r0
    3b76:	cd b7       	in	r28, 0x3d	; 61
    3b78:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    3b7a:	81 e0       	ldi	r24, 0x01	; 1
    3b7c:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA |= (MASK_BIT << ADEN);
    3b7e:	a6 e2       	ldi	r26, 0x26	; 38
    3b80:	b0 e0       	ldi	r27, 0x00	; 0
    3b82:	e6 e2       	ldi	r30, 0x26	; 38
    3b84:	f0 e0       	ldi	r31, 0x00	; 0
    3b86:	80 81       	ld	r24, Z
    3b88:	80 68       	ori	r24, 0x80	; 128
    3b8a:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    3b8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b8e:	0f 90       	pop	r0
    3b90:	cf 91       	pop	r28
    3b92:	df 91       	pop	r29
    3b94:	08 95       	ret

00003b96 <ADC_enuDisable>:

ES_t ADC_enuDisable(void)
{
    3b96:	df 93       	push	r29
    3b98:	cf 93       	push	r28
    3b9a:	0f 92       	push	r0
    3b9c:	cd b7       	in	r28, 0x3d	; 61
    3b9e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    3ba0:	81 e0       	ldi	r24, 0x01	; 1
    3ba2:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA &= ~(MASK_BIT << ADEN);
    3ba4:	a6 e2       	ldi	r26, 0x26	; 38
    3ba6:	b0 e0       	ldi	r27, 0x00	; 0
    3ba8:	e6 e2       	ldi	r30, 0x26	; 38
    3baa:	f0 e0       	ldi	r31, 0x00	; 0
    3bac:	80 81       	ld	r24, Z
    3bae:	8f 77       	andi	r24, 0x7F	; 127
    3bb0:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    3bb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    3bb4:	0f 90       	pop	r0
    3bb6:	cf 91       	pop	r28
    3bb8:	df 91       	pop	r29
    3bba:	08 95       	ret

00003bbc <ADC_enuStartConversion>:

ES_t ADC_enuStartConversion(void)
{
    3bbc:	df 93       	push	r29
    3bbe:	cf 93       	push	r28
    3bc0:	0f 92       	push	r0
    3bc2:	cd b7       	in	r28, 0x3d	; 61
    3bc4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    3bc6:	81 e0       	ldi	r24, 0x01	; 1
    3bc8:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA |= (MASK_BIT << ADSC);
    3bca:	a6 e2       	ldi	r26, 0x26	; 38
    3bcc:	b0 e0       	ldi	r27, 0x00	; 0
    3bce:	e6 e2       	ldi	r30, 0x26	; 38
    3bd0:	f0 e0       	ldi	r31, 0x00	; 0
    3bd2:	80 81       	ld	r24, Z
    3bd4:	80 64       	ori	r24, 0x40	; 64
    3bd6:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    3bd8:	89 81       	ldd	r24, Y+1	; 0x01
}
    3bda:	0f 90       	pop	r0
    3bdc:	cf 91       	pop	r28
    3bde:	df 91       	pop	r29
    3be0:	08 95       	ret

00003be2 <ADC_enuSelectChannel>:

ES_t ADC_enuSelectChannel(u8 Copy_u8ChannelID)
{
    3be2:	df 93       	push	r29
    3be4:	cf 93       	push	r28
    3be6:	00 d0       	rcall	.+0      	; 0x3be8 <ADC_enuSelectChannel+0x6>
    3be8:	cd b7       	in	r28, 0x3d	; 61
    3bea:	de b7       	in	r29, 0x3e	; 62
    3bec:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3bee:	81 e0       	ldi	r24, 0x01	; 1
    3bf0:	89 83       	std	Y+1, r24	; 0x01
	
	/* Mask the five bits of channels */
	ADMUX &= CHANNALS_MASK;
    3bf2:	a7 e2       	ldi	r26, 0x27	; 39
    3bf4:	b0 e0       	ldi	r27, 0x00	; 0
    3bf6:	e7 e2       	ldi	r30, 0x27	; 39
    3bf8:	f0 e0       	ldi	r31, 0x00	; 0
    3bfa:	80 81       	ld	r24, Z
    3bfc:	80 7e       	andi	r24, 0xE0	; 224
    3bfe:	8c 93       	st	X, r24
	
	ADMUX |= Copy_u8ChannelID;
    3c00:	a7 e2       	ldi	r26, 0x27	; 39
    3c02:	b0 e0       	ldi	r27, 0x00	; 0
    3c04:	e7 e2       	ldi	r30, 0x27	; 39
    3c06:	f0 e0       	ldi	r31, 0x00	; 0
    3c08:	90 81       	ld	r25, Z
    3c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c0c:	89 2b       	or	r24, r25
    3c0e:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    3c10:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c12:	0f 90       	pop	r0
    3c14:	0f 90       	pop	r0
    3c16:	cf 91       	pop	r28
    3c18:	df 91       	pop	r29
    3c1a:	08 95       	ret

00003c1c <ADC_enuPollingSystem>:

ES_t ADC_enuPollingSystem(void)
{
    3c1c:	df 93       	push	r29
    3c1e:	cf 93       	push	r28
    3c20:	0f 92       	push	r0
    3c22:	cd b7       	in	r28, 0x3d	; 61
    3c24:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    3c26:	81 e0       	ldi	r24, 0x01	; 1
    3c28:	89 83       	std	Y+1, r24	; 0x01
	
	/* Busy Wait until flag is set */
	while(!((ADCSRA >> ADIF) & MASK_BIT));
    3c2a:	e6 e2       	ldi	r30, 0x26	; 38
    3c2c:	f0 e0       	ldi	r31, 0x00	; 0
    3c2e:	80 81       	ld	r24, Z
    3c30:	82 95       	swap	r24
    3c32:	8f 70       	andi	r24, 0x0F	; 15
    3c34:	88 2f       	mov	r24, r24
    3c36:	90 e0       	ldi	r25, 0x00	; 0
    3c38:	81 70       	andi	r24, 0x01	; 1
    3c3a:	90 70       	andi	r25, 0x00	; 0
    3c3c:	00 97       	sbiw	r24, 0x00	; 0
    3c3e:	a9 f3       	breq	.-22     	; 0x3c2a <ADC_enuPollingSystem+0xe>
	
	/* Write one to clear the flag */
	ADCSRA |= (MASK_BIT << ADIF);
    3c40:	a6 e2       	ldi	r26, 0x26	; 38
    3c42:	b0 e0       	ldi	r27, 0x00	; 0
    3c44:	e6 e2       	ldi	r30, 0x26	; 38
    3c46:	f0 e0       	ldi	r31, 0x00	; 0
    3c48:	80 81       	ld	r24, Z
    3c4a:	80 61       	ori	r24, 0x10	; 16
    3c4c:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    3c4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c50:	0f 90       	pop	r0
    3c52:	cf 91       	pop	r28
    3c54:	df 91       	pop	r29
    3c56:	08 95       	ret

00003c58 <ADC_enuEnableInterrupt>:

ES_t ADC_enuEnableInterrupt(void)
{
    3c58:	df 93       	push	r29
    3c5a:	cf 93       	push	r28
    3c5c:	0f 92       	push	r0
    3c5e:	cd b7       	in	r28, 0x3d	; 61
    3c60:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    3c62:	81 e0       	ldi	r24, 0x01	; 1
    3c64:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA |= (MASK_BIT << ADIE);
    3c66:	a6 e2       	ldi	r26, 0x26	; 38
    3c68:	b0 e0       	ldi	r27, 0x00	; 0
    3c6a:	e6 e2       	ldi	r30, 0x26	; 38
    3c6c:	f0 e0       	ldi	r31, 0x00	; 0
    3c6e:	80 81       	ld	r24, Z
    3c70:	88 60       	ori	r24, 0x08	; 8
    3c72:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    3c74:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c76:	0f 90       	pop	r0
    3c78:	cf 91       	pop	r28
    3c7a:	df 91       	pop	r29
    3c7c:	08 95       	ret

00003c7e <ADC_enuDisableInterrupt>:

ES_t ADC_enuDisableInterrupt(void)
{
    3c7e:	df 93       	push	r29
    3c80:	cf 93       	push	r28
    3c82:	0f 92       	push	r0
    3c84:	cd b7       	in	r28, 0x3d	; 61
    3c86:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    3c88:	81 e0       	ldi	r24, 0x01	; 1
    3c8a:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA &= ~(MASK_BIT << ADIE);
    3c8c:	a6 e2       	ldi	r26, 0x26	; 38
    3c8e:	b0 e0       	ldi	r27, 0x00	; 0
    3c90:	e6 e2       	ldi	r30, 0x26	; 38
    3c92:	f0 e0       	ldi	r31, 0x00	; 0
    3c94:	80 81       	ld	r24, Z
    3c96:	87 7f       	andi	r24, 0xF7	; 247
    3c98:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    3c9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c9c:	0f 90       	pop	r0
    3c9e:	cf 91       	pop	r28
    3ca0:	df 91       	pop	r29
    3ca2:	08 95       	ret

00003ca4 <ADC_enuReadHighValue>:

ES_t ADC_enuReadHighValue(u8 *Copy_pu8ReadHighValue)
{
    3ca4:	df 93       	push	r29
    3ca6:	cf 93       	push	r28
    3ca8:	00 d0       	rcall	.+0      	; 0x3caa <ADC_enuReadHighValue+0x6>
    3caa:	0f 92       	push	r0
    3cac:	cd b7       	in	r28, 0x3d	; 61
    3cae:	de b7       	in	r29, 0x3e	; 62
    3cb0:	9b 83       	std	Y+3, r25	; 0x03
    3cb2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3cb4:	81 e0       	ldi	r24, 0x01	; 1
    3cb6:	89 83       	std	Y+1, r24	; 0x01
	
	#if ADC_ADJUST == RIGHT_ADJUST
	*Copy_pu8ReadHighValue  = (ADCL >> 2);
    3cb8:	e4 e2       	ldi	r30, 0x24	; 36
    3cba:	f0 e0       	ldi	r31, 0x00	; 0
    3cbc:	80 81       	ld	r24, Z
    3cbe:	86 95       	lsr	r24
    3cc0:	86 95       	lsr	r24
    3cc2:	ea 81       	ldd	r30, Y+2	; 0x02
    3cc4:	fb 81       	ldd	r31, Y+3	; 0x03
    3cc6:	80 83       	st	Z, r24
	*Copy_pu8ReadHighValue |= (ADCH << 6);
    3cc8:	ea 81       	ldd	r30, Y+2	; 0x02
    3cca:	fb 81       	ldd	r31, Y+3	; 0x03
    3ccc:	80 81       	ld	r24, Z
    3cce:	28 2f       	mov	r18, r24
    3cd0:	e5 e2       	ldi	r30, 0x25	; 37
    3cd2:	f0 e0       	ldi	r31, 0x00	; 0
    3cd4:	80 81       	ld	r24, Z
    3cd6:	88 2f       	mov	r24, r24
    3cd8:	90 e0       	ldi	r25, 0x00	; 0
    3cda:	00 24       	eor	r0, r0
    3cdc:	96 95       	lsr	r25
    3cde:	87 95       	ror	r24
    3ce0:	07 94       	ror	r0
    3ce2:	96 95       	lsr	r25
    3ce4:	87 95       	ror	r24
    3ce6:	07 94       	ror	r0
    3ce8:	98 2f       	mov	r25, r24
    3cea:	80 2d       	mov	r24, r0
    3cec:	82 2b       	or	r24, r18
    3cee:	ea 81       	ldd	r30, Y+2	; 0x02
    3cf0:	fb 81       	ldd	r31, Y+3	; 0x03
    3cf2:	80 83       	st	Z, r24
	*Copy_pu8ReadHighValue = ADCH;
	#else
	#error "ADC Adjustment has a wrong configuration"
	#endif
	
	return Local_enuErrorState;
    3cf4:	89 81       	ldd	r24, Y+1	; 0x01
}
    3cf6:	0f 90       	pop	r0
    3cf8:	0f 90       	pop	r0
    3cfa:	0f 90       	pop	r0
    3cfc:	cf 91       	pop	r28
    3cfe:	df 91       	pop	r29
    3d00:	08 95       	ret

00003d02 <ADC_enuReadADCValue>:

ES_t ADC_enuReadADCValue(u16 *Copy_pu16ReadValue)
{
    3d02:	df 93       	push	r29
    3d04:	cf 93       	push	r28
    3d06:	00 d0       	rcall	.+0      	; 0x3d08 <ADC_enuReadADCValue+0x6>
    3d08:	0f 92       	push	r0
    3d0a:	cd b7       	in	r28, 0x3d	; 61
    3d0c:	de b7       	in	r29, 0x3e	; 62
    3d0e:	9b 83       	std	Y+3, r25	; 0x03
    3d10:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3d12:	81 e0       	ldi	r24, 0x01	; 1
    3d14:	89 83       	std	Y+1, r24	; 0x01
	
	#if ADC_ADJUST == RIGHT_ADJUST
	*Copy_pu16ReadValue  = ((u16)ADCL);
    3d16:	e4 e2       	ldi	r30, 0x24	; 36
    3d18:	f0 e0       	ldi	r31, 0x00	; 0
    3d1a:	80 81       	ld	r24, Z
    3d1c:	88 2f       	mov	r24, r24
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	ea 81       	ldd	r30, Y+2	; 0x02
    3d22:	fb 81       	ldd	r31, Y+3	; 0x03
    3d24:	91 83       	std	Z+1, r25	; 0x01
    3d26:	80 83       	st	Z, r24
	*Copy_pu16ReadValue |= ((u16)ADCH << 8);
    3d28:	ea 81       	ldd	r30, Y+2	; 0x02
    3d2a:	fb 81       	ldd	r31, Y+3	; 0x03
    3d2c:	20 81       	ld	r18, Z
    3d2e:	31 81       	ldd	r19, Z+1	; 0x01
    3d30:	e5 e2       	ldi	r30, 0x25	; 37
    3d32:	f0 e0       	ldi	r31, 0x00	; 0
    3d34:	80 81       	ld	r24, Z
    3d36:	88 2f       	mov	r24, r24
    3d38:	90 e0       	ldi	r25, 0x00	; 0
    3d3a:	98 2f       	mov	r25, r24
    3d3c:	88 27       	eor	r24, r24
    3d3e:	82 2b       	or	r24, r18
    3d40:	93 2b       	or	r25, r19
    3d42:	ea 81       	ldd	r30, Y+2	; 0x02
    3d44:	fb 81       	ldd	r31, Y+3	; 0x03
    3d46:	91 83       	std	Z+1, r25	; 0x01
    3d48:	80 83       	st	Z, r24
	*Copy_pu16ReadValue |= ((u16)ADCH << 2);
	#else
	#error "ADC Adjustment has a wrong configuration"
	#endif
	
	return Local_enuErrorState;
    3d4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d4c:	0f 90       	pop	r0
    3d4e:	0f 90       	pop	r0
    3d50:	0f 90       	pop	r0
    3d52:	cf 91       	pop	r28
    3d54:	df 91       	pop	r29
    3d56:	08 95       	ret

00003d58 <ADC_enuEnableTrigger>:

ES_t ADC_enuEnableTrigger(u8 Copy_u8TriggerSource)
{
    3d58:	df 93       	push	r29
    3d5a:	cf 93       	push	r28
    3d5c:	00 d0       	rcall	.+0      	; 0x3d5e <ADC_enuEnableTrigger+0x6>
    3d5e:	00 d0       	rcall	.+0      	; 0x3d60 <ADC_enuEnableTrigger+0x8>
    3d60:	cd b7       	in	r28, 0x3d	; 61
    3d62:	de b7       	in	r29, 0x3e	; 62
    3d64:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3d66:	81 e0       	ldi	r24, 0x01	; 1
    3d68:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA &= ~(MASK_BIT << ADATE);
    3d6a:	a6 e2       	ldi	r26, 0x26	; 38
    3d6c:	b0 e0       	ldi	r27, 0x00	; 0
    3d6e:	e6 e2       	ldi	r30, 0x26	; 38
    3d70:	f0 e0       	ldi	r31, 0x00	; 0
    3d72:	80 81       	ld	r24, Z
    3d74:	8f 7d       	andi	r24, 0xDF	; 223
    3d76:	8c 93       	st	X, r24
	
	/* Mask the three bits of Auto Trigger Source */
	SFIOR &= AUTO_TRIGGER_MASK;
    3d78:	a0 e5       	ldi	r26, 0x50	; 80
    3d7a:	b0 e0       	ldi	r27, 0x00	; 0
    3d7c:	e0 e5       	ldi	r30, 0x50	; 80
    3d7e:	f0 e0       	ldi	r31, 0x00	; 0
    3d80:	80 81       	ld	r24, Z
    3d82:	8f 71       	andi	r24, 0x1F	; 31
    3d84:	8c 93       	st	X, r24
	switch(Copy_u8TriggerSource)
    3d86:	8a 81       	ldd	r24, Y+2	; 0x02
    3d88:	28 2f       	mov	r18, r24
    3d8a:	30 e0       	ldi	r19, 0x00	; 0
    3d8c:	3c 83       	std	Y+4, r19	; 0x04
    3d8e:	2b 83       	std	Y+3, r18	; 0x03
    3d90:	8b 81       	ldd	r24, Y+3	; 0x03
    3d92:	9c 81       	ldd	r25, Y+4	; 0x04
    3d94:	83 30       	cpi	r24, 0x03	; 3
    3d96:	91 05       	cpc	r25, r1
    3d98:	09 f4       	brne	.+2      	; 0x3d9c <ADC_enuEnableTrigger+0x44>
    3d9a:	70 c0       	rjmp	.+224    	; 0x3e7c <ADC_enuEnableTrigger+0x124>
    3d9c:	2b 81       	ldd	r18, Y+3	; 0x03
    3d9e:	3c 81       	ldd	r19, Y+4	; 0x04
    3da0:	24 30       	cpi	r18, 0x04	; 4
    3da2:	31 05       	cpc	r19, r1
    3da4:	84 f4       	brge	.+32     	; 0x3dc6 <ADC_enuEnableTrigger+0x6e>
    3da6:	8b 81       	ldd	r24, Y+3	; 0x03
    3da8:	9c 81       	ldd	r25, Y+4	; 0x04
    3daa:	81 30       	cpi	r24, 0x01	; 1
    3dac:	91 05       	cpc	r25, r1
    3dae:	d1 f1       	breq	.+116    	; 0x3e24 <ADC_enuEnableTrigger+0xcc>
    3db0:	2b 81       	ldd	r18, Y+3	; 0x03
    3db2:	3c 81       	ldd	r19, Y+4	; 0x04
    3db4:	22 30       	cpi	r18, 0x02	; 2
    3db6:	31 05       	cpc	r19, r1
    3db8:	0c f0       	brlt	.+2      	; 0x3dbc <ADC_enuEnableTrigger+0x64>
    3dba:	4a c0       	rjmp	.+148    	; 0x3e50 <ADC_enuEnableTrigger+0xf8>
    3dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    3dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    3dc0:	00 97       	sbiw	r24, 0x00	; 0
    3dc2:	d1 f0       	breq	.+52     	; 0x3df8 <ADC_enuEnableTrigger+0xa0>
    3dc4:	c9 c0       	rjmp	.+402    	; 0x3f58 <ADC_enuEnableTrigger+0x200>
    3dc6:	2b 81       	ldd	r18, Y+3	; 0x03
    3dc8:	3c 81       	ldd	r19, Y+4	; 0x04
    3dca:	25 30       	cpi	r18, 0x05	; 5
    3dcc:	31 05       	cpc	r19, r1
    3dce:	09 f4       	brne	.+2      	; 0x3dd2 <ADC_enuEnableTrigger+0x7a>
    3dd0:	81 c0       	rjmp	.+258    	; 0x3ed4 <ADC_enuEnableTrigger+0x17c>
    3dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    3dd4:	9c 81       	ldd	r25, Y+4	; 0x04
    3dd6:	85 30       	cpi	r24, 0x05	; 5
    3dd8:	91 05       	cpc	r25, r1
    3dda:	0c f4       	brge	.+2      	; 0x3dde <ADC_enuEnableTrigger+0x86>
    3ddc:	65 c0       	rjmp	.+202    	; 0x3ea8 <ADC_enuEnableTrigger+0x150>
    3dde:	2b 81       	ldd	r18, Y+3	; 0x03
    3de0:	3c 81       	ldd	r19, Y+4	; 0x04
    3de2:	26 30       	cpi	r18, 0x06	; 6
    3de4:	31 05       	cpc	r19, r1
    3de6:	09 f4       	brne	.+2      	; 0x3dea <ADC_enuEnableTrigger+0x92>
    3de8:	8b c0       	rjmp	.+278    	; 0x3f00 <ADC_enuEnableTrigger+0x1a8>
    3dea:	8b 81       	ldd	r24, Y+3	; 0x03
    3dec:	9c 81       	ldd	r25, Y+4	; 0x04
    3dee:	87 30       	cpi	r24, 0x07	; 7
    3df0:	91 05       	cpc	r25, r1
    3df2:	09 f4       	brne	.+2      	; 0x3df6 <ADC_enuEnableTrigger+0x9e>
    3df4:	9b c0       	rjmp	.+310    	; 0x3f2c <ADC_enuEnableTrigger+0x1d4>
    3df6:	b0 c0       	rjmp	.+352    	; 0x3f58 <ADC_enuEnableTrigger+0x200>
	{
		case FREE_RUNNING:
		SFIOR &= ~(MASK_BIT << ADTS0);
    3df8:	a0 e5       	ldi	r26, 0x50	; 80
    3dfa:	b0 e0       	ldi	r27, 0x00	; 0
    3dfc:	e0 e5       	ldi	r30, 0x50	; 80
    3dfe:	f0 e0       	ldi	r31, 0x00	; 0
    3e00:	80 81       	ld	r24, Z
    3e02:	8f 7d       	andi	r24, 0xDF	; 223
    3e04:	8c 93       	st	X, r24
		SFIOR &= ~(MASK_BIT << ADTS1);
    3e06:	a0 e5       	ldi	r26, 0x50	; 80
    3e08:	b0 e0       	ldi	r27, 0x00	; 0
    3e0a:	e0 e5       	ldi	r30, 0x50	; 80
    3e0c:	f0 e0       	ldi	r31, 0x00	; 0
    3e0e:	80 81       	ld	r24, Z
    3e10:	8f 7b       	andi	r24, 0xBF	; 191
    3e12:	8c 93       	st	X, r24
		SFIOR &= ~(MASK_BIT << ADTS2);
    3e14:	a0 e5       	ldi	r26, 0x50	; 80
    3e16:	b0 e0       	ldi	r27, 0x00	; 0
    3e18:	e0 e5       	ldi	r30, 0x50	; 80
    3e1a:	f0 e0       	ldi	r31, 0x00	; 0
    3e1c:	80 81       	ld	r24, Z
    3e1e:	8f 77       	andi	r24, 0x7F	; 127
    3e20:	8c 93       	st	X, r24
    3e22:	9c c0       	rjmp	.+312    	; 0x3f5c <ADC_enuEnableTrigger+0x204>
		break;
		
		case ANALOG_COMPARATOR:
		SFIOR |=  (MASK_BIT << ADTS0);
    3e24:	a0 e5       	ldi	r26, 0x50	; 80
    3e26:	b0 e0       	ldi	r27, 0x00	; 0
    3e28:	e0 e5       	ldi	r30, 0x50	; 80
    3e2a:	f0 e0       	ldi	r31, 0x00	; 0
    3e2c:	80 81       	ld	r24, Z
    3e2e:	80 62       	ori	r24, 0x20	; 32
    3e30:	8c 93       	st	X, r24
		SFIOR &= ~(MASK_BIT << ADTS1);
    3e32:	a0 e5       	ldi	r26, 0x50	; 80
    3e34:	b0 e0       	ldi	r27, 0x00	; 0
    3e36:	e0 e5       	ldi	r30, 0x50	; 80
    3e38:	f0 e0       	ldi	r31, 0x00	; 0
    3e3a:	80 81       	ld	r24, Z
    3e3c:	8f 7b       	andi	r24, 0xBF	; 191
    3e3e:	8c 93       	st	X, r24
		SFIOR &= ~(MASK_BIT << ADTS2);
    3e40:	a0 e5       	ldi	r26, 0x50	; 80
    3e42:	b0 e0       	ldi	r27, 0x00	; 0
    3e44:	e0 e5       	ldi	r30, 0x50	; 80
    3e46:	f0 e0       	ldi	r31, 0x00	; 0
    3e48:	80 81       	ld	r24, Z
    3e4a:	8f 77       	andi	r24, 0x7F	; 127
    3e4c:	8c 93       	st	X, r24
    3e4e:	86 c0       	rjmp	.+268    	; 0x3f5c <ADC_enuEnableTrigger+0x204>
		break;
		
		case EXTI0_TRIG:
		SFIOR &= ~(MASK_BIT << ADTS0);
    3e50:	a0 e5       	ldi	r26, 0x50	; 80
    3e52:	b0 e0       	ldi	r27, 0x00	; 0
    3e54:	e0 e5       	ldi	r30, 0x50	; 80
    3e56:	f0 e0       	ldi	r31, 0x00	; 0
    3e58:	80 81       	ld	r24, Z
    3e5a:	8f 7d       	andi	r24, 0xDF	; 223
    3e5c:	8c 93       	st	X, r24
		SFIOR |=  (MASK_BIT << ADTS1);
    3e5e:	a0 e5       	ldi	r26, 0x50	; 80
    3e60:	b0 e0       	ldi	r27, 0x00	; 0
    3e62:	e0 e5       	ldi	r30, 0x50	; 80
    3e64:	f0 e0       	ldi	r31, 0x00	; 0
    3e66:	80 81       	ld	r24, Z
    3e68:	80 64       	ori	r24, 0x40	; 64
    3e6a:	8c 93       	st	X, r24
		SFIOR &= ~(MASK_BIT << ADTS2);
    3e6c:	a0 e5       	ldi	r26, 0x50	; 80
    3e6e:	b0 e0       	ldi	r27, 0x00	; 0
    3e70:	e0 e5       	ldi	r30, 0x50	; 80
    3e72:	f0 e0       	ldi	r31, 0x00	; 0
    3e74:	80 81       	ld	r24, Z
    3e76:	8f 77       	andi	r24, 0x7F	; 127
    3e78:	8c 93       	st	X, r24
    3e7a:	70 c0       	rjmp	.+224    	; 0x3f5c <ADC_enuEnableTrigger+0x204>
		break;
		
		case TIMER0_COMPARE_MATCH_TRIG:
		SFIOR |=  (MASK_BIT << ADTS0);
    3e7c:	a0 e5       	ldi	r26, 0x50	; 80
    3e7e:	b0 e0       	ldi	r27, 0x00	; 0
    3e80:	e0 e5       	ldi	r30, 0x50	; 80
    3e82:	f0 e0       	ldi	r31, 0x00	; 0
    3e84:	80 81       	ld	r24, Z
    3e86:	80 62       	ori	r24, 0x20	; 32
    3e88:	8c 93       	st	X, r24
		SFIOR |=  (MASK_BIT << ADTS1);
    3e8a:	a0 e5       	ldi	r26, 0x50	; 80
    3e8c:	b0 e0       	ldi	r27, 0x00	; 0
    3e8e:	e0 e5       	ldi	r30, 0x50	; 80
    3e90:	f0 e0       	ldi	r31, 0x00	; 0
    3e92:	80 81       	ld	r24, Z
    3e94:	80 64       	ori	r24, 0x40	; 64
    3e96:	8c 93       	st	X, r24
		SFIOR &= ~(MASK_BIT << ADTS2);
    3e98:	a0 e5       	ldi	r26, 0x50	; 80
    3e9a:	b0 e0       	ldi	r27, 0x00	; 0
    3e9c:	e0 e5       	ldi	r30, 0x50	; 80
    3e9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ea0:	80 81       	ld	r24, Z
    3ea2:	8f 77       	andi	r24, 0x7F	; 127
    3ea4:	8c 93       	st	X, r24
    3ea6:	5a c0       	rjmp	.+180    	; 0x3f5c <ADC_enuEnableTrigger+0x204>
		break;
		
		case TIMER0_OVERFLOW_TRIG:
		SFIOR &= ~(MASK_BIT << ADTS0);
    3ea8:	a0 e5       	ldi	r26, 0x50	; 80
    3eaa:	b0 e0       	ldi	r27, 0x00	; 0
    3eac:	e0 e5       	ldi	r30, 0x50	; 80
    3eae:	f0 e0       	ldi	r31, 0x00	; 0
    3eb0:	80 81       	ld	r24, Z
    3eb2:	8f 7d       	andi	r24, 0xDF	; 223
    3eb4:	8c 93       	st	X, r24
		SFIOR &= ~(MASK_BIT << ADTS1);
    3eb6:	a0 e5       	ldi	r26, 0x50	; 80
    3eb8:	b0 e0       	ldi	r27, 0x00	; 0
    3eba:	e0 e5       	ldi	r30, 0x50	; 80
    3ebc:	f0 e0       	ldi	r31, 0x00	; 0
    3ebe:	80 81       	ld	r24, Z
    3ec0:	8f 7b       	andi	r24, 0xBF	; 191
    3ec2:	8c 93       	st	X, r24
		SFIOR |=  (MASK_BIT << ADTS2);
    3ec4:	a0 e5       	ldi	r26, 0x50	; 80
    3ec6:	b0 e0       	ldi	r27, 0x00	; 0
    3ec8:	e0 e5       	ldi	r30, 0x50	; 80
    3eca:	f0 e0       	ldi	r31, 0x00	; 0
    3ecc:	80 81       	ld	r24, Z
    3ece:	80 68       	ori	r24, 0x80	; 128
    3ed0:	8c 93       	st	X, r24
    3ed2:	44 c0       	rjmp	.+136    	; 0x3f5c <ADC_enuEnableTrigger+0x204>
		break;
		
		case TIMER1_COMPARE_MATCH_TRIG:
		SFIOR |=  (MASK_BIT << ADTS0);
    3ed4:	a0 e5       	ldi	r26, 0x50	; 80
    3ed6:	b0 e0       	ldi	r27, 0x00	; 0
    3ed8:	e0 e5       	ldi	r30, 0x50	; 80
    3eda:	f0 e0       	ldi	r31, 0x00	; 0
    3edc:	80 81       	ld	r24, Z
    3ede:	80 62       	ori	r24, 0x20	; 32
    3ee0:	8c 93       	st	X, r24
		SFIOR &= ~(MASK_BIT << ADTS1);
    3ee2:	a0 e5       	ldi	r26, 0x50	; 80
    3ee4:	b0 e0       	ldi	r27, 0x00	; 0
    3ee6:	e0 e5       	ldi	r30, 0x50	; 80
    3ee8:	f0 e0       	ldi	r31, 0x00	; 0
    3eea:	80 81       	ld	r24, Z
    3eec:	8f 7b       	andi	r24, 0xBF	; 191
    3eee:	8c 93       	st	X, r24
		SFIOR |=  (MASK_BIT << ADTS2);
    3ef0:	a0 e5       	ldi	r26, 0x50	; 80
    3ef2:	b0 e0       	ldi	r27, 0x00	; 0
    3ef4:	e0 e5       	ldi	r30, 0x50	; 80
    3ef6:	f0 e0       	ldi	r31, 0x00	; 0
    3ef8:	80 81       	ld	r24, Z
    3efa:	80 68       	ori	r24, 0x80	; 128
    3efc:	8c 93       	st	X, r24
    3efe:	2e c0       	rjmp	.+92     	; 0x3f5c <ADC_enuEnableTrigger+0x204>
		break;
		
		case TIMER1_OVERFLOW_TRIG:
		SFIOR &= ~(MASK_BIT << ADTS0);
    3f00:	a0 e5       	ldi	r26, 0x50	; 80
    3f02:	b0 e0       	ldi	r27, 0x00	; 0
    3f04:	e0 e5       	ldi	r30, 0x50	; 80
    3f06:	f0 e0       	ldi	r31, 0x00	; 0
    3f08:	80 81       	ld	r24, Z
    3f0a:	8f 7d       	andi	r24, 0xDF	; 223
    3f0c:	8c 93       	st	X, r24
		SFIOR |=  (MASK_BIT << ADTS1);
    3f0e:	a0 e5       	ldi	r26, 0x50	; 80
    3f10:	b0 e0       	ldi	r27, 0x00	; 0
    3f12:	e0 e5       	ldi	r30, 0x50	; 80
    3f14:	f0 e0       	ldi	r31, 0x00	; 0
    3f16:	80 81       	ld	r24, Z
    3f18:	80 64       	ori	r24, 0x40	; 64
    3f1a:	8c 93       	st	X, r24
		SFIOR |=  (MASK_BIT << ADTS2);
    3f1c:	a0 e5       	ldi	r26, 0x50	; 80
    3f1e:	b0 e0       	ldi	r27, 0x00	; 0
    3f20:	e0 e5       	ldi	r30, 0x50	; 80
    3f22:	f0 e0       	ldi	r31, 0x00	; 0
    3f24:	80 81       	ld	r24, Z
    3f26:	80 68       	ori	r24, 0x80	; 128
    3f28:	8c 93       	st	X, r24
    3f2a:	18 c0       	rjmp	.+48     	; 0x3f5c <ADC_enuEnableTrigger+0x204>
		break;
		
		case TIMER1_CAPUTRE_TRIG:
		SFIOR |=  (MASK_BIT << ADTS0);
    3f2c:	a0 e5       	ldi	r26, 0x50	; 80
    3f2e:	b0 e0       	ldi	r27, 0x00	; 0
    3f30:	e0 e5       	ldi	r30, 0x50	; 80
    3f32:	f0 e0       	ldi	r31, 0x00	; 0
    3f34:	80 81       	ld	r24, Z
    3f36:	80 62       	ori	r24, 0x20	; 32
    3f38:	8c 93       	st	X, r24
		SFIOR |=  (MASK_BIT << ADTS1);
    3f3a:	a0 e5       	ldi	r26, 0x50	; 80
    3f3c:	b0 e0       	ldi	r27, 0x00	; 0
    3f3e:	e0 e5       	ldi	r30, 0x50	; 80
    3f40:	f0 e0       	ldi	r31, 0x00	; 0
    3f42:	80 81       	ld	r24, Z
    3f44:	80 64       	ori	r24, 0x40	; 64
    3f46:	8c 93       	st	X, r24
		SFIOR |=  (MASK_BIT << ADTS2);
    3f48:	a0 e5       	ldi	r26, 0x50	; 80
    3f4a:	b0 e0       	ldi	r27, 0x00	; 0
    3f4c:	e0 e5       	ldi	r30, 0x50	; 80
    3f4e:	f0 e0       	ldi	r31, 0x00	; 0
    3f50:	80 81       	ld	r24, Z
    3f52:	80 68       	ori	r24, 0x80	; 128
    3f54:	8c 93       	st	X, r24
    3f56:	02 c0       	rjmp	.+4      	; 0x3f5c <ADC_enuEnableTrigger+0x204>
		break;
		
		default:
		Local_enuErrorState = ES_OUT_OF_RANGE;
    3f58:	83 e0       	ldi	r24, 0x03	; 3
    3f5a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	
	ADCSRA |= (MASK_BIT << ADATE);
    3f5c:	a6 e2       	ldi	r26, 0x26	; 38
    3f5e:	b0 e0       	ldi	r27, 0x00	; 0
    3f60:	e6 e2       	ldi	r30, 0x26	; 38
    3f62:	f0 e0       	ldi	r31, 0x00	; 0
    3f64:	80 81       	ld	r24, Z
    3f66:	80 62       	ori	r24, 0x20	; 32
    3f68:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    3f6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f6c:	0f 90       	pop	r0
    3f6e:	0f 90       	pop	r0
    3f70:	0f 90       	pop	r0
    3f72:	0f 90       	pop	r0
    3f74:	cf 91       	pop	r28
    3f76:	df 91       	pop	r29
    3f78:	08 95       	ret

00003f7a <ADC_enuDisableTrigger>:

ES_t ADC_enuDisableTrigger(void)
{
    3f7a:	df 93       	push	r29
    3f7c:	cf 93       	push	r28
    3f7e:	0f 92       	push	r0
    3f80:	cd b7       	in	r28, 0x3d	; 61
    3f82:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    3f84:	81 e0       	ldi	r24, 0x01	; 1
    3f86:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA &= ~(MASK_BIT << ADATE);
    3f88:	a6 e2       	ldi	r26, 0x26	; 38
    3f8a:	b0 e0       	ldi	r27, 0x00	; 0
    3f8c:	e6 e2       	ldi	r30, 0x26	; 38
    3f8e:	f0 e0       	ldi	r31, 0x00	; 0
    3f90:	80 81       	ld	r24, Z
    3f92:	8f 7d       	andi	r24, 0xDF	; 223
    3f94:	8c 93       	st	X, r24
	
	return Local_enuErrorState;
    3f96:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f98:	0f 90       	pop	r0
    3f9a:	cf 91       	pop	r28
    3f9c:	df 91       	pop	r29
    3f9e:	08 95       	ret

00003fa0 <ADC_enuCallBack>:

ES_t ADC_enuCallBack(volatile void (*Copy_PFunc)(void*), volatile void *Copy_PvidAppParameter)
{
    3fa0:	df 93       	push	r29
    3fa2:	cf 93       	push	r28
    3fa4:	00 d0       	rcall	.+0      	; 0x3fa6 <ADC_enuCallBack+0x6>
    3fa6:	00 d0       	rcall	.+0      	; 0x3fa8 <ADC_enuCallBack+0x8>
    3fa8:	0f 92       	push	r0
    3faa:	cd b7       	in	r28, 0x3d	; 61
    3fac:	de b7       	in	r29, 0x3e	; 62
    3fae:	9b 83       	std	Y+3, r25	; 0x03
    3fb0:	8a 83       	std	Y+2, r24	; 0x02
    3fb2:	7d 83       	std	Y+5, r23	; 0x05
    3fb4:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    3fb6:	81 e0       	ldi	r24, 0x01	; 1
    3fb8:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_PFunc != NULL)
    3fba:	8a 81       	ldd	r24, Y+2	; 0x02
    3fbc:	9b 81       	ldd	r25, Y+3	; 0x03
    3fbe:	00 97       	sbiw	r24, 0x00	; 0
    3fc0:	69 f0       	breq	.+26     	; 0x3fdc <ADC_enuCallBack+0x3c>
	{
		ADC_PFuncISRFunc = Copy_PFunc;
    3fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc4:	9b 81       	ldd	r25, Y+3	; 0x03
    3fc6:	90 93 35 02 	sts	0x0235, r25
    3fca:	80 93 34 02 	sts	0x0234, r24
		ADC_PvidISRParameter = Copy_PvidAppParameter;
    3fce:	8c 81       	ldd	r24, Y+4	; 0x04
    3fd0:	9d 81       	ldd	r25, Y+5	; 0x05
    3fd2:	90 93 37 02 	sts	0x0237, r25
    3fd6:	80 93 36 02 	sts	0x0236, r24
    3fda:	02 c0       	rjmp	.+4      	; 0x3fe0 <ADC_enuCallBack+0x40>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    3fdc:	82 e0       	ldi	r24, 0x02	; 2
    3fde:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    3fe0:	89 81       	ldd	r24, Y+1	; 0x01
}
    3fe2:	0f 90       	pop	r0
    3fe4:	0f 90       	pop	r0
    3fe6:	0f 90       	pop	r0
    3fe8:	0f 90       	pop	r0
    3fea:	0f 90       	pop	r0
    3fec:	cf 91       	pop	r28
    3fee:	df 91       	pop	r29
    3ff0:	08 95       	ret

00003ff2 <ADC_Read_From_Ch>:

ES_t ADC_Read_From_Ch(u16 *Copy_pu16ReadValue, u8 Copy_u8ChannelID)
{
    3ff2:	df 93       	push	r29
    3ff4:	cf 93       	push	r28
    3ff6:	00 d0       	rcall	.+0      	; 0x3ff8 <ADC_Read_From_Ch+0x6>
    3ff8:	00 d0       	rcall	.+0      	; 0x3ffa <ADC_Read_From_Ch+0x8>
    3ffa:	cd b7       	in	r28, 0x3d	; 61
    3ffc:	de b7       	in	r29, 0x3e	; 62
    3ffe:	9b 83       	std	Y+3, r25	; 0x03
    4000:	8a 83       	std	Y+2, r24	; 0x02
    4002:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    4004:	81 e0       	ldi	r24, 0x01	; 1
    4006:	89 83       	std	Y+1, r24	; 0x01

	ADC_enuEnable();
    4008:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <ADC_enuEnable>
	ADC_enuDisableTrigger();
    400c:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <ADC_enuDisableTrigger>
	ADC_enuSelectChannel(Copy_u8ChannelID);
    4010:	8c 81       	ldd	r24, Y+4	; 0x04
    4012:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <ADC_enuSelectChannel>
	ADC_enuStartConversion();
    4016:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <ADC_enuStartConversion>
	ADC_enuDisableInterrupt();
    401a:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <ADC_enuDisableInterrupt>
	ADC_enuPollingSystem();
    401e:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <ADC_enuPollingSystem>
	ADC_enuReadADCValue(Copy_pu16ReadValue);
    4022:	8a 81       	ldd	r24, Y+2	; 0x02
    4024:	9b 81       	ldd	r25, Y+3	; 0x03
    4026:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <ADC_enuReadADCValue>
	ADC_enuDisable();
    402a:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <ADC_enuDisable>

	return Local_enuErrorState;
    402e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4030:	0f 90       	pop	r0
    4032:	0f 90       	pop	r0
    4034:	0f 90       	pop	r0
    4036:	0f 90       	pop	r0
    4038:	cf 91       	pop	r28
    403a:	df 91       	pop	r29
    403c:	08 95       	ret

0000403e <__vector_16>:

ISR(VECT_ADC)
{
    403e:	1f 92       	push	r1
    4040:	0f 92       	push	r0
    4042:	0f b6       	in	r0, 0x3f	; 63
    4044:	0f 92       	push	r0
    4046:	11 24       	eor	r1, r1
    4048:	2f 93       	push	r18
    404a:	3f 93       	push	r19
    404c:	4f 93       	push	r20
    404e:	5f 93       	push	r21
    4050:	6f 93       	push	r22
    4052:	7f 93       	push	r23
    4054:	8f 93       	push	r24
    4056:	9f 93       	push	r25
    4058:	af 93       	push	r26
    405a:	bf 93       	push	r27
    405c:	ef 93       	push	r30
    405e:	ff 93       	push	r31
    4060:	df 93       	push	r29
    4062:	cf 93       	push	r28
    4064:	cd b7       	in	r28, 0x3d	; 61
    4066:	de b7       	in	r29, 0x3e	; 62
	if(ADC_PFuncISRFunc != NULL)
    4068:	80 91 34 02 	lds	r24, 0x0234
    406c:	90 91 35 02 	lds	r25, 0x0235
    4070:	00 97       	sbiw	r24, 0x00	; 0
    4072:	49 f0       	breq	.+18     	; 0x4086 <__vector_16+0x48>
	{
		ADC_PFuncISRFunc(ADC_PvidISRParameter);
    4074:	e0 91 34 02 	lds	r30, 0x0234
    4078:	f0 91 35 02 	lds	r31, 0x0235
    407c:	80 91 36 02 	lds	r24, 0x0236
    4080:	90 91 37 02 	lds	r25, 0x0237
    4084:	09 95       	icall
	}
}
    4086:	cf 91       	pop	r28
    4088:	df 91       	pop	r29
    408a:	ff 91       	pop	r31
    408c:	ef 91       	pop	r30
    408e:	bf 91       	pop	r27
    4090:	af 91       	pop	r26
    4092:	9f 91       	pop	r25
    4094:	8f 91       	pop	r24
    4096:	7f 91       	pop	r23
    4098:	6f 91       	pop	r22
    409a:	5f 91       	pop	r21
    409c:	4f 91       	pop	r20
    409e:	3f 91       	pop	r19
    40a0:	2f 91       	pop	r18
    40a2:	0f 90       	pop	r0
    40a4:	0f be       	out	0x3f, r0	; 63
    40a6:	0f 90       	pop	r0
    40a8:	1f 90       	pop	r1
    40aa:	18 95       	reti

000040ac <Math_Mapping>:


#include "stdTypes.h"

s16 Math_Mapping (s16 y1,s16 y2,s16 x1,s16 x2,s16 x)
{
    40ac:	ef 92       	push	r14
    40ae:	ff 92       	push	r15
    40b0:	0f 93       	push	r16
    40b2:	1f 93       	push	r17
    40b4:	df 93       	push	r29
    40b6:	cf 93       	push	r28
    40b8:	cd b7       	in	r28, 0x3d	; 61
    40ba:	de b7       	in	r29, 0x3e	; 62
    40bc:	2c 97       	sbiw	r28, 0x0c	; 12
    40be:	0f b6       	in	r0, 0x3f	; 63
    40c0:	f8 94       	cli
    40c2:	de bf       	out	0x3e, r29	; 62
    40c4:	0f be       	out	0x3f, r0	; 63
    40c6:	cd bf       	out	0x3d, r28	; 61
    40c8:	9c 83       	std	Y+4, r25	; 0x04
    40ca:	8b 83       	std	Y+3, r24	; 0x03
    40cc:	7e 83       	std	Y+6, r23	; 0x06
    40ce:	6d 83       	std	Y+5, r22	; 0x05
    40d0:	58 87       	std	Y+8, r21	; 0x08
    40d2:	4f 83       	std	Y+7, r20	; 0x07
    40d4:	3a 87       	std	Y+10, r19	; 0x0a
    40d6:	29 87       	std	Y+9, r18	; 0x09
    40d8:	1c 87       	std	Y+12, r17	; 0x0c
    40da:	0b 87       	std	Y+11, r16	; 0x0b
	s16 y;
	y = ( ((s32)(y2-y1)*(x-x1))/(x2-x1) ) + y1;
    40dc:	2d 81       	ldd	r18, Y+5	; 0x05
    40de:	3e 81       	ldd	r19, Y+6	; 0x06
    40e0:	8b 81       	ldd	r24, Y+3	; 0x03
    40e2:	9c 81       	ldd	r25, Y+4	; 0x04
    40e4:	a9 01       	movw	r20, r18
    40e6:	48 1b       	sub	r20, r24
    40e8:	59 0b       	sbc	r21, r25
    40ea:	ca 01       	movw	r24, r20
    40ec:	7c 01       	movw	r14, r24
    40ee:	00 27       	eor	r16, r16
    40f0:	f7 fc       	sbrc	r15, 7
    40f2:	00 95       	com	r16
    40f4:	10 2f       	mov	r17, r16
    40f6:	2b 85       	ldd	r18, Y+11	; 0x0b
    40f8:	3c 85       	ldd	r19, Y+12	; 0x0c
    40fa:	8f 81       	ldd	r24, Y+7	; 0x07
    40fc:	98 85       	ldd	r25, Y+8	; 0x08
    40fe:	a9 01       	movw	r20, r18
    4100:	48 1b       	sub	r20, r24
    4102:	59 0b       	sbc	r21, r25
    4104:	ca 01       	movw	r24, r20
    4106:	9c 01       	movw	r18, r24
    4108:	44 27       	eor	r20, r20
    410a:	37 fd       	sbrc	r19, 7
    410c:	40 95       	com	r20
    410e:	54 2f       	mov	r21, r20
    4110:	c8 01       	movw	r24, r16
    4112:	b7 01       	movw	r22, r14
    4114:	0e 94 34 37 	call	0x6e68	; 0x6e68 <__mulsi3>
    4118:	7b 01       	movw	r14, r22
    411a:	8c 01       	movw	r16, r24
    411c:	29 85       	ldd	r18, Y+9	; 0x09
    411e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4120:	8f 81       	ldd	r24, Y+7	; 0x07
    4122:	98 85       	ldd	r25, Y+8	; 0x08
    4124:	a9 01       	movw	r20, r18
    4126:	48 1b       	sub	r20, r24
    4128:	59 0b       	sbc	r21, r25
    412a:	ca 01       	movw	r24, r20
    412c:	9c 01       	movw	r18, r24
    412e:	44 27       	eor	r20, r20
    4130:	37 fd       	sbrc	r19, 7
    4132:	40 95       	com	r20
    4134:	54 2f       	mov	r21, r20
    4136:	c8 01       	movw	r24, r16
    4138:	b7 01       	movw	r22, r14
    413a:	0e 94 88 37 	call	0x6f10	; 0x6f10 <__divmodsi4>
    413e:	da 01       	movw	r26, r20
    4140:	c9 01       	movw	r24, r18
    4142:	9c 01       	movw	r18, r24
    4144:	8b 81       	ldd	r24, Y+3	; 0x03
    4146:	9c 81       	ldd	r25, Y+4	; 0x04
    4148:	82 0f       	add	r24, r18
    414a:	93 1f       	adc	r25, r19
    414c:	9a 83       	std	Y+2, r25	; 0x02
    414e:	89 83       	std	Y+1, r24	; 0x01

	return y;
    4150:	89 81       	ldd	r24, Y+1	; 0x01
    4152:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4154:	2c 96       	adiw	r28, 0x0c	; 12
    4156:	0f b6       	in	r0, 0x3f	; 63
    4158:	f8 94       	cli
    415a:	de bf       	out	0x3e, r29	; 62
    415c:	0f be       	out	0x3f, r0	; 63
    415e:	cd bf       	out	0x3d, r28	; 61
    4160:	cf 91       	pop	r28
    4162:	df 91       	pop	r29
    4164:	1f 91       	pop	r17
    4166:	0f 91       	pop	r16
    4168:	ff 90       	pop	r15
    416a:	ef 90       	pop	r14
    416c:	08 95       	ret

0000416e <Soil_Moisture_enuInit>:
#include "Soil_Moisture_priv.h"

extern Soil_Moisture_Configuration_t Soil_Moisture_AstrSoilMoistureConfig[Soil_Moisture_NUM];

ES_t Soil_Moisture_enuInit(Soil_Moisture_Configuration_t *Copy_PstrSoilMoistureConfig)
{
    416e:	df 93       	push	r29
    4170:	cf 93       	push	r28
    4172:	00 d0       	rcall	.+0      	; 0x4174 <Soil_Moisture_enuInit+0x6>
    4174:	00 d0       	rcall	.+0      	; 0x4176 <Soil_Moisture_enuInit+0x8>
    4176:	cd b7       	in	r28, 0x3d	; 61
    4178:	de b7       	in	r29, 0x3e	; 62
    417a:	9c 83       	std	Y+4, r25	; 0x04
    417c:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    417e:	81 e0       	ldi	r24, 0x01	; 1
    4180:	8a 83       	std	Y+2, r24	; 0x02

	ADC_enuInit();
    4182:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <ADC_enuInit>

	u8 Local_u8Iterrator = 0;
    4186:	19 82       	std	Y+1, r1	; 0x01
	for(Local_u8Iterrator = 0; Local_u8Iterrator < Soil_Moisture_NUM; Local_u8Iterrator++)
    4188:	19 82       	std	Y+1, r1	; 0x01
    418a:	1c c0       	rjmp	.+56     	; 0x41c4 <Soil_Moisture_enuInit+0x56>
	{
		DIO_enuSetPinDirection(DIO_u8PORTA, Copy_PstrSoilMoistureConfig[Local_u8Iterrator].Soil_Moisture_CHANNEL, DIO_u8INPUT);
    418c:	89 81       	ldd	r24, Y+1	; 0x01
    418e:	28 2f       	mov	r18, r24
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	8b 81       	ldd	r24, Y+3	; 0x03
    4194:	9c 81       	ldd	r25, Y+4	; 0x04
    4196:	fc 01       	movw	r30, r24
    4198:	e2 0f       	add	r30, r18
    419a:	f3 1f       	adc	r31, r19
    419c:	90 81       	ld	r25, Z
    419e:	80 e0       	ldi	r24, 0x00	; 0
    41a0:	69 2f       	mov	r22, r25
    41a2:	40 e0       	ldi	r20, 0x00	; 0
    41a4:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <DIO_enuSetPinDirection>
		ADC_enuSelectChannel(Copy_PstrSoilMoistureConfig[Local_u8Iterrator].Soil_Moisture_CHANNEL);
    41a8:	89 81       	ldd	r24, Y+1	; 0x01
    41aa:	28 2f       	mov	r18, r24
    41ac:	30 e0       	ldi	r19, 0x00	; 0
    41ae:	8b 81       	ldd	r24, Y+3	; 0x03
    41b0:	9c 81       	ldd	r25, Y+4	; 0x04
    41b2:	fc 01       	movw	r30, r24
    41b4:	e2 0f       	add	r30, r18
    41b6:	f3 1f       	adc	r31, r19
    41b8:	80 81       	ld	r24, Z
    41ba:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <ADC_enuSelectChannel>
	ES_t Local_enuErrorState = ES_NOK;

	ADC_enuInit();

	u8 Local_u8Iterrator = 0;
	for(Local_u8Iterrator = 0; Local_u8Iterrator < Soil_Moisture_NUM; Local_u8Iterrator++)
    41be:	89 81       	ldd	r24, Y+1	; 0x01
    41c0:	8f 5f       	subi	r24, 0xFF	; 255
    41c2:	89 83       	std	Y+1, r24	; 0x01
    41c4:	89 81       	ldd	r24, Y+1	; 0x01
    41c6:	88 23       	and	r24, r24
    41c8:	09 f3       	breq	.-62     	; 0x418c <Soil_Moisture_enuInit+0x1e>
	{
		DIO_enuSetPinDirection(DIO_u8PORTA, Copy_PstrSoilMoistureConfig[Local_u8Iterrator].Soil_Moisture_CHANNEL, DIO_u8INPUT);
		ADC_enuSelectChannel(Copy_PstrSoilMoistureConfig[Local_u8Iterrator].Soil_Moisture_CHANNEL);
	}

	ADC_enuEnable();
    41ca:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <ADC_enuEnable>

	Local_enuErrorState = ES_OK;
    41ce:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState;
    41d0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    41d2:	0f 90       	pop	r0
    41d4:	0f 90       	pop	r0
    41d6:	0f 90       	pop	r0
    41d8:	0f 90       	pop	r0
    41da:	cf 91       	pop	r28
    41dc:	df 91       	pop	r29
    41de:	08 95       	ret

000041e0 <Soil_Moisture_enuGetMoisureVal>:

ES_t Soil_Moisture_enuGetMoisureVal(u8 Copy_u8Soil_Moisture_ID, u16 *Copy_Pu16MoistureValue)
{
    41e0:	df 93       	push	r29
    41e2:	cf 93       	push	r28
    41e4:	00 d0       	rcall	.+0      	; 0x41e6 <Soil_Moisture_enuGetMoisureVal+0x6>
    41e6:	00 d0       	rcall	.+0      	; 0x41e8 <Soil_Moisture_enuGetMoisureVal+0x8>
    41e8:	cd b7       	in	r28, 0x3d	; 61
    41ea:	de b7       	in	r29, 0x3e	; 62
    41ec:	8a 83       	std	Y+2, r24	; 0x02
    41ee:	7c 83       	std	Y+4, r23	; 0x04
    41f0:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    41f2:	81 e0       	ldi	r24, 0x01	; 1
    41f4:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_Pu16MoistureValue != NULL)
    41f6:	8b 81       	ldd	r24, Y+3	; 0x03
    41f8:	9c 81       	ldd	r25, Y+4	; 0x04
    41fa:	00 97       	sbiw	r24, 0x00	; 0
    41fc:	99 f0       	breq	.+38     	; 0x4224 <Soil_Moisture_enuGetMoisureVal+0x44>
	{
		if(Copy_u8Soil_Moisture_ID < Soil_Moisture_NUM)
    41fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4200:	88 23       	and	r24, r24
    4202:	69 f4       	brne	.+26     	; 0x421e <Soil_Moisture_enuGetMoisureVal+0x3e>
		{
			ADC_Read_From_Ch(Copy_Pu16MoistureValue, Soil_Moisture_AstrSoilMoistureConfig[Copy_u8Soil_Moisture_ID].Soil_Moisture_CHANNEL);
    4204:	8a 81       	ldd	r24, Y+2	; 0x02
    4206:	88 2f       	mov	r24, r24
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	fc 01       	movw	r30, r24
    420c:	e8 52       	subi	r30, 0x28	; 40
    420e:	fe 4f       	sbci	r31, 0xFE	; 254
    4210:	20 81       	ld	r18, Z
    4212:	8b 81       	ldd	r24, Y+3	; 0x03
    4214:	9c 81       	ldd	r25, Y+4	; 0x04
    4216:	62 2f       	mov	r22, r18
    4218:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <ADC_Read_From_Ch>
    421c:	05 c0       	rjmp	.+10     	; 0x4228 <Soil_Moisture_enuGetMoisureVal+0x48>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    421e:	83 e0       	ldi	r24, 0x03	; 3
    4220:	89 83       	std	Y+1, r24	; 0x01
    4222:	02 c0       	rjmp	.+4      	; 0x4228 <Soil_Moisture_enuGetMoisureVal+0x48>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    4224:	82 e0       	ldi	r24, 0x02	; 2
    4226:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    4228:	89 81       	ldd	r24, Y+1	; 0x01
}
    422a:	0f 90       	pop	r0
    422c:	0f 90       	pop	r0
    422e:	0f 90       	pop	r0
    4230:	0f 90       	pop	r0
    4232:	cf 91       	pop	r28
    4234:	df 91       	pop	r29
    4236:	08 95       	ret

00004238 <LED_enuINIT>:
#include "LED_int.h"
#include "LED_config.h"
#include "LED_priv.h"

ES_t LED_enuINIT(LED_t *Copy_pAstrLedConfig)
{
    4238:	df 93       	push	r29
    423a:	cf 93       	push	r28
    423c:	00 d0       	rcall	.+0      	; 0x423e <LED_enuINIT+0x6>
    423e:	00 d0       	rcall	.+0      	; 0x4240 <LED_enuINIT+0x8>
    4240:	cd b7       	in	r28, 0x3d	; 61
    4242:	de b7       	in	r29, 0x3e	; 62
    4244:	9c 83       	std	Y+4, r25	; 0x04
    4246:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    4248:	81 e0       	ldi	r24, 0x01	; 1
    424a:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_pAstrLedConfig != NULL)
    424c:	8b 81       	ldd	r24, Y+3	; 0x03
    424e:	9c 81       	ldd	r25, Y+4	; 0x04
    4250:	00 97       	sbiw	r24, 0x00	; 0
    4252:	09 f4       	brne	.+2      	; 0x4256 <LED_enuINIT+0x1e>
    4254:	41 c1       	rjmp	.+642    	; 0x44d8 <LED_enuINIT+0x2a0>
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < LED_NUM; Local_u8Iterator++)
    4256:	19 82       	std	Y+1, r1	; 0x01
    4258:	3a c1       	rjmp	.+628    	; 0x44ce <LED_enuINIT+0x296>
		{
			DIO_enuSetPinDirection(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8OUTPUT);
    425a:	89 81       	ldd	r24, Y+1	; 0x01
    425c:	28 2f       	mov	r18, r24
    425e:	30 e0       	ldi	r19, 0x00	; 0
    4260:	c9 01       	movw	r24, r18
    4262:	88 0f       	add	r24, r24
    4264:	99 1f       	adc	r25, r25
    4266:	88 0f       	add	r24, r24
    4268:	99 1f       	adc	r25, r25
    426a:	28 0f       	add	r18, r24
    426c:	39 1f       	adc	r19, r25
    426e:	8b 81       	ldd	r24, Y+3	; 0x03
    4270:	9c 81       	ldd	r25, Y+4	; 0x04
    4272:	fc 01       	movw	r30, r24
    4274:	e2 0f       	add	r30, r18
    4276:	f3 1f       	adc	r31, r19
    4278:	40 81       	ld	r20, Z
    427a:	89 81       	ldd	r24, Y+1	; 0x01
    427c:	28 2f       	mov	r18, r24
    427e:	30 e0       	ldi	r19, 0x00	; 0
    4280:	c9 01       	movw	r24, r18
    4282:	88 0f       	add	r24, r24
    4284:	99 1f       	adc	r25, r25
    4286:	88 0f       	add	r24, r24
    4288:	99 1f       	adc	r25, r25
    428a:	28 0f       	add	r18, r24
    428c:	39 1f       	adc	r19, r25
    428e:	8b 81       	ldd	r24, Y+3	; 0x03
    4290:	9c 81       	ldd	r25, Y+4	; 0x04
    4292:	fc 01       	movw	r30, r24
    4294:	e2 0f       	add	r30, r18
    4296:	f3 1f       	adc	r31, r19
    4298:	91 81       	ldd	r25, Z+1	; 0x01
    429a:	84 2f       	mov	r24, r20
    429c:	69 2f       	mov	r22, r25
    429e:	41 e0       	ldi	r20, 0x01	; 1
    42a0:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <DIO_enuSetPinDirection>
			if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8Connection == LED_u8SINK)
    42a4:	89 81       	ldd	r24, Y+1	; 0x01
    42a6:	28 2f       	mov	r18, r24
    42a8:	30 e0       	ldi	r19, 0x00	; 0
    42aa:	c9 01       	movw	r24, r18
    42ac:	88 0f       	add	r24, r24
    42ae:	99 1f       	adc	r25, r25
    42b0:	88 0f       	add	r24, r24
    42b2:	99 1f       	adc	r25, r25
    42b4:	28 0f       	add	r18, r24
    42b6:	39 1f       	adc	r19, r25
    42b8:	8b 81       	ldd	r24, Y+3	; 0x03
    42ba:	9c 81       	ldd	r25, Y+4	; 0x04
    42bc:	fc 01       	movw	r30, r24
    42be:	e2 0f       	add	r30, r18
    42c0:	f3 1f       	adc	r31, r19
    42c2:	82 81       	ldd	r24, Z+2	; 0x02
    42c4:	8c 30       	cpi	r24, 0x0C	; 12
    42c6:	09 f0       	breq	.+2      	; 0x42ca <LED_enuINIT+0x92>
    42c8:	75 c0       	rjmp	.+234    	; 0x43b4 <LED_enuINIT+0x17c>
			{
				if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_u8ON)
    42ca:	89 81       	ldd	r24, Y+1	; 0x01
    42cc:	28 2f       	mov	r18, r24
    42ce:	30 e0       	ldi	r19, 0x00	; 0
    42d0:	c9 01       	movw	r24, r18
    42d2:	88 0f       	add	r24, r24
    42d4:	99 1f       	adc	r25, r25
    42d6:	88 0f       	add	r24, r24
    42d8:	99 1f       	adc	r25, r25
    42da:	28 0f       	add	r18, r24
    42dc:	39 1f       	adc	r19, r25
    42de:	8b 81       	ldd	r24, Y+3	; 0x03
    42e0:	9c 81       	ldd	r25, Y+4	; 0x04
    42e2:	fc 01       	movw	r30, r24
    42e4:	e2 0f       	add	r30, r18
    42e6:	f3 1f       	adc	r31, r19
    42e8:	83 81       	ldd	r24, Z+3	; 0x03
    42ea:	8a 30       	cpi	r24, 0x0A	; 10
    42ec:	39 f5       	brne	.+78     	; 0x433c <LED_enuINIT+0x104>
				{
					Local_enuErrorState = DIO_enuSetPinVal(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8LOW);
    42ee:	89 81       	ldd	r24, Y+1	; 0x01
    42f0:	28 2f       	mov	r18, r24
    42f2:	30 e0       	ldi	r19, 0x00	; 0
    42f4:	c9 01       	movw	r24, r18
    42f6:	88 0f       	add	r24, r24
    42f8:	99 1f       	adc	r25, r25
    42fa:	88 0f       	add	r24, r24
    42fc:	99 1f       	adc	r25, r25
    42fe:	28 0f       	add	r18, r24
    4300:	39 1f       	adc	r19, r25
    4302:	8b 81       	ldd	r24, Y+3	; 0x03
    4304:	9c 81       	ldd	r25, Y+4	; 0x04
    4306:	fc 01       	movw	r30, r24
    4308:	e2 0f       	add	r30, r18
    430a:	f3 1f       	adc	r31, r19
    430c:	40 81       	ld	r20, Z
    430e:	89 81       	ldd	r24, Y+1	; 0x01
    4310:	28 2f       	mov	r18, r24
    4312:	30 e0       	ldi	r19, 0x00	; 0
    4314:	c9 01       	movw	r24, r18
    4316:	88 0f       	add	r24, r24
    4318:	99 1f       	adc	r25, r25
    431a:	88 0f       	add	r24, r24
    431c:	99 1f       	adc	r25, r25
    431e:	28 0f       	add	r18, r24
    4320:	39 1f       	adc	r19, r25
    4322:	8b 81       	ldd	r24, Y+3	; 0x03
    4324:	9c 81       	ldd	r25, Y+4	; 0x04
    4326:	fc 01       	movw	r30, r24
    4328:	e2 0f       	add	r30, r18
    432a:	f3 1f       	adc	r31, r19
    432c:	91 81       	ldd	r25, Z+1	; 0x01
    432e:	84 2f       	mov	r24, r20
    4330:	69 2f       	mov	r22, r25
    4332:	40 e0       	ldi	r20, 0x00	; 0
    4334:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    4338:	8a 83       	std	Y+2, r24	; 0x02
    433a:	c6 c0       	rjmp	.+396    	; 0x44c8 <LED_enuINIT+0x290>
				}
				else if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_u8OFF)
    433c:	89 81       	ldd	r24, Y+1	; 0x01
    433e:	28 2f       	mov	r18, r24
    4340:	30 e0       	ldi	r19, 0x00	; 0
    4342:	c9 01       	movw	r24, r18
    4344:	88 0f       	add	r24, r24
    4346:	99 1f       	adc	r25, r25
    4348:	88 0f       	add	r24, r24
    434a:	99 1f       	adc	r25, r25
    434c:	28 0f       	add	r18, r24
    434e:	39 1f       	adc	r19, r25
    4350:	8b 81       	ldd	r24, Y+3	; 0x03
    4352:	9c 81       	ldd	r25, Y+4	; 0x04
    4354:	fc 01       	movw	r30, r24
    4356:	e2 0f       	add	r30, r18
    4358:	f3 1f       	adc	r31, r19
    435a:	83 81       	ldd	r24, Z+3	; 0x03
    435c:	8b 30       	cpi	r24, 0x0B	; 11
    435e:	39 f5       	brne	.+78     	; 0x43ae <LED_enuINIT+0x176>
				{
					Local_enuErrorState = DIO_enuSetPinVal(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8HIGH);
    4360:	89 81       	ldd	r24, Y+1	; 0x01
    4362:	28 2f       	mov	r18, r24
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	c9 01       	movw	r24, r18
    4368:	88 0f       	add	r24, r24
    436a:	99 1f       	adc	r25, r25
    436c:	88 0f       	add	r24, r24
    436e:	99 1f       	adc	r25, r25
    4370:	28 0f       	add	r18, r24
    4372:	39 1f       	adc	r19, r25
    4374:	8b 81       	ldd	r24, Y+3	; 0x03
    4376:	9c 81       	ldd	r25, Y+4	; 0x04
    4378:	fc 01       	movw	r30, r24
    437a:	e2 0f       	add	r30, r18
    437c:	f3 1f       	adc	r31, r19
    437e:	40 81       	ld	r20, Z
    4380:	89 81       	ldd	r24, Y+1	; 0x01
    4382:	28 2f       	mov	r18, r24
    4384:	30 e0       	ldi	r19, 0x00	; 0
    4386:	c9 01       	movw	r24, r18
    4388:	88 0f       	add	r24, r24
    438a:	99 1f       	adc	r25, r25
    438c:	88 0f       	add	r24, r24
    438e:	99 1f       	adc	r25, r25
    4390:	28 0f       	add	r18, r24
    4392:	39 1f       	adc	r19, r25
    4394:	8b 81       	ldd	r24, Y+3	; 0x03
    4396:	9c 81       	ldd	r25, Y+4	; 0x04
    4398:	fc 01       	movw	r30, r24
    439a:	e2 0f       	add	r30, r18
    439c:	f3 1f       	adc	r31, r19
    439e:	91 81       	ldd	r25, Z+1	; 0x01
    43a0:	84 2f       	mov	r24, r20
    43a2:	69 2f       	mov	r22, r25
    43a4:	41 e0       	ldi	r20, 0x01	; 1
    43a6:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    43aa:	8a 83       	std	Y+2, r24	; 0x02
    43ac:	8d c0       	rjmp	.+282    	; 0x44c8 <LED_enuINIT+0x290>
				}
				else
				{
					Local_enuErrorState = ES_OUT_OF_RANGE;
    43ae:	83 e0       	ldi	r24, 0x03	; 3
    43b0:	8a 83       	std	Y+2, r24	; 0x02
    43b2:	8a c0       	rjmp	.+276    	; 0x44c8 <LED_enuINIT+0x290>
				}
			}
			else if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8Connection == LED_u8SOURCE)
    43b4:	89 81       	ldd	r24, Y+1	; 0x01
    43b6:	28 2f       	mov	r18, r24
    43b8:	30 e0       	ldi	r19, 0x00	; 0
    43ba:	c9 01       	movw	r24, r18
    43bc:	88 0f       	add	r24, r24
    43be:	99 1f       	adc	r25, r25
    43c0:	88 0f       	add	r24, r24
    43c2:	99 1f       	adc	r25, r25
    43c4:	28 0f       	add	r18, r24
    43c6:	39 1f       	adc	r19, r25
    43c8:	8b 81       	ldd	r24, Y+3	; 0x03
    43ca:	9c 81       	ldd	r25, Y+4	; 0x04
    43cc:	fc 01       	movw	r30, r24
    43ce:	e2 0f       	add	r30, r18
    43d0:	f3 1f       	adc	r31, r19
    43d2:	82 81       	ldd	r24, Z+2	; 0x02
    43d4:	8d 30       	cpi	r24, 0x0D	; 13
    43d6:	09 f0       	breq	.+2      	; 0x43da <LED_enuINIT+0x1a2>
    43d8:	75 c0       	rjmp	.+234    	; 0x44c4 <LED_enuINIT+0x28c>
			{
				if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_u8ON)
    43da:	89 81       	ldd	r24, Y+1	; 0x01
    43dc:	28 2f       	mov	r18, r24
    43de:	30 e0       	ldi	r19, 0x00	; 0
    43e0:	c9 01       	movw	r24, r18
    43e2:	88 0f       	add	r24, r24
    43e4:	99 1f       	adc	r25, r25
    43e6:	88 0f       	add	r24, r24
    43e8:	99 1f       	adc	r25, r25
    43ea:	28 0f       	add	r18, r24
    43ec:	39 1f       	adc	r19, r25
    43ee:	8b 81       	ldd	r24, Y+3	; 0x03
    43f0:	9c 81       	ldd	r25, Y+4	; 0x04
    43f2:	fc 01       	movw	r30, r24
    43f4:	e2 0f       	add	r30, r18
    43f6:	f3 1f       	adc	r31, r19
    43f8:	83 81       	ldd	r24, Z+3	; 0x03
    43fa:	8a 30       	cpi	r24, 0x0A	; 10
    43fc:	39 f5       	brne	.+78     	; 0x444c <LED_enuINIT+0x214>
				{
					Local_enuErrorState = DIO_enuSetPinVal(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8HIGH);
    43fe:	89 81       	ldd	r24, Y+1	; 0x01
    4400:	28 2f       	mov	r18, r24
    4402:	30 e0       	ldi	r19, 0x00	; 0
    4404:	c9 01       	movw	r24, r18
    4406:	88 0f       	add	r24, r24
    4408:	99 1f       	adc	r25, r25
    440a:	88 0f       	add	r24, r24
    440c:	99 1f       	adc	r25, r25
    440e:	28 0f       	add	r18, r24
    4410:	39 1f       	adc	r19, r25
    4412:	8b 81       	ldd	r24, Y+3	; 0x03
    4414:	9c 81       	ldd	r25, Y+4	; 0x04
    4416:	fc 01       	movw	r30, r24
    4418:	e2 0f       	add	r30, r18
    441a:	f3 1f       	adc	r31, r19
    441c:	40 81       	ld	r20, Z
    441e:	89 81       	ldd	r24, Y+1	; 0x01
    4420:	28 2f       	mov	r18, r24
    4422:	30 e0       	ldi	r19, 0x00	; 0
    4424:	c9 01       	movw	r24, r18
    4426:	88 0f       	add	r24, r24
    4428:	99 1f       	adc	r25, r25
    442a:	88 0f       	add	r24, r24
    442c:	99 1f       	adc	r25, r25
    442e:	28 0f       	add	r18, r24
    4430:	39 1f       	adc	r19, r25
    4432:	8b 81       	ldd	r24, Y+3	; 0x03
    4434:	9c 81       	ldd	r25, Y+4	; 0x04
    4436:	fc 01       	movw	r30, r24
    4438:	e2 0f       	add	r30, r18
    443a:	f3 1f       	adc	r31, r19
    443c:	91 81       	ldd	r25, Z+1	; 0x01
    443e:	84 2f       	mov	r24, r20
    4440:	69 2f       	mov	r22, r25
    4442:	41 e0       	ldi	r20, 0x01	; 1
    4444:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    4448:	8a 83       	std	Y+2, r24	; 0x02
    444a:	3e c0       	rjmp	.+124    	; 0x44c8 <LED_enuINIT+0x290>
				}
				else if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_u8OFF)
    444c:	89 81       	ldd	r24, Y+1	; 0x01
    444e:	28 2f       	mov	r18, r24
    4450:	30 e0       	ldi	r19, 0x00	; 0
    4452:	c9 01       	movw	r24, r18
    4454:	88 0f       	add	r24, r24
    4456:	99 1f       	adc	r25, r25
    4458:	88 0f       	add	r24, r24
    445a:	99 1f       	adc	r25, r25
    445c:	28 0f       	add	r18, r24
    445e:	39 1f       	adc	r19, r25
    4460:	8b 81       	ldd	r24, Y+3	; 0x03
    4462:	9c 81       	ldd	r25, Y+4	; 0x04
    4464:	fc 01       	movw	r30, r24
    4466:	e2 0f       	add	r30, r18
    4468:	f3 1f       	adc	r31, r19
    446a:	83 81       	ldd	r24, Z+3	; 0x03
    446c:	8b 30       	cpi	r24, 0x0B	; 11
    446e:	39 f5       	brne	.+78     	; 0x44be <LED_enuINIT+0x286>
				{
					Local_enuErrorState = DIO_enuSetPinVal(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8LOW);
    4470:	89 81       	ldd	r24, Y+1	; 0x01
    4472:	28 2f       	mov	r18, r24
    4474:	30 e0       	ldi	r19, 0x00	; 0
    4476:	c9 01       	movw	r24, r18
    4478:	88 0f       	add	r24, r24
    447a:	99 1f       	adc	r25, r25
    447c:	88 0f       	add	r24, r24
    447e:	99 1f       	adc	r25, r25
    4480:	28 0f       	add	r18, r24
    4482:	39 1f       	adc	r19, r25
    4484:	8b 81       	ldd	r24, Y+3	; 0x03
    4486:	9c 81       	ldd	r25, Y+4	; 0x04
    4488:	fc 01       	movw	r30, r24
    448a:	e2 0f       	add	r30, r18
    448c:	f3 1f       	adc	r31, r19
    448e:	40 81       	ld	r20, Z
    4490:	89 81       	ldd	r24, Y+1	; 0x01
    4492:	28 2f       	mov	r18, r24
    4494:	30 e0       	ldi	r19, 0x00	; 0
    4496:	c9 01       	movw	r24, r18
    4498:	88 0f       	add	r24, r24
    449a:	99 1f       	adc	r25, r25
    449c:	88 0f       	add	r24, r24
    449e:	99 1f       	adc	r25, r25
    44a0:	28 0f       	add	r18, r24
    44a2:	39 1f       	adc	r19, r25
    44a4:	8b 81       	ldd	r24, Y+3	; 0x03
    44a6:	9c 81       	ldd	r25, Y+4	; 0x04
    44a8:	fc 01       	movw	r30, r24
    44aa:	e2 0f       	add	r30, r18
    44ac:	f3 1f       	adc	r31, r19
    44ae:	91 81       	ldd	r25, Z+1	; 0x01
    44b0:	84 2f       	mov	r24, r20
    44b2:	69 2f       	mov	r22, r25
    44b4:	40 e0       	ldi	r20, 0x00	; 0
    44b6:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    44ba:	8a 83       	std	Y+2, r24	; 0x02
    44bc:	05 c0       	rjmp	.+10     	; 0x44c8 <LED_enuINIT+0x290>
				}
				else
				{
					Local_enuErrorState = ES_OUT_OF_RANGE;
    44be:	83 e0       	ldi	r24, 0x03	; 3
    44c0:	8a 83       	std	Y+2, r24	; 0x02
    44c2:	02 c0       	rjmp	.+4      	; 0x44c8 <LED_enuINIT+0x290>
				}
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    44c4:	83 e0       	ldi	r24, 0x03	; 3
    44c6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;

	if(Copy_pAstrLedConfig != NULL)
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < LED_NUM; Local_u8Iterator++)
    44c8:	89 81       	ldd	r24, Y+1	; 0x01
    44ca:	8f 5f       	subi	r24, 0xFF	; 255
    44cc:	89 83       	std	Y+1, r24	; 0x01
    44ce:	89 81       	ldd	r24, Y+1	; 0x01
    44d0:	83 30       	cpi	r24, 0x03	; 3
    44d2:	08 f4       	brcc	.+2      	; 0x44d6 <LED_enuINIT+0x29e>
    44d4:	c2 ce       	rjmp	.-636    	; 0x425a <LED_enuINIT+0x22>
    44d6:	02 c0       	rjmp	.+4      	; 0x44dc <LED_enuINIT+0x2a4>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    44d8:	82 e0       	ldi	r24, 0x02	; 2
    44da:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    44dc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    44de:	0f 90       	pop	r0
    44e0:	0f 90       	pop	r0
    44e2:	0f 90       	pop	r0
    44e4:	0f 90       	pop	r0
    44e6:	cf 91       	pop	r28
    44e8:	df 91       	pop	r29
    44ea:	08 95       	ret

000044ec <LED_enuTurnON>:

ES_t LED_enuTurnON(LED_t *Copy_pstrLedID)
{
    44ec:	df 93       	push	r29
    44ee:	cf 93       	push	r28
    44f0:	00 d0       	rcall	.+0      	; 0x44f2 <LED_enuTurnON+0x6>
    44f2:	0f 92       	push	r0
    44f4:	cd b7       	in	r28, 0x3d	; 61
    44f6:	de b7       	in	r29, 0x3e	; 62
    44f8:	9b 83       	std	Y+3, r25	; 0x03
    44fa:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    44fc:	81 e0       	ldi	r24, 0x01	; 1
    44fe:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pstrLedID != NULL)
    4500:	8a 81       	ldd	r24, Y+2	; 0x02
    4502:	9b 81       	ldd	r25, Y+3	; 0x03
    4504:	00 97       	sbiw	r24, 0x00	; 0
    4506:	79 f1       	breq	.+94     	; 0x4566 <LED_enuTurnON+0x7a>
	{
		DIO_enuSetPinDirection(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8OUTPUT);
    4508:	ea 81       	ldd	r30, Y+2	; 0x02
    450a:	fb 81       	ldd	r31, Y+3	; 0x03
    450c:	80 81       	ld	r24, Z
    450e:	ea 81       	ldd	r30, Y+2	; 0x02
    4510:	fb 81       	ldd	r31, Y+3	; 0x03
    4512:	91 81       	ldd	r25, Z+1	; 0x01
    4514:	69 2f       	mov	r22, r25
    4516:	41 e0       	ldi	r20, 0x01	; 1
    4518:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <DIO_enuSetPinDirection>
		if(Copy_pstrLedID->LED_u8Connection == LED_u8SINK)
    451c:	ea 81       	ldd	r30, Y+2	; 0x02
    451e:	fb 81       	ldd	r31, Y+3	; 0x03
    4520:	82 81       	ldd	r24, Z+2	; 0x02
    4522:	8c 30       	cpi	r24, 0x0C	; 12
    4524:	61 f4       	brne	.+24     	; 0x453e <LED_enuTurnON+0x52>
		{
			Local_enuErrorState = DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8LOW);
    4526:	ea 81       	ldd	r30, Y+2	; 0x02
    4528:	fb 81       	ldd	r31, Y+3	; 0x03
    452a:	80 81       	ld	r24, Z
    452c:	ea 81       	ldd	r30, Y+2	; 0x02
    452e:	fb 81       	ldd	r31, Y+3	; 0x03
    4530:	91 81       	ldd	r25, Z+1	; 0x01
    4532:	69 2f       	mov	r22, r25
    4534:	40 e0       	ldi	r20, 0x00	; 0
    4536:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    453a:	89 83       	std	Y+1, r24	; 0x01
    453c:	16 c0       	rjmp	.+44     	; 0x456a <LED_enuTurnON+0x7e>
		}
		else if(Copy_pstrLedID->LED_u8Connection == LED_u8SOURCE)
    453e:	ea 81       	ldd	r30, Y+2	; 0x02
    4540:	fb 81       	ldd	r31, Y+3	; 0x03
    4542:	82 81       	ldd	r24, Z+2	; 0x02
    4544:	8d 30       	cpi	r24, 0x0D	; 13
    4546:	61 f4       	brne	.+24     	; 0x4560 <LED_enuTurnON+0x74>
		{
			Local_enuErrorState = DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8HIGH);
    4548:	ea 81       	ldd	r30, Y+2	; 0x02
    454a:	fb 81       	ldd	r31, Y+3	; 0x03
    454c:	80 81       	ld	r24, Z
    454e:	ea 81       	ldd	r30, Y+2	; 0x02
    4550:	fb 81       	ldd	r31, Y+3	; 0x03
    4552:	91 81       	ldd	r25, Z+1	; 0x01
    4554:	69 2f       	mov	r22, r25
    4556:	41 e0       	ldi	r20, 0x01	; 1
    4558:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    455c:	89 83       	std	Y+1, r24	; 0x01
    455e:	05 c0       	rjmp	.+10     	; 0x456a <LED_enuTurnON+0x7e>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    4560:	83 e0       	ldi	r24, 0x03	; 3
    4562:	89 83       	std	Y+1, r24	; 0x01
    4564:	02 c0       	rjmp	.+4      	; 0x456a <LED_enuTurnON+0x7e>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    4566:	82 e0       	ldi	r24, 0x02	; 2
    4568:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    456a:	89 81       	ldd	r24, Y+1	; 0x01
}
    456c:	0f 90       	pop	r0
    456e:	0f 90       	pop	r0
    4570:	0f 90       	pop	r0
    4572:	cf 91       	pop	r28
    4574:	df 91       	pop	r29
    4576:	08 95       	ret

00004578 <LED_enuTurnOFF>:

ES_t LED_enuTurnOFF(LED_t *Copy_pstrLedID)
{
    4578:	df 93       	push	r29
    457a:	cf 93       	push	r28
    457c:	00 d0       	rcall	.+0      	; 0x457e <LED_enuTurnOFF+0x6>
    457e:	0f 92       	push	r0
    4580:	cd b7       	in	r28, 0x3d	; 61
    4582:	de b7       	in	r29, 0x3e	; 62
    4584:	9b 83       	std	Y+3, r25	; 0x03
    4586:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4588:	81 e0       	ldi	r24, 0x01	; 1
    458a:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pstrLedID != NULL)
    458c:	8a 81       	ldd	r24, Y+2	; 0x02
    458e:	9b 81       	ldd	r25, Y+3	; 0x03
    4590:	00 97       	sbiw	r24, 0x00	; 0
    4592:	79 f1       	breq	.+94     	; 0x45f2 <LED_enuTurnOFF+0x7a>
	{
		DIO_enuSetPinDirection(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8OUTPUT);
    4594:	ea 81       	ldd	r30, Y+2	; 0x02
    4596:	fb 81       	ldd	r31, Y+3	; 0x03
    4598:	80 81       	ld	r24, Z
    459a:	ea 81       	ldd	r30, Y+2	; 0x02
    459c:	fb 81       	ldd	r31, Y+3	; 0x03
    459e:	91 81       	ldd	r25, Z+1	; 0x01
    45a0:	69 2f       	mov	r22, r25
    45a2:	41 e0       	ldi	r20, 0x01	; 1
    45a4:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <DIO_enuSetPinDirection>
		if(Copy_pstrLedID->LED_u8Connection == LED_u8SINK)
    45a8:	ea 81       	ldd	r30, Y+2	; 0x02
    45aa:	fb 81       	ldd	r31, Y+3	; 0x03
    45ac:	82 81       	ldd	r24, Z+2	; 0x02
    45ae:	8c 30       	cpi	r24, 0x0C	; 12
    45b0:	61 f4       	brne	.+24     	; 0x45ca <LED_enuTurnOFF+0x52>
		{
			Local_enuErrorState = DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8HIGH);
    45b2:	ea 81       	ldd	r30, Y+2	; 0x02
    45b4:	fb 81       	ldd	r31, Y+3	; 0x03
    45b6:	80 81       	ld	r24, Z
    45b8:	ea 81       	ldd	r30, Y+2	; 0x02
    45ba:	fb 81       	ldd	r31, Y+3	; 0x03
    45bc:	91 81       	ldd	r25, Z+1	; 0x01
    45be:	69 2f       	mov	r22, r25
    45c0:	41 e0       	ldi	r20, 0x01	; 1
    45c2:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    45c6:	89 83       	std	Y+1, r24	; 0x01
    45c8:	16 c0       	rjmp	.+44     	; 0x45f6 <LED_enuTurnOFF+0x7e>
		}
		else if(Copy_pstrLedID->LED_u8Connection == LED_u8SOURCE)
    45ca:	ea 81       	ldd	r30, Y+2	; 0x02
    45cc:	fb 81       	ldd	r31, Y+3	; 0x03
    45ce:	82 81       	ldd	r24, Z+2	; 0x02
    45d0:	8d 30       	cpi	r24, 0x0D	; 13
    45d2:	61 f4       	brne	.+24     	; 0x45ec <LED_enuTurnOFF+0x74>
		{
			Local_enuErrorState = DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8LOW);
    45d4:	ea 81       	ldd	r30, Y+2	; 0x02
    45d6:	fb 81       	ldd	r31, Y+3	; 0x03
    45d8:	80 81       	ld	r24, Z
    45da:	ea 81       	ldd	r30, Y+2	; 0x02
    45dc:	fb 81       	ldd	r31, Y+3	; 0x03
    45de:	91 81       	ldd	r25, Z+1	; 0x01
    45e0:	69 2f       	mov	r22, r25
    45e2:	40 e0       	ldi	r20, 0x00	; 0
    45e4:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    45e8:	89 83       	std	Y+1, r24	; 0x01
    45ea:	05 c0       	rjmp	.+10     	; 0x45f6 <LED_enuTurnOFF+0x7e>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    45ec:	83 e0       	ldi	r24, 0x03	; 3
    45ee:	89 83       	std	Y+1, r24	; 0x01
    45f0:	02 c0       	rjmp	.+4      	; 0x45f6 <LED_enuTurnOFF+0x7e>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    45f2:	82 e0       	ldi	r24, 0x02	; 2
    45f4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    45f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    45f8:	0f 90       	pop	r0
    45fa:	0f 90       	pop	r0
    45fc:	0f 90       	pop	r0
    45fe:	cf 91       	pop	r28
    4600:	df 91       	pop	r29
    4602:	08 95       	ret

00004604 <LED_enuSetIntensity>:

ES_t LED_enuSetIntensity(u8 Copy_u8LedID, u8 Copy_u8LightIntensity)
{
    4604:	df 93       	push	r29
    4606:	cf 93       	push	r28
    4608:	00 d0       	rcall	.+0      	; 0x460a <LED_enuSetIntensity+0x6>
    460a:	00 d0       	rcall	.+0      	; 0x460c <LED_enuSetIntensity+0x8>
    460c:	0f 92       	push	r0
    460e:	cd b7       	in	r28, 0x3d	; 61
    4610:	de b7       	in	r29, 0x3e	; 62
    4612:	8a 83       	std	Y+2, r24	; 0x02
    4614:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    4616:	81 e0       	ldi	r24, 0x01	; 1
    4618:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8LedID < LED_NUM && Copy_u8LightIntensity <= 100)
    461a:	8a 81       	ldd	r24, Y+2	; 0x02
    461c:	83 30       	cpi	r24, 0x03	; 3
    461e:	08 f0       	brcs	.+2      	; 0x4622 <LED_enuSetIntensity+0x1e>
    4620:	99 c0       	rjmp	.+306    	; 0x4754 <LED_enuSetIntensity+0x150>
    4622:	8b 81       	ldd	r24, Y+3	; 0x03
    4624:	85 36       	cpi	r24, 0x65	; 101
    4626:	08 f0       	brcs	.+2      	; 0x462a <LED_enuSetIntensity+0x26>
    4628:	95 c0       	rjmp	.+298    	; 0x4754 <LED_enuSetIntensity+0x150>
	{
		if(Copy_u8LightIntensity == 0)
    462a:	8b 81       	ldd	r24, Y+3	; 0x03
    462c:	88 23       	and	r24, r24
    462e:	11 f5       	brne	.+68     	; 0x4674 <LED_enuSetIntensity+0x70>
			DIO_enuSetPinVal(LED_AstrLedConfig[Copy_u8LedID].LED_u8PortID, LED_AstrLedConfig[Copy_u8LedID].LED_u8PinID, DIO_u8LOW);
    4630:	8a 81       	ldd	r24, Y+2	; 0x02
    4632:	28 2f       	mov	r18, r24
    4634:	30 e0       	ldi	r19, 0x00	; 0
    4636:	c9 01       	movw	r24, r18
    4638:	88 0f       	add	r24, r24
    463a:	99 1f       	adc	r25, r25
    463c:	88 0f       	add	r24, r24
    463e:	99 1f       	adc	r25, r25
    4640:	82 0f       	add	r24, r18
    4642:	93 1f       	adc	r25, r19
    4644:	fc 01       	movw	r30, r24
    4646:	e7 52       	subi	r30, 0x27	; 39
    4648:	fe 4f       	sbci	r31, 0xFE	; 254
    464a:	40 81       	ld	r20, Z
    464c:	8a 81       	ldd	r24, Y+2	; 0x02
    464e:	28 2f       	mov	r18, r24
    4650:	30 e0       	ldi	r19, 0x00	; 0
    4652:	c9 01       	movw	r24, r18
    4654:	88 0f       	add	r24, r24
    4656:	99 1f       	adc	r25, r25
    4658:	88 0f       	add	r24, r24
    465a:	99 1f       	adc	r25, r25
    465c:	82 0f       	add	r24, r18
    465e:	93 1f       	adc	r25, r19
    4660:	fc 01       	movw	r30, r24
    4662:	e6 52       	subi	r30, 0x26	; 38
    4664:	fe 4f       	sbci	r31, 0xFE	; 254
    4666:	90 81       	ld	r25, Z
    4668:	84 2f       	mov	r24, r20
    466a:	69 2f       	mov	r22, r25
    466c:	40 e0       	ldi	r20, 0x00	; 0
    466e:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    4672:	72 c0       	rjmp	.+228    	; 0x4758 <LED_enuSetIntensity+0x154>
		else if(Copy_u8LightIntensity == 100)
    4674:	8b 81       	ldd	r24, Y+3	; 0x03
    4676:	84 36       	cpi	r24, 0x64	; 100
    4678:	11 f5       	brne	.+68     	; 0x46be <LED_enuSetIntensity+0xba>
			DIO_enuSetPinVal(LED_AstrLedConfig[Copy_u8LedID].LED_u8PortID, LED_AstrLedConfig[Copy_u8LedID].LED_u8PinID, DIO_u8HIGH);
    467a:	8a 81       	ldd	r24, Y+2	; 0x02
    467c:	28 2f       	mov	r18, r24
    467e:	30 e0       	ldi	r19, 0x00	; 0
    4680:	c9 01       	movw	r24, r18
    4682:	88 0f       	add	r24, r24
    4684:	99 1f       	adc	r25, r25
    4686:	88 0f       	add	r24, r24
    4688:	99 1f       	adc	r25, r25
    468a:	82 0f       	add	r24, r18
    468c:	93 1f       	adc	r25, r19
    468e:	fc 01       	movw	r30, r24
    4690:	e7 52       	subi	r30, 0x27	; 39
    4692:	fe 4f       	sbci	r31, 0xFE	; 254
    4694:	40 81       	ld	r20, Z
    4696:	8a 81       	ldd	r24, Y+2	; 0x02
    4698:	28 2f       	mov	r18, r24
    469a:	30 e0       	ldi	r19, 0x00	; 0
    469c:	c9 01       	movw	r24, r18
    469e:	88 0f       	add	r24, r24
    46a0:	99 1f       	adc	r25, r25
    46a2:	88 0f       	add	r24, r24
    46a4:	99 1f       	adc	r25, r25
    46a6:	82 0f       	add	r24, r18
    46a8:	93 1f       	adc	r25, r19
    46aa:	fc 01       	movw	r30, r24
    46ac:	e6 52       	subi	r30, 0x26	; 38
    46ae:	fe 4f       	sbci	r31, 0xFE	; 254
    46b0:	90 81       	ld	r25, Z
    46b2:	84 2f       	mov	r24, r20
    46b4:	69 2f       	mov	r22, r25
    46b6:	41 e0       	ldi	r20, 0x01	; 1
    46b8:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    46bc:	4d c0       	rjmp	.+154    	; 0x4758 <LED_enuSetIntensity+0x154>
		else
		{
			switch(LED_AstrLedConfig[Copy_u8LedID].LED_enuPWM)
    46be:	8a 81       	ldd	r24, Y+2	; 0x02
    46c0:	28 2f       	mov	r18, r24
    46c2:	30 e0       	ldi	r19, 0x00	; 0
    46c4:	c9 01       	movw	r24, r18
    46c6:	88 0f       	add	r24, r24
    46c8:	99 1f       	adc	r25, r25
    46ca:	88 0f       	add	r24, r24
    46cc:	99 1f       	adc	r25, r25
    46ce:	82 0f       	add	r24, r18
    46d0:	93 1f       	adc	r25, r19
    46d2:	fc 01       	movw	r30, r24
    46d4:	e3 52       	subi	r30, 0x23	; 35
    46d6:	fe 4f       	sbci	r31, 0xFE	; 254
    46d8:	80 81       	ld	r24, Z
    46da:	28 2f       	mov	r18, r24
    46dc:	30 e0       	ldi	r19, 0x00	; 0
    46de:	3d 83       	std	Y+5, r19	; 0x05
    46e0:	2c 83       	std	Y+4, r18	; 0x04
    46e2:	8c 81       	ldd	r24, Y+4	; 0x04
    46e4:	9d 81       	ldd	r25, Y+5	; 0x05
    46e6:	82 30       	cpi	r24, 0x02	; 2
    46e8:	91 05       	cpc	r25, r1
    46ea:	11 f1       	breq	.+68     	; 0x4730 <LED_enuSetIntensity+0x12c>
    46ec:	2c 81       	ldd	r18, Y+4	; 0x04
    46ee:	3d 81       	ldd	r19, Y+5	; 0x05
    46f0:	23 30       	cpi	r18, 0x03	; 3
    46f2:	31 05       	cpc	r19, r1
    46f4:	54 f4       	brge	.+20     	; 0x470a <LED_enuSetIntensity+0x106>
    46f6:	8c 81       	ldd	r24, Y+4	; 0x04
    46f8:	9d 81       	ldd	r25, Y+5	; 0x05
    46fa:	00 97       	sbiw	r24, 0x00	; 0
    46fc:	89 f0       	breq	.+34     	; 0x4720 <LED_enuSetIntensity+0x11c>
    46fe:	2c 81       	ldd	r18, Y+4	; 0x04
    4700:	3d 81       	ldd	r19, Y+5	; 0x05
    4702:	21 30       	cpi	r18, 0x01	; 1
    4704:	31 05       	cpc	r19, r1
    4706:	79 f0       	breq	.+30     	; 0x4726 <LED_enuSetIntensity+0x122>
    4708:	22 c0       	rjmp	.+68     	; 0x474e <LED_enuSetIntensity+0x14a>
    470a:	8c 81       	ldd	r24, Y+4	; 0x04
    470c:	9d 81       	ldd	r25, Y+5	; 0x05
    470e:	83 30       	cpi	r24, 0x03	; 3
    4710:	91 05       	cpc	r25, r1
    4712:	99 f0       	breq	.+38     	; 0x473a <LED_enuSetIntensity+0x136>
    4714:	2c 81       	ldd	r18, Y+4	; 0x04
    4716:	3d 81       	ldd	r19, Y+5	; 0x05
    4718:	24 30       	cpi	r18, 0x04	; 4
    471a:	31 05       	cpc	r19, r1
    471c:	99 f0       	breq	.+38     	; 0x4744 <LED_enuSetIntensity+0x140>
    471e:	17 c0       	rjmp	.+46     	; 0x474e <LED_enuSetIntensity+0x14a>
			{
			case LED_PWM_NONE:
				Local_enuErrorState = ES_NOK;
    4720:	81 e0       	ldi	r24, 0x01	; 1
    4722:	89 83       	std	Y+1, r24	; 0x01
    4724:	19 c0       	rjmp	.+50     	; 0x4758 <LED_enuSetIntensity+0x154>
				break;

			case LED_PWM_OC0:
				TIMER0_enuGeneratePWM(Copy_u8LightIntensity);
    4726:	8b 81       	ldd	r24, Y+3	; 0x03
    4728:	0e 94 99 11 	call	0x2332	; 0x2332 <TIMER0_enuGeneratePWM>
				Local_enuErrorState = ES_OK;
    472c:	19 82       	std	Y+1, r1	; 0x01
    472e:	14 c0       	rjmp	.+40     	; 0x4758 <LED_enuSetIntensity+0x154>
				break;

			case LED_PWM_OC1A:
				TIMER1_enuGeneratePWM_OCR1A(Copy_u8LightIntensity);
    4730:	8b 81       	ldd	r24, Y+3	; 0x03
    4732:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <TIMER1_enuGeneratePWM_OCR1A>
				Local_enuErrorState = ES_OK;
    4736:	19 82       	std	Y+1, r1	; 0x01
    4738:	0f c0       	rjmp	.+30     	; 0x4758 <LED_enuSetIntensity+0x154>
				break;

			case LED_PWM_OC1B:
				TIMER1_enuGeneratePWM_OCR1B(Copy_u8LightIntensity);
    473a:	8b 81       	ldd	r24, Y+3	; 0x03
    473c:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <TIMER1_enuGeneratePWM_OCR1B>
				Local_enuErrorState = ES_OK;
    4740:	19 82       	std	Y+1, r1	; 0x01
    4742:	0a c0       	rjmp	.+20     	; 0x4758 <LED_enuSetIntensity+0x154>
				break;

			case LED_PWM_OC2:
				TIMER2_enuGeneratePWM(Copy_u8LightIntensity);
    4744:	8b 81       	ldd	r24, Y+3	; 0x03
    4746:	0e 94 8d 0b 	call	0x171a	; 0x171a <TIMER2_enuGeneratePWM>
				Local_enuErrorState = ES_OK;
    474a:	19 82       	std	Y+1, r1	; 0x01
    474c:	05 c0       	rjmp	.+10     	; 0x4758 <LED_enuSetIntensity+0x154>
				break;

			default:
				Local_enuErrorState = ES_NOK;
    474e:	81 e0       	ldi	r24, 0x01	; 1
    4750:	89 83       	std	Y+1, r24	; 0x01
    4752:	02 c0       	rjmp	.+4      	; 0x4758 <LED_enuSetIntensity+0x154>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    4754:	83 e0       	ldi	r24, 0x03	; 3
    4756:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    4758:	89 81       	ldd	r24, Y+1	; 0x01
}
    475a:	0f 90       	pop	r0
    475c:	0f 90       	pop	r0
    475e:	0f 90       	pop	r0
    4760:	0f 90       	pop	r0
    4762:	0f 90       	pop	r0
    4764:	cf 91       	pop	r28
    4766:	df 91       	pop	r29
    4768:	08 95       	ret

0000476a <LDR_enuInit>:
/** Return Type     : ES_t enum.                                            **/
/** Arguments       : LDR_t* Copy_PstrLDRconfig.                            **/
/** Brief           : Initializing LDR configuration (Config of pin)        **/
/*****************************************************************************/
/*****************************************************************************/
ES_t LDR_enuInit(LDR_t* Copy_PstrLDRconfig) {
    476a:	df 93       	push	r29
    476c:	cf 93       	push	r28
    476e:	00 d0       	rcall	.+0      	; 0x4770 <LDR_enuInit+0x6>
    4770:	00 d0       	rcall	.+0      	; 0x4772 <LDR_enuInit+0x8>
    4772:	cd b7       	in	r28, 0x3d	; 61
    4774:	de b7       	in	r29, 0x3e	; 62
    4776:	9c 83       	std	Y+4, r25	; 0x04
    4778:	8b 83       	std	Y+3, r24	; 0x03
    ES_t Local_enuErrorState = ES_NOK;
    477a:	81 e0       	ldi	r24, 0x01	; 1
    477c:	8a 83       	std	Y+2, r24	; 0x02

    // Iterate through each LDR configuration
    for (u8 Local_u8Iterator = 0; Local_u8Iterator < LDRNUM; Local_u8Iterator++) {
    477e:	19 82       	std	Y+1, r1	; 0x01
    4780:	27 c0       	rjmp	.+78     	; 0x47d0 <LDR_enuInit+0x66>
        if (Copy_PstrLDRconfig[Local_u8Iterator].LDR_Channel != NOTCONNECTED) {
    4782:	89 81       	ldd	r24, Y+1	; 0x01
    4784:	88 2f       	mov	r24, r24
    4786:	90 e0       	ldi	r25, 0x00	; 0
    4788:	9c 01       	movw	r18, r24
    478a:	22 0f       	add	r18, r18
    478c:	33 1f       	adc	r19, r19
    478e:	8b 81       	ldd	r24, Y+3	; 0x03
    4790:	9c 81       	ldd	r25, Y+4	; 0x04
    4792:	fc 01       	movw	r30, r24
    4794:	e2 0f       	add	r30, r18
    4796:	f3 1f       	adc	r31, r19
    4798:	80 81       	ld	r24, Z
    479a:	91 81       	ldd	r25, Z+1	; 0x01
    479c:	8f 3f       	cpi	r24, 0xFF	; 255
    479e:	91 05       	cpc	r25, r1
    47a0:	a1 f0       	breq	.+40     	; 0x47ca <LDR_enuInit+0x60>
            // Set pin direction
            Local_enuErrorState=DIO_enuSetPinDirection(DIO_u8PORTA, Copy_PstrLDRconfig[Local_u8Iterator].LDR_Channel, DIO_u8INPUT);
    47a2:	89 81       	ldd	r24, Y+1	; 0x01
    47a4:	88 2f       	mov	r24, r24
    47a6:	90 e0       	ldi	r25, 0x00	; 0
    47a8:	9c 01       	movw	r18, r24
    47aa:	22 0f       	add	r18, r18
    47ac:	33 1f       	adc	r19, r19
    47ae:	8b 81       	ldd	r24, Y+3	; 0x03
    47b0:	9c 81       	ldd	r25, Y+4	; 0x04
    47b2:	fc 01       	movw	r30, r24
    47b4:	e2 0f       	add	r30, r18
    47b6:	f3 1f       	adc	r31, r19
    47b8:	80 81       	ld	r24, Z
    47ba:	91 81       	ldd	r25, Z+1	; 0x01
    47bc:	98 2f       	mov	r25, r24
    47be:	80 e0       	ldi	r24, 0x00	; 0
    47c0:	69 2f       	mov	r22, r25
    47c2:	40 e0       	ldi	r20, 0x00	; 0
    47c4:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <DIO_enuSetPinDirection>
    47c8:	8a 83       	std	Y+2, r24	; 0x02
/*****************************************************************************/
ES_t LDR_enuInit(LDR_t* Copy_PstrLDRconfig) {
    ES_t Local_enuErrorState = ES_NOK;

    // Iterate through each LDR configuration
    for (u8 Local_u8Iterator = 0; Local_u8Iterator < LDRNUM; Local_u8Iterator++) {
    47ca:	89 81       	ldd	r24, Y+1	; 0x01
    47cc:	8f 5f       	subi	r24, 0xFF	; 255
    47ce:	89 83       	std	Y+1, r24	; 0x01
    47d0:	89 81       	ldd	r24, Y+1	; 0x01
    47d2:	88 23       	and	r24, r24
    47d4:	b1 f2       	breq	.-84     	; 0x4782 <LDR_enuInit+0x18>

        }
    }


    return Local_enuErrorState;
    47d6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    47d8:	0f 90       	pop	r0
    47da:	0f 90       	pop	r0
    47dc:	0f 90       	pop	r0
    47de:	0f 90       	pop	r0
    47e0:	cf 91       	pop	r28
    47e2:	df 91       	pop	r29
    47e4:	08 95       	ret

000047e6 <LDR_enuGetValue>:
/** Arguments       : u16 *Copy_pu16ReadValue, u8 Copy_u8ChannelID.         **/
/** Brief           : Get the value from the specified ADC channel.         **/
/*****************************************************************************/
/*****************************************************************************/
ES_t LDR_enuGetValue(u16 *Copy_pu16ReadValue, u8 Copy_u8ChannelID)
{
    47e6:	df 93       	push	r29
    47e8:	cf 93       	push	r28
    47ea:	00 d0       	rcall	.+0      	; 0x47ec <LDR_enuGetValue+0x6>
    47ec:	00 d0       	rcall	.+0      	; 0x47ee <LDR_enuGetValue+0x8>
    47ee:	cd b7       	in	r28, 0x3d	; 61
    47f0:	de b7       	in	r29, 0x3e	; 62
    47f2:	9b 83       	std	Y+3, r25	; 0x03
    47f4:	8a 83       	std	Y+2, r24	; 0x02
    47f6:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    47f8:	81 e0       	ldi	r24, 0x01	; 1
    47fa:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pu16ReadValue != NULL)
    47fc:	8a 81       	ldd	r24, Y+2	; 0x02
    47fe:	9b 81       	ldd	r25, Y+3	; 0x03
    4800:	00 97       	sbiw	r24, 0x00	; 0
    4802:	39 f0       	breq	.+14     	; 0x4812 <LDR_enuGetValue+0x2c>
	{
		ADC_Read_From_Ch(Copy_pu16ReadValue,Copy_u8ChannelID);
    4804:	8a 81       	ldd	r24, Y+2	; 0x02
    4806:	9b 81       	ldd	r25, Y+3	; 0x03
    4808:	6c 81       	ldd	r22, Y+4	; 0x04
    480a:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <ADC_Read_From_Ch>

		Local_enuErrorState = ES_OK;
    480e:	19 82       	std	Y+1, r1	; 0x01
    4810:	02 c0       	rjmp	.+4      	; 0x4816 <LDR_enuGetValue+0x30>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    4812:	82 e0       	ldi	r24, 0x02	; 2
    4814:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    4816:	89 81       	ldd	r24, Y+1	; 0x01
}
    4818:	0f 90       	pop	r0
    481a:	0f 90       	pop	r0
    481c:	0f 90       	pop	r0
    481e:	0f 90       	pop	r0
    4820:	cf 91       	pop	r28
    4822:	df 91       	pop	r29
    4824:	08 95       	ret

00004826 <LCD_enuInit>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuInit(void)
{
    4826:	0f 93       	push	r16
    4828:	1f 93       	push	r17
    482a:	df 93       	push	r29
    482c:	cf 93       	push	r28
    482e:	cd b7       	in	r28, 0x3d	; 61
    4830:	de b7       	in	r29, 0x3e	; 62
    4832:	c8 54       	subi	r28, 0x48	; 72
    4834:	d0 40       	sbci	r29, 0x00	; 0
    4836:	0f b6       	in	r0, 0x3f	; 63
    4838:	f8 94       	cli
    483a:	de bf       	out	0x3e, r29	; 62
    483c:	0f be       	out	0x3f, r0	; 63
    483e:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    4840:	fe 01       	movw	r30, r28
    4842:	e9 5b       	subi	r30, 0xB9	; 185
    4844:	ff 4f       	sbci	r31, 0xFF	; 255
    4846:	81 e0       	ldi	r24, 0x01	; 1
    4848:	80 83       	st	Z, r24
	
	/* Set Control Pins as output */
	Local_enuErrorState = DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    484a:	81 e0       	ldi	r24, 0x01	; 1
    484c:	60 e0       	ldi	r22, 0x00	; 0
    484e:	41 e0       	ldi	r20, 0x01	; 1
    4850:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <DIO_enuSetPinDirection>
    4854:	fe 01       	movw	r30, r28
    4856:	e9 5b       	subi	r30, 0xB9	; 185
    4858:	ff 4f       	sbci	r31, 0xFF	; 255
    485a:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    485c:	fe 01       	movw	r30, r28
    485e:	e9 5b       	subi	r30, 0xB9	; 185
    4860:	ff 4f       	sbci	r31, 0xFF	; 255
    4862:	80 81       	ld	r24, Z
    4864:	88 23       	and	r24, r24
    4866:	41 f0       	breq	.+16     	; 0x4878 <LCD_enuInit+0x52>
		return Local_enuErrorState;
    4868:	fe 01       	movw	r30, r28
    486a:	e9 5b       	subi	r30, 0xB9	; 185
    486c:	ff 4f       	sbci	r31, 0xFF	; 255
    486e:	80 81       	ld	r24, Z
    4870:	29 96       	adiw	r28, 0x09	; 9
    4872:	8f af       	std	Y+63, r24	; 0x3f
    4874:	29 97       	sbiw	r28, 0x09	; 9
    4876:	3c c3       	rjmp	.+1656   	; 0x4ef0 <LCD_enuInit+0x6ca>
	
	Local_enuErrorState = DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    4878:	81 e0       	ldi	r24, 0x01	; 1
    487a:	61 e0       	ldi	r22, 0x01	; 1
    487c:	41 e0       	ldi	r20, 0x01	; 1
    487e:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <DIO_enuSetPinDirection>
    4882:	fe 01       	movw	r30, r28
    4884:	e9 5b       	subi	r30, 0xB9	; 185
    4886:	ff 4f       	sbci	r31, 0xFF	; 255
    4888:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    488a:	fe 01       	movw	r30, r28
    488c:	e9 5b       	subi	r30, 0xB9	; 185
    488e:	ff 4f       	sbci	r31, 0xFF	; 255
    4890:	80 81       	ld	r24, Z
    4892:	88 23       	and	r24, r24
    4894:	41 f0       	breq	.+16     	; 0x48a6 <LCD_enuInit+0x80>
		return Local_enuErrorState;
    4896:	fe 01       	movw	r30, r28
    4898:	e9 5b       	subi	r30, 0xB9	; 185
    489a:	ff 4f       	sbci	r31, 0xFF	; 255
    489c:	80 81       	ld	r24, Z
    489e:	29 96       	adiw	r28, 0x09	; 9
    48a0:	8f af       	std	Y+63, r24	; 0x3f
    48a2:	29 97       	sbiw	r28, 0x09	; 9
    48a4:	25 c3       	rjmp	.+1610   	; 0x4ef0 <LCD_enuInit+0x6ca>
		
	Local_enuErrorState = DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    48a6:	81 e0       	ldi	r24, 0x01	; 1
    48a8:	62 e0       	ldi	r22, 0x02	; 2
    48aa:	41 e0       	ldi	r20, 0x01	; 1
    48ac:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <DIO_enuSetPinDirection>
    48b0:	fe 01       	movw	r30, r28
    48b2:	e9 5b       	subi	r30, 0xB9	; 185
    48b4:	ff 4f       	sbci	r31, 0xFF	; 255
    48b6:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    48b8:	fe 01       	movw	r30, r28
    48ba:	e9 5b       	subi	r30, 0xB9	; 185
    48bc:	ff 4f       	sbci	r31, 0xFF	; 255
    48be:	80 81       	ld	r24, Z
    48c0:	88 23       	and	r24, r24
    48c2:	41 f0       	breq	.+16     	; 0x48d4 <LCD_enuInit+0xae>
		return Local_enuErrorState;
    48c4:	fe 01       	movw	r30, r28
    48c6:	e9 5b       	subi	r30, 0xB9	; 185
    48c8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ca:	80 81       	ld	r24, Z
    48cc:	29 96       	adiw	r28, 0x09	; 9
    48ce:	8f af       	std	Y+63, r24	; 0x3f
    48d0:	29 97       	sbiw	r28, 0x09	; 9
    48d2:	0e c3       	rjmp	.+1564   	; 0x4ef0 <LCD_enuInit+0x6ca>
	
	/* Set Data Pins as output */
	Local_enuErrorState = DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    48d4:	81 e0       	ldi	r24, 0x01	; 1
    48d6:	67 e0       	ldi	r22, 0x07	; 7
    48d8:	41 e0       	ldi	r20, 0x01	; 1
    48da:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <DIO_enuSetPinDirection>
    48de:	fe 01       	movw	r30, r28
    48e0:	e9 5b       	subi	r30, 0xB9	; 185
    48e2:	ff 4f       	sbci	r31, 0xFF	; 255
    48e4:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    48e6:	fe 01       	movw	r30, r28
    48e8:	e9 5b       	subi	r30, 0xB9	; 185
    48ea:	ff 4f       	sbci	r31, 0xFF	; 255
    48ec:	80 81       	ld	r24, Z
    48ee:	88 23       	and	r24, r24
    48f0:	41 f0       	breq	.+16     	; 0x4902 <LCD_enuInit+0xdc>
		return Local_enuErrorState;
    48f2:	fe 01       	movw	r30, r28
    48f4:	e9 5b       	subi	r30, 0xB9	; 185
    48f6:	ff 4f       	sbci	r31, 0xFF	; 255
    48f8:	80 81       	ld	r24, Z
    48fa:	29 96       	adiw	r28, 0x09	; 9
    48fc:	8f af       	std	Y+63, r24	; 0x3f
    48fe:	29 97       	sbiw	r28, 0x09	; 9
    4900:	f7 c2       	rjmp	.+1518   	; 0x4ef0 <LCD_enuInit+0x6ca>
		
	Local_enuErrorState = DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    4902:	81 e0       	ldi	r24, 0x01	; 1
    4904:	66 e0       	ldi	r22, 0x06	; 6
    4906:	41 e0       	ldi	r20, 0x01	; 1
    4908:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <DIO_enuSetPinDirection>
    490c:	fe 01       	movw	r30, r28
    490e:	e9 5b       	subi	r30, 0xB9	; 185
    4910:	ff 4f       	sbci	r31, 0xFF	; 255
    4912:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    4914:	fe 01       	movw	r30, r28
    4916:	e9 5b       	subi	r30, 0xB9	; 185
    4918:	ff 4f       	sbci	r31, 0xFF	; 255
    491a:	80 81       	ld	r24, Z
    491c:	88 23       	and	r24, r24
    491e:	41 f0       	breq	.+16     	; 0x4930 <LCD_enuInit+0x10a>
		return Local_enuErrorState;
    4920:	fe 01       	movw	r30, r28
    4922:	e9 5b       	subi	r30, 0xB9	; 185
    4924:	ff 4f       	sbci	r31, 0xFF	; 255
    4926:	80 81       	ld	r24, Z
    4928:	29 96       	adiw	r28, 0x09	; 9
    492a:	8f af       	std	Y+63, r24	; 0x3f
    492c:	29 97       	sbiw	r28, 0x09	; 9
    492e:	e0 c2       	rjmp	.+1472   	; 0x4ef0 <LCD_enuInit+0x6ca>
		
	Local_enuErrorState = DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    4930:	81 e0       	ldi	r24, 0x01	; 1
    4932:	65 e0       	ldi	r22, 0x05	; 5
    4934:	41 e0       	ldi	r20, 0x01	; 1
    4936:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <DIO_enuSetPinDirection>
    493a:	fe 01       	movw	r30, r28
    493c:	e9 5b       	subi	r30, 0xB9	; 185
    493e:	ff 4f       	sbci	r31, 0xFF	; 255
    4940:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    4942:	fe 01       	movw	r30, r28
    4944:	e9 5b       	subi	r30, 0xB9	; 185
    4946:	ff 4f       	sbci	r31, 0xFF	; 255
    4948:	80 81       	ld	r24, Z
    494a:	88 23       	and	r24, r24
    494c:	41 f0       	breq	.+16     	; 0x495e <LCD_enuInit+0x138>
		return Local_enuErrorState;
    494e:	fe 01       	movw	r30, r28
    4950:	e9 5b       	subi	r30, 0xB9	; 185
    4952:	ff 4f       	sbci	r31, 0xFF	; 255
    4954:	80 81       	ld	r24, Z
    4956:	29 96       	adiw	r28, 0x09	; 9
    4958:	8f af       	std	Y+63, r24	; 0x3f
    495a:	29 97       	sbiw	r28, 0x09	; 9
    495c:	c9 c2       	rjmp	.+1426   	; 0x4ef0 <LCD_enuInit+0x6ca>
	Local_enuErrorState = DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    495e:	81 e0       	ldi	r24, 0x01	; 1
    4960:	64 e0       	ldi	r22, 0x04	; 4
    4962:	41 e0       	ldi	r20, 0x01	; 1
    4964:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <DIO_enuSetPinDirection>
    4968:	fe 01       	movw	r30, r28
    496a:	e9 5b       	subi	r30, 0xB9	; 185
    496c:	ff 4f       	sbci	r31, 0xFF	; 255
    496e:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    4970:	fe 01       	movw	r30, r28
    4972:	e9 5b       	subi	r30, 0xB9	; 185
    4974:	ff 4f       	sbci	r31, 0xFF	; 255
    4976:	80 81       	ld	r24, Z
    4978:	88 23       	and	r24, r24
    497a:	41 f0       	breq	.+16     	; 0x498c <LCD_enuInit+0x166>
		return Local_enuErrorState;
    497c:	fe 01       	movw	r30, r28
    497e:	e9 5b       	subi	r30, 0xB9	; 185
    4980:	ff 4f       	sbci	r31, 0xFF	; 255
    4982:	80 81       	ld	r24, Z
    4984:	29 96       	adiw	r28, 0x09	; 9
    4986:	8f af       	std	Y+63, r24	; 0x3f
    4988:	29 97       	sbiw	r28, 0x09	; 9
    498a:	b2 c2       	rjmp	.+1380   	; 0x4ef0 <LCD_enuInit+0x6ca>
    498c:	fe 01       	movw	r30, r28
    498e:	ed 5b       	subi	r30, 0xBD	; 189
    4990:	ff 4f       	sbci	r31, 0xFF	; 255
    4992:	80 e0       	ldi	r24, 0x00	; 0
    4994:	90 e0       	ldi	r25, 0x00	; 0
    4996:	ac e0       	ldi	r26, 0x0C	; 12
    4998:	b2 e4       	ldi	r27, 0x42	; 66
    499a:	80 83       	st	Z, r24
    499c:	91 83       	std	Z+1, r25	; 0x01
    499e:	a2 83       	std	Z+2, r26	; 0x02
    49a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49a2:	8e 01       	movw	r16, r28
    49a4:	01 5c       	subi	r16, 0xC1	; 193
    49a6:	1f 4f       	sbci	r17, 0xFF	; 255
    49a8:	fe 01       	movw	r30, r28
    49aa:	ed 5b       	subi	r30, 0xBD	; 189
    49ac:	ff 4f       	sbci	r31, 0xFF	; 255
    49ae:	60 81       	ld	r22, Z
    49b0:	71 81       	ldd	r23, Z+1	; 0x01
    49b2:	82 81       	ldd	r24, Z+2	; 0x02
    49b4:	93 81       	ldd	r25, Z+3	; 0x03
    49b6:	20 e0       	ldi	r18, 0x00	; 0
    49b8:	30 e0       	ldi	r19, 0x00	; 0
    49ba:	4a e7       	ldi	r20, 0x7A	; 122
    49bc:	53 e4       	ldi	r21, 0x43	; 67
    49be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49c2:	dc 01       	movw	r26, r24
    49c4:	cb 01       	movw	r24, r22
    49c6:	f8 01       	movw	r30, r16
    49c8:	80 83       	st	Z, r24
    49ca:	91 83       	std	Z+1, r25	; 0x01
    49cc:	a2 83       	std	Z+2, r26	; 0x02
    49ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    49d0:	fe 01       	movw	r30, r28
    49d2:	ff 96       	adiw	r30, 0x3f	; 63
    49d4:	60 81       	ld	r22, Z
    49d6:	71 81       	ldd	r23, Z+1	; 0x01
    49d8:	82 81       	ldd	r24, Z+2	; 0x02
    49da:	93 81       	ldd	r25, Z+3	; 0x03
    49dc:	20 e0       	ldi	r18, 0x00	; 0
    49de:	30 e0       	ldi	r19, 0x00	; 0
    49e0:	40 e8       	ldi	r20, 0x80	; 128
    49e2:	5f e3       	ldi	r21, 0x3F	; 63
    49e4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    49e8:	88 23       	and	r24, r24
    49ea:	2c f4       	brge	.+10     	; 0x49f6 <LCD_enuInit+0x1d0>
		__ticks = 1;
    49ec:	81 e0       	ldi	r24, 0x01	; 1
    49ee:	90 e0       	ldi	r25, 0x00	; 0
    49f0:	9e af       	std	Y+62, r25	; 0x3e
    49f2:	8d af       	std	Y+61, r24	; 0x3d
    49f4:	46 c0       	rjmp	.+140    	; 0x4a82 <LCD_enuInit+0x25c>
	else if (__tmp > 65535)
    49f6:	fe 01       	movw	r30, r28
    49f8:	ff 96       	adiw	r30, 0x3f	; 63
    49fa:	60 81       	ld	r22, Z
    49fc:	71 81       	ldd	r23, Z+1	; 0x01
    49fe:	82 81       	ldd	r24, Z+2	; 0x02
    4a00:	93 81       	ldd	r25, Z+3	; 0x03
    4a02:	20 e0       	ldi	r18, 0x00	; 0
    4a04:	3f ef       	ldi	r19, 0xFF	; 255
    4a06:	4f e7       	ldi	r20, 0x7F	; 127
    4a08:	57 e4       	ldi	r21, 0x47	; 71
    4a0a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4a0e:	18 16       	cp	r1, r24
    4a10:	64 f5       	brge	.+88     	; 0x4a6a <LCD_enuInit+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a12:	fe 01       	movw	r30, r28
    4a14:	ed 5b       	subi	r30, 0xBD	; 189
    4a16:	ff 4f       	sbci	r31, 0xFF	; 255
    4a18:	60 81       	ld	r22, Z
    4a1a:	71 81       	ldd	r23, Z+1	; 0x01
    4a1c:	82 81       	ldd	r24, Z+2	; 0x02
    4a1e:	93 81       	ldd	r25, Z+3	; 0x03
    4a20:	20 e0       	ldi	r18, 0x00	; 0
    4a22:	30 e0       	ldi	r19, 0x00	; 0
    4a24:	40 e2       	ldi	r20, 0x20	; 32
    4a26:	51 e4       	ldi	r21, 0x41	; 65
    4a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a2c:	dc 01       	movw	r26, r24
    4a2e:	cb 01       	movw	r24, r22
    4a30:	bc 01       	movw	r22, r24
    4a32:	cd 01       	movw	r24, r26
    4a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a38:	dc 01       	movw	r26, r24
    4a3a:	cb 01       	movw	r24, r22
    4a3c:	9e af       	std	Y+62, r25	; 0x3e
    4a3e:	8d af       	std	Y+61, r24	; 0x3d
    4a40:	0f c0       	rjmp	.+30     	; 0x4a60 <LCD_enuInit+0x23a>
    4a42:	89 e1       	ldi	r24, 0x19	; 25
    4a44:	90 e0       	ldi	r25, 0x00	; 0
    4a46:	9c af       	std	Y+60, r25	; 0x3c
    4a48:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4a4a:	8b ad       	ldd	r24, Y+59	; 0x3b
    4a4c:	9c ad       	ldd	r25, Y+60	; 0x3c
    4a4e:	01 97       	sbiw	r24, 0x01	; 1
    4a50:	f1 f7       	brne	.-4      	; 0x4a4e <LCD_enuInit+0x228>
    4a52:	9c af       	std	Y+60, r25	; 0x3c
    4a54:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a56:	8d ad       	ldd	r24, Y+61	; 0x3d
    4a58:	9e ad       	ldd	r25, Y+62	; 0x3e
    4a5a:	01 97       	sbiw	r24, 0x01	; 1
    4a5c:	9e af       	std	Y+62, r25	; 0x3e
    4a5e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a60:	8d ad       	ldd	r24, Y+61	; 0x3d
    4a62:	9e ad       	ldd	r25, Y+62	; 0x3e
    4a64:	00 97       	sbiw	r24, 0x00	; 0
    4a66:	69 f7       	brne	.-38     	; 0x4a42 <LCD_enuInit+0x21c>
    4a68:	16 c0       	rjmp	.+44     	; 0x4a96 <LCD_enuInit+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a6a:	fe 01       	movw	r30, r28
    4a6c:	ff 96       	adiw	r30, 0x3f	; 63
    4a6e:	60 81       	ld	r22, Z
    4a70:	71 81       	ldd	r23, Z+1	; 0x01
    4a72:	82 81       	ldd	r24, Z+2	; 0x02
    4a74:	93 81       	ldd	r25, Z+3	; 0x03
    4a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a7a:	dc 01       	movw	r26, r24
    4a7c:	cb 01       	movw	r24, r22
    4a7e:	9e af       	std	Y+62, r25	; 0x3e
    4a80:	8d af       	std	Y+61, r24	; 0x3d
    4a82:	8d ad       	ldd	r24, Y+61	; 0x3d
    4a84:	9e ad       	ldd	r25, Y+62	; 0x3e
    4a86:	9a af       	std	Y+58, r25	; 0x3a
    4a88:	89 af       	std	Y+57, r24	; 0x39
    4a8a:	89 ad       	ldd	r24, Y+57	; 0x39
    4a8c:	9a ad       	ldd	r25, Y+58	; 0x3a
    4a8e:	01 97       	sbiw	r24, 0x01	; 1
    4a90:	f1 f7       	brne	.-4      	; 0x4a8e <LCD_enuInit+0x268>
    4a92:	9a af       	std	Y+58, r25	; 0x3a
    4a94:	89 af       	std	Y+57, r24	; 0x39
		return Local_enuErrorState;
	_delay_ms(1);
	
	#elif LCD_MODE == FOUR_BIT
	/* Function Set */
	LCD_inlenuSendCommand(0x33);
    4a96:	83 e3       	ldi	r24, 0x33	; 51
    4a98:	0e 94 8f 2a 	call	0x551e	; 0x551e <LCD_inlenuSendCommand>
	LCD_inlenuSendCommand(0x32);
    4a9c:	82 e3       	ldi	r24, 0x32	; 50
    4a9e:	0e 94 8f 2a 	call	0x551e	; 0x551e <LCD_inlenuSendCommand>
	
	Local_enuErrorState = LCD_inlenuSendCommand(LCD_4Bit_TwoLine_5_7CharFont);
    4aa2:	88 e2       	ldi	r24, 0x28	; 40
    4aa4:	0e 94 8f 2a 	call	0x551e	; 0x551e <LCD_inlenuSendCommand>
    4aa8:	fe 01       	movw	r30, r28
    4aaa:	e9 5b       	subi	r30, 0xB9	; 185
    4aac:	ff 4f       	sbci	r31, 0xFF	; 255
    4aae:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    4ab0:	fe 01       	movw	r30, r28
    4ab2:	e9 5b       	subi	r30, 0xB9	; 185
    4ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab6:	80 81       	ld	r24, Z
    4ab8:	88 23       	and	r24, r24
    4aba:	41 f0       	breq	.+16     	; 0x4acc <LCD_enuInit+0x2a6>
		return Local_enuErrorState;
    4abc:	fe 01       	movw	r30, r28
    4abe:	e9 5b       	subi	r30, 0xB9	; 185
    4ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac2:	80 81       	ld	r24, Z
    4ac4:	29 96       	adiw	r28, 0x09	; 9
    4ac6:	8f af       	std	Y+63, r24	; 0x3f
    4ac8:	29 97       	sbiw	r28, 0x09	; 9
    4aca:	12 c2       	rjmp	.+1060   	; 0x4ef0 <LCD_enuInit+0x6ca>
    4acc:	80 e0       	ldi	r24, 0x00	; 0
    4ace:	90 e0       	ldi	r25, 0x00	; 0
    4ad0:	a0 e8       	ldi	r26, 0x80	; 128
    4ad2:	bf e3       	ldi	r27, 0x3F	; 63
    4ad4:	8d ab       	std	Y+53, r24	; 0x35
    4ad6:	9e ab       	std	Y+54, r25	; 0x36
    4ad8:	af ab       	std	Y+55, r26	; 0x37
    4ada:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4adc:	6d a9       	ldd	r22, Y+53	; 0x35
    4ade:	7e a9       	ldd	r23, Y+54	; 0x36
    4ae0:	8f a9       	ldd	r24, Y+55	; 0x37
    4ae2:	98 ad       	ldd	r25, Y+56	; 0x38
    4ae4:	20 e0       	ldi	r18, 0x00	; 0
    4ae6:	30 e0       	ldi	r19, 0x00	; 0
    4ae8:	4a e7       	ldi	r20, 0x7A	; 122
    4aea:	53 e4       	ldi	r21, 0x43	; 67
    4aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4af0:	dc 01       	movw	r26, r24
    4af2:	cb 01       	movw	r24, r22
    4af4:	89 ab       	std	Y+49, r24	; 0x31
    4af6:	9a ab       	std	Y+50, r25	; 0x32
    4af8:	ab ab       	std	Y+51, r26	; 0x33
    4afa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4afc:	69 a9       	ldd	r22, Y+49	; 0x31
    4afe:	7a a9       	ldd	r23, Y+50	; 0x32
    4b00:	8b a9       	ldd	r24, Y+51	; 0x33
    4b02:	9c a9       	ldd	r25, Y+52	; 0x34
    4b04:	20 e0       	ldi	r18, 0x00	; 0
    4b06:	30 e0       	ldi	r19, 0x00	; 0
    4b08:	40 e8       	ldi	r20, 0x80	; 128
    4b0a:	5f e3       	ldi	r21, 0x3F	; 63
    4b0c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4b10:	88 23       	and	r24, r24
    4b12:	2c f4       	brge	.+10     	; 0x4b1e <LCD_enuInit+0x2f8>
		__ticks = 1;
    4b14:	81 e0       	ldi	r24, 0x01	; 1
    4b16:	90 e0       	ldi	r25, 0x00	; 0
    4b18:	98 ab       	std	Y+48, r25	; 0x30
    4b1a:	8f a7       	std	Y+47, r24	; 0x2f
    4b1c:	3f c0       	rjmp	.+126    	; 0x4b9c <LCD_enuInit+0x376>
	else if (__tmp > 65535)
    4b1e:	69 a9       	ldd	r22, Y+49	; 0x31
    4b20:	7a a9       	ldd	r23, Y+50	; 0x32
    4b22:	8b a9       	ldd	r24, Y+51	; 0x33
    4b24:	9c a9       	ldd	r25, Y+52	; 0x34
    4b26:	20 e0       	ldi	r18, 0x00	; 0
    4b28:	3f ef       	ldi	r19, 0xFF	; 255
    4b2a:	4f e7       	ldi	r20, 0x7F	; 127
    4b2c:	57 e4       	ldi	r21, 0x47	; 71
    4b2e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4b32:	18 16       	cp	r1, r24
    4b34:	4c f5       	brge	.+82     	; 0x4b88 <LCD_enuInit+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b36:	6d a9       	ldd	r22, Y+53	; 0x35
    4b38:	7e a9       	ldd	r23, Y+54	; 0x36
    4b3a:	8f a9       	ldd	r24, Y+55	; 0x37
    4b3c:	98 ad       	ldd	r25, Y+56	; 0x38
    4b3e:	20 e0       	ldi	r18, 0x00	; 0
    4b40:	30 e0       	ldi	r19, 0x00	; 0
    4b42:	40 e2       	ldi	r20, 0x20	; 32
    4b44:	51 e4       	ldi	r21, 0x41	; 65
    4b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b4a:	dc 01       	movw	r26, r24
    4b4c:	cb 01       	movw	r24, r22
    4b4e:	bc 01       	movw	r22, r24
    4b50:	cd 01       	movw	r24, r26
    4b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b56:	dc 01       	movw	r26, r24
    4b58:	cb 01       	movw	r24, r22
    4b5a:	98 ab       	std	Y+48, r25	; 0x30
    4b5c:	8f a7       	std	Y+47, r24	; 0x2f
    4b5e:	0f c0       	rjmp	.+30     	; 0x4b7e <LCD_enuInit+0x358>
    4b60:	89 e1       	ldi	r24, 0x19	; 25
    4b62:	90 e0       	ldi	r25, 0x00	; 0
    4b64:	9e a7       	std	Y+46, r25	; 0x2e
    4b66:	8d a7       	std	Y+45, r24	; 0x2d
    4b68:	8d a5       	ldd	r24, Y+45	; 0x2d
    4b6a:	9e a5       	ldd	r25, Y+46	; 0x2e
    4b6c:	01 97       	sbiw	r24, 0x01	; 1
    4b6e:	f1 f7       	brne	.-4      	; 0x4b6c <LCD_enuInit+0x346>
    4b70:	9e a7       	std	Y+46, r25	; 0x2e
    4b72:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b74:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b76:	98 a9       	ldd	r25, Y+48	; 0x30
    4b78:	01 97       	sbiw	r24, 0x01	; 1
    4b7a:	98 ab       	std	Y+48, r25	; 0x30
    4b7c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b80:	98 a9       	ldd	r25, Y+48	; 0x30
    4b82:	00 97       	sbiw	r24, 0x00	; 0
    4b84:	69 f7       	brne	.-38     	; 0x4b60 <LCD_enuInit+0x33a>
    4b86:	14 c0       	rjmp	.+40     	; 0x4bb0 <LCD_enuInit+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b88:	69 a9       	ldd	r22, Y+49	; 0x31
    4b8a:	7a a9       	ldd	r23, Y+50	; 0x32
    4b8c:	8b a9       	ldd	r24, Y+51	; 0x33
    4b8e:	9c a9       	ldd	r25, Y+52	; 0x34
    4b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b94:	dc 01       	movw	r26, r24
    4b96:	cb 01       	movw	r24, r22
    4b98:	98 ab       	std	Y+48, r25	; 0x30
    4b9a:	8f a7       	std	Y+47, r24	; 0x2f
    4b9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b9e:	98 a9       	ldd	r25, Y+48	; 0x30
    4ba0:	9c a7       	std	Y+44, r25	; 0x2c
    4ba2:	8b a7       	std	Y+43, r24	; 0x2b
    4ba4:	8b a5       	ldd	r24, Y+43	; 0x2b
    4ba6:	9c a5       	ldd	r25, Y+44	; 0x2c
    4ba8:	01 97       	sbiw	r24, 0x01	; 1
    4baa:	f1 f7       	brne	.-4      	; 0x4ba8 <LCD_enuInit+0x382>
    4bac:	9c a7       	std	Y+44, r25	; 0x2c
    4bae:	8b a7       	std	Y+43, r24	; 0x2b
	#else
	#error "LCD Mode has a wrong configuration"
	#endif
	
	/* Display ON/OFF Control */
	Local_enuErrorState = LCD_inlenuSendCommand(LCD_DisplayOn_CursorOff_NoBlinking);
    4bb0:	8c e0       	ldi	r24, 0x0C	; 12
    4bb2:	0e 94 8f 2a 	call	0x551e	; 0x551e <LCD_inlenuSendCommand>
    4bb6:	fe 01       	movw	r30, r28
    4bb8:	e9 5b       	subi	r30, 0xB9	; 185
    4bba:	ff 4f       	sbci	r31, 0xFF	; 255
    4bbc:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    4bbe:	fe 01       	movw	r30, r28
    4bc0:	e9 5b       	subi	r30, 0xB9	; 185
    4bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc4:	80 81       	ld	r24, Z
    4bc6:	88 23       	and	r24, r24
    4bc8:	41 f0       	breq	.+16     	; 0x4bda <LCD_enuInit+0x3b4>
		return Local_enuErrorState;
    4bca:	fe 01       	movw	r30, r28
    4bcc:	e9 5b       	subi	r30, 0xB9	; 185
    4bce:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd0:	80 81       	ld	r24, Z
    4bd2:	29 96       	adiw	r28, 0x09	; 9
    4bd4:	8f af       	std	Y+63, r24	; 0x3f
    4bd6:	29 97       	sbiw	r28, 0x09	; 9
    4bd8:	8b c1       	rjmp	.+790    	; 0x4ef0 <LCD_enuInit+0x6ca>
    4bda:	80 e0       	ldi	r24, 0x00	; 0
    4bdc:	90 e0       	ldi	r25, 0x00	; 0
    4bde:	a0 e8       	ldi	r26, 0x80	; 128
    4be0:	bf e3       	ldi	r27, 0x3F	; 63
    4be2:	8f a3       	std	Y+39, r24	; 0x27
    4be4:	98 a7       	std	Y+40, r25	; 0x28
    4be6:	a9 a7       	std	Y+41, r26	; 0x29
    4be8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bea:	6f a1       	ldd	r22, Y+39	; 0x27
    4bec:	78 a5       	ldd	r23, Y+40	; 0x28
    4bee:	89 a5       	ldd	r24, Y+41	; 0x29
    4bf0:	9a a5       	ldd	r25, Y+42	; 0x2a
    4bf2:	20 e0       	ldi	r18, 0x00	; 0
    4bf4:	30 e0       	ldi	r19, 0x00	; 0
    4bf6:	4a e7       	ldi	r20, 0x7A	; 122
    4bf8:	53 e4       	ldi	r21, 0x43	; 67
    4bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bfe:	dc 01       	movw	r26, r24
    4c00:	cb 01       	movw	r24, r22
    4c02:	8b a3       	std	Y+35, r24	; 0x23
    4c04:	9c a3       	std	Y+36, r25	; 0x24
    4c06:	ad a3       	std	Y+37, r26	; 0x25
    4c08:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4c0a:	6b a1       	ldd	r22, Y+35	; 0x23
    4c0c:	7c a1       	ldd	r23, Y+36	; 0x24
    4c0e:	8d a1       	ldd	r24, Y+37	; 0x25
    4c10:	9e a1       	ldd	r25, Y+38	; 0x26
    4c12:	20 e0       	ldi	r18, 0x00	; 0
    4c14:	30 e0       	ldi	r19, 0x00	; 0
    4c16:	40 e8       	ldi	r20, 0x80	; 128
    4c18:	5f e3       	ldi	r21, 0x3F	; 63
    4c1a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4c1e:	88 23       	and	r24, r24
    4c20:	2c f4       	brge	.+10     	; 0x4c2c <LCD_enuInit+0x406>
		__ticks = 1;
    4c22:	81 e0       	ldi	r24, 0x01	; 1
    4c24:	90 e0       	ldi	r25, 0x00	; 0
    4c26:	9a a3       	std	Y+34, r25	; 0x22
    4c28:	89 a3       	std	Y+33, r24	; 0x21
    4c2a:	3f c0       	rjmp	.+126    	; 0x4caa <LCD_enuInit+0x484>
	else if (__tmp > 65535)
    4c2c:	6b a1       	ldd	r22, Y+35	; 0x23
    4c2e:	7c a1       	ldd	r23, Y+36	; 0x24
    4c30:	8d a1       	ldd	r24, Y+37	; 0x25
    4c32:	9e a1       	ldd	r25, Y+38	; 0x26
    4c34:	20 e0       	ldi	r18, 0x00	; 0
    4c36:	3f ef       	ldi	r19, 0xFF	; 255
    4c38:	4f e7       	ldi	r20, 0x7F	; 127
    4c3a:	57 e4       	ldi	r21, 0x47	; 71
    4c3c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4c40:	18 16       	cp	r1, r24
    4c42:	4c f5       	brge	.+82     	; 0x4c96 <LCD_enuInit+0x470>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c44:	6f a1       	ldd	r22, Y+39	; 0x27
    4c46:	78 a5       	ldd	r23, Y+40	; 0x28
    4c48:	89 a5       	ldd	r24, Y+41	; 0x29
    4c4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    4c4c:	20 e0       	ldi	r18, 0x00	; 0
    4c4e:	30 e0       	ldi	r19, 0x00	; 0
    4c50:	40 e2       	ldi	r20, 0x20	; 32
    4c52:	51 e4       	ldi	r21, 0x41	; 65
    4c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c58:	dc 01       	movw	r26, r24
    4c5a:	cb 01       	movw	r24, r22
    4c5c:	bc 01       	movw	r22, r24
    4c5e:	cd 01       	movw	r24, r26
    4c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c64:	dc 01       	movw	r26, r24
    4c66:	cb 01       	movw	r24, r22
    4c68:	9a a3       	std	Y+34, r25	; 0x22
    4c6a:	89 a3       	std	Y+33, r24	; 0x21
    4c6c:	0f c0       	rjmp	.+30     	; 0x4c8c <LCD_enuInit+0x466>
    4c6e:	89 e1       	ldi	r24, 0x19	; 25
    4c70:	90 e0       	ldi	r25, 0x00	; 0
    4c72:	98 a3       	std	Y+32, r25	; 0x20
    4c74:	8f 8f       	std	Y+31, r24	; 0x1f
    4c76:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4c78:	98 a1       	ldd	r25, Y+32	; 0x20
    4c7a:	01 97       	sbiw	r24, 0x01	; 1
    4c7c:	f1 f7       	brne	.-4      	; 0x4c7a <LCD_enuInit+0x454>
    4c7e:	98 a3       	std	Y+32, r25	; 0x20
    4c80:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c82:	89 a1       	ldd	r24, Y+33	; 0x21
    4c84:	9a a1       	ldd	r25, Y+34	; 0x22
    4c86:	01 97       	sbiw	r24, 0x01	; 1
    4c88:	9a a3       	std	Y+34, r25	; 0x22
    4c8a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c8c:	89 a1       	ldd	r24, Y+33	; 0x21
    4c8e:	9a a1       	ldd	r25, Y+34	; 0x22
    4c90:	00 97       	sbiw	r24, 0x00	; 0
    4c92:	69 f7       	brne	.-38     	; 0x4c6e <LCD_enuInit+0x448>
    4c94:	14 c0       	rjmp	.+40     	; 0x4cbe <LCD_enuInit+0x498>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c96:	6b a1       	ldd	r22, Y+35	; 0x23
    4c98:	7c a1       	ldd	r23, Y+36	; 0x24
    4c9a:	8d a1       	ldd	r24, Y+37	; 0x25
    4c9c:	9e a1       	ldd	r25, Y+38	; 0x26
    4c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ca2:	dc 01       	movw	r26, r24
    4ca4:	cb 01       	movw	r24, r22
    4ca6:	9a a3       	std	Y+34, r25	; 0x22
    4ca8:	89 a3       	std	Y+33, r24	; 0x21
    4caa:	89 a1       	ldd	r24, Y+33	; 0x21
    4cac:	9a a1       	ldd	r25, Y+34	; 0x22
    4cae:	9e 8f       	std	Y+30, r25	; 0x1e
    4cb0:	8d 8f       	std	Y+29, r24	; 0x1d
    4cb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4cb4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4cb6:	01 97       	sbiw	r24, 0x01	; 1
    4cb8:	f1 f7       	brne	.-4      	; 0x4cb6 <LCD_enuInit+0x490>
    4cba:	9e 8f       	std	Y+30, r25	; 0x1e
    4cbc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	
	/* Display Clear */
	Local_enuErrorState = LCD_inlenuSendCommand(LCD_Clear_Display);
    4cbe:	81 e0       	ldi	r24, 0x01	; 1
    4cc0:	0e 94 8f 2a 	call	0x551e	; 0x551e <LCD_inlenuSendCommand>
    4cc4:	fe 01       	movw	r30, r28
    4cc6:	e9 5b       	subi	r30, 0xB9	; 185
    4cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cca:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    4ccc:	fe 01       	movw	r30, r28
    4cce:	e9 5b       	subi	r30, 0xB9	; 185
    4cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd2:	80 81       	ld	r24, Z
    4cd4:	88 23       	and	r24, r24
    4cd6:	41 f0       	breq	.+16     	; 0x4ce8 <LCD_enuInit+0x4c2>
		return Local_enuErrorState;
    4cd8:	fe 01       	movw	r30, r28
    4cda:	e9 5b       	subi	r30, 0xB9	; 185
    4cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    4cde:	80 81       	ld	r24, Z
    4ce0:	29 96       	adiw	r28, 0x09	; 9
    4ce2:	8f af       	std	Y+63, r24	; 0x3f
    4ce4:	29 97       	sbiw	r28, 0x09	; 9
    4ce6:	04 c1       	rjmp	.+520    	; 0x4ef0 <LCD_enuInit+0x6ca>
    4ce8:	80 e0       	ldi	r24, 0x00	; 0
    4cea:	90 e0       	ldi	r25, 0x00	; 0
    4cec:	a0 e0       	ldi	r26, 0x00	; 0
    4cee:	b0 e4       	ldi	r27, 0x40	; 64
    4cf0:	89 8f       	std	Y+25, r24	; 0x19
    4cf2:	9a 8f       	std	Y+26, r25	; 0x1a
    4cf4:	ab 8f       	std	Y+27, r26	; 0x1b
    4cf6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cf8:	69 8d       	ldd	r22, Y+25	; 0x19
    4cfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4cfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4cfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d00:	20 e0       	ldi	r18, 0x00	; 0
    4d02:	30 e0       	ldi	r19, 0x00	; 0
    4d04:	4a e7       	ldi	r20, 0x7A	; 122
    4d06:	53 e4       	ldi	r21, 0x43	; 67
    4d08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d0c:	dc 01       	movw	r26, r24
    4d0e:	cb 01       	movw	r24, r22
    4d10:	8d 8b       	std	Y+21, r24	; 0x15
    4d12:	9e 8b       	std	Y+22, r25	; 0x16
    4d14:	af 8b       	std	Y+23, r26	; 0x17
    4d16:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4d18:	6d 89       	ldd	r22, Y+21	; 0x15
    4d1a:	7e 89       	ldd	r23, Y+22	; 0x16
    4d1c:	8f 89       	ldd	r24, Y+23	; 0x17
    4d1e:	98 8d       	ldd	r25, Y+24	; 0x18
    4d20:	20 e0       	ldi	r18, 0x00	; 0
    4d22:	30 e0       	ldi	r19, 0x00	; 0
    4d24:	40 e8       	ldi	r20, 0x80	; 128
    4d26:	5f e3       	ldi	r21, 0x3F	; 63
    4d28:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4d2c:	88 23       	and	r24, r24
    4d2e:	2c f4       	brge	.+10     	; 0x4d3a <LCD_enuInit+0x514>
		__ticks = 1;
    4d30:	81 e0       	ldi	r24, 0x01	; 1
    4d32:	90 e0       	ldi	r25, 0x00	; 0
    4d34:	9c 8b       	std	Y+20, r25	; 0x14
    4d36:	8b 8b       	std	Y+19, r24	; 0x13
    4d38:	3f c0       	rjmp	.+126    	; 0x4db8 <LCD_enuInit+0x592>
	else if (__tmp > 65535)
    4d3a:	6d 89       	ldd	r22, Y+21	; 0x15
    4d3c:	7e 89       	ldd	r23, Y+22	; 0x16
    4d3e:	8f 89       	ldd	r24, Y+23	; 0x17
    4d40:	98 8d       	ldd	r25, Y+24	; 0x18
    4d42:	20 e0       	ldi	r18, 0x00	; 0
    4d44:	3f ef       	ldi	r19, 0xFF	; 255
    4d46:	4f e7       	ldi	r20, 0x7F	; 127
    4d48:	57 e4       	ldi	r21, 0x47	; 71
    4d4a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4d4e:	18 16       	cp	r1, r24
    4d50:	4c f5       	brge	.+82     	; 0x4da4 <LCD_enuInit+0x57e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d52:	69 8d       	ldd	r22, Y+25	; 0x19
    4d54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d5a:	20 e0       	ldi	r18, 0x00	; 0
    4d5c:	30 e0       	ldi	r19, 0x00	; 0
    4d5e:	40 e2       	ldi	r20, 0x20	; 32
    4d60:	51 e4       	ldi	r21, 0x41	; 65
    4d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d66:	dc 01       	movw	r26, r24
    4d68:	cb 01       	movw	r24, r22
    4d6a:	bc 01       	movw	r22, r24
    4d6c:	cd 01       	movw	r24, r26
    4d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d72:	dc 01       	movw	r26, r24
    4d74:	cb 01       	movw	r24, r22
    4d76:	9c 8b       	std	Y+20, r25	; 0x14
    4d78:	8b 8b       	std	Y+19, r24	; 0x13
    4d7a:	0f c0       	rjmp	.+30     	; 0x4d9a <LCD_enuInit+0x574>
    4d7c:	89 e1       	ldi	r24, 0x19	; 25
    4d7e:	90 e0       	ldi	r25, 0x00	; 0
    4d80:	9a 8b       	std	Y+18, r25	; 0x12
    4d82:	89 8b       	std	Y+17, r24	; 0x11
    4d84:	89 89       	ldd	r24, Y+17	; 0x11
    4d86:	9a 89       	ldd	r25, Y+18	; 0x12
    4d88:	01 97       	sbiw	r24, 0x01	; 1
    4d8a:	f1 f7       	brne	.-4      	; 0x4d88 <LCD_enuInit+0x562>
    4d8c:	9a 8b       	std	Y+18, r25	; 0x12
    4d8e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d90:	8b 89       	ldd	r24, Y+19	; 0x13
    4d92:	9c 89       	ldd	r25, Y+20	; 0x14
    4d94:	01 97       	sbiw	r24, 0x01	; 1
    4d96:	9c 8b       	std	Y+20, r25	; 0x14
    4d98:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d9a:	8b 89       	ldd	r24, Y+19	; 0x13
    4d9c:	9c 89       	ldd	r25, Y+20	; 0x14
    4d9e:	00 97       	sbiw	r24, 0x00	; 0
    4da0:	69 f7       	brne	.-38     	; 0x4d7c <LCD_enuInit+0x556>
    4da2:	14 c0       	rjmp	.+40     	; 0x4dcc <LCD_enuInit+0x5a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4da4:	6d 89       	ldd	r22, Y+21	; 0x15
    4da6:	7e 89       	ldd	r23, Y+22	; 0x16
    4da8:	8f 89       	ldd	r24, Y+23	; 0x17
    4daa:	98 8d       	ldd	r25, Y+24	; 0x18
    4dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4db0:	dc 01       	movw	r26, r24
    4db2:	cb 01       	movw	r24, r22
    4db4:	9c 8b       	std	Y+20, r25	; 0x14
    4db6:	8b 8b       	std	Y+19, r24	; 0x13
    4db8:	8b 89       	ldd	r24, Y+19	; 0x13
    4dba:	9c 89       	ldd	r25, Y+20	; 0x14
    4dbc:	98 8b       	std	Y+16, r25	; 0x10
    4dbe:	8f 87       	std	Y+15, r24	; 0x0f
    4dc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4dc2:	98 89       	ldd	r25, Y+16	; 0x10
    4dc4:	01 97       	sbiw	r24, 0x01	; 1
    4dc6:	f1 f7       	brne	.-4      	; 0x4dc4 <LCD_enuInit+0x59e>
    4dc8:	98 8b       	std	Y+16, r25	; 0x10
    4dca:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	
	/* Entry Mode Set */
	Local_enuErrorState = LCD_inlenuSendCommand(LCD_Increase_NoShift);
    4dcc:	86 e0       	ldi	r24, 0x06	; 6
    4dce:	0e 94 8f 2a 	call	0x551e	; 0x551e <LCD_inlenuSendCommand>
    4dd2:	fe 01       	movw	r30, r28
    4dd4:	e9 5b       	subi	r30, 0xB9	; 185
    4dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd8:	80 83       	st	Z, r24
	if(Local_enuErrorState != ES_OK)
    4dda:	fe 01       	movw	r30, r28
    4ddc:	e9 5b       	subi	r30, 0xB9	; 185
    4dde:	ff 4f       	sbci	r31, 0xFF	; 255
    4de0:	80 81       	ld	r24, Z
    4de2:	88 23       	and	r24, r24
    4de4:	41 f0       	breq	.+16     	; 0x4df6 <LCD_enuInit+0x5d0>
		return Local_enuErrorState;
    4de6:	fe 01       	movw	r30, r28
    4de8:	e9 5b       	subi	r30, 0xB9	; 185
    4dea:	ff 4f       	sbci	r31, 0xFF	; 255
    4dec:	80 81       	ld	r24, Z
    4dee:	29 96       	adiw	r28, 0x09	; 9
    4df0:	8f af       	std	Y+63, r24	; 0x3f
    4df2:	29 97       	sbiw	r28, 0x09	; 9
    4df4:	7d c0       	rjmp	.+250    	; 0x4ef0 <LCD_enuInit+0x6ca>
    4df6:	80 e0       	ldi	r24, 0x00	; 0
    4df8:	90 e0       	ldi	r25, 0x00	; 0
    4dfa:	a0 e8       	ldi	r26, 0x80	; 128
    4dfc:	bf e3       	ldi	r27, 0x3F	; 63
    4dfe:	8b 87       	std	Y+11, r24	; 0x0b
    4e00:	9c 87       	std	Y+12, r25	; 0x0c
    4e02:	ad 87       	std	Y+13, r26	; 0x0d
    4e04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e06:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e08:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e0e:	20 e0       	ldi	r18, 0x00	; 0
    4e10:	30 e0       	ldi	r19, 0x00	; 0
    4e12:	4a e7       	ldi	r20, 0x7A	; 122
    4e14:	53 e4       	ldi	r21, 0x43	; 67
    4e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e1a:	dc 01       	movw	r26, r24
    4e1c:	cb 01       	movw	r24, r22
    4e1e:	8f 83       	std	Y+7, r24	; 0x07
    4e20:	98 87       	std	Y+8, r25	; 0x08
    4e22:	a9 87       	std	Y+9, r26	; 0x09
    4e24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e26:	6f 81       	ldd	r22, Y+7	; 0x07
    4e28:	78 85       	ldd	r23, Y+8	; 0x08
    4e2a:	89 85       	ldd	r24, Y+9	; 0x09
    4e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e2e:	20 e0       	ldi	r18, 0x00	; 0
    4e30:	30 e0       	ldi	r19, 0x00	; 0
    4e32:	40 e8       	ldi	r20, 0x80	; 128
    4e34:	5f e3       	ldi	r21, 0x3F	; 63
    4e36:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4e3a:	88 23       	and	r24, r24
    4e3c:	2c f4       	brge	.+10     	; 0x4e48 <LCD_enuInit+0x622>
		__ticks = 1;
    4e3e:	81 e0       	ldi	r24, 0x01	; 1
    4e40:	90 e0       	ldi	r25, 0x00	; 0
    4e42:	9e 83       	std	Y+6, r25	; 0x06
    4e44:	8d 83       	std	Y+5, r24	; 0x05
    4e46:	3f c0       	rjmp	.+126    	; 0x4ec6 <LCD_enuInit+0x6a0>
	else if (__tmp > 65535)
    4e48:	6f 81       	ldd	r22, Y+7	; 0x07
    4e4a:	78 85       	ldd	r23, Y+8	; 0x08
    4e4c:	89 85       	ldd	r24, Y+9	; 0x09
    4e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e50:	20 e0       	ldi	r18, 0x00	; 0
    4e52:	3f ef       	ldi	r19, 0xFF	; 255
    4e54:	4f e7       	ldi	r20, 0x7F	; 127
    4e56:	57 e4       	ldi	r21, 0x47	; 71
    4e58:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4e5c:	18 16       	cp	r1, r24
    4e5e:	4c f5       	brge	.+82     	; 0x4eb2 <LCD_enuInit+0x68c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e60:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e62:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e64:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e66:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e68:	20 e0       	ldi	r18, 0x00	; 0
    4e6a:	30 e0       	ldi	r19, 0x00	; 0
    4e6c:	40 e2       	ldi	r20, 0x20	; 32
    4e6e:	51 e4       	ldi	r21, 0x41	; 65
    4e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e74:	dc 01       	movw	r26, r24
    4e76:	cb 01       	movw	r24, r22
    4e78:	bc 01       	movw	r22, r24
    4e7a:	cd 01       	movw	r24, r26
    4e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e80:	dc 01       	movw	r26, r24
    4e82:	cb 01       	movw	r24, r22
    4e84:	9e 83       	std	Y+6, r25	; 0x06
    4e86:	8d 83       	std	Y+5, r24	; 0x05
    4e88:	0f c0       	rjmp	.+30     	; 0x4ea8 <LCD_enuInit+0x682>
    4e8a:	89 e1       	ldi	r24, 0x19	; 25
    4e8c:	90 e0       	ldi	r25, 0x00	; 0
    4e8e:	9c 83       	std	Y+4, r25	; 0x04
    4e90:	8b 83       	std	Y+3, r24	; 0x03
    4e92:	8b 81       	ldd	r24, Y+3	; 0x03
    4e94:	9c 81       	ldd	r25, Y+4	; 0x04
    4e96:	01 97       	sbiw	r24, 0x01	; 1
    4e98:	f1 f7       	brne	.-4      	; 0x4e96 <LCD_enuInit+0x670>
    4e9a:	9c 83       	std	Y+4, r25	; 0x04
    4e9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    4ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ea2:	01 97       	sbiw	r24, 0x01	; 1
    4ea4:	9e 83       	std	Y+6, r25	; 0x06
    4ea6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    4eaa:	9e 81       	ldd	r25, Y+6	; 0x06
    4eac:	00 97       	sbiw	r24, 0x00	; 0
    4eae:	69 f7       	brne	.-38     	; 0x4e8a <LCD_enuInit+0x664>
    4eb0:	14 c0       	rjmp	.+40     	; 0x4eda <LCD_enuInit+0x6b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4eb2:	6f 81       	ldd	r22, Y+7	; 0x07
    4eb4:	78 85       	ldd	r23, Y+8	; 0x08
    4eb6:	89 85       	ldd	r24, Y+9	; 0x09
    4eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ebe:	dc 01       	movw	r26, r24
    4ec0:	cb 01       	movw	r24, r22
    4ec2:	9e 83       	std	Y+6, r25	; 0x06
    4ec4:	8d 83       	std	Y+5, r24	; 0x05
    4ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    4eca:	9a 83       	std	Y+2, r25	; 0x02
    4ecc:	89 83       	std	Y+1, r24	; 0x01
    4ece:	89 81       	ldd	r24, Y+1	; 0x01
    4ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ed2:	01 97       	sbiw	r24, 0x01	; 1
    4ed4:	f1 f7       	brne	.-4      	; 0x4ed2 <LCD_enuInit+0x6ac>
    4ed6:	9a 83       	std	Y+2, r25	; 0x02
    4ed8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	
	Local_enuErrorState = ES_OK;
    4eda:	fe 01       	movw	r30, r28
    4edc:	e9 5b       	subi	r30, 0xB9	; 185
    4ede:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee0:	10 82       	st	Z, r1
	return Local_enuErrorState;
    4ee2:	fe 01       	movw	r30, r28
    4ee4:	e9 5b       	subi	r30, 0xB9	; 185
    4ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee8:	80 81       	ld	r24, Z
    4eea:	29 96       	adiw	r28, 0x09	; 9
    4eec:	8f af       	std	Y+63, r24	; 0x3f
    4eee:	29 97       	sbiw	r28, 0x09	; 9
    4ef0:	29 96       	adiw	r28, 0x09	; 9
    4ef2:	8f ad       	ldd	r24, Y+63	; 0x3f
    4ef4:	29 97       	sbiw	r28, 0x09	; 9
}
    4ef6:	c8 5b       	subi	r28, 0xB8	; 184
    4ef8:	df 4f       	sbci	r29, 0xFF	; 255
    4efa:	0f b6       	in	r0, 0x3f	; 63
    4efc:	f8 94       	cli
    4efe:	de bf       	out	0x3e, r29	; 62
    4f00:	0f be       	out	0x3f, r0	; 63
    4f02:	cd bf       	out	0x3d, r28	; 61
    4f04:	cf 91       	pop	r28
    4f06:	df 91       	pop	r29
    4f08:	1f 91       	pop	r17
    4f0a:	0f 91       	pop	r16
    4f0c:	08 95       	ret

00004f0e <LCD_enuDisplayChar>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    4f0e:	df 93       	push	r29
    4f10:	cf 93       	push	r28
    4f12:	00 d0       	rcall	.+0      	; 0x4f14 <LCD_enuDisplayChar+0x6>
    4f14:	0f 92       	push	r0
    4f16:	cd b7       	in	r28, 0x3d	; 61
    4f18:	de b7       	in	r29, 0x3e	; 62
    4f1a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4f1c:	81 e0       	ldi	r24, 0x01	; 1
    4f1e:	89 83       	std	Y+1, r24	; 0x01
	
	/* Check position in case of we send data */
	LCD_vidCheckPosition();
    4f20:	0e 94 1b 2b 	call	0x5636	; 0x5636 <LCD_vidCheckPosition>
	
	/* RS --> High to write Data */
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8HIGH);
    4f24:	81 e0       	ldi	r24, 0x01	; 1
    4f26:	60 e0       	ldi	r22, 0x00	; 0
    4f28:	41 e0       	ldi	r20, 0x01	; 1
    4f2a:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    4f2e:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enuErrorState != ES_OK)
    4f30:	89 81       	ldd	r24, Y+1	; 0x01
    4f32:	88 23       	and	r24, r24
    4f34:	19 f0       	breq	.+6      	; 0x4f3c <LCD_enuDisplayChar+0x2e>
		return Local_enuErrorState;
    4f36:	89 81       	ldd	r24, Y+1	; 0x01
    4f38:	8b 83       	std	Y+3, r24	; 0x03
    4f3a:	0d c0       	rjmp	.+26     	; 0x4f56 <LCD_enuDisplayChar+0x48>
	
	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Data);
    4f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f3e:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <LCD_enuLatch>
    4f42:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enuErrorState != ES_OK)
    4f44:	89 81       	ldd	r24, Y+1	; 0x01
    4f46:	88 23       	and	r24, r24
    4f48:	19 f0       	breq	.+6      	; 0x4f50 <LCD_enuDisplayChar+0x42>
		return Local_enuErrorState;
    4f4a:	89 81       	ldd	r24, Y+1	; 0x01
    4f4c:	8b 83       	std	Y+3, r24	; 0x03
    4f4e:	03 c0       	rjmp	.+6      	; 0x4f56 <LCD_enuDisplayChar+0x48>
	
	Local_enuErrorState = ES_OK;
    4f50:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    4f52:	89 81       	ldd	r24, Y+1	; 0x01
    4f54:	8b 83       	std	Y+3, r24	; 0x03
    4f56:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4f58:	0f 90       	pop	r0
    4f5a:	0f 90       	pop	r0
    4f5c:	0f 90       	pop	r0
    4f5e:	cf 91       	pop	r28
    4f60:	df 91       	pop	r29
    4f62:	08 95       	ret

00004f64 <LCD_enuSendCommand>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    4f64:	df 93       	push	r29
    4f66:	cf 93       	push	r28
    4f68:	00 d0       	rcall	.+0      	; 0x4f6a <LCD_enuSendCommand+0x6>
    4f6a:	0f 92       	push	r0
    4f6c:	cd b7       	in	r28, 0x3d	; 61
    4f6e:	de b7       	in	r29, 0x3e	; 62
    4f70:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4f72:	81 e0       	ldi	r24, 0x01	; 1
    4f74:	89 83       	std	Y+1, r24	; 0x01
	
	/* RS --> LOW to write Command */
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8LOW);
    4f76:	81 e0       	ldi	r24, 0x01	; 1
    4f78:	60 e0       	ldi	r22, 0x00	; 0
    4f7a:	40 e0       	ldi	r20, 0x00	; 0
    4f7c:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    4f80:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enuErrorState != ES_OK)
    4f82:	89 81       	ldd	r24, Y+1	; 0x01
    4f84:	88 23       	and	r24, r24
    4f86:	19 f0       	breq	.+6      	; 0x4f8e <LCD_enuSendCommand+0x2a>
		return Local_enuErrorState;
    4f88:	89 81       	ldd	r24, Y+1	; 0x01
    4f8a:	8b 83       	std	Y+3, r24	; 0x03
    4f8c:	0d c0       	rjmp	.+26     	; 0x4fa8 <LCD_enuSendCommand+0x44>
	
	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Command);
    4f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    4f90:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <LCD_enuLatch>
    4f94:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enuErrorState != ES_OK)
    4f96:	89 81       	ldd	r24, Y+1	; 0x01
    4f98:	88 23       	and	r24, r24
    4f9a:	19 f0       	breq	.+6      	; 0x4fa2 <LCD_enuSendCommand+0x3e>
		return Local_enuErrorState;
    4f9c:	89 81       	ldd	r24, Y+1	; 0x01
    4f9e:	8b 83       	std	Y+3, r24	; 0x03
    4fa0:	03 c0       	rjmp	.+6      	; 0x4fa8 <LCD_enuSendCommand+0x44>
	
	Local_enuErrorState = ES_OK;
    4fa2:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    4fa4:	89 81       	ldd	r24, Y+1	; 0x01
    4fa6:	8b 83       	std	Y+3, r24	; 0x03
    4fa8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4faa:	0f 90       	pop	r0
    4fac:	0f 90       	pop	r0
    4fae:	0f 90       	pop	r0
    4fb0:	cf 91       	pop	r28
    4fb2:	df 91       	pop	r29
    4fb4:	08 95       	ret

00004fb6 <LCD_enuLatch>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
static ES_t LCD_enuLatch(u8 Copy_u8Data)
{	
    4fb6:	df 93       	push	r29
    4fb8:	cf 93       	push	r28
    4fba:	cd b7       	in	r28, 0x3d	; 61
    4fbc:	de b7       	in	r29, 0x3e	; 62
    4fbe:	ae 97       	sbiw	r28, 0x2e	; 46
    4fc0:	0f b6       	in	r0, 0x3f	; 63
    4fc2:	f8 94       	cli
    4fc4:	de bf       	out	0x3e, r29	; 62
    4fc6:	0f be       	out	0x3f, r0	; 63
    4fc8:	cd bf       	out	0x3d, r28	; 61
    4fca:	8d a7       	std	Y+45, r24	; 0x2d
	ES_t Local_enuErrorState = ES_NOK;
    4fcc:	81 e0       	ldi	r24, 0x01	; 1
    4fce:	8c a7       	std	Y+44, r24	; 0x2c
	
	/* RW --> LOW to write */
	Local_enuErrorState = DIO_enuSetPinVal(RW_PORT, RW_PIN, DIO_u8LOW);
    4fd0:	81 e0       	ldi	r24, 0x01	; 1
    4fd2:	61 e0       	ldi	r22, 0x01	; 1
    4fd4:	40 e0       	ldi	r20, 0x00	; 0
    4fd6:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    4fda:	8c a7       	std	Y+44, r24	; 0x2c
	if(Local_enuErrorState != ES_OK)
    4fdc:	8c a5       	ldd	r24, Y+44	; 0x2c
    4fde:	88 23       	and	r24, r24
    4fe0:	19 f0       	breq	.+6      	; 0x4fe8 <LCD_enuLatch+0x32>
		return Local_enuErrorState;
    4fe2:	8c a5       	ldd	r24, Y+44	; 0x2c
    4fe4:	8e a7       	std	Y+46, r24	; 0x2e
    4fe6:	02 c2       	rjmp	.+1028   	; 0x53ec <LCD_enuLatch+0x436>
	
	/* Enable --> HIGH */
	Local_enuErrorState = DIO_enuSetPinVal(EN_PORT, EN_PIN, DIO_u8HIGH);
    4fe8:	81 e0       	ldi	r24, 0x01	; 1
    4fea:	62 e0       	ldi	r22, 0x02	; 2
    4fec:	41 e0       	ldi	r20, 0x01	; 1
    4fee:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    4ff2:	8c a7       	std	Y+44, r24	; 0x2c
	if(Local_enuErrorState != ES_OK)
    4ff4:	8c a5       	ldd	r24, Y+44	; 0x2c
    4ff6:	88 23       	and	r24, r24
    4ff8:	19 f0       	breq	.+6      	; 0x5000 <LCD_enuLatch+0x4a>
		return Local_enuErrorState;
    4ffa:	8c a5       	ldd	r24, Y+44	; 0x2c
    4ffc:	8e a7       	std	Y+46, r24	; 0x2e
    4ffe:	f6 c1       	rjmp	.+1004   	; 0x53ec <LCD_enuLatch+0x436>
	Local_enuErrorState = DIO_enuSetPinVal(D0_PORT, D0_PIN, ((Copy_u8Data >> D0_POS) & MASK_BIT));
	if(Local_enuErrorState != ES_OK)
		return Local_enuErrorState;
		
	#elif LCD_MODE == FOUR_BIT
	u8 Local_u8FourBitData = 0;
    5000:	1b a6       	std	Y+43, r1	; 0x2b
	/* Send Data from D7..D4 */
	Local_u8FourBitData = (Copy_u8Data & 0xF0);
    5002:	8d a5       	ldd	r24, Y+45	; 0x2d
    5004:	80 7f       	andi	r24, 0xF0	; 240
    5006:	8b a7       	std	Y+43, r24	; 0x2b
	Local_enuErrorState = DIO_enuSetPinVal(D7_PORT, D7_PIN, ((Local_u8FourBitData >> D7_POS) & MASK_BIT));
    5008:	8b a5       	ldd	r24, Y+43	; 0x2b
    500a:	98 2f       	mov	r25, r24
    500c:	99 1f       	adc	r25, r25
    500e:	99 27       	eor	r25, r25
    5010:	99 1f       	adc	r25, r25
    5012:	81 e0       	ldi	r24, 0x01	; 1
    5014:	67 e0       	ldi	r22, 0x07	; 7
    5016:	49 2f       	mov	r20, r25
    5018:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    501c:	8c a7       	std	Y+44, r24	; 0x2c
	if(Local_enuErrorState != ES_OK)
    501e:	8c a5       	ldd	r24, Y+44	; 0x2c
    5020:	88 23       	and	r24, r24
    5022:	19 f0       	breq	.+6      	; 0x502a <LCD_enuLatch+0x74>
		return Local_enuErrorState;
    5024:	8c a5       	ldd	r24, Y+44	; 0x2c
    5026:	8e a7       	std	Y+46, r24	; 0x2e
    5028:	e1 c1       	rjmp	.+962    	; 0x53ec <LCD_enuLatch+0x436>
		
	Local_enuErrorState = DIO_enuSetPinVal(D6_PORT, D6_PIN, ((Local_u8FourBitData >> D6_POS) & MASK_BIT));
    502a:	8b a5       	ldd	r24, Y+43	; 0x2b
    502c:	82 95       	swap	r24
    502e:	86 95       	lsr	r24
    5030:	86 95       	lsr	r24
    5032:	83 70       	andi	r24, 0x03	; 3
    5034:	98 2f       	mov	r25, r24
    5036:	91 70       	andi	r25, 0x01	; 1
    5038:	81 e0       	ldi	r24, 0x01	; 1
    503a:	66 e0       	ldi	r22, 0x06	; 6
    503c:	49 2f       	mov	r20, r25
    503e:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    5042:	8c a7       	std	Y+44, r24	; 0x2c
	if(Local_enuErrorState != ES_OK)
    5044:	8c a5       	ldd	r24, Y+44	; 0x2c
    5046:	88 23       	and	r24, r24
    5048:	19 f0       	breq	.+6      	; 0x5050 <LCD_enuLatch+0x9a>
		return Local_enuErrorState;
    504a:	8c a5       	ldd	r24, Y+44	; 0x2c
    504c:	8e a7       	std	Y+46, r24	; 0x2e
    504e:	ce c1       	rjmp	.+924    	; 0x53ec <LCD_enuLatch+0x436>
		
	Local_enuErrorState = DIO_enuSetPinVal(D5_PORT, D5_PIN, ((Local_u8FourBitData >> D5_POS) & MASK_BIT));
    5050:	8b a5       	ldd	r24, Y+43	; 0x2b
    5052:	82 95       	swap	r24
    5054:	86 95       	lsr	r24
    5056:	87 70       	andi	r24, 0x07	; 7
    5058:	98 2f       	mov	r25, r24
    505a:	91 70       	andi	r25, 0x01	; 1
    505c:	81 e0       	ldi	r24, 0x01	; 1
    505e:	65 e0       	ldi	r22, 0x05	; 5
    5060:	49 2f       	mov	r20, r25
    5062:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    5066:	8c a7       	std	Y+44, r24	; 0x2c
	if(Local_enuErrorState != ES_OK)
    5068:	8c a5       	ldd	r24, Y+44	; 0x2c
    506a:	88 23       	and	r24, r24
    506c:	19 f0       	breq	.+6      	; 0x5074 <LCD_enuLatch+0xbe>
		return Local_enuErrorState;
    506e:	8c a5       	ldd	r24, Y+44	; 0x2c
    5070:	8e a7       	std	Y+46, r24	; 0x2e
    5072:	bc c1       	rjmp	.+888    	; 0x53ec <LCD_enuLatch+0x436>
		
	Local_enuErrorState = DIO_enuSetPinVal(D4_PORT, D4_PIN, ((Local_u8FourBitData >> D4_POS) & MASK_BIT));
    5074:	8b a5       	ldd	r24, Y+43	; 0x2b
    5076:	82 95       	swap	r24
    5078:	8f 70       	andi	r24, 0x0F	; 15
    507a:	98 2f       	mov	r25, r24
    507c:	91 70       	andi	r25, 0x01	; 1
    507e:	81 e0       	ldi	r24, 0x01	; 1
    5080:	64 e0       	ldi	r22, 0x04	; 4
    5082:	49 2f       	mov	r20, r25
    5084:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    5088:	8c a7       	std	Y+44, r24	; 0x2c
	if(Local_enuErrorState != ES_OK)
    508a:	8c a5       	ldd	r24, Y+44	; 0x2c
    508c:	88 23       	and	r24, r24
    508e:	19 f0       	breq	.+6      	; 0x5096 <LCD_enuLatch+0xe0>
		return Local_enuErrorState;
    5090:	8c a5       	ldd	r24, Y+44	; 0x2c
    5092:	8e a7       	std	Y+46, r24	; 0x2e
    5094:	ab c1       	rjmp	.+854    	; 0x53ec <LCD_enuLatch+0x436>
	
	LCD_vidTrigger_LATCH();
    5096:	0e 94 00 2a 	call	0x5400	; 0x5400 <LCD_vidTrigger_LATCH>
    509a:	80 e0       	ldi	r24, 0x00	; 0
    509c:	90 e0       	ldi	r25, 0x00	; 0
    509e:	a0 e8       	ldi	r26, 0x80	; 128
    50a0:	bf e3       	ldi	r27, 0x3F	; 63
    50a2:	8f a3       	std	Y+39, r24	; 0x27
    50a4:	98 a7       	std	Y+40, r25	; 0x28
    50a6:	a9 a7       	std	Y+41, r26	; 0x29
    50a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50aa:	6f a1       	ldd	r22, Y+39	; 0x27
    50ac:	78 a5       	ldd	r23, Y+40	; 0x28
    50ae:	89 a5       	ldd	r24, Y+41	; 0x29
    50b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    50b2:	20 e0       	ldi	r18, 0x00	; 0
    50b4:	30 e0       	ldi	r19, 0x00	; 0
    50b6:	4a e7       	ldi	r20, 0x7A	; 122
    50b8:	53 e4       	ldi	r21, 0x43	; 67
    50ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50be:	dc 01       	movw	r26, r24
    50c0:	cb 01       	movw	r24, r22
    50c2:	8b a3       	std	Y+35, r24	; 0x23
    50c4:	9c a3       	std	Y+36, r25	; 0x24
    50c6:	ad a3       	std	Y+37, r26	; 0x25
    50c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    50ca:	6b a1       	ldd	r22, Y+35	; 0x23
    50cc:	7c a1       	ldd	r23, Y+36	; 0x24
    50ce:	8d a1       	ldd	r24, Y+37	; 0x25
    50d0:	9e a1       	ldd	r25, Y+38	; 0x26
    50d2:	20 e0       	ldi	r18, 0x00	; 0
    50d4:	30 e0       	ldi	r19, 0x00	; 0
    50d6:	40 e8       	ldi	r20, 0x80	; 128
    50d8:	5f e3       	ldi	r21, 0x3F	; 63
    50da:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    50de:	88 23       	and	r24, r24
    50e0:	2c f4       	brge	.+10     	; 0x50ec <LCD_enuLatch+0x136>
		__ticks = 1;
    50e2:	81 e0       	ldi	r24, 0x01	; 1
    50e4:	90 e0       	ldi	r25, 0x00	; 0
    50e6:	9a a3       	std	Y+34, r25	; 0x22
    50e8:	89 a3       	std	Y+33, r24	; 0x21
    50ea:	3f c0       	rjmp	.+126    	; 0x516a <LCD_enuLatch+0x1b4>
	else if (__tmp > 65535)
    50ec:	6b a1       	ldd	r22, Y+35	; 0x23
    50ee:	7c a1       	ldd	r23, Y+36	; 0x24
    50f0:	8d a1       	ldd	r24, Y+37	; 0x25
    50f2:	9e a1       	ldd	r25, Y+38	; 0x26
    50f4:	20 e0       	ldi	r18, 0x00	; 0
    50f6:	3f ef       	ldi	r19, 0xFF	; 255
    50f8:	4f e7       	ldi	r20, 0x7F	; 127
    50fa:	57 e4       	ldi	r21, 0x47	; 71
    50fc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5100:	18 16       	cp	r1, r24
    5102:	4c f5       	brge	.+82     	; 0x5156 <LCD_enuLatch+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5104:	6f a1       	ldd	r22, Y+39	; 0x27
    5106:	78 a5       	ldd	r23, Y+40	; 0x28
    5108:	89 a5       	ldd	r24, Y+41	; 0x29
    510a:	9a a5       	ldd	r25, Y+42	; 0x2a
    510c:	20 e0       	ldi	r18, 0x00	; 0
    510e:	30 e0       	ldi	r19, 0x00	; 0
    5110:	40 e2       	ldi	r20, 0x20	; 32
    5112:	51 e4       	ldi	r21, 0x41	; 65
    5114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5118:	dc 01       	movw	r26, r24
    511a:	cb 01       	movw	r24, r22
    511c:	bc 01       	movw	r22, r24
    511e:	cd 01       	movw	r24, r26
    5120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5124:	dc 01       	movw	r26, r24
    5126:	cb 01       	movw	r24, r22
    5128:	9a a3       	std	Y+34, r25	; 0x22
    512a:	89 a3       	std	Y+33, r24	; 0x21
    512c:	0f c0       	rjmp	.+30     	; 0x514c <LCD_enuLatch+0x196>
    512e:	89 e1       	ldi	r24, 0x19	; 25
    5130:	90 e0       	ldi	r25, 0x00	; 0
    5132:	98 a3       	std	Y+32, r25	; 0x20
    5134:	8f 8f       	std	Y+31, r24	; 0x1f
    5136:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5138:	98 a1       	ldd	r25, Y+32	; 0x20
    513a:	01 97       	sbiw	r24, 0x01	; 1
    513c:	f1 f7       	brne	.-4      	; 0x513a <LCD_enuLatch+0x184>
    513e:	98 a3       	std	Y+32, r25	; 0x20
    5140:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5142:	89 a1       	ldd	r24, Y+33	; 0x21
    5144:	9a a1       	ldd	r25, Y+34	; 0x22
    5146:	01 97       	sbiw	r24, 0x01	; 1
    5148:	9a a3       	std	Y+34, r25	; 0x22
    514a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    514c:	89 a1       	ldd	r24, Y+33	; 0x21
    514e:	9a a1       	ldd	r25, Y+34	; 0x22
    5150:	00 97       	sbiw	r24, 0x00	; 0
    5152:	69 f7       	brne	.-38     	; 0x512e <LCD_enuLatch+0x178>
    5154:	14 c0       	rjmp	.+40     	; 0x517e <LCD_enuLatch+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5156:	6b a1       	ldd	r22, Y+35	; 0x23
    5158:	7c a1       	ldd	r23, Y+36	; 0x24
    515a:	8d a1       	ldd	r24, Y+37	; 0x25
    515c:	9e a1       	ldd	r25, Y+38	; 0x26
    515e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5162:	dc 01       	movw	r26, r24
    5164:	cb 01       	movw	r24, r22
    5166:	9a a3       	std	Y+34, r25	; 0x22
    5168:	89 a3       	std	Y+33, r24	; 0x21
    516a:	89 a1       	ldd	r24, Y+33	; 0x21
    516c:	9a a1       	ldd	r25, Y+34	; 0x22
    516e:	9e 8f       	std	Y+30, r25	; 0x1e
    5170:	8d 8f       	std	Y+29, r24	; 0x1d
    5172:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5174:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5176:	01 97       	sbiw	r24, 0x01	; 1
    5178:	f1 f7       	brne	.-4      	; 0x5176 <LCD_enuLatch+0x1c0>
    517a:	9e 8f       	std	Y+30, r25	; 0x1e
    517c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	
	/* Send Data from D3..D0 */
	Local_u8FourBitData = (Copy_u8Data << FOUR_BIT);
    517e:	8d a5       	ldd	r24, Y+45	; 0x2d
    5180:	82 95       	swap	r24
    5182:	80 7f       	andi	r24, 0xF0	; 240
    5184:	8b a7       	std	Y+43, r24	; 0x2b
	Local_enuErrorState = DIO_enuSetPinVal(D7_PORT, D7_PIN, ((Local_u8FourBitData >> D7_POS) & MASK_BIT));
    5186:	8b a5       	ldd	r24, Y+43	; 0x2b
    5188:	98 2f       	mov	r25, r24
    518a:	99 1f       	adc	r25, r25
    518c:	99 27       	eor	r25, r25
    518e:	99 1f       	adc	r25, r25
    5190:	81 e0       	ldi	r24, 0x01	; 1
    5192:	67 e0       	ldi	r22, 0x07	; 7
    5194:	49 2f       	mov	r20, r25
    5196:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    519a:	8c a7       	std	Y+44, r24	; 0x2c
	if(Local_enuErrorState != ES_OK)
    519c:	8c a5       	ldd	r24, Y+44	; 0x2c
    519e:	88 23       	and	r24, r24
    51a0:	19 f0       	breq	.+6      	; 0x51a8 <LCD_enuLatch+0x1f2>
		return Local_enuErrorState;
    51a2:	8c a5       	ldd	r24, Y+44	; 0x2c
    51a4:	8e a7       	std	Y+46, r24	; 0x2e
    51a6:	22 c1       	rjmp	.+580    	; 0x53ec <LCD_enuLatch+0x436>
		
	Local_enuErrorState = DIO_enuSetPinVal(D6_PORT, D6_PIN, ((Local_u8FourBitData >> D6_POS) & MASK_BIT));
    51a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    51aa:	82 95       	swap	r24
    51ac:	86 95       	lsr	r24
    51ae:	86 95       	lsr	r24
    51b0:	83 70       	andi	r24, 0x03	; 3
    51b2:	98 2f       	mov	r25, r24
    51b4:	91 70       	andi	r25, 0x01	; 1
    51b6:	81 e0       	ldi	r24, 0x01	; 1
    51b8:	66 e0       	ldi	r22, 0x06	; 6
    51ba:	49 2f       	mov	r20, r25
    51bc:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    51c0:	8c a7       	std	Y+44, r24	; 0x2c
	if(Local_enuErrorState != ES_OK)
    51c2:	8c a5       	ldd	r24, Y+44	; 0x2c
    51c4:	88 23       	and	r24, r24
    51c6:	19 f0       	breq	.+6      	; 0x51ce <LCD_enuLatch+0x218>
		return Local_enuErrorState;
    51c8:	8c a5       	ldd	r24, Y+44	; 0x2c
    51ca:	8e a7       	std	Y+46, r24	; 0x2e
    51cc:	0f c1       	rjmp	.+542    	; 0x53ec <LCD_enuLatch+0x436>
		
	Local_enuErrorState = DIO_enuSetPinVal(D5_PORT, D5_PIN, ((Local_u8FourBitData >> D5_POS) & MASK_BIT));
    51ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    51d0:	82 95       	swap	r24
    51d2:	86 95       	lsr	r24
    51d4:	87 70       	andi	r24, 0x07	; 7
    51d6:	98 2f       	mov	r25, r24
    51d8:	91 70       	andi	r25, 0x01	; 1
    51da:	81 e0       	ldi	r24, 0x01	; 1
    51dc:	65 e0       	ldi	r22, 0x05	; 5
    51de:	49 2f       	mov	r20, r25
    51e0:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    51e4:	8c a7       	std	Y+44, r24	; 0x2c
	if(Local_enuErrorState != ES_OK)
    51e6:	8c a5       	ldd	r24, Y+44	; 0x2c
    51e8:	88 23       	and	r24, r24
    51ea:	19 f0       	breq	.+6      	; 0x51f2 <LCD_enuLatch+0x23c>
		return Local_enuErrorState;
    51ec:	8c a5       	ldd	r24, Y+44	; 0x2c
    51ee:	8e a7       	std	Y+46, r24	; 0x2e
    51f0:	fd c0       	rjmp	.+506    	; 0x53ec <LCD_enuLatch+0x436>
		
	Local_enuErrorState = DIO_enuSetPinVal(D4_PORT, D4_PIN, ((Local_u8FourBitData >> D4_POS) & MASK_BIT));
    51f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    51f4:	82 95       	swap	r24
    51f6:	8f 70       	andi	r24, 0x0F	; 15
    51f8:	98 2f       	mov	r25, r24
    51fa:	91 70       	andi	r25, 0x01	; 1
    51fc:	81 e0       	ldi	r24, 0x01	; 1
    51fe:	64 e0       	ldi	r22, 0x04	; 4
    5200:	49 2f       	mov	r20, r25
    5202:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    5206:	8c a7       	std	Y+44, r24	; 0x2c
	if(Local_enuErrorState != ES_OK)
    5208:	8c a5       	ldd	r24, Y+44	; 0x2c
    520a:	88 23       	and	r24, r24
    520c:	19 f0       	breq	.+6      	; 0x5214 <LCD_enuLatch+0x25e>
		return Local_enuErrorState;
    520e:	8c a5       	ldd	r24, Y+44	; 0x2c
    5210:	8e a7       	std	Y+46, r24	; 0x2e
    5212:	ec c0       	rjmp	.+472    	; 0x53ec <LCD_enuLatch+0x436>
    5214:	80 e0       	ldi	r24, 0x00	; 0
    5216:	90 e0       	ldi	r25, 0x00	; 0
    5218:	a0 e8       	ldi	r26, 0x80	; 128
    521a:	bf e3       	ldi	r27, 0x3F	; 63
    521c:	89 8f       	std	Y+25, r24	; 0x19
    521e:	9a 8f       	std	Y+26, r25	; 0x1a
    5220:	ab 8f       	std	Y+27, r26	; 0x1b
    5222:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5224:	69 8d       	ldd	r22, Y+25	; 0x19
    5226:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5228:	8b 8d       	ldd	r24, Y+27	; 0x1b
    522a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    522c:	20 e0       	ldi	r18, 0x00	; 0
    522e:	30 e0       	ldi	r19, 0x00	; 0
    5230:	4a e7       	ldi	r20, 0x7A	; 122
    5232:	53 e4       	ldi	r21, 0x43	; 67
    5234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5238:	dc 01       	movw	r26, r24
    523a:	cb 01       	movw	r24, r22
    523c:	8d 8b       	std	Y+21, r24	; 0x15
    523e:	9e 8b       	std	Y+22, r25	; 0x16
    5240:	af 8b       	std	Y+23, r26	; 0x17
    5242:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5244:	6d 89       	ldd	r22, Y+21	; 0x15
    5246:	7e 89       	ldd	r23, Y+22	; 0x16
    5248:	8f 89       	ldd	r24, Y+23	; 0x17
    524a:	98 8d       	ldd	r25, Y+24	; 0x18
    524c:	20 e0       	ldi	r18, 0x00	; 0
    524e:	30 e0       	ldi	r19, 0x00	; 0
    5250:	40 e8       	ldi	r20, 0x80	; 128
    5252:	5f e3       	ldi	r21, 0x3F	; 63
    5254:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5258:	88 23       	and	r24, r24
    525a:	2c f4       	brge	.+10     	; 0x5266 <LCD_enuLatch+0x2b0>
		__ticks = 1;
    525c:	81 e0       	ldi	r24, 0x01	; 1
    525e:	90 e0       	ldi	r25, 0x00	; 0
    5260:	9c 8b       	std	Y+20, r25	; 0x14
    5262:	8b 8b       	std	Y+19, r24	; 0x13
    5264:	3f c0       	rjmp	.+126    	; 0x52e4 <LCD_enuLatch+0x32e>
	else if (__tmp > 65535)
    5266:	6d 89       	ldd	r22, Y+21	; 0x15
    5268:	7e 89       	ldd	r23, Y+22	; 0x16
    526a:	8f 89       	ldd	r24, Y+23	; 0x17
    526c:	98 8d       	ldd	r25, Y+24	; 0x18
    526e:	20 e0       	ldi	r18, 0x00	; 0
    5270:	3f ef       	ldi	r19, 0xFF	; 255
    5272:	4f e7       	ldi	r20, 0x7F	; 127
    5274:	57 e4       	ldi	r21, 0x47	; 71
    5276:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    527a:	18 16       	cp	r1, r24
    527c:	4c f5       	brge	.+82     	; 0x52d0 <LCD_enuLatch+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    527e:	69 8d       	ldd	r22, Y+25	; 0x19
    5280:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5282:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5284:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5286:	20 e0       	ldi	r18, 0x00	; 0
    5288:	30 e0       	ldi	r19, 0x00	; 0
    528a:	40 e2       	ldi	r20, 0x20	; 32
    528c:	51 e4       	ldi	r21, 0x41	; 65
    528e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5292:	dc 01       	movw	r26, r24
    5294:	cb 01       	movw	r24, r22
    5296:	bc 01       	movw	r22, r24
    5298:	cd 01       	movw	r24, r26
    529a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    529e:	dc 01       	movw	r26, r24
    52a0:	cb 01       	movw	r24, r22
    52a2:	9c 8b       	std	Y+20, r25	; 0x14
    52a4:	8b 8b       	std	Y+19, r24	; 0x13
    52a6:	0f c0       	rjmp	.+30     	; 0x52c6 <LCD_enuLatch+0x310>
    52a8:	89 e1       	ldi	r24, 0x19	; 25
    52aa:	90 e0       	ldi	r25, 0x00	; 0
    52ac:	9a 8b       	std	Y+18, r25	; 0x12
    52ae:	89 8b       	std	Y+17, r24	; 0x11
    52b0:	89 89       	ldd	r24, Y+17	; 0x11
    52b2:	9a 89       	ldd	r25, Y+18	; 0x12
    52b4:	01 97       	sbiw	r24, 0x01	; 1
    52b6:	f1 f7       	brne	.-4      	; 0x52b4 <LCD_enuLatch+0x2fe>
    52b8:	9a 8b       	std	Y+18, r25	; 0x12
    52ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52bc:	8b 89       	ldd	r24, Y+19	; 0x13
    52be:	9c 89       	ldd	r25, Y+20	; 0x14
    52c0:	01 97       	sbiw	r24, 0x01	; 1
    52c2:	9c 8b       	std	Y+20, r25	; 0x14
    52c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52c6:	8b 89       	ldd	r24, Y+19	; 0x13
    52c8:	9c 89       	ldd	r25, Y+20	; 0x14
    52ca:	00 97       	sbiw	r24, 0x00	; 0
    52cc:	69 f7       	brne	.-38     	; 0x52a8 <LCD_enuLatch+0x2f2>
    52ce:	14 c0       	rjmp	.+40     	; 0x52f8 <LCD_enuLatch+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52d0:	6d 89       	ldd	r22, Y+21	; 0x15
    52d2:	7e 89       	ldd	r23, Y+22	; 0x16
    52d4:	8f 89       	ldd	r24, Y+23	; 0x17
    52d6:	98 8d       	ldd	r25, Y+24	; 0x18
    52d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52dc:	dc 01       	movw	r26, r24
    52de:	cb 01       	movw	r24, r22
    52e0:	9c 8b       	std	Y+20, r25	; 0x14
    52e2:	8b 8b       	std	Y+19, r24	; 0x13
    52e4:	8b 89       	ldd	r24, Y+19	; 0x13
    52e6:	9c 89       	ldd	r25, Y+20	; 0x14
    52e8:	98 8b       	std	Y+16, r25	; 0x10
    52ea:	8f 87       	std	Y+15, r24	; 0x0f
    52ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    52ee:	98 89       	ldd	r25, Y+16	; 0x10
    52f0:	01 97       	sbiw	r24, 0x01	; 1
    52f2:	f1 f7       	brne	.-4      	; 0x52f0 <LCD_enuLatch+0x33a>
    52f4:	98 8b       	std	Y+16, r25	; 0x10
    52f6:	8f 87       	std	Y+15, r24	; 0x0f
	#else
	#error "LCD Mode has a wrong configuration"
	#endif
	
	_delay_ms(1);
	DIO_enuSetPinVal(EN_PORT, EN_PIN, DIO_u8LOW);
    52f8:	81 e0       	ldi	r24, 0x01	; 1
    52fa:	62 e0       	ldi	r22, 0x02	; 2
    52fc:	40 e0       	ldi	r20, 0x00	; 0
    52fe:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    5302:	80 e0       	ldi	r24, 0x00	; 0
    5304:	90 e0       	ldi	r25, 0x00	; 0
    5306:	a0 e8       	ldi	r26, 0x80	; 128
    5308:	bf e3       	ldi	r27, 0x3F	; 63
    530a:	8b 87       	std	Y+11, r24	; 0x0b
    530c:	9c 87       	std	Y+12, r25	; 0x0c
    530e:	ad 87       	std	Y+13, r26	; 0x0d
    5310:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5312:	6b 85       	ldd	r22, Y+11	; 0x0b
    5314:	7c 85       	ldd	r23, Y+12	; 0x0c
    5316:	8d 85       	ldd	r24, Y+13	; 0x0d
    5318:	9e 85       	ldd	r25, Y+14	; 0x0e
    531a:	20 e0       	ldi	r18, 0x00	; 0
    531c:	30 e0       	ldi	r19, 0x00	; 0
    531e:	4a e7       	ldi	r20, 0x7A	; 122
    5320:	53 e4       	ldi	r21, 0x43	; 67
    5322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5326:	dc 01       	movw	r26, r24
    5328:	cb 01       	movw	r24, r22
    532a:	8f 83       	std	Y+7, r24	; 0x07
    532c:	98 87       	std	Y+8, r25	; 0x08
    532e:	a9 87       	std	Y+9, r26	; 0x09
    5330:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5332:	6f 81       	ldd	r22, Y+7	; 0x07
    5334:	78 85       	ldd	r23, Y+8	; 0x08
    5336:	89 85       	ldd	r24, Y+9	; 0x09
    5338:	9a 85       	ldd	r25, Y+10	; 0x0a
    533a:	20 e0       	ldi	r18, 0x00	; 0
    533c:	30 e0       	ldi	r19, 0x00	; 0
    533e:	40 e8       	ldi	r20, 0x80	; 128
    5340:	5f e3       	ldi	r21, 0x3F	; 63
    5342:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5346:	88 23       	and	r24, r24
    5348:	2c f4       	brge	.+10     	; 0x5354 <LCD_enuLatch+0x39e>
		__ticks = 1;
    534a:	81 e0       	ldi	r24, 0x01	; 1
    534c:	90 e0       	ldi	r25, 0x00	; 0
    534e:	9e 83       	std	Y+6, r25	; 0x06
    5350:	8d 83       	std	Y+5, r24	; 0x05
    5352:	3f c0       	rjmp	.+126    	; 0x53d2 <LCD_enuLatch+0x41c>
	else if (__tmp > 65535)
    5354:	6f 81       	ldd	r22, Y+7	; 0x07
    5356:	78 85       	ldd	r23, Y+8	; 0x08
    5358:	89 85       	ldd	r24, Y+9	; 0x09
    535a:	9a 85       	ldd	r25, Y+10	; 0x0a
    535c:	20 e0       	ldi	r18, 0x00	; 0
    535e:	3f ef       	ldi	r19, 0xFF	; 255
    5360:	4f e7       	ldi	r20, 0x7F	; 127
    5362:	57 e4       	ldi	r21, 0x47	; 71
    5364:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5368:	18 16       	cp	r1, r24
    536a:	4c f5       	brge	.+82     	; 0x53be <LCD_enuLatch+0x408>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    536c:	6b 85       	ldd	r22, Y+11	; 0x0b
    536e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5370:	8d 85       	ldd	r24, Y+13	; 0x0d
    5372:	9e 85       	ldd	r25, Y+14	; 0x0e
    5374:	20 e0       	ldi	r18, 0x00	; 0
    5376:	30 e0       	ldi	r19, 0x00	; 0
    5378:	40 e2       	ldi	r20, 0x20	; 32
    537a:	51 e4       	ldi	r21, 0x41	; 65
    537c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5380:	dc 01       	movw	r26, r24
    5382:	cb 01       	movw	r24, r22
    5384:	bc 01       	movw	r22, r24
    5386:	cd 01       	movw	r24, r26
    5388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    538c:	dc 01       	movw	r26, r24
    538e:	cb 01       	movw	r24, r22
    5390:	9e 83       	std	Y+6, r25	; 0x06
    5392:	8d 83       	std	Y+5, r24	; 0x05
    5394:	0f c0       	rjmp	.+30     	; 0x53b4 <LCD_enuLatch+0x3fe>
    5396:	89 e1       	ldi	r24, 0x19	; 25
    5398:	90 e0       	ldi	r25, 0x00	; 0
    539a:	9c 83       	std	Y+4, r25	; 0x04
    539c:	8b 83       	std	Y+3, r24	; 0x03
    539e:	8b 81       	ldd	r24, Y+3	; 0x03
    53a0:	9c 81       	ldd	r25, Y+4	; 0x04
    53a2:	01 97       	sbiw	r24, 0x01	; 1
    53a4:	f1 f7       	brne	.-4      	; 0x53a2 <LCD_enuLatch+0x3ec>
    53a6:	9c 83       	std	Y+4, r25	; 0x04
    53a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53aa:	8d 81       	ldd	r24, Y+5	; 0x05
    53ac:	9e 81       	ldd	r25, Y+6	; 0x06
    53ae:	01 97       	sbiw	r24, 0x01	; 1
    53b0:	9e 83       	std	Y+6, r25	; 0x06
    53b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53b4:	8d 81       	ldd	r24, Y+5	; 0x05
    53b6:	9e 81       	ldd	r25, Y+6	; 0x06
    53b8:	00 97       	sbiw	r24, 0x00	; 0
    53ba:	69 f7       	brne	.-38     	; 0x5396 <LCD_enuLatch+0x3e0>
    53bc:	14 c0       	rjmp	.+40     	; 0x53e6 <LCD_enuLatch+0x430>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53be:	6f 81       	ldd	r22, Y+7	; 0x07
    53c0:	78 85       	ldd	r23, Y+8	; 0x08
    53c2:	89 85       	ldd	r24, Y+9	; 0x09
    53c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    53c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53ca:	dc 01       	movw	r26, r24
    53cc:	cb 01       	movw	r24, r22
    53ce:	9e 83       	std	Y+6, r25	; 0x06
    53d0:	8d 83       	std	Y+5, r24	; 0x05
    53d2:	8d 81       	ldd	r24, Y+5	; 0x05
    53d4:	9e 81       	ldd	r25, Y+6	; 0x06
    53d6:	9a 83       	std	Y+2, r25	; 0x02
    53d8:	89 83       	std	Y+1, r24	; 0x01
    53da:	89 81       	ldd	r24, Y+1	; 0x01
    53dc:	9a 81       	ldd	r25, Y+2	; 0x02
    53de:	01 97       	sbiw	r24, 0x01	; 1
    53e0:	f1 f7       	brne	.-4      	; 0x53de <LCD_enuLatch+0x428>
    53e2:	9a 83       	std	Y+2, r25	; 0x02
    53e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	
	Local_enuErrorState = ES_OK;
    53e6:	1c a6       	std	Y+44, r1	; 0x2c
	return Local_enuErrorState;
    53e8:	8c a5       	ldd	r24, Y+44	; 0x2c
    53ea:	8e a7       	std	Y+46, r24	; 0x2e
    53ec:	8e a5       	ldd	r24, Y+46	; 0x2e
}
    53ee:	ae 96       	adiw	r28, 0x2e	; 46
    53f0:	0f b6       	in	r0, 0x3f	; 63
    53f2:	f8 94       	cli
    53f4:	de bf       	out	0x3e, r29	; 62
    53f6:	0f be       	out	0x3f, r0	; 63
    53f8:	cd bf       	out	0x3d, r28	; 61
    53fa:	cf 91       	pop	r28
    53fc:	df 91       	pop	r29
    53fe:	08 95       	ret

00005400 <LCD_vidTrigger_LATCH>:

static void LCD_vidTrigger_LATCH(void)
{
    5400:	df 93       	push	r29
    5402:	cf 93       	push	r28
    5404:	cd b7       	in	r28, 0x3d	; 61
    5406:	de b7       	in	r29, 0x3e	; 62
    5408:	2e 97       	sbiw	r28, 0x0e	; 14
    540a:	0f b6       	in	r0, 0x3f	; 63
    540c:	f8 94       	cli
    540e:	de bf       	out	0x3e, r29	; 62
    5410:	0f be       	out	0x3f, r0	; 63
    5412:	cd bf       	out	0x3d, r28	; 61
	/* Enable EN --> it works at Rising Edge */
	DIO_enuSetPinVal(EN_PORT, EN_PIN, DIO_u8LOW);
    5414:	81 e0       	ldi	r24, 0x01	; 1
    5416:	62 e0       	ldi	r22, 0x02	; 2
    5418:	40 e0       	ldi	r20, 0x00	; 0
    541a:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    541e:	80 e0       	ldi	r24, 0x00	; 0
    5420:	90 e0       	ldi	r25, 0x00	; 0
    5422:	a0 e2       	ldi	r26, 0x20	; 32
    5424:	b1 e4       	ldi	r27, 0x41	; 65
    5426:	8b 87       	std	Y+11, r24	; 0x0b
    5428:	9c 87       	std	Y+12, r25	; 0x0c
    542a:	ad 87       	std	Y+13, r26	; 0x0d
    542c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    542e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5430:	7c 85       	ldd	r23, Y+12	; 0x0c
    5432:	8d 85       	ldd	r24, Y+13	; 0x0d
    5434:	9e 85       	ldd	r25, Y+14	; 0x0e
    5436:	20 e0       	ldi	r18, 0x00	; 0
    5438:	30 e0       	ldi	r19, 0x00	; 0
    543a:	4a e7       	ldi	r20, 0x7A	; 122
    543c:	53 e4       	ldi	r21, 0x43	; 67
    543e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5442:	dc 01       	movw	r26, r24
    5444:	cb 01       	movw	r24, r22
    5446:	8f 83       	std	Y+7, r24	; 0x07
    5448:	98 87       	std	Y+8, r25	; 0x08
    544a:	a9 87       	std	Y+9, r26	; 0x09
    544c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    544e:	6f 81       	ldd	r22, Y+7	; 0x07
    5450:	78 85       	ldd	r23, Y+8	; 0x08
    5452:	89 85       	ldd	r24, Y+9	; 0x09
    5454:	9a 85       	ldd	r25, Y+10	; 0x0a
    5456:	20 e0       	ldi	r18, 0x00	; 0
    5458:	30 e0       	ldi	r19, 0x00	; 0
    545a:	40 e8       	ldi	r20, 0x80	; 128
    545c:	5f e3       	ldi	r21, 0x3F	; 63
    545e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5462:	88 23       	and	r24, r24
    5464:	2c f4       	brge	.+10     	; 0x5470 <LCD_vidTrigger_LATCH+0x70>
		__ticks = 1;
    5466:	81 e0       	ldi	r24, 0x01	; 1
    5468:	90 e0       	ldi	r25, 0x00	; 0
    546a:	9e 83       	std	Y+6, r25	; 0x06
    546c:	8d 83       	std	Y+5, r24	; 0x05
    546e:	3f c0       	rjmp	.+126    	; 0x54ee <LCD_vidTrigger_LATCH+0xee>
	else if (__tmp > 65535)
    5470:	6f 81       	ldd	r22, Y+7	; 0x07
    5472:	78 85       	ldd	r23, Y+8	; 0x08
    5474:	89 85       	ldd	r24, Y+9	; 0x09
    5476:	9a 85       	ldd	r25, Y+10	; 0x0a
    5478:	20 e0       	ldi	r18, 0x00	; 0
    547a:	3f ef       	ldi	r19, 0xFF	; 255
    547c:	4f e7       	ldi	r20, 0x7F	; 127
    547e:	57 e4       	ldi	r21, 0x47	; 71
    5480:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5484:	18 16       	cp	r1, r24
    5486:	4c f5       	brge	.+82     	; 0x54da <LCD_vidTrigger_LATCH+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5488:	6b 85       	ldd	r22, Y+11	; 0x0b
    548a:	7c 85       	ldd	r23, Y+12	; 0x0c
    548c:	8d 85       	ldd	r24, Y+13	; 0x0d
    548e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5490:	20 e0       	ldi	r18, 0x00	; 0
    5492:	30 e0       	ldi	r19, 0x00	; 0
    5494:	40 e2       	ldi	r20, 0x20	; 32
    5496:	51 e4       	ldi	r21, 0x41	; 65
    5498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    549c:	dc 01       	movw	r26, r24
    549e:	cb 01       	movw	r24, r22
    54a0:	bc 01       	movw	r22, r24
    54a2:	cd 01       	movw	r24, r26
    54a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54a8:	dc 01       	movw	r26, r24
    54aa:	cb 01       	movw	r24, r22
    54ac:	9e 83       	std	Y+6, r25	; 0x06
    54ae:	8d 83       	std	Y+5, r24	; 0x05
    54b0:	0f c0       	rjmp	.+30     	; 0x54d0 <LCD_vidTrigger_LATCH+0xd0>
    54b2:	89 e1       	ldi	r24, 0x19	; 25
    54b4:	90 e0       	ldi	r25, 0x00	; 0
    54b6:	9c 83       	std	Y+4, r25	; 0x04
    54b8:	8b 83       	std	Y+3, r24	; 0x03
    54ba:	8b 81       	ldd	r24, Y+3	; 0x03
    54bc:	9c 81       	ldd	r25, Y+4	; 0x04
    54be:	01 97       	sbiw	r24, 0x01	; 1
    54c0:	f1 f7       	brne	.-4      	; 0x54be <LCD_vidTrigger_LATCH+0xbe>
    54c2:	9c 83       	std	Y+4, r25	; 0x04
    54c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54c6:	8d 81       	ldd	r24, Y+5	; 0x05
    54c8:	9e 81       	ldd	r25, Y+6	; 0x06
    54ca:	01 97       	sbiw	r24, 0x01	; 1
    54cc:	9e 83       	std	Y+6, r25	; 0x06
    54ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54d0:	8d 81       	ldd	r24, Y+5	; 0x05
    54d2:	9e 81       	ldd	r25, Y+6	; 0x06
    54d4:	00 97       	sbiw	r24, 0x00	; 0
    54d6:	69 f7       	brne	.-38     	; 0x54b2 <LCD_vidTrigger_LATCH+0xb2>
    54d8:	14 c0       	rjmp	.+40     	; 0x5502 <LCD_vidTrigger_LATCH+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54da:	6f 81       	ldd	r22, Y+7	; 0x07
    54dc:	78 85       	ldd	r23, Y+8	; 0x08
    54de:	89 85       	ldd	r24, Y+9	; 0x09
    54e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    54e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54e6:	dc 01       	movw	r26, r24
    54e8:	cb 01       	movw	r24, r22
    54ea:	9e 83       	std	Y+6, r25	; 0x06
    54ec:	8d 83       	std	Y+5, r24	; 0x05
    54ee:	8d 81       	ldd	r24, Y+5	; 0x05
    54f0:	9e 81       	ldd	r25, Y+6	; 0x06
    54f2:	9a 83       	std	Y+2, r25	; 0x02
    54f4:	89 83       	std	Y+1, r24	; 0x01
    54f6:	89 81       	ldd	r24, Y+1	; 0x01
    54f8:	9a 81       	ldd	r25, Y+2	; 0x02
    54fa:	01 97       	sbiw	r24, 0x01	; 1
    54fc:	f1 f7       	brne	.-4      	; 0x54fa <LCD_vidTrigger_LATCH+0xfa>
    54fe:	9a 83       	std	Y+2, r25	; 0x02
    5500:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinVal(EN_PORT, EN_PIN, DIO_u8HIGH);
    5502:	81 e0       	ldi	r24, 0x01	; 1
    5504:	62 e0       	ldi	r22, 0x02	; 2
    5506:	41 e0       	ldi	r20, 0x01	; 1
    5508:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
}
    550c:	2e 96       	adiw	r28, 0x0e	; 14
    550e:	0f b6       	in	r0, 0x3f	; 63
    5510:	f8 94       	cli
    5512:	de bf       	out	0x3e, r29	; 62
    5514:	0f be       	out	0x3f, r0	; 63
    5516:	cd bf       	out	0x3d, r28	; 61
    5518:	cf 91       	pop	r28
    551a:	df 91       	pop	r29
    551c:	08 95       	ret

0000551e <LCD_inlenuSendCommand>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
static inline ES_t LCD_inlenuSendCommand(u8 Copy_u8Command)
{
    551e:	df 93       	push	r29
    5520:	cf 93       	push	r28
    5522:	00 d0       	rcall	.+0      	; 0x5524 <LCD_inlenuSendCommand+0x6>
    5524:	0f 92       	push	r0
    5526:	cd b7       	in	r28, 0x3d	; 61
    5528:	de b7       	in	r29, 0x3e	; 62
    552a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    552c:	81 e0       	ldi	r24, 0x01	; 1
    552e:	89 83       	std	Y+1, r24	; 0x01
		
	/* RS --> LOW to write Command */
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8LOW);
    5530:	81 e0       	ldi	r24, 0x01	; 1
    5532:	60 e0       	ldi	r22, 0x00	; 0
    5534:	40 e0       	ldi	r20, 0x00	; 0
    5536:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    553a:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enuErrorState != ES_OK)
    553c:	89 81       	ldd	r24, Y+1	; 0x01
    553e:	88 23       	and	r24, r24
    5540:	19 f0       	breq	.+6      	; 0x5548 <LCD_inlenuSendCommand+0x2a>
		return Local_enuErrorState;	
    5542:	89 81       	ldd	r24, Y+1	; 0x01
    5544:	8b 83       	std	Y+3, r24	; 0x03
    5546:	0d c0       	rjmp	.+26     	; 0x5562 <LCD_inlenuSendCommand+0x44>

	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Command);
    5548:	8a 81       	ldd	r24, Y+2	; 0x02
    554a:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <LCD_enuLatch>
    554e:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enuErrorState != ES_OK)
    5550:	89 81       	ldd	r24, Y+1	; 0x01
    5552:	88 23       	and	r24, r24
    5554:	19 f0       	breq	.+6      	; 0x555c <LCD_inlenuSendCommand+0x3e>
		return Local_enuErrorState;
    5556:	89 81       	ldd	r24, Y+1	; 0x01
    5558:	8b 83       	std	Y+3, r24	; 0x03
    555a:	03 c0       	rjmp	.+6      	; 0x5562 <LCD_inlenuSendCommand+0x44>
	
	Local_enuErrorState = ES_OK;	
    555c:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    555e:	89 81       	ldd	r24, Y+1	; 0x01
    5560:	8b 83       	std	Y+3, r24	; 0x03
    5562:	8b 81       	ldd	r24, Y+3	; 0x03
}
    5564:	0f 90       	pop	r0
    5566:	0f 90       	pop	r0
    5568:	0f 90       	pop	r0
    556a:	cf 91       	pop	r28
    556c:	df 91       	pop	r29
    556e:	08 95       	ret

00005570 <LCD_enuGoToPosition>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuGoToPosition(u8 Copy_u8Line, u8 Copy_u8Position)
{
    5570:	df 93       	push	r29
    5572:	cf 93       	push	r28
    5574:	00 d0       	rcall	.+0      	; 0x5576 <LCD_enuGoToPosition+0x6>
    5576:	00 d0       	rcall	.+0      	; 0x5578 <LCD_enuGoToPosition+0x8>
    5578:	cd b7       	in	r28, 0x3d	; 61
    557a:	de b7       	in	r29, 0x3e	; 62
    557c:	8a 83       	std	Y+2, r24	; 0x02
    557e:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_enuErrorState = ES_NOK;
    5580:	81 e0       	ldi	r24, 0x01	; 1
    5582:	89 83       	std	Y+1, r24	; 0x01

    if (Copy_u8Position < 20) // Check if position is within the line range
    5584:	8b 81       	ldd	r24, Y+3	; 0x03
    5586:	84 31       	cpi	r24, 0x14	; 20
    5588:	08 f0       	brcs	.+2      	; 0x558c <LCD_enuGoToPosition+0x1c>
    558a:	4a c0       	rjmp	.+148    	; 0x5620 <LCD_enuGoToPosition+0xb0>
    {
        if (Copy_u8Line == LCD_FIRST_LINE)
    558c:	8a 81       	ldd	r24, Y+2	; 0x02
    558e:	88 23       	and	r24, r24
    5590:	79 f4       	brne	.+30     	; 0x55b0 <LCD_enuGoToPosition+0x40>
        {
            Local_enuErrorState = LCD_inlenuSendCommand(LCD_BEGIN_AT_FIRST_ROW + Copy_u8Position);
    5592:	8b 81       	ldd	r24, Y+3	; 0x03
    5594:	80 58       	subi	r24, 0x80	; 128
    5596:	0e 94 8f 2a 	call	0x551e	; 0x551e <LCD_inlenuSendCommand>
    559a:	89 83       	std	Y+1, r24	; 0x01
            if (Local_enuErrorState != ES_OK)
    559c:	89 81       	ldd	r24, Y+1	; 0x01
    559e:	88 23       	and	r24, r24
    55a0:	19 f0       	breq	.+6      	; 0x55a8 <LCD_enuGoToPosition+0x38>
                return Local_enuErrorState;
    55a2:	89 81       	ldd	r24, Y+1	; 0x01
    55a4:	8c 83       	std	Y+4, r24	; 0x04
    55a6:	3f c0       	rjmp	.+126    	; 0x5626 <LCD_enuGoToPosition+0xb6>

            LCD_u8PosCounter = Copy_u8Position;
    55a8:	8b 81       	ldd	r24, Y+3	; 0x03
    55aa:	80 93 3a 02 	sts	0x023A, r24
    55ae:	38 c0       	rjmp	.+112    	; 0x5620 <LCD_enuGoToPosition+0xb0>
        }
        else if (Copy_u8Line == LCD_SECOND_LINE)
    55b0:	8a 81       	ldd	r24, Y+2	; 0x02
    55b2:	81 30       	cpi	r24, 0x01	; 1
    55b4:	81 f4       	brne	.+32     	; 0x55d6 <LCD_enuGoToPosition+0x66>
        {
            Local_enuErrorState = LCD_inlenuSendCommand(LCD_BEGIN_AT_SECOND_ROW + Copy_u8Position);
    55b6:	8b 81       	ldd	r24, Y+3	; 0x03
    55b8:	80 54       	subi	r24, 0x40	; 64
    55ba:	0e 94 8f 2a 	call	0x551e	; 0x551e <LCD_inlenuSendCommand>
    55be:	89 83       	std	Y+1, r24	; 0x01
            if (Local_enuErrorState != ES_OK)
    55c0:	89 81       	ldd	r24, Y+1	; 0x01
    55c2:	88 23       	and	r24, r24
    55c4:	19 f0       	breq	.+6      	; 0x55cc <LCD_enuGoToPosition+0x5c>
                return Local_enuErrorState;
    55c6:	89 81       	ldd	r24, Y+1	; 0x01
    55c8:	8c 83       	std	Y+4, r24	; 0x04
    55ca:	2d c0       	rjmp	.+90     	; 0x5626 <LCD_enuGoToPosition+0xb6>

            LCD_u8PosCounter = Copy_u8Position + 20;
    55cc:	8b 81       	ldd	r24, Y+3	; 0x03
    55ce:	8c 5e       	subi	r24, 0xEC	; 236
    55d0:	80 93 3a 02 	sts	0x023A, r24
    55d4:	25 c0       	rjmp	.+74     	; 0x5620 <LCD_enuGoToPosition+0xb0>
        }
        else if (Copy_u8Line == LCD_THIRD_LINE)
    55d6:	8a 81       	ldd	r24, Y+2	; 0x02
    55d8:	82 30       	cpi	r24, 0x02	; 2
    55da:	81 f4       	brne	.+32     	; 0x55fc <LCD_enuGoToPosition+0x8c>
        {
            Local_enuErrorState = LCD_inlenuSendCommand(LCD_BEGIN_AT_THIRD_ROW + Copy_u8Position);
    55dc:	8b 81       	ldd	r24, Y+3	; 0x03
    55de:	8c 56       	subi	r24, 0x6C	; 108
    55e0:	0e 94 8f 2a 	call	0x551e	; 0x551e <LCD_inlenuSendCommand>
    55e4:	89 83       	std	Y+1, r24	; 0x01
            if (Local_enuErrorState != ES_OK)
    55e6:	89 81       	ldd	r24, Y+1	; 0x01
    55e8:	88 23       	and	r24, r24
    55ea:	19 f0       	breq	.+6      	; 0x55f2 <LCD_enuGoToPosition+0x82>
                return Local_enuErrorState;
    55ec:	89 81       	ldd	r24, Y+1	; 0x01
    55ee:	8c 83       	std	Y+4, r24	; 0x04
    55f0:	1a c0       	rjmp	.+52     	; 0x5626 <LCD_enuGoToPosition+0xb6>

            LCD_u8PosCounter = Copy_u8Position + 40;
    55f2:	8b 81       	ldd	r24, Y+3	; 0x03
    55f4:	88 5d       	subi	r24, 0xD8	; 216
    55f6:	80 93 3a 02 	sts	0x023A, r24
    55fa:	12 c0       	rjmp	.+36     	; 0x5620 <LCD_enuGoToPosition+0xb0>
        }
        else if (Copy_u8Line == LCD_FOURTH_LINE)
    55fc:	8a 81       	ldd	r24, Y+2	; 0x02
    55fe:	83 30       	cpi	r24, 0x03	; 3
    5600:	79 f4       	brne	.+30     	; 0x5620 <LCD_enuGoToPosition+0xb0>
        {
            Local_enuErrorState = LCD_inlenuSendCommand(LCD_BEGIN_AT_FOURTH_ROW + Copy_u8Position);
    5602:	8b 81       	ldd	r24, Y+3	; 0x03
    5604:	8c 52       	subi	r24, 0x2C	; 44
    5606:	0e 94 8f 2a 	call	0x551e	; 0x551e <LCD_inlenuSendCommand>
    560a:	89 83       	std	Y+1, r24	; 0x01
            if (Local_enuErrorState != ES_OK)
    560c:	89 81       	ldd	r24, Y+1	; 0x01
    560e:	88 23       	and	r24, r24
    5610:	19 f0       	breq	.+6      	; 0x5618 <LCD_enuGoToPosition+0xa8>
                return Local_enuErrorState;
    5612:	89 81       	ldd	r24, Y+1	; 0x01
    5614:	8c 83       	std	Y+4, r24	; 0x04
    5616:	07 c0       	rjmp	.+14     	; 0x5626 <LCD_enuGoToPosition+0xb6>

            LCD_u8PosCounter = Copy_u8Position + 60;
    5618:	8b 81       	ldd	r24, Y+3	; 0x03
    561a:	84 5c       	subi	r24, 0xC4	; 196
    561c:	80 93 3a 02 	sts	0x023A, r24
        }
    }

    Local_enuErrorState = ES_OK;
    5620:	19 82       	std	Y+1, r1	; 0x01
    return Local_enuErrorState;
    5622:	89 81       	ldd	r24, Y+1	; 0x01
    5624:	8c 83       	std	Y+4, r24	; 0x04
    5626:	8c 81       	ldd	r24, Y+4	; 0x04
}
    5628:	0f 90       	pop	r0
    562a:	0f 90       	pop	r0
    562c:	0f 90       	pop	r0
    562e:	0f 90       	pop	r0
    5630:	cf 91       	pop	r28
    5632:	df 91       	pop	r29
    5634:	08 95       	ret

00005636 <LCD_vidCheckPosition>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
static void LCD_vidCheckPosition(void)
{
    5636:	df 93       	push	r29
    5638:	cf 93       	push	r28
    563a:	cd b7       	in	r28, 0x3d	; 61
    563c:	de b7       	in	r29, 0x3e	; 62
    if (LCD_u8PosCounter == 20)
    563e:	80 91 3a 02 	lds	r24, 0x023A
    5642:	84 31       	cpi	r24, 0x14	; 20
    5644:	51 f4       	brne	.+20     	; 0x565a <LCD_vidCheckPosition+0x24>
    {
        LCD_enuGoToPosition(LCD_SECOND_LINE, 0);
    5646:	81 e0       	ldi	r24, 0x01	; 1
    5648:	60 e0       	ldi	r22, 0x00	; 0
    564a:	0e 94 b8 2a 	call	0x5570	; 0x5570 <LCD_enuGoToPosition>
        LCD_u8PosCounter++;
    564e:	80 91 3a 02 	lds	r24, 0x023A
    5652:	8f 5f       	subi	r24, 0xFF	; 255
    5654:	80 93 3a 02 	sts	0x023A, r24
    5658:	2f c0       	rjmp	.+94     	; 0x56b8 <LCD_vidCheckPosition+0x82>
    }
    else if (LCD_u8PosCounter == 40)
    565a:	80 91 3a 02 	lds	r24, 0x023A
    565e:	88 32       	cpi	r24, 0x28	; 40
    5660:	51 f4       	brne	.+20     	; 0x5676 <LCD_vidCheckPosition+0x40>
    {
        LCD_enuGoToPosition(LCD_THIRD_LINE, 0);
    5662:	82 e0       	ldi	r24, 0x02	; 2
    5664:	60 e0       	ldi	r22, 0x00	; 0
    5666:	0e 94 b8 2a 	call	0x5570	; 0x5570 <LCD_enuGoToPosition>
        LCD_u8PosCounter++;
    566a:	80 91 3a 02 	lds	r24, 0x023A
    566e:	8f 5f       	subi	r24, 0xFF	; 255
    5670:	80 93 3a 02 	sts	0x023A, r24
    5674:	21 c0       	rjmp	.+66     	; 0x56b8 <LCD_vidCheckPosition+0x82>
    }
    else if (LCD_u8PosCounter == 60)
    5676:	80 91 3a 02 	lds	r24, 0x023A
    567a:	8c 33       	cpi	r24, 0x3C	; 60
    567c:	51 f4       	brne	.+20     	; 0x5692 <LCD_vidCheckPosition+0x5c>
    {
        LCD_enuGoToPosition(LCD_FOURTH_LINE, 0);
    567e:	83 e0       	ldi	r24, 0x03	; 3
    5680:	60 e0       	ldi	r22, 0x00	; 0
    5682:	0e 94 b8 2a 	call	0x5570	; 0x5570 <LCD_enuGoToPosition>
        LCD_u8PosCounter++;
    5686:	80 91 3a 02 	lds	r24, 0x023A
    568a:	8f 5f       	subi	r24, 0xFF	; 255
    568c:	80 93 3a 02 	sts	0x023A, r24
    5690:	13 c0       	rjmp	.+38     	; 0x56b8 <LCD_vidCheckPosition+0x82>
    }
    else if (LCD_u8PosCounter == 80)
    5692:	80 91 3a 02 	lds	r24, 0x023A
    5696:	80 35       	cpi	r24, 0x50	; 80
    5698:	51 f4       	brne	.+20     	; 0x56ae <LCD_vidCheckPosition+0x78>
    {
        LCD_inlenuSendCommand(LCD_Clear_Display);
    569a:	81 e0       	ldi	r24, 0x01	; 1
    569c:	0e 94 8f 2a 	call	0x551e	; 0x551e <LCD_inlenuSendCommand>
        LCD_enuGoToPosition(LCD_FIRST_LINE, 0);
    56a0:	80 e0       	ldi	r24, 0x00	; 0
    56a2:	60 e0       	ldi	r22, 0x00	; 0
    56a4:	0e 94 b8 2a 	call	0x5570	; 0x5570 <LCD_enuGoToPosition>
        LCD_u8PosCounter = 0;
    56a8:	10 92 3a 02 	sts	0x023A, r1
    56ac:	05 c0       	rjmp	.+10     	; 0x56b8 <LCD_vidCheckPosition+0x82>
    }
    else
    {
        LCD_u8PosCounter++;
    56ae:	80 91 3a 02 	lds	r24, 0x023A
    56b2:	8f 5f       	subi	r24, 0xFF	; 255
    56b4:	80 93 3a 02 	sts	0x023A, r24
    }
}
    56b8:	cf 91       	pop	r28
    56ba:	df 91       	pop	r29
    56bc:	08 95       	ret

000056be <LCD_vidClearScreen>:
 * @retval		: none
 * @note		: none
 ******************************************************************************
**/
void LCD_vidClearScreen(void)
{
    56be:	df 93       	push	r29
    56c0:	cf 93       	push	r28
    56c2:	cd b7       	in	r28, 0x3d	; 61
    56c4:	de b7       	in	r29, 0x3e	; 62
	LCD_inlenuSendCommand(LCD_Clear_Display);
    56c6:	81 e0       	ldi	r24, 0x01	; 1
    56c8:	0e 94 8f 2a 	call	0x551e	; 0x551e <LCD_inlenuSendCommand>
	LCD_u8PosCounter = 0;
    56cc:	10 92 3a 02 	sts	0x023A, r1
}
    56d0:	cf 91       	pop	r28
    56d2:	df 91       	pop	r29
    56d4:	08 95       	ret

000056d6 <LCD_enuWriteString>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuWriteString(u8 *Copy_pu8Str)
{
    56d6:	df 93       	push	r29
    56d8:	cf 93       	push	r28
    56da:	00 d0       	rcall	.+0      	; 0x56dc <LCD_enuWriteString+0x6>
    56dc:	00 d0       	rcall	.+0      	; 0x56de <LCD_enuWriteString+0x8>
    56de:	cd b7       	in	r28, 0x3d	; 61
    56e0:	de b7       	in	r29, 0x3e	; 62
    56e2:	9b 83       	std	Y+3, r25	; 0x03
    56e4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    56e6:	81 e0       	ldi	r24, 0x01	; 1
    56e8:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_pu8Str != NULL)
    56ea:	8a 81       	ldd	r24, Y+2	; 0x02
    56ec:	9b 81       	ldd	r25, Y+3	; 0x03
    56ee:	00 97       	sbiw	r24, 0x00	; 0
    56f0:	e1 f0       	breq	.+56     	; 0x572a <LCD_enuWriteString+0x54>
    56f2:	11 c0       	rjmp	.+34     	; 0x5716 <LCD_enuWriteString+0x40>
	{
		while(*Copy_pu8Str != '\0')
		{
			Local_enuErrorState = LCD_enuDisplayChar(*Copy_pu8Str);
    56f4:	ea 81       	ldd	r30, Y+2	; 0x02
    56f6:	fb 81       	ldd	r31, Y+3	; 0x03
    56f8:	80 81       	ld	r24, Z
    56fa:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <LCD_enuDisplayChar>
    56fe:	89 83       	std	Y+1, r24	; 0x01
			if(Local_enuErrorState != ES_OK)
    5700:	89 81       	ldd	r24, Y+1	; 0x01
    5702:	88 23       	and	r24, r24
    5704:	19 f0       	breq	.+6      	; 0x570c <LCD_enuWriteString+0x36>
				return Local_enuErrorState;
    5706:	89 81       	ldd	r24, Y+1	; 0x01
    5708:	8c 83       	std	Y+4, r24	; 0x04
    570a:	11 c0       	rjmp	.+34     	; 0x572e <LCD_enuWriteString+0x58>
			Copy_pu8Str++;
    570c:	8a 81       	ldd	r24, Y+2	; 0x02
    570e:	9b 81       	ldd	r25, Y+3	; 0x03
    5710:	01 96       	adiw	r24, 0x01	; 1
    5712:	9b 83       	std	Y+3, r25	; 0x03
    5714:	8a 83       	std	Y+2, r24	; 0x02
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_pu8Str != NULL)
	{
		while(*Copy_pu8Str != '\0')
    5716:	ea 81       	ldd	r30, Y+2	; 0x02
    5718:	fb 81       	ldd	r31, Y+3	; 0x03
    571a:	80 81       	ld	r24, Z
    571c:	88 23       	and	r24, r24
    571e:	51 f7       	brne	.-44     	; 0x56f4 <LCD_enuWriteString+0x1e>
			Local_enuErrorState = LCD_enuDisplayChar(*Copy_pu8Str);
			if(Local_enuErrorState != ES_OK)
				return Local_enuErrorState;
			Copy_pu8Str++;
		}
		Local_enuErrorState = ES_OK;
    5720:	19 82       	std	Y+1, r1	; 0x01
	else
	{
		return ES_NULL_POINTER;
	}
	
	Local_enuErrorState = ES_OK;
    5722:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    5724:	89 81       	ldd	r24, Y+1	; 0x01
    5726:	8c 83       	std	Y+4, r24	; 0x04
    5728:	02 c0       	rjmp	.+4      	; 0x572e <LCD_enuWriteString+0x58>
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		return ES_NULL_POINTER;
    572a:	82 e0       	ldi	r24, 0x02	; 2
    572c:	8c 83       	std	Y+4, r24	; 0x04
    572e:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	
	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
    5730:	0f 90       	pop	r0
    5732:	0f 90       	pop	r0
    5734:	0f 90       	pop	r0
    5736:	0f 90       	pop	r0
    5738:	cf 91       	pop	r28
    573a:	df 91       	pop	r29
    573c:	08 95       	ret

0000573e <LCD_enuWriteIntNumber>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuWriteIntNumber(s32 Copy_s32Number)
{
    573e:	df 93       	push	r29
    5740:	cf 93       	push	r28
    5742:	cd b7       	in	r28, 0x3d	; 61
    5744:	de b7       	in	r29, 0x3e	; 62
    5746:	66 97       	sbiw	r28, 0x16	; 22
    5748:	0f b6       	in	r0, 0x3f	; 63
    574a:	f8 94       	cli
    574c:	de bf       	out	0x3e, r29	; 62
    574e:	0f be       	out	0x3f, r0	; 63
    5750:	cd bf       	out	0x3d, r28	; 61
    5752:	6b 8b       	std	Y+19, r22	; 0x13
    5754:	7c 8b       	std	Y+20, r23	; 0x14
    5756:	8d 8b       	std	Y+21, r24	; 0x15
    5758:	9e 8b       	std	Y+22, r25	; 0x16
	ES_t Local_enuErrorState = ES_NOK;
    575a:	81 e0       	ldi	r24, 0x01	; 1
    575c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_As8Container[16];
	u8 Local_u8Iterator;
	
	sprintf(Local_As8Container, "%d", Copy_s32Number);
    575e:	8d b7       	in	r24, 0x3d	; 61
    5760:	9e b7       	in	r25, 0x3e	; 62
    5762:	08 97       	sbiw	r24, 0x08	; 8
    5764:	0f b6       	in	r0, 0x3f	; 63
    5766:	f8 94       	cli
    5768:	9e bf       	out	0x3e, r25	; 62
    576a:	0f be       	out	0x3f, r0	; 63
    576c:	8d bf       	out	0x3d, r24	; 61
    576e:	ed b7       	in	r30, 0x3d	; 61
    5770:	fe b7       	in	r31, 0x3e	; 62
    5772:	31 96       	adiw	r30, 0x01	; 1
    5774:	ce 01       	movw	r24, r28
    5776:	03 96       	adiw	r24, 0x03	; 3
    5778:	91 83       	std	Z+1, r25	; 0x01
    577a:	80 83       	st	Z, r24
    577c:	84 e6       	ldi	r24, 0x64	; 100
    577e:	90 e0       	ldi	r25, 0x00	; 0
    5780:	93 83       	std	Z+3, r25	; 0x03
    5782:	82 83       	std	Z+2, r24	; 0x02
    5784:	8b 89       	ldd	r24, Y+19	; 0x13
    5786:	9c 89       	ldd	r25, Y+20	; 0x14
    5788:	ad 89       	ldd	r26, Y+21	; 0x15
    578a:	be 89       	ldd	r27, Y+22	; 0x16
    578c:	84 83       	std	Z+4, r24	; 0x04
    578e:	95 83       	std	Z+5, r25	; 0x05
    5790:	a6 83       	std	Z+6, r26	; 0x06
    5792:	b7 83       	std	Z+7, r27	; 0x07
    5794:	0e 94 12 38 	call	0x7024	; 0x7024 <sprintf>
    5798:	8d b7       	in	r24, 0x3d	; 61
    579a:	9e b7       	in	r25, 0x3e	; 62
    579c:	08 96       	adiw	r24, 0x08	; 8
    579e:	0f b6       	in	r0, 0x3f	; 63
    57a0:	f8 94       	cli
    57a2:	9e bf       	out	0x3e, r25	; 62
    57a4:	0f be       	out	0x3f, r0	; 63
    57a6:	8d bf       	out	0x3d, r24	; 61
	
	for(Local_u8Iterator = 0; Local_As8Container[Local_u8Iterator] != '\0'; Local_u8Iterator++)
    57a8:	19 82       	std	Y+1, r1	; 0x01
    57aa:	0f c0       	rjmp	.+30     	; 0x57ca <LCD_enuWriteIntNumber+0x8c>
	{
		Local_enuErrorState = LCD_enuDisplayChar(Local_As8Container[Local_u8Iterator]);
    57ac:	89 81       	ldd	r24, Y+1	; 0x01
    57ae:	28 2f       	mov	r18, r24
    57b0:	30 e0       	ldi	r19, 0x00	; 0
    57b2:	ce 01       	movw	r24, r28
    57b4:	03 96       	adiw	r24, 0x03	; 3
    57b6:	fc 01       	movw	r30, r24
    57b8:	e2 0f       	add	r30, r18
    57ba:	f3 1f       	adc	r31, r19
    57bc:	80 81       	ld	r24, Z
    57be:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <LCD_enuDisplayChar>
    57c2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_As8Container[16];
	u8 Local_u8Iterator;
	
	sprintf(Local_As8Container, "%d", Copy_s32Number);
	
	for(Local_u8Iterator = 0; Local_As8Container[Local_u8Iterator] != '\0'; Local_u8Iterator++)
    57c4:	89 81       	ldd	r24, Y+1	; 0x01
    57c6:	8f 5f       	subi	r24, 0xFF	; 255
    57c8:	89 83       	std	Y+1, r24	; 0x01
    57ca:	89 81       	ldd	r24, Y+1	; 0x01
    57cc:	28 2f       	mov	r18, r24
    57ce:	30 e0       	ldi	r19, 0x00	; 0
    57d0:	ce 01       	movw	r24, r28
    57d2:	03 96       	adiw	r24, 0x03	; 3
    57d4:	fc 01       	movw	r30, r24
    57d6:	e2 0f       	add	r30, r18
    57d8:	f3 1f       	adc	r31, r19
    57da:	80 81       	ld	r24, Z
    57dc:	88 23       	and	r24, r24
    57de:	31 f7       	brne	.-52     	; 0x57ac <LCD_enuWriteIntNumber+0x6e>
	{
		Local_enuErrorState = LCD_enuDisplayChar(Local_As8Container[Local_u8Iterator]);
	}
	
	return Local_enuErrorState;
    57e0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    57e2:	66 96       	adiw	r28, 0x16	; 22
    57e4:	0f b6       	in	r0, 0x3f	; 63
    57e6:	f8 94       	cli
    57e8:	de bf       	out	0x3e, r29	; 62
    57ea:	0f be       	out	0x3f, r0	; 63
    57ec:	cd bf       	out	0x3d, r28	; 61
    57ee:	cf 91       	pop	r28
    57f0:	df 91       	pop	r29
    57f2:	08 95       	ret

000057f4 <LCD_enuWriteFloatNumber>:

ES_t LCD_enuWriteFloatNumber(f32 Copy_f32Number)
{
    57f4:	df 93       	push	r29
    57f6:	cf 93       	push	r28
    57f8:	cd b7       	in	r28, 0x3d	; 61
    57fa:	de b7       	in	r29, 0x3e	; 62
    57fc:	2d 97       	sbiw	r28, 0x0d	; 13
    57fe:	0f b6       	in	r0, 0x3f	; 63
    5800:	f8 94       	cli
    5802:	de bf       	out	0x3e, r29	; 62
    5804:	0f be       	out	0x3f, r0	; 63
    5806:	cd bf       	out	0x3d, r28	; 61
    5808:	6a 87       	std	Y+10, r22	; 0x0a
    580a:	7b 87       	std	Y+11, r23	; 0x0b
    580c:	8c 87       	std	Y+12, r24	; 0x0c
    580e:	9d 87       	std	Y+13, r25	; 0x0d
	ES_t Local_enuErrorState = ES_NOK;
    5810:	81 e0       	ldi	r24, 0x01	; 1
    5812:	89 87       	std	Y+9, r24	; 0x09
	
	f32 Local_f32FracNum = Copy_f32Number - (u32)Copy_f32Number;
    5814:	6a 85       	ldd	r22, Y+10	; 0x0a
    5816:	7b 85       	ldd	r23, Y+11	; 0x0b
    5818:	8c 85       	ldd	r24, Y+12	; 0x0c
    581a:	9d 85       	ldd	r25, Y+13	; 0x0d
    581c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5820:	dc 01       	movw	r26, r24
    5822:	cb 01       	movw	r24, r22
    5824:	bc 01       	movw	r22, r24
    5826:	cd 01       	movw	r24, r26
    5828:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    582c:	9b 01       	movw	r18, r22
    582e:	ac 01       	movw	r20, r24
    5830:	6a 85       	ldd	r22, Y+10	; 0x0a
    5832:	7b 85       	ldd	r23, Y+11	; 0x0b
    5834:	8c 85       	ldd	r24, Y+12	; 0x0c
    5836:	9d 85       	ldd	r25, Y+13	; 0x0d
    5838:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    583c:	dc 01       	movw	r26, r24
    583e:	cb 01       	movw	r24, r22
    5840:	8d 83       	std	Y+5, r24	; 0x05
    5842:	9e 83       	std	Y+6, r25	; 0x06
    5844:	af 83       	std	Y+7, r26	; 0x07
    5846:	b8 87       	std	Y+8, r27	; 0x08
	s32 Local_s32IntNum = Copy_f32Number - Local_f32FracNum;
    5848:	6a 85       	ldd	r22, Y+10	; 0x0a
    584a:	7b 85       	ldd	r23, Y+11	; 0x0b
    584c:	8c 85       	ldd	r24, Y+12	; 0x0c
    584e:	9d 85       	ldd	r25, Y+13	; 0x0d
    5850:	2d 81       	ldd	r18, Y+5	; 0x05
    5852:	3e 81       	ldd	r19, Y+6	; 0x06
    5854:	4f 81       	ldd	r20, Y+7	; 0x07
    5856:	58 85       	ldd	r21, Y+8	; 0x08
    5858:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    585c:	dc 01       	movw	r26, r24
    585e:	cb 01       	movw	r24, r22
    5860:	bc 01       	movw	r22, r24
    5862:	cd 01       	movw	r24, r26
    5864:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    5868:	dc 01       	movw	r26, r24
    586a:	cb 01       	movw	r24, r22
    586c:	89 83       	std	Y+1, r24	; 0x01
    586e:	9a 83       	std	Y+2, r25	; 0x02
    5870:	ab 83       	std	Y+3, r26	; 0x03
    5872:	bc 83       	std	Y+4, r27	; 0x04
	LCD_enuWriteIntNumber(Local_s32IntNum);
    5874:	89 81       	ldd	r24, Y+1	; 0x01
    5876:	9a 81       	ldd	r25, Y+2	; 0x02
    5878:	ab 81       	ldd	r26, Y+3	; 0x03
    587a:	bc 81       	ldd	r27, Y+4	; 0x04
    587c:	bc 01       	movw	r22, r24
    587e:	cd 01       	movw	r24, r26
    5880:	0e 94 9f 2b 	call	0x573e	; 0x573e <LCD_enuWriteIntNumber>
	LCD_enuDisplayChar('.');
    5884:	8e e2       	ldi	r24, 0x2E	; 46
    5886:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <LCD_enuDisplayChar>
	LCD_enuWriteIntNumber(Local_f32FracNum * 100000);
    588a:	6d 81       	ldd	r22, Y+5	; 0x05
    588c:	7e 81       	ldd	r23, Y+6	; 0x06
    588e:	8f 81       	ldd	r24, Y+7	; 0x07
    5890:	98 85       	ldd	r25, Y+8	; 0x08
    5892:	20 e0       	ldi	r18, 0x00	; 0
    5894:	30 e5       	ldi	r19, 0x50	; 80
    5896:	43 ec       	ldi	r20, 0xC3	; 195
    5898:	57 e4       	ldi	r21, 0x47	; 71
    589a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    589e:	dc 01       	movw	r26, r24
    58a0:	cb 01       	movw	r24, r22
    58a2:	bc 01       	movw	r22, r24
    58a4:	cd 01       	movw	r24, r26
    58a6:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    58aa:	dc 01       	movw	r26, r24
    58ac:	cb 01       	movw	r24, r22
    58ae:	bc 01       	movw	r22, r24
    58b0:	cd 01       	movw	r24, r26
    58b2:	0e 94 9f 2b 	call	0x573e	; 0x573e <LCD_enuWriteIntNumber>
	
	return Local_enuErrorState;
    58b6:	89 85       	ldd	r24, Y+9	; 0x09
}
    58b8:	2d 96       	adiw	r28, 0x0d	; 13
    58ba:	0f b6       	in	r0, 0x3f	; 63
    58bc:	f8 94       	cli
    58be:	de bf       	out	0x3e, r29	; 62
    58c0:	0f be       	out	0x3f, r0	; 63
    58c2:	cd bf       	out	0x3d, r28	; 61
    58c4:	cf 91       	pop	r28
    58c6:	df 91       	pop	r29
    58c8:	08 95       	ret

000058ca <LCD_enuCustomCharacter>:

ES_t LCD_enuCustomCharacter(u8 *Copy_ArrCustomChar)
{
    58ca:	df 93       	push	r29
    58cc:	cf 93       	push	r28
    58ce:	00 d0       	rcall	.+0      	; 0x58d0 <LCD_enuCustomCharacter+0x6>
    58d0:	0f 92       	push	r0
    58d2:	cd b7       	in	r28, 0x3d	; 61
    58d4:	de b7       	in	r29, 0x3e	; 62
    58d6:	9b 83       	std	Y+3, r25	; 0x03
    58d8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    58da:	81 e0       	ldi	r24, 0x01	; 1
    58dc:	89 83       	std	Y+1, r24	; 0x01
	
	LCD_inlenuSendCommand(64);
    58de:	80 e4       	ldi	r24, 0x40	; 64
    58e0:	0e 94 8f 2a 	call	0x551e	; 0x551e <LCD_inlenuSendCommand>
    58e4:	0a c0       	rjmp	.+20     	; 0x58fa <LCD_enuCustomCharacter+0x30>
	
	while(*Copy_ArrCustomChar != 0)
	{
		LCD_enuDisplayChar(*Copy_ArrCustomChar);
    58e6:	ea 81       	ldd	r30, Y+2	; 0x02
    58e8:	fb 81       	ldd	r31, Y+3	; 0x03
    58ea:	80 81       	ld	r24, Z
    58ec:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <LCD_enuDisplayChar>
		Copy_ArrCustomChar++;
    58f0:	8a 81       	ldd	r24, Y+2	; 0x02
    58f2:	9b 81       	ldd	r25, Y+3	; 0x03
    58f4:	01 96       	adiw	r24, 0x01	; 1
    58f6:	9b 83       	std	Y+3, r25	; 0x03
    58f8:	8a 83       	std	Y+2, r24	; 0x02
{
	ES_t Local_enuErrorState = ES_NOK;
	
	LCD_inlenuSendCommand(64);
	
	while(*Copy_ArrCustomChar != 0)
    58fa:	ea 81       	ldd	r30, Y+2	; 0x02
    58fc:	fb 81       	ldd	r31, Y+3	; 0x03
    58fe:	80 81       	ld	r24, Z
    5900:	88 23       	and	r24, r24
    5902:	89 f7       	brne	.-30     	; 0x58e6 <LCD_enuCustomCharacter+0x1c>
	{
		LCD_enuDisplayChar(*Copy_ArrCustomChar);
		Copy_ArrCustomChar++;
	}
	
	LCD_inlenuSendCommand(LCD_BEGIN_AT_FIRST_ROW);
    5904:	80 e8       	ldi	r24, 0x80	; 128
    5906:	0e 94 8f 2a 	call	0x551e	; 0x551e <LCD_inlenuSendCommand>
	LCD_enuDisplayChar(0);
    590a:	80 e0       	ldi	r24, 0x00	; 0
    590c:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <LCD_enuDisplayChar>
	
	return Local_enuErrorState;
    5910:	89 81       	ldd	r24, Y+1	; 0x01
}
    5912:	0f 90       	pop	r0
    5914:	0f 90       	pop	r0
    5916:	0f 90       	pop	r0
    5918:	cf 91       	pop	r28
    591a:	df 91       	pop	r29
    591c:	08 95       	ret

0000591e <DHT11_Init>:
// Global variables
DHT_Reading_t DHT_Reading;


void DHT11_Init(void)
{
    591e:	df 93       	push	r29
    5920:	cf 93       	push	r28
    5922:	cd b7       	in	r28, 0x3d	; 61
    5924:	de b7       	in	r29, 0x3e	; 62
    5926:	2e 97       	sbiw	r28, 0x0e	; 14
    5928:	0f b6       	in	r0, 0x3f	; 63
    592a:	f8 94       	cli
    592c:	de bf       	out	0x3e, r29	; 62
    592e:	0f be       	out	0x3f, r0	; 63
    5930:	cd bf       	out	0x3d, r28	; 61
	// Set pin direction as output
	DIO_enuSetPinDirection(DHT_PORT,DHT_PIN,DIO_u8OUTPUT);
    5932:	83 e0       	ldi	r24, 0x03	; 3
    5934:	66 e0       	ldi	r22, 0x06	; 6
    5936:	41 e0       	ldi	r20, 0x01	; 1
    5938:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <DIO_enuSetPinDirection>
	// set pin value to 1 as the steady state of the bus
	DIO_enuSetPinVal(DHT_PORT,DHT_PIN,DIO_u8HIGH);
    593c:	83 e0       	ldi	r24, 0x03	; 3
    593e:	66 e0       	ldi	r22, 0x06	; 6
    5940:	41 e0       	ldi	r20, 0x01	; 1
    5942:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    5946:	80 e0       	ldi	r24, 0x00	; 0
    5948:	90 e0       	ldi	r25, 0x00	; 0
    594a:	aa e7       	ldi	r26, 0x7A	; 122
    594c:	b4 e4       	ldi	r27, 0x44	; 68
    594e:	8b 87       	std	Y+11, r24	; 0x0b
    5950:	9c 87       	std	Y+12, r25	; 0x0c
    5952:	ad 87       	std	Y+13, r26	; 0x0d
    5954:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5956:	6b 85       	ldd	r22, Y+11	; 0x0b
    5958:	7c 85       	ldd	r23, Y+12	; 0x0c
    595a:	8d 85       	ldd	r24, Y+13	; 0x0d
    595c:	9e 85       	ldd	r25, Y+14	; 0x0e
    595e:	20 e0       	ldi	r18, 0x00	; 0
    5960:	30 e0       	ldi	r19, 0x00	; 0
    5962:	4a ef       	ldi	r20, 0xFA	; 250
    5964:	54 e4       	ldi	r21, 0x44	; 68
    5966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    596a:	dc 01       	movw	r26, r24
    596c:	cb 01       	movw	r24, r22
    596e:	8f 83       	std	Y+7, r24	; 0x07
    5970:	98 87       	std	Y+8, r25	; 0x08
    5972:	a9 87       	std	Y+9, r26	; 0x09
    5974:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5976:	6f 81       	ldd	r22, Y+7	; 0x07
    5978:	78 85       	ldd	r23, Y+8	; 0x08
    597a:	89 85       	ldd	r24, Y+9	; 0x09
    597c:	9a 85       	ldd	r25, Y+10	; 0x0a
    597e:	20 e0       	ldi	r18, 0x00	; 0
    5980:	30 e0       	ldi	r19, 0x00	; 0
    5982:	40 e8       	ldi	r20, 0x80	; 128
    5984:	5f e3       	ldi	r21, 0x3F	; 63
    5986:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    598a:	88 23       	and	r24, r24
    598c:	2c f4       	brge	.+10     	; 0x5998 <DHT11_Init+0x7a>
		__ticks = 1;
    598e:	81 e0       	ldi	r24, 0x01	; 1
    5990:	90 e0       	ldi	r25, 0x00	; 0
    5992:	9e 83       	std	Y+6, r25	; 0x06
    5994:	8d 83       	std	Y+5, r24	; 0x05
    5996:	3f c0       	rjmp	.+126    	; 0x5a16 <DHT11_Init+0xf8>
	else if (__tmp > 65535)
    5998:	6f 81       	ldd	r22, Y+7	; 0x07
    599a:	78 85       	ldd	r23, Y+8	; 0x08
    599c:	89 85       	ldd	r24, Y+9	; 0x09
    599e:	9a 85       	ldd	r25, Y+10	; 0x0a
    59a0:	20 e0       	ldi	r18, 0x00	; 0
    59a2:	3f ef       	ldi	r19, 0xFF	; 255
    59a4:	4f e7       	ldi	r20, 0x7F	; 127
    59a6:	57 e4       	ldi	r21, 0x47	; 71
    59a8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    59ac:	18 16       	cp	r1, r24
    59ae:	4c f5       	brge	.+82     	; 0x5a02 <DHT11_Init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    59b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    59b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    59b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    59b8:	20 e0       	ldi	r18, 0x00	; 0
    59ba:	30 e0       	ldi	r19, 0x00	; 0
    59bc:	40 e2       	ldi	r20, 0x20	; 32
    59be:	51 e4       	ldi	r21, 0x41	; 65
    59c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59c4:	dc 01       	movw	r26, r24
    59c6:	cb 01       	movw	r24, r22
    59c8:	bc 01       	movw	r22, r24
    59ca:	cd 01       	movw	r24, r26
    59cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59d0:	dc 01       	movw	r26, r24
    59d2:	cb 01       	movw	r24, r22
    59d4:	9e 83       	std	Y+6, r25	; 0x06
    59d6:	8d 83       	std	Y+5, r24	; 0x05
    59d8:	0f c0       	rjmp	.+30     	; 0x59f8 <DHT11_Init+0xda>
    59da:	88 ec       	ldi	r24, 0xC8	; 200
    59dc:	90 e0       	ldi	r25, 0x00	; 0
    59de:	9c 83       	std	Y+4, r25	; 0x04
    59e0:	8b 83       	std	Y+3, r24	; 0x03
    59e2:	8b 81       	ldd	r24, Y+3	; 0x03
    59e4:	9c 81       	ldd	r25, Y+4	; 0x04
    59e6:	01 97       	sbiw	r24, 0x01	; 1
    59e8:	f1 f7       	brne	.-4      	; 0x59e6 <DHT11_Init+0xc8>
    59ea:	9c 83       	std	Y+4, r25	; 0x04
    59ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59ee:	8d 81       	ldd	r24, Y+5	; 0x05
    59f0:	9e 81       	ldd	r25, Y+6	; 0x06
    59f2:	01 97       	sbiw	r24, 0x01	; 1
    59f4:	9e 83       	std	Y+6, r25	; 0x06
    59f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59f8:	8d 81       	ldd	r24, Y+5	; 0x05
    59fa:	9e 81       	ldd	r25, Y+6	; 0x06
    59fc:	00 97       	sbiw	r24, 0x00	; 0
    59fe:	69 f7       	brne	.-38     	; 0x59da <DHT11_Init+0xbc>
    5a00:	14 c0       	rjmp	.+40     	; 0x5a2a <DHT11_Init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a02:	6f 81       	ldd	r22, Y+7	; 0x07
    5a04:	78 85       	ldd	r23, Y+8	; 0x08
    5a06:	89 85       	ldd	r24, Y+9	; 0x09
    5a08:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a0e:	dc 01       	movw	r26, r24
    5a10:	cb 01       	movw	r24, r22
    5a12:	9e 83       	std	Y+6, r25	; 0x06
    5a14:	8d 83       	std	Y+5, r24	; 0x05
    5a16:	8d 81       	ldd	r24, Y+5	; 0x05
    5a18:	9e 81       	ldd	r25, Y+6	; 0x06
    5a1a:	9a 83       	std	Y+2, r25	; 0x02
    5a1c:	89 83       	std	Y+1, r24	; 0x01
    5a1e:	89 81       	ldd	r24, Y+1	; 0x01
    5a20:	9a 81       	ldd	r25, Y+2	; 0x02
    5a22:	01 97       	sbiw	r24, 0x01	; 1
    5a24:	f1 f7       	brne	.-4      	; 0x5a22 <DHT11_Init+0x104>
    5a26:	9a 83       	std	Y+2, r25	; 0x02
    5a28:	89 83       	std	Y+1, r24	; 0x01
	// delay 1 second in order to pass the unstable status.
	_delay_ms(1000);
}
    5a2a:	2e 96       	adiw	r28, 0x0e	; 14
    5a2c:	0f b6       	in	r0, 0x3f	; 63
    5a2e:	f8 94       	cli
    5a30:	de bf       	out	0x3e, r29	; 62
    5a32:	0f be       	out	0x3f, r0	; 63
    5a34:	cd bf       	out	0x3d, r28	; 61
    5a36:	cf 91       	pop	r28
    5a38:	df 91       	pop	r29
    5a3a:	08 95       	ret

00005a3c <DHT_GetReadings>:

ES_t DHT_GetReadings(u8*Temp,u8*Humidity)
{
    5a3c:	0f 93       	push	r16
    5a3e:	1f 93       	push	r17
    5a40:	df 93       	push	r29
    5a42:	cf 93       	push	r28
    5a44:	cd b7       	in	r28, 0x3d	; 61
    5a46:	de b7       	in	r29, 0x3e	; 62
    5a48:	64 97       	sbiw	r28, 0x14	; 20
    5a4a:	0f b6       	in	r0, 0x3f	; 63
    5a4c:	f8 94       	cli
    5a4e:	de bf       	out	0x3e, r29	; 62
    5a50:	0f be       	out	0x3f, r0	; 63
    5a52:	cd bf       	out	0x3d, r28	; 61
    5a54:	9a 8b       	std	Y+18, r25	; 0x12
    5a56:	89 8b       	std	Y+17, r24	; 0x11
    5a58:	7c 8b       	std	Y+20, r23	; 0x14
    5a5a:	6b 8b       	std	Y+19, r22	; 0x13
	ES_t Local_Status=ES_OK;
    5a5c:	18 8a       	std	Y+16, r1	; 0x10
	// Set pin direction as output
	DIO_enuSetPinDirection(DHT_PORT,DHT_PIN,DIO_u8OUTPUT);
    5a5e:	83 e0       	ldi	r24, 0x03	; 3
    5a60:	66 e0       	ldi	r22, 0x06	; 6
    5a62:	41 e0       	ldi	r20, 0x01	; 1
    5a64:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <DIO_enuSetPinDirection>
	// set pin value to 1 as the steady state of the bus
	//Initiates the communication
	DIO_enuSetPinVal(DHT_PORT,DHT_PIN,DIO_u8LOW);
    5a68:	83 e0       	ldi	r24, 0x03	; 3
    5a6a:	66 e0       	ldi	r22, 0x06	; 6
    5a6c:	40 e0       	ldi	r20, 0x00	; 0
    5a6e:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    5a72:	80 e0       	ldi	r24, 0x00	; 0
    5a74:	90 e0       	ldi	r25, 0x00	; 0
    5a76:	a0 e9       	ldi	r26, 0x90	; 144
    5a78:	b1 e4       	ldi	r27, 0x41	; 65
    5a7a:	8b 87       	std	Y+11, r24	; 0x0b
    5a7c:	9c 87       	std	Y+12, r25	; 0x0c
    5a7e:	ad 87       	std	Y+13, r26	; 0x0d
    5a80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a82:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a84:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a86:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a88:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a8a:	20 e0       	ldi	r18, 0x00	; 0
    5a8c:	30 e0       	ldi	r19, 0x00	; 0
    5a8e:	4a ef       	ldi	r20, 0xFA	; 250
    5a90:	54 e4       	ldi	r21, 0x44	; 68
    5a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a96:	dc 01       	movw	r26, r24
    5a98:	cb 01       	movw	r24, r22
    5a9a:	8f 83       	std	Y+7, r24	; 0x07
    5a9c:	98 87       	std	Y+8, r25	; 0x08
    5a9e:	a9 87       	std	Y+9, r26	; 0x09
    5aa0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5aa2:	6f 81       	ldd	r22, Y+7	; 0x07
    5aa4:	78 85       	ldd	r23, Y+8	; 0x08
    5aa6:	89 85       	ldd	r24, Y+9	; 0x09
    5aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    5aaa:	20 e0       	ldi	r18, 0x00	; 0
    5aac:	30 e0       	ldi	r19, 0x00	; 0
    5aae:	40 e8       	ldi	r20, 0x80	; 128
    5ab0:	5f e3       	ldi	r21, 0x3F	; 63
    5ab2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5ab6:	88 23       	and	r24, r24
    5ab8:	2c f4       	brge	.+10     	; 0x5ac4 <DHT_GetReadings+0x88>
		__ticks = 1;
    5aba:	81 e0       	ldi	r24, 0x01	; 1
    5abc:	90 e0       	ldi	r25, 0x00	; 0
    5abe:	9e 83       	std	Y+6, r25	; 0x06
    5ac0:	8d 83       	std	Y+5, r24	; 0x05
    5ac2:	3f c0       	rjmp	.+126    	; 0x5b42 <DHT_GetReadings+0x106>
	else if (__tmp > 65535)
    5ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    5ac6:	78 85       	ldd	r23, Y+8	; 0x08
    5ac8:	89 85       	ldd	r24, Y+9	; 0x09
    5aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    5acc:	20 e0       	ldi	r18, 0x00	; 0
    5ace:	3f ef       	ldi	r19, 0xFF	; 255
    5ad0:	4f e7       	ldi	r20, 0x7F	; 127
    5ad2:	57 e4       	ldi	r21, 0x47	; 71
    5ad4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5ad8:	18 16       	cp	r1, r24
    5ada:	4c f5       	brge	.+82     	; 0x5b2e <DHT_GetReadings+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5adc:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ade:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ae0:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ae2:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ae4:	20 e0       	ldi	r18, 0x00	; 0
    5ae6:	30 e0       	ldi	r19, 0x00	; 0
    5ae8:	40 e2       	ldi	r20, 0x20	; 32
    5aea:	51 e4       	ldi	r21, 0x41	; 65
    5aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5af0:	dc 01       	movw	r26, r24
    5af2:	cb 01       	movw	r24, r22
    5af4:	bc 01       	movw	r22, r24
    5af6:	cd 01       	movw	r24, r26
    5af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5afc:	dc 01       	movw	r26, r24
    5afe:	cb 01       	movw	r24, r22
    5b00:	9e 83       	std	Y+6, r25	; 0x06
    5b02:	8d 83       	std	Y+5, r24	; 0x05
    5b04:	0f c0       	rjmp	.+30     	; 0x5b24 <DHT_GetReadings+0xe8>
    5b06:	88 ec       	ldi	r24, 0xC8	; 200
    5b08:	90 e0       	ldi	r25, 0x00	; 0
    5b0a:	9c 83       	std	Y+4, r25	; 0x04
    5b0c:	8b 83       	std	Y+3, r24	; 0x03
    5b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    5b10:	9c 81       	ldd	r25, Y+4	; 0x04
    5b12:	01 97       	sbiw	r24, 0x01	; 1
    5b14:	f1 f7       	brne	.-4      	; 0x5b12 <DHT_GetReadings+0xd6>
    5b16:	9c 83       	std	Y+4, r25	; 0x04
    5b18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    5b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    5b1e:	01 97       	sbiw	r24, 0x01	; 1
    5b20:	9e 83       	std	Y+6, r25	; 0x06
    5b22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b24:	8d 81       	ldd	r24, Y+5	; 0x05
    5b26:	9e 81       	ldd	r25, Y+6	; 0x06
    5b28:	00 97       	sbiw	r24, 0x00	; 0
    5b2a:	69 f7       	brne	.-38     	; 0x5b06 <DHT_GetReadings+0xca>
    5b2c:	14 c0       	rjmp	.+40     	; 0x5b56 <DHT_GetReadings+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b2e:	6f 81       	ldd	r22, Y+7	; 0x07
    5b30:	78 85       	ldd	r23, Y+8	; 0x08
    5b32:	89 85       	ldd	r24, Y+9	; 0x09
    5b34:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b3a:	dc 01       	movw	r26, r24
    5b3c:	cb 01       	movw	r24, r22
    5b3e:	9e 83       	std	Y+6, r25	; 0x06
    5b40:	8d 83       	std	Y+5, r24	; 0x05
    5b42:	8d 81       	ldd	r24, Y+5	; 0x05
    5b44:	9e 81       	ldd	r25, Y+6	; 0x06
    5b46:	9a 83       	std	Y+2, r25	; 0x02
    5b48:	89 83       	std	Y+1, r24	; 0x01
    5b4a:	89 81       	ldd	r24, Y+1	; 0x01
    5b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    5b4e:	01 97       	sbiw	r24, 0x01	; 1
    5b50:	f1 f7       	brne	.-4      	; 0x5b4e <DHT_GetReadings+0x112>
    5b52:	9a 83       	std	Y+2, r25	; 0x02
    5b54:	89 83       	std	Y+1, r24	; 0x01
	// Waits for at least 18ms to let DHT11 detects the signal
	_delay_ms(18);
	// set pin value to 1
	DIO_enuSetPinVal(DHT_PORT,DHT_PIN,DIO_u8HIGH);
    5b56:	83 e0       	ldi	r24, 0x03	; 3
    5b58:	66 e0       	ldi	r22, 0x06	; 6
    5b5a:	41 e0       	ldi	r20, 0x01	; 1
    5b5c:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>

	// Set pin direction as input
	DIO_enuSetPinDirection(DHT_PORT,DHT_PIN,DIO_u8INPUT);
    5b60:	83 e0       	ldi	r24, 0x03	; 3
    5b62:	66 e0       	ldi	r22, 0x06	; 6
    5b64:	40 e0       	ldi	r20, 0x00	; 0
    5b66:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <DIO_enuSetPinDirection>

	// Check the response from DHT11
	if (DHT11_CheckResponse() == 0)
    5b6a:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <DHT11_CheckResponse>
    5b6e:	88 23       	and	r24, r24
    5b70:	19 f4       	brne	.+6      	; 0x5b78 <DHT_GetReadings+0x13c>
	{
		Local_Status=ES_NOK;      // No response
    5b72:	81 e0       	ldi	r24, 0x01	; 1
    5b74:	88 8b       	std	Y+16, r24	; 0x10
    5b76:	22 c0       	rjmp	.+68     	; 0x5bbc <DHT_GetReadings+0x180>
	}
	else
	{
		// Read 5 bytes of data
		for (u8 i = 0; i < 5; i++)
    5b78:	1f 86       	std	Y+15, r1	; 0x0f
    5b7a:	0c c0       	rjmp	.+24     	; 0x5b94 <DHT_GetReadings+0x158>
		{
			 DHT_Reading.arr[i] = DHT11_ReadByte();
    5b7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b7e:	08 2f       	mov	r16, r24
    5b80:	10 e0       	ldi	r17, 0x00	; 0
    5b82:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <DHT11_ReadByte>
    5b86:	f8 01       	movw	r30, r16
    5b88:	e5 5c       	subi	r30, 0xC5	; 197
    5b8a:	fd 4f       	sbci	r31, 0xFD	; 253
    5b8c:	80 83       	st	Z, r24
		Local_Status=ES_NOK;      // No response
	}
	else
	{
		// Read 5 bytes of data
		for (u8 i = 0; i < 5; i++)
    5b8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b90:	8f 5f       	subi	r24, 0xFF	; 255
    5b92:	8f 87       	std	Y+15, r24	; 0x0f
    5b94:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b96:	85 30       	cpi	r24, 0x05	; 5
    5b98:	88 f3       	brcs	.-30     	; 0x5b7c <DHT_GetReadings+0x140>
		{
			 DHT_Reading.arr[i] = DHT11_ReadByte();
		}
	    // Verify checksum
		if (DHT_Reading.arr[4] != (u8)((DHT_Reading.arr[0] + DHT_Reading.arr[1] + DHT_Reading.arr[2] + DHT_Reading.arr[3])) )
    5b9a:	20 91 3f 02 	lds	r18, 0x023F
    5b9e:	90 91 3b 02 	lds	r25, 0x023B
    5ba2:	80 91 3c 02 	lds	r24, 0x023C
    5ba6:	98 0f       	add	r25, r24
    5ba8:	80 91 3d 02 	lds	r24, 0x023D
    5bac:	98 0f       	add	r25, r24
    5bae:	80 91 3e 02 	lds	r24, 0x023E
    5bb2:	89 0f       	add	r24, r25
    5bb4:	28 17       	cp	r18, r24
    5bb6:	11 f0       	breq	.+4      	; 0x5bbc <DHT_GetReadings+0x180>
		{
			 Local_Status=ES_NOK; // Checksum error
    5bb8:	81 e0       	ldi	r24, 0x01	; 1
    5bba:	88 8b       	std	Y+16, r24	; 0x10
		}
	}

	*Temp = DHT_Reading.TempInt;
    5bbc:	80 91 3d 02 	lds	r24, 0x023D
    5bc0:	e9 89       	ldd	r30, Y+17	; 0x11
    5bc2:	fa 89       	ldd	r31, Y+18	; 0x12
    5bc4:	80 83       	st	Z, r24
	*Humidity = DHT_Reading.humidityInt;
    5bc6:	80 91 3b 02 	lds	r24, 0x023B
    5bca:	eb 89       	ldd	r30, Y+19	; 0x13
    5bcc:	fc 89       	ldd	r31, Y+20	; 0x14
    5bce:	80 83       	st	Z, r24

	return Local_Status;
    5bd0:	88 89       	ldd	r24, Y+16	; 0x10

}
    5bd2:	64 96       	adiw	r28, 0x14	; 20
    5bd4:	0f b6       	in	r0, 0x3f	; 63
    5bd6:	f8 94       	cli
    5bd8:	de bf       	out	0x3e, r29	; 62
    5bda:	0f be       	out	0x3f, r0	; 63
    5bdc:	cd bf       	out	0x3d, r28	; 61
    5bde:	cf 91       	pop	r28
    5be0:	df 91       	pop	r29
    5be2:	1f 91       	pop	r17
    5be4:	0f 91       	pop	r16
    5be6:	08 95       	ret

00005be8 <DHT11_CheckResponse>:


// Private function to check for response from DHT11
static u8 DHT11_CheckResponse(void)
{
    5be8:	df 93       	push	r29
    5bea:	cf 93       	push	r28
    5bec:	cd b7       	in	r28, 0x3d	; 61
    5bee:	de b7       	in	r29, 0x3e	; 62
    5bf0:	e2 97       	sbiw	r28, 0x32	; 50
    5bf2:	0f b6       	in	r0, 0x3f	; 63
    5bf4:	f8 94       	cli
    5bf6:	de bf       	out	0x3e, r29	; 62
    5bf8:	0f be       	out	0x3f, r0	; 63
    5bfa:	cd bf       	out	0x3d, r28	; 61
	u8 Local_Response = 0,Local_PinValue;
    5bfc:	19 aa       	std	Y+49, r1	; 0x31
    5bfe:	80 e0       	ldi	r24, 0x00	; 0
    5c00:	90 e0       	ldi	r25, 0x00	; 0
    5c02:	a0 e2       	ldi	r26, 0x20	; 32
    5c04:	b2 e4       	ldi	r27, 0x42	; 66
    5c06:	8d a7       	std	Y+45, r24	; 0x2d
    5c08:	9e a7       	std	Y+46, r25	; 0x2e
    5c0a:	af a7       	std	Y+47, r26	; 0x2f
    5c0c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5c0e:	6d a5       	ldd	r22, Y+45	; 0x2d
    5c10:	7e a5       	ldd	r23, Y+46	; 0x2e
    5c12:	8f a5       	ldd	r24, Y+47	; 0x2f
    5c14:	98 a9       	ldd	r25, Y+48	; 0x30
    5c16:	2b ea       	ldi	r18, 0xAB	; 171
    5c18:	3a ea       	ldi	r19, 0xAA	; 170
    5c1a:	4a e2       	ldi	r20, 0x2A	; 42
    5c1c:	50 e4       	ldi	r21, 0x40	; 64
    5c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c22:	dc 01       	movw	r26, r24
    5c24:	cb 01       	movw	r24, r22
    5c26:	89 a7       	std	Y+41, r24	; 0x29
    5c28:	9a a7       	std	Y+42, r25	; 0x2a
    5c2a:	ab a7       	std	Y+43, r26	; 0x2b
    5c2c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    5c2e:	69 a5       	ldd	r22, Y+41	; 0x29
    5c30:	7a a5       	ldd	r23, Y+42	; 0x2a
    5c32:	8b a5       	ldd	r24, Y+43	; 0x2b
    5c34:	9c a5       	ldd	r25, Y+44	; 0x2c
    5c36:	20 e0       	ldi	r18, 0x00	; 0
    5c38:	30 e0       	ldi	r19, 0x00	; 0
    5c3a:	40 e8       	ldi	r20, 0x80	; 128
    5c3c:	5f e3       	ldi	r21, 0x3F	; 63
    5c3e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5c42:	88 23       	and	r24, r24
    5c44:	1c f4       	brge	.+6      	; 0x5c4c <DHT11_CheckResponse+0x64>
		__ticks = 1;
    5c46:	81 e0       	ldi	r24, 0x01	; 1
    5c48:	88 a7       	std	Y+40, r24	; 0x28
    5c4a:	91 c0       	rjmp	.+290    	; 0x5d6e <DHT11_CheckResponse+0x186>
	else if (__tmp > 255)
    5c4c:	69 a5       	ldd	r22, Y+41	; 0x29
    5c4e:	7a a5       	ldd	r23, Y+42	; 0x2a
    5c50:	8b a5       	ldd	r24, Y+43	; 0x2b
    5c52:	9c a5       	ldd	r25, Y+44	; 0x2c
    5c54:	20 e0       	ldi	r18, 0x00	; 0
    5c56:	30 e0       	ldi	r19, 0x00	; 0
    5c58:	4f e7       	ldi	r20, 0x7F	; 127
    5c5a:	53 e4       	ldi	r21, 0x43	; 67
    5c5c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5c60:	18 16       	cp	r1, r24
    5c62:	0c f0       	brlt	.+2      	; 0x5c66 <DHT11_CheckResponse+0x7e>
    5c64:	7b c0       	rjmp	.+246    	; 0x5d5c <DHT11_CheckResponse+0x174>
	{
		_delay_ms(__us / 1000.0);
    5c66:	6d a5       	ldd	r22, Y+45	; 0x2d
    5c68:	7e a5       	ldd	r23, Y+46	; 0x2e
    5c6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    5c6c:	98 a9       	ldd	r25, Y+48	; 0x30
    5c6e:	20 e0       	ldi	r18, 0x00	; 0
    5c70:	30 e0       	ldi	r19, 0x00	; 0
    5c72:	4a e7       	ldi	r20, 0x7A	; 122
    5c74:	54 e4       	ldi	r21, 0x44	; 68
    5c76:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5c7a:	dc 01       	movw	r26, r24
    5c7c:	cb 01       	movw	r24, r22
    5c7e:	8c a3       	std	Y+36, r24	; 0x24
    5c80:	9d a3       	std	Y+37, r25	; 0x25
    5c82:	ae a3       	std	Y+38, r26	; 0x26
    5c84:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c86:	6c a1       	ldd	r22, Y+36	; 0x24
    5c88:	7d a1       	ldd	r23, Y+37	; 0x25
    5c8a:	8e a1       	ldd	r24, Y+38	; 0x26
    5c8c:	9f a1       	ldd	r25, Y+39	; 0x27
    5c8e:	20 e0       	ldi	r18, 0x00	; 0
    5c90:	30 e0       	ldi	r19, 0x00	; 0
    5c92:	4a ef       	ldi	r20, 0xFA	; 250
    5c94:	54 e4       	ldi	r21, 0x44	; 68
    5c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c9a:	dc 01       	movw	r26, r24
    5c9c:	cb 01       	movw	r24, r22
    5c9e:	88 a3       	std	Y+32, r24	; 0x20
    5ca0:	99 a3       	std	Y+33, r25	; 0x21
    5ca2:	aa a3       	std	Y+34, r26	; 0x22
    5ca4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    5ca6:	68 a1       	ldd	r22, Y+32	; 0x20
    5ca8:	79 a1       	ldd	r23, Y+33	; 0x21
    5caa:	8a a1       	ldd	r24, Y+34	; 0x22
    5cac:	9b a1       	ldd	r25, Y+35	; 0x23
    5cae:	20 e0       	ldi	r18, 0x00	; 0
    5cb0:	30 e0       	ldi	r19, 0x00	; 0
    5cb2:	40 e8       	ldi	r20, 0x80	; 128
    5cb4:	5f e3       	ldi	r21, 0x3F	; 63
    5cb6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5cba:	88 23       	and	r24, r24
    5cbc:	2c f4       	brge	.+10     	; 0x5cc8 <DHT11_CheckResponse+0xe0>
		__ticks = 1;
    5cbe:	81 e0       	ldi	r24, 0x01	; 1
    5cc0:	90 e0       	ldi	r25, 0x00	; 0
    5cc2:	9f 8f       	std	Y+31, r25	; 0x1f
    5cc4:	8e 8f       	std	Y+30, r24	; 0x1e
    5cc6:	3f c0       	rjmp	.+126    	; 0x5d46 <DHT11_CheckResponse+0x15e>
	else if (__tmp > 65535)
    5cc8:	68 a1       	ldd	r22, Y+32	; 0x20
    5cca:	79 a1       	ldd	r23, Y+33	; 0x21
    5ccc:	8a a1       	ldd	r24, Y+34	; 0x22
    5cce:	9b a1       	ldd	r25, Y+35	; 0x23
    5cd0:	20 e0       	ldi	r18, 0x00	; 0
    5cd2:	3f ef       	ldi	r19, 0xFF	; 255
    5cd4:	4f e7       	ldi	r20, 0x7F	; 127
    5cd6:	57 e4       	ldi	r21, 0x47	; 71
    5cd8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5cdc:	18 16       	cp	r1, r24
    5cde:	4c f5       	brge	.+82     	; 0x5d32 <DHT11_CheckResponse+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ce0:	6c a1       	ldd	r22, Y+36	; 0x24
    5ce2:	7d a1       	ldd	r23, Y+37	; 0x25
    5ce4:	8e a1       	ldd	r24, Y+38	; 0x26
    5ce6:	9f a1       	ldd	r25, Y+39	; 0x27
    5ce8:	20 e0       	ldi	r18, 0x00	; 0
    5cea:	30 e0       	ldi	r19, 0x00	; 0
    5cec:	40 e2       	ldi	r20, 0x20	; 32
    5cee:	51 e4       	ldi	r21, 0x41	; 65
    5cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cf4:	dc 01       	movw	r26, r24
    5cf6:	cb 01       	movw	r24, r22
    5cf8:	bc 01       	movw	r22, r24
    5cfa:	cd 01       	movw	r24, r26
    5cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d00:	dc 01       	movw	r26, r24
    5d02:	cb 01       	movw	r24, r22
    5d04:	9f 8f       	std	Y+31, r25	; 0x1f
    5d06:	8e 8f       	std	Y+30, r24	; 0x1e
    5d08:	0f c0       	rjmp	.+30     	; 0x5d28 <DHT11_CheckResponse+0x140>
    5d0a:	88 ec       	ldi	r24, 0xC8	; 200
    5d0c:	90 e0       	ldi	r25, 0x00	; 0
    5d0e:	9d 8f       	std	Y+29, r25	; 0x1d
    5d10:	8c 8f       	std	Y+28, r24	; 0x1c
    5d12:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5d14:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5d16:	01 97       	sbiw	r24, 0x01	; 1
    5d18:	f1 f7       	brne	.-4      	; 0x5d16 <DHT11_CheckResponse+0x12e>
    5d1a:	9d 8f       	std	Y+29, r25	; 0x1d
    5d1c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d1e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5d20:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5d22:	01 97       	sbiw	r24, 0x01	; 1
    5d24:	9f 8f       	std	Y+31, r25	; 0x1f
    5d26:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d28:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5d2a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5d2c:	00 97       	sbiw	r24, 0x00	; 0
    5d2e:	69 f7       	brne	.-38     	; 0x5d0a <DHT11_CheckResponse+0x122>
    5d30:	24 c0       	rjmp	.+72     	; 0x5d7a <DHT11_CheckResponse+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d32:	68 a1       	ldd	r22, Y+32	; 0x20
    5d34:	79 a1       	ldd	r23, Y+33	; 0x21
    5d36:	8a a1       	ldd	r24, Y+34	; 0x22
    5d38:	9b a1       	ldd	r25, Y+35	; 0x23
    5d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d3e:	dc 01       	movw	r26, r24
    5d40:	cb 01       	movw	r24, r22
    5d42:	9f 8f       	std	Y+31, r25	; 0x1f
    5d44:	8e 8f       	std	Y+30, r24	; 0x1e
    5d46:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5d48:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5d4a:	9b 8f       	std	Y+27, r25	; 0x1b
    5d4c:	8a 8f       	std	Y+26, r24	; 0x1a
    5d4e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5d50:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5d52:	01 97       	sbiw	r24, 0x01	; 1
    5d54:	f1 f7       	brne	.-4      	; 0x5d52 <DHT11_CheckResponse+0x16a>
    5d56:	9b 8f       	std	Y+27, r25	; 0x1b
    5d58:	8a 8f       	std	Y+26, r24	; 0x1a
    5d5a:	0f c0       	rjmp	.+30     	; 0x5d7a <DHT11_CheckResponse+0x192>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5d5c:	69 a5       	ldd	r22, Y+41	; 0x29
    5d5e:	7a a5       	ldd	r23, Y+42	; 0x2a
    5d60:	8b a5       	ldd	r24, Y+43	; 0x2b
    5d62:	9c a5       	ldd	r25, Y+44	; 0x2c
    5d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d68:	dc 01       	movw	r26, r24
    5d6a:	cb 01       	movw	r24, r22
    5d6c:	88 a7       	std	Y+40, r24	; 0x28
    5d6e:	88 a5       	ldd	r24, Y+40	; 0x28
    5d70:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5d72:	89 8d       	ldd	r24, Y+25	; 0x19
    5d74:	8a 95       	dec	r24
    5d76:	f1 f7       	brne	.-4      	; 0x5d74 <DHT11_CheckResponse+0x18c>
    5d78:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(40);

	DIO_enuGetPinVal(DHT_PORT,DHT_PIN,&Local_PinValue);
    5d7a:	9e 01       	movw	r18, r28
    5d7c:	2e 5c       	subi	r18, 0xCE	; 206
    5d7e:	3f 4f       	sbci	r19, 0xFF	; 255
    5d80:	83 e0       	ldi	r24, 0x03	; 3
    5d82:	66 e0       	ldi	r22, 0x06	; 6
    5d84:	a9 01       	movw	r20, r18
    5d86:	0e 94 41 1c 	call	0x3882	; 0x3882 <DIO_enuGetPinVal>

	if (Local_PinValue == DIO_u8LOW)
    5d8a:	8a a9       	ldd	r24, Y+50	; 0x32
    5d8c:	88 23       	and	r24, r24
    5d8e:	09 f0       	breq	.+2      	; 0x5d92 <DHT11_CheckResponse+0x1aa>
    5d90:	d7 c0       	rjmp	.+430    	; 0x5f40 <DHT11_CheckResponse+0x358>
    5d92:	80 e0       	ldi	r24, 0x00	; 0
    5d94:	90 e0       	ldi	r25, 0x00	; 0
    5d96:	a0 ea       	ldi	r26, 0xA0	; 160
    5d98:	b2 e4       	ldi	r27, 0x42	; 66
    5d9a:	8d 8b       	std	Y+21, r24	; 0x15
    5d9c:	9e 8b       	std	Y+22, r25	; 0x16
    5d9e:	af 8b       	std	Y+23, r26	; 0x17
    5da0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5da2:	6d 89       	ldd	r22, Y+21	; 0x15
    5da4:	7e 89       	ldd	r23, Y+22	; 0x16
    5da6:	8f 89       	ldd	r24, Y+23	; 0x17
    5da8:	98 8d       	ldd	r25, Y+24	; 0x18
    5daa:	2b ea       	ldi	r18, 0xAB	; 171
    5dac:	3a ea       	ldi	r19, 0xAA	; 170
    5dae:	4a e2       	ldi	r20, 0x2A	; 42
    5db0:	50 e4       	ldi	r21, 0x40	; 64
    5db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5db6:	dc 01       	movw	r26, r24
    5db8:	cb 01       	movw	r24, r22
    5dba:	89 8b       	std	Y+17, r24	; 0x11
    5dbc:	9a 8b       	std	Y+18, r25	; 0x12
    5dbe:	ab 8b       	std	Y+19, r26	; 0x13
    5dc0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5dc2:	69 89       	ldd	r22, Y+17	; 0x11
    5dc4:	7a 89       	ldd	r23, Y+18	; 0x12
    5dc6:	8b 89       	ldd	r24, Y+19	; 0x13
    5dc8:	9c 89       	ldd	r25, Y+20	; 0x14
    5dca:	20 e0       	ldi	r18, 0x00	; 0
    5dcc:	30 e0       	ldi	r19, 0x00	; 0
    5dce:	40 e8       	ldi	r20, 0x80	; 128
    5dd0:	5f e3       	ldi	r21, 0x3F	; 63
    5dd2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5dd6:	88 23       	and	r24, r24
    5dd8:	1c f4       	brge	.+6      	; 0x5de0 <DHT11_CheckResponse+0x1f8>
		__ticks = 1;
    5dda:	81 e0       	ldi	r24, 0x01	; 1
    5ddc:	88 8b       	std	Y+16, r24	; 0x10
    5dde:	91 c0       	rjmp	.+290    	; 0x5f02 <DHT11_CheckResponse+0x31a>
	else if (__tmp > 255)
    5de0:	69 89       	ldd	r22, Y+17	; 0x11
    5de2:	7a 89       	ldd	r23, Y+18	; 0x12
    5de4:	8b 89       	ldd	r24, Y+19	; 0x13
    5de6:	9c 89       	ldd	r25, Y+20	; 0x14
    5de8:	20 e0       	ldi	r18, 0x00	; 0
    5dea:	30 e0       	ldi	r19, 0x00	; 0
    5dec:	4f e7       	ldi	r20, 0x7F	; 127
    5dee:	53 e4       	ldi	r21, 0x43	; 67
    5df0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5df4:	18 16       	cp	r1, r24
    5df6:	0c f0       	brlt	.+2      	; 0x5dfa <DHT11_CheckResponse+0x212>
    5df8:	7b c0       	rjmp	.+246    	; 0x5ef0 <DHT11_CheckResponse+0x308>
	{
		_delay_ms(__us / 1000.0);
    5dfa:	6d 89       	ldd	r22, Y+21	; 0x15
    5dfc:	7e 89       	ldd	r23, Y+22	; 0x16
    5dfe:	8f 89       	ldd	r24, Y+23	; 0x17
    5e00:	98 8d       	ldd	r25, Y+24	; 0x18
    5e02:	20 e0       	ldi	r18, 0x00	; 0
    5e04:	30 e0       	ldi	r19, 0x00	; 0
    5e06:	4a e7       	ldi	r20, 0x7A	; 122
    5e08:	54 e4       	ldi	r21, 0x44	; 68
    5e0a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5e0e:	dc 01       	movw	r26, r24
    5e10:	cb 01       	movw	r24, r22
    5e12:	8c 87       	std	Y+12, r24	; 0x0c
    5e14:	9d 87       	std	Y+13, r25	; 0x0d
    5e16:	ae 87       	std	Y+14, r26	; 0x0e
    5e18:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e1a:	6c 85       	ldd	r22, Y+12	; 0x0c
    5e1c:	7d 85       	ldd	r23, Y+13	; 0x0d
    5e1e:	8e 85       	ldd	r24, Y+14	; 0x0e
    5e20:	9f 85       	ldd	r25, Y+15	; 0x0f
    5e22:	20 e0       	ldi	r18, 0x00	; 0
    5e24:	30 e0       	ldi	r19, 0x00	; 0
    5e26:	4a ef       	ldi	r20, 0xFA	; 250
    5e28:	54 e4       	ldi	r21, 0x44	; 68
    5e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e2e:	dc 01       	movw	r26, r24
    5e30:	cb 01       	movw	r24, r22
    5e32:	88 87       	std	Y+8, r24	; 0x08
    5e34:	99 87       	std	Y+9, r25	; 0x09
    5e36:	aa 87       	std	Y+10, r26	; 0x0a
    5e38:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5e3a:	68 85       	ldd	r22, Y+8	; 0x08
    5e3c:	79 85       	ldd	r23, Y+9	; 0x09
    5e3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5e40:	9b 85       	ldd	r25, Y+11	; 0x0b
    5e42:	20 e0       	ldi	r18, 0x00	; 0
    5e44:	30 e0       	ldi	r19, 0x00	; 0
    5e46:	40 e8       	ldi	r20, 0x80	; 128
    5e48:	5f e3       	ldi	r21, 0x3F	; 63
    5e4a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5e4e:	88 23       	and	r24, r24
    5e50:	2c f4       	brge	.+10     	; 0x5e5c <DHT11_CheckResponse+0x274>
		__ticks = 1;
    5e52:	81 e0       	ldi	r24, 0x01	; 1
    5e54:	90 e0       	ldi	r25, 0x00	; 0
    5e56:	9f 83       	std	Y+7, r25	; 0x07
    5e58:	8e 83       	std	Y+6, r24	; 0x06
    5e5a:	3f c0       	rjmp	.+126    	; 0x5eda <DHT11_CheckResponse+0x2f2>
	else if (__tmp > 65535)
    5e5c:	68 85       	ldd	r22, Y+8	; 0x08
    5e5e:	79 85       	ldd	r23, Y+9	; 0x09
    5e60:	8a 85       	ldd	r24, Y+10	; 0x0a
    5e62:	9b 85       	ldd	r25, Y+11	; 0x0b
    5e64:	20 e0       	ldi	r18, 0x00	; 0
    5e66:	3f ef       	ldi	r19, 0xFF	; 255
    5e68:	4f e7       	ldi	r20, 0x7F	; 127
    5e6a:	57 e4       	ldi	r21, 0x47	; 71
    5e6c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5e70:	18 16       	cp	r1, r24
    5e72:	4c f5       	brge	.+82     	; 0x5ec6 <DHT11_CheckResponse+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e74:	6c 85       	ldd	r22, Y+12	; 0x0c
    5e76:	7d 85       	ldd	r23, Y+13	; 0x0d
    5e78:	8e 85       	ldd	r24, Y+14	; 0x0e
    5e7a:	9f 85       	ldd	r25, Y+15	; 0x0f
    5e7c:	20 e0       	ldi	r18, 0x00	; 0
    5e7e:	30 e0       	ldi	r19, 0x00	; 0
    5e80:	40 e2       	ldi	r20, 0x20	; 32
    5e82:	51 e4       	ldi	r21, 0x41	; 65
    5e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e88:	dc 01       	movw	r26, r24
    5e8a:	cb 01       	movw	r24, r22
    5e8c:	bc 01       	movw	r22, r24
    5e8e:	cd 01       	movw	r24, r26
    5e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e94:	dc 01       	movw	r26, r24
    5e96:	cb 01       	movw	r24, r22
    5e98:	9f 83       	std	Y+7, r25	; 0x07
    5e9a:	8e 83       	std	Y+6, r24	; 0x06
    5e9c:	0f c0       	rjmp	.+30     	; 0x5ebc <DHT11_CheckResponse+0x2d4>
    5e9e:	88 ec       	ldi	r24, 0xC8	; 200
    5ea0:	90 e0       	ldi	r25, 0x00	; 0
    5ea2:	9d 83       	std	Y+5, r25	; 0x05
    5ea4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5ea6:	8c 81       	ldd	r24, Y+4	; 0x04
    5ea8:	9d 81       	ldd	r25, Y+5	; 0x05
    5eaa:	01 97       	sbiw	r24, 0x01	; 1
    5eac:	f1 f7       	brne	.-4      	; 0x5eaa <DHT11_CheckResponse+0x2c2>
    5eae:	9d 83       	std	Y+5, r25	; 0x05
    5eb0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5eb2:	8e 81       	ldd	r24, Y+6	; 0x06
    5eb4:	9f 81       	ldd	r25, Y+7	; 0x07
    5eb6:	01 97       	sbiw	r24, 0x01	; 1
    5eb8:	9f 83       	std	Y+7, r25	; 0x07
    5eba:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ebc:	8e 81       	ldd	r24, Y+6	; 0x06
    5ebe:	9f 81       	ldd	r25, Y+7	; 0x07
    5ec0:	00 97       	sbiw	r24, 0x00	; 0
    5ec2:	69 f7       	brne	.-38     	; 0x5e9e <DHT11_CheckResponse+0x2b6>
    5ec4:	24 c0       	rjmp	.+72     	; 0x5f0e <DHT11_CheckResponse+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ec6:	68 85       	ldd	r22, Y+8	; 0x08
    5ec8:	79 85       	ldd	r23, Y+9	; 0x09
    5eca:	8a 85       	ldd	r24, Y+10	; 0x0a
    5ecc:	9b 85       	ldd	r25, Y+11	; 0x0b
    5ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ed2:	dc 01       	movw	r26, r24
    5ed4:	cb 01       	movw	r24, r22
    5ed6:	9f 83       	std	Y+7, r25	; 0x07
    5ed8:	8e 83       	std	Y+6, r24	; 0x06
    5eda:	8e 81       	ldd	r24, Y+6	; 0x06
    5edc:	9f 81       	ldd	r25, Y+7	; 0x07
    5ede:	9b 83       	std	Y+3, r25	; 0x03
    5ee0:	8a 83       	std	Y+2, r24	; 0x02
    5ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    5ee4:	9b 81       	ldd	r25, Y+3	; 0x03
    5ee6:	01 97       	sbiw	r24, 0x01	; 1
    5ee8:	f1 f7       	brne	.-4      	; 0x5ee6 <DHT11_CheckResponse+0x2fe>
    5eea:	9b 83       	std	Y+3, r25	; 0x03
    5eec:	8a 83       	std	Y+2, r24	; 0x02
    5eee:	0f c0       	rjmp	.+30     	; 0x5f0e <DHT11_CheckResponse+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5ef0:	69 89       	ldd	r22, Y+17	; 0x11
    5ef2:	7a 89       	ldd	r23, Y+18	; 0x12
    5ef4:	8b 89       	ldd	r24, Y+19	; 0x13
    5ef6:	9c 89       	ldd	r25, Y+20	; 0x14
    5ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5efc:	dc 01       	movw	r26, r24
    5efe:	cb 01       	movw	r24, r22
    5f00:	88 8b       	std	Y+16, r24	; 0x10
    5f02:	88 89       	ldd	r24, Y+16	; 0x10
    5f04:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5f06:	89 81       	ldd	r24, Y+1	; 0x01
    5f08:	8a 95       	dec	r24
    5f0a:	f1 f7       	brne	.-4      	; 0x5f08 <DHT11_CheckResponse+0x320>
    5f0c:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_us(80);
		DIO_enuGetPinVal(DHT_PORT,DHT_PIN,&Local_PinValue);
    5f0e:	9e 01       	movw	r18, r28
    5f10:	2e 5c       	subi	r18, 0xCE	; 206
    5f12:	3f 4f       	sbci	r19, 0xFF	; 255
    5f14:	83 e0       	ldi	r24, 0x03	; 3
    5f16:	66 e0       	ldi	r22, 0x06	; 6
    5f18:	a9 01       	movw	r20, r18
    5f1a:	0e 94 41 1c 	call	0x3882	; 0x3882 <DIO_enuGetPinVal>
		if (Local_PinValue == DIO_u8HIGH)
    5f1e:	8a a9       	ldd	r24, Y+50	; 0x32
    5f20:	81 30       	cpi	r24, 0x01	; 1
    5f22:	59 f4       	brne	.+22     	; 0x5f3a <DHT11_CheckResponse+0x352>
		{
			Local_Response = 1;
    5f24:	81 e0       	ldi	r24, 0x01	; 1
    5f26:	89 ab       	std	Y+49, r24	; 0x31
    5f28:	08 c0       	rjmp	.+16     	; 0x5f3a <DHT11_CheckResponse+0x352>
		}
		while (Local_PinValue == DIO_u8HIGH)
		{
			DIO_enuGetPinVal(DHT_PORT,DHT_PIN,&Local_PinValue);
    5f2a:	9e 01       	movw	r18, r28
    5f2c:	2e 5c       	subi	r18, 0xCE	; 206
    5f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    5f30:	83 e0       	ldi	r24, 0x03	; 3
    5f32:	66 e0       	ldi	r22, 0x06	; 6
    5f34:	a9 01       	movw	r20, r18
    5f36:	0e 94 41 1c 	call	0x3882	; 0x3882 <DIO_enuGetPinVal>
		DIO_enuGetPinVal(DHT_PORT,DHT_PIN,&Local_PinValue);
		if (Local_PinValue == DIO_u8HIGH)
		{
			Local_Response = 1;
		}
		while (Local_PinValue == DIO_u8HIGH)
    5f3a:	8a a9       	ldd	r24, Y+50	; 0x32
    5f3c:	81 30       	cpi	r24, 0x01	; 1
    5f3e:	a9 f3       	breq	.-22     	; 0x5f2a <DHT11_CheckResponse+0x342>
		{
			DIO_enuGetPinVal(DHT_PORT,DHT_PIN,&Local_PinValue);
		}
	}
	return Local_Response;
    5f40:	89 a9       	ldd	r24, Y+49	; 0x31
}
    5f42:	e2 96       	adiw	r28, 0x32	; 50
    5f44:	0f b6       	in	r0, 0x3f	; 63
    5f46:	f8 94       	cli
    5f48:	de bf       	out	0x3e, r29	; 62
    5f4a:	0f be       	out	0x3f, r0	; 63
    5f4c:	cd bf       	out	0x3d, r28	; 61
    5f4e:	cf 91       	pop	r28
    5f50:	df 91       	pop	r29
    5f52:	08 95       	ret

00005f54 <DHT11_ReadByte>:

// Private function to read a byte from DHT11
static u8 DHT11_ReadByte(void)
{
    5f54:	df 93       	push	r29
    5f56:	cf 93       	push	r28
    5f58:	cd b7       	in	r28, 0x3d	; 61
    5f5a:	de b7       	in	r29, 0x3e	; 62
    5f5c:	6b 97       	sbiw	r28, 0x1b	; 27
    5f5e:	0f b6       	in	r0, 0x3f	; 63
    5f60:	f8 94       	cli
    5f62:	de bf       	out	0x3e, r29	; 62
    5f64:	0f be       	out	0x3f, r0	; 63
    5f66:	cd bf       	out	0x3d, r28	; 61
	u8 Local_Data = 0,Local_PinValue;
    5f68:	1a 8e       	std	Y+26, r1	; 0x1a
	for (u8 i = 0; i < 8; i++)
    5f6a:	19 8e       	std	Y+25, r1	; 0x19
    5f6c:	0f c1       	rjmp	.+542    	; 0x618c <DHT11_ReadByte+0x238>
	{

		while (Local_PinValue == DIO_u8LOW) // Wait for pin to go high
		{
			DIO_enuGetPinVal(DHT_PORT,DHT_PIN,&Local_PinValue);
    5f6e:	9e 01       	movw	r18, r28
    5f70:	25 5e       	subi	r18, 0xE5	; 229
    5f72:	3f 4f       	sbci	r19, 0xFF	; 255
    5f74:	83 e0       	ldi	r24, 0x03	; 3
    5f76:	66 e0       	ldi	r22, 0x06	; 6
    5f78:	a9 01       	movw	r20, r18
    5f7a:	0e 94 41 1c 	call	0x3882	; 0x3882 <DIO_enuGetPinVal>
{
	u8 Local_Data = 0,Local_PinValue;
	for (u8 i = 0; i < 8; i++)
	{

		while (Local_PinValue == DIO_u8LOW) // Wait for pin to go high
    5f7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5f80:	88 23       	and	r24, r24
    5f82:	a9 f3       	breq	.-22     	; 0x5f6e <DHT11_ReadByte+0x1a>
    5f84:	80 e0       	ldi	r24, 0x00	; 0
    5f86:	90 e0       	ldi	r25, 0x00	; 0
    5f88:	a0 ef       	ldi	r26, 0xF0	; 240
    5f8a:	b1 e4       	ldi	r27, 0x41	; 65
    5f8c:	8d 8b       	std	Y+21, r24	; 0x15
    5f8e:	9e 8b       	std	Y+22, r25	; 0x16
    5f90:	af 8b       	std	Y+23, r26	; 0x17
    5f92:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5f94:	6d 89       	ldd	r22, Y+21	; 0x15
    5f96:	7e 89       	ldd	r23, Y+22	; 0x16
    5f98:	8f 89       	ldd	r24, Y+23	; 0x17
    5f9a:	98 8d       	ldd	r25, Y+24	; 0x18
    5f9c:	2b ea       	ldi	r18, 0xAB	; 171
    5f9e:	3a ea       	ldi	r19, 0xAA	; 170
    5fa0:	4a e2       	ldi	r20, 0x2A	; 42
    5fa2:	50 e4       	ldi	r21, 0x40	; 64
    5fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5fa8:	dc 01       	movw	r26, r24
    5faa:	cb 01       	movw	r24, r22
    5fac:	89 8b       	std	Y+17, r24	; 0x11
    5fae:	9a 8b       	std	Y+18, r25	; 0x12
    5fb0:	ab 8b       	std	Y+19, r26	; 0x13
    5fb2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5fb4:	69 89       	ldd	r22, Y+17	; 0x11
    5fb6:	7a 89       	ldd	r23, Y+18	; 0x12
    5fb8:	8b 89       	ldd	r24, Y+19	; 0x13
    5fba:	9c 89       	ldd	r25, Y+20	; 0x14
    5fbc:	20 e0       	ldi	r18, 0x00	; 0
    5fbe:	30 e0       	ldi	r19, 0x00	; 0
    5fc0:	40 e8       	ldi	r20, 0x80	; 128
    5fc2:	5f e3       	ldi	r21, 0x3F	; 63
    5fc4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5fc8:	88 23       	and	r24, r24
    5fca:	1c f4       	brge	.+6      	; 0x5fd2 <DHT11_ReadByte+0x7e>
		__ticks = 1;
    5fcc:	81 e0       	ldi	r24, 0x01	; 1
    5fce:	88 8b       	std	Y+16, r24	; 0x10
    5fd0:	91 c0       	rjmp	.+290    	; 0x60f4 <DHT11_ReadByte+0x1a0>
	else if (__tmp > 255)
    5fd2:	69 89       	ldd	r22, Y+17	; 0x11
    5fd4:	7a 89       	ldd	r23, Y+18	; 0x12
    5fd6:	8b 89       	ldd	r24, Y+19	; 0x13
    5fd8:	9c 89       	ldd	r25, Y+20	; 0x14
    5fda:	20 e0       	ldi	r18, 0x00	; 0
    5fdc:	30 e0       	ldi	r19, 0x00	; 0
    5fde:	4f e7       	ldi	r20, 0x7F	; 127
    5fe0:	53 e4       	ldi	r21, 0x43	; 67
    5fe2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5fe6:	18 16       	cp	r1, r24
    5fe8:	0c f0       	brlt	.+2      	; 0x5fec <DHT11_ReadByte+0x98>
    5fea:	7b c0       	rjmp	.+246    	; 0x60e2 <DHT11_ReadByte+0x18e>
	{
		_delay_ms(__us / 1000.0);
    5fec:	6d 89       	ldd	r22, Y+21	; 0x15
    5fee:	7e 89       	ldd	r23, Y+22	; 0x16
    5ff0:	8f 89       	ldd	r24, Y+23	; 0x17
    5ff2:	98 8d       	ldd	r25, Y+24	; 0x18
    5ff4:	20 e0       	ldi	r18, 0x00	; 0
    5ff6:	30 e0       	ldi	r19, 0x00	; 0
    5ff8:	4a e7       	ldi	r20, 0x7A	; 122
    5ffa:	54 e4       	ldi	r21, 0x44	; 68
    5ffc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    6000:	dc 01       	movw	r26, r24
    6002:	cb 01       	movw	r24, r22
    6004:	8c 87       	std	Y+12, r24	; 0x0c
    6006:	9d 87       	std	Y+13, r25	; 0x0d
    6008:	ae 87       	std	Y+14, r26	; 0x0e
    600a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    600c:	6c 85       	ldd	r22, Y+12	; 0x0c
    600e:	7d 85       	ldd	r23, Y+13	; 0x0d
    6010:	8e 85       	ldd	r24, Y+14	; 0x0e
    6012:	9f 85       	ldd	r25, Y+15	; 0x0f
    6014:	20 e0       	ldi	r18, 0x00	; 0
    6016:	30 e0       	ldi	r19, 0x00	; 0
    6018:	4a ef       	ldi	r20, 0xFA	; 250
    601a:	54 e4       	ldi	r21, 0x44	; 68
    601c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6020:	dc 01       	movw	r26, r24
    6022:	cb 01       	movw	r24, r22
    6024:	88 87       	std	Y+8, r24	; 0x08
    6026:	99 87       	std	Y+9, r25	; 0x09
    6028:	aa 87       	std	Y+10, r26	; 0x0a
    602a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    602c:	68 85       	ldd	r22, Y+8	; 0x08
    602e:	79 85       	ldd	r23, Y+9	; 0x09
    6030:	8a 85       	ldd	r24, Y+10	; 0x0a
    6032:	9b 85       	ldd	r25, Y+11	; 0x0b
    6034:	20 e0       	ldi	r18, 0x00	; 0
    6036:	30 e0       	ldi	r19, 0x00	; 0
    6038:	40 e8       	ldi	r20, 0x80	; 128
    603a:	5f e3       	ldi	r21, 0x3F	; 63
    603c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    6040:	88 23       	and	r24, r24
    6042:	2c f4       	brge	.+10     	; 0x604e <DHT11_ReadByte+0xfa>
		__ticks = 1;
    6044:	81 e0       	ldi	r24, 0x01	; 1
    6046:	90 e0       	ldi	r25, 0x00	; 0
    6048:	9f 83       	std	Y+7, r25	; 0x07
    604a:	8e 83       	std	Y+6, r24	; 0x06
    604c:	3f c0       	rjmp	.+126    	; 0x60cc <DHT11_ReadByte+0x178>
	else if (__tmp > 65535)
    604e:	68 85       	ldd	r22, Y+8	; 0x08
    6050:	79 85       	ldd	r23, Y+9	; 0x09
    6052:	8a 85       	ldd	r24, Y+10	; 0x0a
    6054:	9b 85       	ldd	r25, Y+11	; 0x0b
    6056:	20 e0       	ldi	r18, 0x00	; 0
    6058:	3f ef       	ldi	r19, 0xFF	; 255
    605a:	4f e7       	ldi	r20, 0x7F	; 127
    605c:	57 e4       	ldi	r21, 0x47	; 71
    605e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    6062:	18 16       	cp	r1, r24
    6064:	4c f5       	brge	.+82     	; 0x60b8 <DHT11_ReadByte+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6066:	6c 85       	ldd	r22, Y+12	; 0x0c
    6068:	7d 85       	ldd	r23, Y+13	; 0x0d
    606a:	8e 85       	ldd	r24, Y+14	; 0x0e
    606c:	9f 85       	ldd	r25, Y+15	; 0x0f
    606e:	20 e0       	ldi	r18, 0x00	; 0
    6070:	30 e0       	ldi	r19, 0x00	; 0
    6072:	40 e2       	ldi	r20, 0x20	; 32
    6074:	51 e4       	ldi	r21, 0x41	; 65
    6076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    607a:	dc 01       	movw	r26, r24
    607c:	cb 01       	movw	r24, r22
    607e:	bc 01       	movw	r22, r24
    6080:	cd 01       	movw	r24, r26
    6082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6086:	dc 01       	movw	r26, r24
    6088:	cb 01       	movw	r24, r22
    608a:	9f 83       	std	Y+7, r25	; 0x07
    608c:	8e 83       	std	Y+6, r24	; 0x06
    608e:	0f c0       	rjmp	.+30     	; 0x60ae <DHT11_ReadByte+0x15a>
    6090:	88 ec       	ldi	r24, 0xC8	; 200
    6092:	90 e0       	ldi	r25, 0x00	; 0
    6094:	9d 83       	std	Y+5, r25	; 0x05
    6096:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6098:	8c 81       	ldd	r24, Y+4	; 0x04
    609a:	9d 81       	ldd	r25, Y+5	; 0x05
    609c:	01 97       	sbiw	r24, 0x01	; 1
    609e:	f1 f7       	brne	.-4      	; 0x609c <DHT11_ReadByte+0x148>
    60a0:	9d 83       	std	Y+5, r25	; 0x05
    60a2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60a4:	8e 81       	ldd	r24, Y+6	; 0x06
    60a6:	9f 81       	ldd	r25, Y+7	; 0x07
    60a8:	01 97       	sbiw	r24, 0x01	; 1
    60aa:	9f 83       	std	Y+7, r25	; 0x07
    60ac:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60ae:	8e 81       	ldd	r24, Y+6	; 0x06
    60b0:	9f 81       	ldd	r25, Y+7	; 0x07
    60b2:	00 97       	sbiw	r24, 0x00	; 0
    60b4:	69 f7       	brne	.-38     	; 0x6090 <DHT11_ReadByte+0x13c>
    60b6:	24 c0       	rjmp	.+72     	; 0x6100 <DHT11_ReadByte+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60b8:	68 85       	ldd	r22, Y+8	; 0x08
    60ba:	79 85       	ldd	r23, Y+9	; 0x09
    60bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    60be:	9b 85       	ldd	r25, Y+11	; 0x0b
    60c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60c4:	dc 01       	movw	r26, r24
    60c6:	cb 01       	movw	r24, r22
    60c8:	9f 83       	std	Y+7, r25	; 0x07
    60ca:	8e 83       	std	Y+6, r24	; 0x06
    60cc:	8e 81       	ldd	r24, Y+6	; 0x06
    60ce:	9f 81       	ldd	r25, Y+7	; 0x07
    60d0:	9b 83       	std	Y+3, r25	; 0x03
    60d2:	8a 83       	std	Y+2, r24	; 0x02
    60d4:	8a 81       	ldd	r24, Y+2	; 0x02
    60d6:	9b 81       	ldd	r25, Y+3	; 0x03
    60d8:	01 97       	sbiw	r24, 0x01	; 1
    60da:	f1 f7       	brne	.-4      	; 0x60d8 <DHT11_ReadByte+0x184>
    60dc:	9b 83       	std	Y+3, r25	; 0x03
    60de:	8a 83       	std	Y+2, r24	; 0x02
    60e0:	0f c0       	rjmp	.+30     	; 0x6100 <DHT11_ReadByte+0x1ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    60e2:	69 89       	ldd	r22, Y+17	; 0x11
    60e4:	7a 89       	ldd	r23, Y+18	; 0x12
    60e6:	8b 89       	ldd	r24, Y+19	; 0x13
    60e8:	9c 89       	ldd	r25, Y+20	; 0x14
    60ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60ee:	dc 01       	movw	r26, r24
    60f0:	cb 01       	movw	r24, r22
    60f2:	88 8b       	std	Y+16, r24	; 0x10
    60f4:	88 89       	ldd	r24, Y+16	; 0x10
    60f6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    60f8:	89 81       	ldd	r24, Y+1	; 0x01
    60fa:	8a 95       	dec	r24
    60fc:	f1 f7       	brne	.-4      	; 0x60fa <DHT11_ReadByte+0x1a6>
    60fe:	89 83       	std	Y+1, r24	; 0x01
		{
			DIO_enuGetPinVal(DHT_PORT,DHT_PIN,&Local_PinValue);
		}
		_delay_us(30); // Wait for 30 us

		DIO_enuGetPinVal(DHT_PORT,DHT_PIN,&Local_PinValue);
    6100:	9e 01       	movw	r18, r28
    6102:	25 5e       	subi	r18, 0xE5	; 229
    6104:	3f 4f       	sbci	r19, 0xFF	; 255
    6106:	83 e0       	ldi	r24, 0x03	; 3
    6108:	66 e0       	ldi	r22, 0x06	; 6
    610a:	a9 01       	movw	r20, r18
    610c:	0e 94 41 1c 	call	0x3882	; 0x3882 <DIO_enuGetPinVal>
		if (Local_PinValue == DIO_u8HIGH)
    6110:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6112:	81 30       	cpi	r24, 0x01	; 1
    6114:	b1 f4       	brne	.+44     	; 0x6142 <DHT11_ReadByte+0x1ee>
		{
			Local_Data |= (1 << (7 - i));
    6116:	89 8d       	ldd	r24, Y+25	; 0x19
    6118:	28 2f       	mov	r18, r24
    611a:	30 e0       	ldi	r19, 0x00	; 0
    611c:	87 e0       	ldi	r24, 0x07	; 7
    611e:	90 e0       	ldi	r25, 0x00	; 0
    6120:	ac 01       	movw	r20, r24
    6122:	42 1b       	sub	r20, r18
    6124:	53 0b       	sbc	r21, r19
    6126:	9a 01       	movw	r18, r20
    6128:	81 e0       	ldi	r24, 0x01	; 1
    612a:	90 e0       	ldi	r25, 0x00	; 0
    612c:	02 2e       	mov	r0, r18
    612e:	02 c0       	rjmp	.+4      	; 0x6134 <DHT11_ReadByte+0x1e0>
    6130:	88 0f       	add	r24, r24
    6132:	99 1f       	adc	r25, r25
    6134:	0a 94       	dec	r0
    6136:	e2 f7       	brpl	.-8      	; 0x6130 <DHT11_ReadByte+0x1dc>
    6138:	98 2f       	mov	r25, r24
    613a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    613c:	89 2b       	or	r24, r25
    613e:	8a 8f       	std	Y+26, r24	; 0x1a
    6140:	1f c0       	rjmp	.+62     	; 0x6180 <DHT11_ReadByte+0x22c>
		}
		else
		{
			Local_Data &= (~(1 << (7 - i)));
    6142:	89 8d       	ldd	r24, Y+25	; 0x19
    6144:	28 2f       	mov	r18, r24
    6146:	30 e0       	ldi	r19, 0x00	; 0
    6148:	87 e0       	ldi	r24, 0x07	; 7
    614a:	90 e0       	ldi	r25, 0x00	; 0
    614c:	ac 01       	movw	r20, r24
    614e:	42 1b       	sub	r20, r18
    6150:	53 0b       	sbc	r21, r19
    6152:	9a 01       	movw	r18, r20
    6154:	81 e0       	ldi	r24, 0x01	; 1
    6156:	90 e0       	ldi	r25, 0x00	; 0
    6158:	02 2e       	mov	r0, r18
    615a:	02 c0       	rjmp	.+4      	; 0x6160 <DHT11_ReadByte+0x20c>
    615c:	88 0f       	add	r24, r24
    615e:	99 1f       	adc	r25, r25
    6160:	0a 94       	dec	r0
    6162:	e2 f7       	brpl	.-8      	; 0x615c <DHT11_ReadByte+0x208>
    6164:	98 2f       	mov	r25, r24
    6166:	90 95       	com	r25
    6168:	8a 8d       	ldd	r24, Y+26	; 0x1a
    616a:	89 23       	and	r24, r25
    616c:	8a 8f       	std	Y+26, r24	; 0x1a
    616e:	08 c0       	rjmp	.+16     	; 0x6180 <DHT11_ReadByte+0x22c>
		}
		while (Local_PinValue == DIO_u8HIGH) // Wait for pin to go low
		{
			DIO_enuGetPinVal(DHT_PORT,DHT_PIN,&Local_PinValue);
    6170:	9e 01       	movw	r18, r28
    6172:	25 5e       	subi	r18, 0xE5	; 229
    6174:	3f 4f       	sbci	r19, 0xFF	; 255
    6176:	83 e0       	ldi	r24, 0x03	; 3
    6178:	66 e0       	ldi	r22, 0x06	; 6
    617a:	a9 01       	movw	r20, r18
    617c:	0e 94 41 1c 	call	0x3882	; 0x3882 <DIO_enuGetPinVal>
		}
		else
		{
			Local_Data &= (~(1 << (7 - i)));
		}
		while (Local_PinValue == DIO_u8HIGH) // Wait for pin to go low
    6180:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6182:	81 30       	cpi	r24, 0x01	; 1
    6184:	a9 f3       	breq	.-22     	; 0x6170 <DHT11_ReadByte+0x21c>

// Private function to read a byte from DHT11
static u8 DHT11_ReadByte(void)
{
	u8 Local_Data = 0,Local_PinValue;
	for (u8 i = 0; i < 8; i++)
    6186:	89 8d       	ldd	r24, Y+25	; 0x19
    6188:	8f 5f       	subi	r24, 0xFF	; 255
    618a:	89 8f       	std	Y+25, r24	; 0x19
    618c:	89 8d       	ldd	r24, Y+25	; 0x19
    618e:	88 30       	cpi	r24, 0x08	; 8
    6190:	08 f4       	brcc	.+2      	; 0x6194 <DHT11_ReadByte+0x240>
    6192:	f5 ce       	rjmp	.-534    	; 0x5f7e <DHT11_ReadByte+0x2a>
		while (Local_PinValue == DIO_u8HIGH) // Wait for pin to go low
		{
			DIO_enuGetPinVal(DHT_PORT,DHT_PIN,&Local_PinValue);
		}
	}
	return Local_Data;
    6194:	8a 8d       	ldd	r24, Y+26	; 0x1a
}
    6196:	6b 96       	adiw	r28, 0x1b	; 27
    6198:	0f b6       	in	r0, 0x3f	; 63
    619a:	f8 94       	cli
    619c:	de bf       	out	0x3e, r29	; 62
    619e:	0f be       	out	0x3f, r0	; 63
    61a0:	cd bf       	out	0x3d, r28	; 61
    61a2:	cf 91       	pop	r28
    61a4:	df 91       	pop	r29
    61a6:	08 95       	ret

000061a8 <DC_MOTOR_enuInit>:
#include "DC_MOTOR_config.h"

extern DC_MOTOR_t DC_MOTOR_AstrDcMotorConfig[DC_MOTOR_NUM];

ES_t DC_MOTOR_enuInit(DC_MOTOR_t *Copy_pAstrDcMotorConfig)
{
    61a8:	df 93       	push	r29
    61aa:	cf 93       	push	r28
    61ac:	00 d0       	rcall	.+0      	; 0x61ae <DC_MOTOR_enuInit+0x6>
    61ae:	00 d0       	rcall	.+0      	; 0x61b0 <DC_MOTOR_enuInit+0x8>
    61b0:	cd b7       	in	r28, 0x3d	; 61
    61b2:	de b7       	in	r29, 0x3e	; 62
    61b4:	9c 83       	std	Y+4, r25	; 0x04
    61b6:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    61b8:	81 e0       	ldi	r24, 0x01	; 1
    61ba:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_pAstrDcMotorConfig != NULL)
    61bc:	8b 81       	ldd	r24, Y+3	; 0x03
    61be:	9c 81       	ldd	r25, Y+4	; 0x04
    61c0:	00 97       	sbiw	r24, 0x00	; 0
    61c2:	09 f4       	brne	.+2      	; 0x61c6 <DC_MOTOR_enuInit+0x1e>
    61c4:	55 c0       	rjmp	.+170    	; 0x6270 <DC_MOTOR_enuInit+0xc8>
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < DC_MOTOR_NUM; Local_u8Iterator++)
    61c6:	19 82       	std	Y+1, r1	; 0x01
    61c8:	4d c0       	rjmp	.+154    	; 0x6264 <DC_MOTOR_enuInit+0xbc>
		{
			DIO_enuSetPinDirection(Copy_pAstrDcMotorConfig[Local_u8Iterator].DC_MOTOR_u8In1PortID,Copy_pAstrDcMotorConfig[Local_u8Iterator].DC_MOTOR_u8In1PinID,DIO_u8OUTPUT);
    61ca:	89 81       	ldd	r24, Y+1	; 0x01
    61cc:	28 2f       	mov	r18, r24
    61ce:	30 e0       	ldi	r19, 0x00	; 0
    61d0:	c9 01       	movw	r24, r18
    61d2:	88 0f       	add	r24, r24
    61d4:	99 1f       	adc	r25, r25
    61d6:	88 0f       	add	r24, r24
    61d8:	99 1f       	adc	r25, r25
    61da:	28 0f       	add	r18, r24
    61dc:	39 1f       	adc	r19, r25
    61de:	8b 81       	ldd	r24, Y+3	; 0x03
    61e0:	9c 81       	ldd	r25, Y+4	; 0x04
    61e2:	fc 01       	movw	r30, r24
    61e4:	e2 0f       	add	r30, r18
    61e6:	f3 1f       	adc	r31, r19
    61e8:	40 81       	ld	r20, Z
    61ea:	89 81       	ldd	r24, Y+1	; 0x01
    61ec:	28 2f       	mov	r18, r24
    61ee:	30 e0       	ldi	r19, 0x00	; 0
    61f0:	c9 01       	movw	r24, r18
    61f2:	88 0f       	add	r24, r24
    61f4:	99 1f       	adc	r25, r25
    61f6:	88 0f       	add	r24, r24
    61f8:	99 1f       	adc	r25, r25
    61fa:	28 0f       	add	r18, r24
    61fc:	39 1f       	adc	r19, r25
    61fe:	8b 81       	ldd	r24, Y+3	; 0x03
    6200:	9c 81       	ldd	r25, Y+4	; 0x04
    6202:	fc 01       	movw	r30, r24
    6204:	e2 0f       	add	r30, r18
    6206:	f3 1f       	adc	r31, r19
    6208:	91 81       	ldd	r25, Z+1	; 0x01
    620a:	84 2f       	mov	r24, r20
    620c:	69 2f       	mov	r22, r25
    620e:	41 e0       	ldi	r20, 0x01	; 1
    6210:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <DIO_enuSetPinDirection>
			DIO_enuSetPinDirection(Copy_pAstrDcMotorConfig[Local_u8Iterator].DC_MOTOR_u8In2PortID,Copy_pAstrDcMotorConfig[Local_u8Iterator].DC_MOTOR_u8In2PinID,DIO_u8OUTPUT);
    6214:	89 81       	ldd	r24, Y+1	; 0x01
    6216:	28 2f       	mov	r18, r24
    6218:	30 e0       	ldi	r19, 0x00	; 0
    621a:	c9 01       	movw	r24, r18
    621c:	88 0f       	add	r24, r24
    621e:	99 1f       	adc	r25, r25
    6220:	88 0f       	add	r24, r24
    6222:	99 1f       	adc	r25, r25
    6224:	28 0f       	add	r18, r24
    6226:	39 1f       	adc	r19, r25
    6228:	8b 81       	ldd	r24, Y+3	; 0x03
    622a:	9c 81       	ldd	r25, Y+4	; 0x04
    622c:	fc 01       	movw	r30, r24
    622e:	e2 0f       	add	r30, r18
    6230:	f3 1f       	adc	r31, r19
    6232:	42 81       	ldd	r20, Z+2	; 0x02
    6234:	89 81       	ldd	r24, Y+1	; 0x01
    6236:	28 2f       	mov	r18, r24
    6238:	30 e0       	ldi	r19, 0x00	; 0
    623a:	c9 01       	movw	r24, r18
    623c:	88 0f       	add	r24, r24
    623e:	99 1f       	adc	r25, r25
    6240:	88 0f       	add	r24, r24
    6242:	99 1f       	adc	r25, r25
    6244:	28 0f       	add	r18, r24
    6246:	39 1f       	adc	r19, r25
    6248:	8b 81       	ldd	r24, Y+3	; 0x03
    624a:	9c 81       	ldd	r25, Y+4	; 0x04
    624c:	fc 01       	movw	r30, r24
    624e:	e2 0f       	add	r30, r18
    6250:	f3 1f       	adc	r31, r19
    6252:	93 81       	ldd	r25, Z+3	; 0x03
    6254:	84 2f       	mov	r24, r20
    6256:	69 2f       	mov	r22, r25
    6258:	41 e0       	ldi	r20, 0x01	; 1
    625a:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <DIO_enuSetPinDirection>
	ES_t Local_enuErrorState = ES_NOK;

	if(Copy_pAstrDcMotorConfig != NULL)
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < DC_MOTOR_NUM; Local_u8Iterator++)
    625e:	89 81       	ldd	r24, Y+1	; 0x01
    6260:	8f 5f       	subi	r24, 0xFF	; 255
    6262:	89 83       	std	Y+1, r24	; 0x01
    6264:	89 81       	ldd	r24, Y+1	; 0x01
    6266:	83 30       	cpi	r24, 0x03	; 3
    6268:	08 f4       	brcc	.+2      	; 0x626c <DC_MOTOR_enuInit+0xc4>
    626a:	af cf       	rjmp	.-162    	; 0x61ca <DC_MOTOR_enuInit+0x22>
		{
			DIO_enuSetPinDirection(Copy_pAstrDcMotorConfig[Local_u8Iterator].DC_MOTOR_u8In1PortID,Copy_pAstrDcMotorConfig[Local_u8Iterator].DC_MOTOR_u8In1PinID,DIO_u8OUTPUT);
			DIO_enuSetPinDirection(Copy_pAstrDcMotorConfig[Local_u8Iterator].DC_MOTOR_u8In2PortID,Copy_pAstrDcMotorConfig[Local_u8Iterator].DC_MOTOR_u8In2PinID,DIO_u8OUTPUT);
		}

		Local_enuErrorState = ES_OK;
    626c:	1a 82       	std	Y+2, r1	; 0x02
    626e:	02 c0       	rjmp	.+4      	; 0x6274 <DC_MOTOR_enuInit+0xcc>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    6270:	82 e0       	ldi	r24, 0x02	; 2
    6272:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    6274:	8a 81       	ldd	r24, Y+2	; 0x02
}
    6276:	0f 90       	pop	r0
    6278:	0f 90       	pop	r0
    627a:	0f 90       	pop	r0
    627c:	0f 90       	pop	r0
    627e:	cf 91       	pop	r28
    6280:	df 91       	pop	r29
    6282:	08 95       	ret

00006284 <DC_MOTOR_enuOnCW>:


ES_t DC_MOTOR_enuOnCW(u8 Copy_u8DcMotorID)
{
    6284:	df 93       	push	r29
    6286:	cf 93       	push	r28
    6288:	00 d0       	rcall	.+0      	; 0x628a <DC_MOTOR_enuOnCW+0x6>
    628a:	cd b7       	in	r28, 0x3d	; 61
    628c:	de b7       	in	r29, 0x3e	; 62
    628e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    6290:	81 e0       	ldi	r24, 0x01	; 1
    6292:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8DcMotorID < DC_MOTOR_NUM)
    6294:	8a 81       	ldd	r24, Y+2	; 0x02
    6296:	83 30       	cpi	r24, 0x03	; 3
    6298:	08 f0       	brcs	.+2      	; 0x629c <DC_MOTOR_enuOnCW+0x18>
    629a:	44 c0       	rjmp	.+136    	; 0x6324 <DC_MOTOR_enuOnCW+0xa0>
	{
		DIO_enuSetPinVal(DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In1PortID,DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In1PinID,DIO_u8HIGH);
    629c:	8a 81       	ldd	r24, Y+2	; 0x02
    629e:	28 2f       	mov	r18, r24
    62a0:	30 e0       	ldi	r19, 0x00	; 0
    62a2:	c9 01       	movw	r24, r18
    62a4:	88 0f       	add	r24, r24
    62a6:	99 1f       	adc	r25, r25
    62a8:	88 0f       	add	r24, r24
    62aa:	99 1f       	adc	r25, r25
    62ac:	82 0f       	add	r24, r18
    62ae:	93 1f       	adc	r25, r19
    62b0:	fc 01       	movw	r30, r24
    62b2:	e8 51       	subi	r30, 0x18	; 24
    62b4:	fe 4f       	sbci	r31, 0xFE	; 254
    62b6:	40 81       	ld	r20, Z
    62b8:	8a 81       	ldd	r24, Y+2	; 0x02
    62ba:	28 2f       	mov	r18, r24
    62bc:	30 e0       	ldi	r19, 0x00	; 0
    62be:	c9 01       	movw	r24, r18
    62c0:	88 0f       	add	r24, r24
    62c2:	99 1f       	adc	r25, r25
    62c4:	88 0f       	add	r24, r24
    62c6:	99 1f       	adc	r25, r25
    62c8:	82 0f       	add	r24, r18
    62ca:	93 1f       	adc	r25, r19
    62cc:	fc 01       	movw	r30, r24
    62ce:	e7 51       	subi	r30, 0x17	; 23
    62d0:	fe 4f       	sbci	r31, 0xFE	; 254
    62d2:	90 81       	ld	r25, Z
    62d4:	84 2f       	mov	r24, r20
    62d6:	69 2f       	mov	r22, r25
    62d8:	41 e0       	ldi	r20, 0x01	; 1
    62da:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
		DIO_enuSetPinVal(DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In2PortID,DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In2PinID,DIO_u8LOW);
    62de:	8a 81       	ldd	r24, Y+2	; 0x02
    62e0:	28 2f       	mov	r18, r24
    62e2:	30 e0       	ldi	r19, 0x00	; 0
    62e4:	c9 01       	movw	r24, r18
    62e6:	88 0f       	add	r24, r24
    62e8:	99 1f       	adc	r25, r25
    62ea:	88 0f       	add	r24, r24
    62ec:	99 1f       	adc	r25, r25
    62ee:	82 0f       	add	r24, r18
    62f0:	93 1f       	adc	r25, r19
    62f2:	fc 01       	movw	r30, r24
    62f4:	e6 51       	subi	r30, 0x16	; 22
    62f6:	fe 4f       	sbci	r31, 0xFE	; 254
    62f8:	40 81       	ld	r20, Z
    62fa:	8a 81       	ldd	r24, Y+2	; 0x02
    62fc:	28 2f       	mov	r18, r24
    62fe:	30 e0       	ldi	r19, 0x00	; 0
    6300:	c9 01       	movw	r24, r18
    6302:	88 0f       	add	r24, r24
    6304:	99 1f       	adc	r25, r25
    6306:	88 0f       	add	r24, r24
    6308:	99 1f       	adc	r25, r25
    630a:	82 0f       	add	r24, r18
    630c:	93 1f       	adc	r25, r19
    630e:	fc 01       	movw	r30, r24
    6310:	e5 51       	subi	r30, 0x15	; 21
    6312:	fe 4f       	sbci	r31, 0xFE	; 254
    6314:	90 81       	ld	r25, Z
    6316:	84 2f       	mov	r24, r20
    6318:	69 2f       	mov	r22, r25
    631a:	40 e0       	ldi	r20, 0x00	; 0
    631c:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
		Local_enuErrorState = ES_OK;
    6320:	19 82       	std	Y+1, r1	; 0x01
    6322:	02 c0       	rjmp	.+4      	; 0x6328 <DC_MOTOR_enuOnCW+0xa4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    6324:	83 e0       	ldi	r24, 0x03	; 3
    6326:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    6328:	89 81       	ldd	r24, Y+1	; 0x01
}
    632a:	0f 90       	pop	r0
    632c:	0f 90       	pop	r0
    632e:	cf 91       	pop	r28
    6330:	df 91       	pop	r29
    6332:	08 95       	ret

00006334 <DC_MOTOR_enuOnCCW>:

ES_t DC_MOTOR_enuOnCCW(u8 Copy_u8DcMotorID)
{
    6334:	df 93       	push	r29
    6336:	cf 93       	push	r28
    6338:	00 d0       	rcall	.+0      	; 0x633a <DC_MOTOR_enuOnCCW+0x6>
    633a:	cd b7       	in	r28, 0x3d	; 61
    633c:	de b7       	in	r29, 0x3e	; 62
    633e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    6340:	81 e0       	ldi	r24, 0x01	; 1
    6342:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8DcMotorID < DC_MOTOR_NUM)
    6344:	8a 81       	ldd	r24, Y+2	; 0x02
    6346:	83 30       	cpi	r24, 0x03	; 3
    6348:	08 f0       	brcs	.+2      	; 0x634c <DC_MOTOR_enuOnCCW+0x18>
    634a:	44 c0       	rjmp	.+136    	; 0x63d4 <DC_MOTOR_enuOnCCW+0xa0>
	{
		DIO_enuSetPinVal(DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In1PortID,DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In1PinID,DIO_u8LOW);
    634c:	8a 81       	ldd	r24, Y+2	; 0x02
    634e:	28 2f       	mov	r18, r24
    6350:	30 e0       	ldi	r19, 0x00	; 0
    6352:	c9 01       	movw	r24, r18
    6354:	88 0f       	add	r24, r24
    6356:	99 1f       	adc	r25, r25
    6358:	88 0f       	add	r24, r24
    635a:	99 1f       	adc	r25, r25
    635c:	82 0f       	add	r24, r18
    635e:	93 1f       	adc	r25, r19
    6360:	fc 01       	movw	r30, r24
    6362:	e8 51       	subi	r30, 0x18	; 24
    6364:	fe 4f       	sbci	r31, 0xFE	; 254
    6366:	40 81       	ld	r20, Z
    6368:	8a 81       	ldd	r24, Y+2	; 0x02
    636a:	28 2f       	mov	r18, r24
    636c:	30 e0       	ldi	r19, 0x00	; 0
    636e:	c9 01       	movw	r24, r18
    6370:	88 0f       	add	r24, r24
    6372:	99 1f       	adc	r25, r25
    6374:	88 0f       	add	r24, r24
    6376:	99 1f       	adc	r25, r25
    6378:	82 0f       	add	r24, r18
    637a:	93 1f       	adc	r25, r19
    637c:	fc 01       	movw	r30, r24
    637e:	e7 51       	subi	r30, 0x17	; 23
    6380:	fe 4f       	sbci	r31, 0xFE	; 254
    6382:	90 81       	ld	r25, Z
    6384:	84 2f       	mov	r24, r20
    6386:	69 2f       	mov	r22, r25
    6388:	40 e0       	ldi	r20, 0x00	; 0
    638a:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
		DIO_enuSetPinVal(DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In2PortID,DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In2PinID,DIO_u8HIGH);
    638e:	8a 81       	ldd	r24, Y+2	; 0x02
    6390:	28 2f       	mov	r18, r24
    6392:	30 e0       	ldi	r19, 0x00	; 0
    6394:	c9 01       	movw	r24, r18
    6396:	88 0f       	add	r24, r24
    6398:	99 1f       	adc	r25, r25
    639a:	88 0f       	add	r24, r24
    639c:	99 1f       	adc	r25, r25
    639e:	82 0f       	add	r24, r18
    63a0:	93 1f       	adc	r25, r19
    63a2:	fc 01       	movw	r30, r24
    63a4:	e6 51       	subi	r30, 0x16	; 22
    63a6:	fe 4f       	sbci	r31, 0xFE	; 254
    63a8:	40 81       	ld	r20, Z
    63aa:	8a 81       	ldd	r24, Y+2	; 0x02
    63ac:	28 2f       	mov	r18, r24
    63ae:	30 e0       	ldi	r19, 0x00	; 0
    63b0:	c9 01       	movw	r24, r18
    63b2:	88 0f       	add	r24, r24
    63b4:	99 1f       	adc	r25, r25
    63b6:	88 0f       	add	r24, r24
    63b8:	99 1f       	adc	r25, r25
    63ba:	82 0f       	add	r24, r18
    63bc:	93 1f       	adc	r25, r19
    63be:	fc 01       	movw	r30, r24
    63c0:	e5 51       	subi	r30, 0x15	; 21
    63c2:	fe 4f       	sbci	r31, 0xFE	; 254
    63c4:	90 81       	ld	r25, Z
    63c6:	84 2f       	mov	r24, r20
    63c8:	69 2f       	mov	r22, r25
    63ca:	41 e0       	ldi	r20, 0x01	; 1
    63cc:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
		Local_enuErrorState = ES_OK;
    63d0:	19 82       	std	Y+1, r1	; 0x01
    63d2:	02 c0       	rjmp	.+4      	; 0x63d8 <DC_MOTOR_enuOnCCW+0xa4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    63d4:	83 e0       	ldi	r24, 0x03	; 3
    63d6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    63d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    63da:	0f 90       	pop	r0
    63dc:	0f 90       	pop	r0
    63de:	cf 91       	pop	r28
    63e0:	df 91       	pop	r29
    63e2:	08 95       	ret

000063e4 <DC_MOTOR_enuOff>:

ES_t DC_MOTOR_enuOff(u8 Copy_u8DcMotorID)
{
    63e4:	df 93       	push	r29
    63e6:	cf 93       	push	r28
    63e8:	00 d0       	rcall	.+0      	; 0x63ea <DC_MOTOR_enuOff+0x6>
    63ea:	cd b7       	in	r28, 0x3d	; 61
    63ec:	de b7       	in	r29, 0x3e	; 62
    63ee:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    63f0:	81 e0       	ldi	r24, 0x01	; 1
    63f2:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8DcMotorID < DC_MOTOR_NUM)
    63f4:	8a 81       	ldd	r24, Y+2	; 0x02
    63f6:	83 30       	cpi	r24, 0x03	; 3
    63f8:	08 f0       	brcs	.+2      	; 0x63fc <DC_MOTOR_enuOff+0x18>
    63fa:	44 c0       	rjmp	.+136    	; 0x6484 <DC_MOTOR_enuOff+0xa0>
	{
		DIO_enuSetPinVal(DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In1PortID,DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In1PinID,DIO_u8LOW);
    63fc:	8a 81       	ldd	r24, Y+2	; 0x02
    63fe:	28 2f       	mov	r18, r24
    6400:	30 e0       	ldi	r19, 0x00	; 0
    6402:	c9 01       	movw	r24, r18
    6404:	88 0f       	add	r24, r24
    6406:	99 1f       	adc	r25, r25
    6408:	88 0f       	add	r24, r24
    640a:	99 1f       	adc	r25, r25
    640c:	82 0f       	add	r24, r18
    640e:	93 1f       	adc	r25, r19
    6410:	fc 01       	movw	r30, r24
    6412:	e8 51       	subi	r30, 0x18	; 24
    6414:	fe 4f       	sbci	r31, 0xFE	; 254
    6416:	40 81       	ld	r20, Z
    6418:	8a 81       	ldd	r24, Y+2	; 0x02
    641a:	28 2f       	mov	r18, r24
    641c:	30 e0       	ldi	r19, 0x00	; 0
    641e:	c9 01       	movw	r24, r18
    6420:	88 0f       	add	r24, r24
    6422:	99 1f       	adc	r25, r25
    6424:	88 0f       	add	r24, r24
    6426:	99 1f       	adc	r25, r25
    6428:	82 0f       	add	r24, r18
    642a:	93 1f       	adc	r25, r19
    642c:	fc 01       	movw	r30, r24
    642e:	e7 51       	subi	r30, 0x17	; 23
    6430:	fe 4f       	sbci	r31, 0xFE	; 254
    6432:	90 81       	ld	r25, Z
    6434:	84 2f       	mov	r24, r20
    6436:	69 2f       	mov	r22, r25
    6438:	40 e0       	ldi	r20, 0x00	; 0
    643a:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
		DIO_enuSetPinVal(DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In2PortID,DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_u8In2PinID,DIO_u8LOW);
    643e:	8a 81       	ldd	r24, Y+2	; 0x02
    6440:	28 2f       	mov	r18, r24
    6442:	30 e0       	ldi	r19, 0x00	; 0
    6444:	c9 01       	movw	r24, r18
    6446:	88 0f       	add	r24, r24
    6448:	99 1f       	adc	r25, r25
    644a:	88 0f       	add	r24, r24
    644c:	99 1f       	adc	r25, r25
    644e:	82 0f       	add	r24, r18
    6450:	93 1f       	adc	r25, r19
    6452:	fc 01       	movw	r30, r24
    6454:	e6 51       	subi	r30, 0x16	; 22
    6456:	fe 4f       	sbci	r31, 0xFE	; 254
    6458:	40 81       	ld	r20, Z
    645a:	8a 81       	ldd	r24, Y+2	; 0x02
    645c:	28 2f       	mov	r18, r24
    645e:	30 e0       	ldi	r19, 0x00	; 0
    6460:	c9 01       	movw	r24, r18
    6462:	88 0f       	add	r24, r24
    6464:	99 1f       	adc	r25, r25
    6466:	88 0f       	add	r24, r24
    6468:	99 1f       	adc	r25, r25
    646a:	82 0f       	add	r24, r18
    646c:	93 1f       	adc	r25, r19
    646e:	fc 01       	movw	r30, r24
    6470:	e5 51       	subi	r30, 0x15	; 21
    6472:	fe 4f       	sbci	r31, 0xFE	; 254
    6474:	90 81       	ld	r25, Z
    6476:	84 2f       	mov	r24, r20
    6478:	69 2f       	mov	r22, r25
    647a:	40 e0       	ldi	r20, 0x00	; 0
    647c:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
		Local_enuErrorState = ES_OK;
    6480:	19 82       	std	Y+1, r1	; 0x01
    6482:	02 c0       	rjmp	.+4      	; 0x6488 <DC_MOTOR_enuOff+0xa4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    6484:	83 e0       	ldi	r24, 0x03	; 3
    6486:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    6488:	89 81       	ldd	r24, Y+1	; 0x01
}
    648a:	0f 90       	pop	r0
    648c:	0f 90       	pop	r0
    648e:	cf 91       	pop	r28
    6490:	df 91       	pop	r29
    6492:	08 95       	ret

00006494 <DC_MOTOR_SetSpeed>:

/*Speed 0:100*/
ES_t DC_MOTOR_SetSpeed(u8 Copy_u8DcMotorID, u8 Copy_u8DcMotorSpeed)
{
    6494:	df 93       	push	r29
    6496:	cf 93       	push	r28
    6498:	00 d0       	rcall	.+0      	; 0x649a <DC_MOTOR_SetSpeed+0x6>
    649a:	00 d0       	rcall	.+0      	; 0x649c <DC_MOTOR_SetSpeed+0x8>
    649c:	0f 92       	push	r0
    649e:	cd b7       	in	r28, 0x3d	; 61
    64a0:	de b7       	in	r29, 0x3e	; 62
    64a2:	8a 83       	std	Y+2, r24	; 0x02
    64a4:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    64a6:	81 e0       	ldi	r24, 0x01	; 1
    64a8:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8DcMotorID < DC_MOTOR_NUM && Copy_u8DcMotorSpeed <= 100)
    64aa:	8a 81       	ldd	r24, Y+2	; 0x02
    64ac:	83 30       	cpi	r24, 0x03	; 3
    64ae:	08 f0       	brcs	.+2      	; 0x64b2 <DC_MOTOR_SetSpeed+0x1e>
    64b0:	4f c0       	rjmp	.+158    	; 0x6550 <DC_MOTOR_SetSpeed+0xbc>
    64b2:	8b 81       	ldd	r24, Y+3	; 0x03
    64b4:	85 36       	cpi	r24, 0x65	; 101
    64b6:	08 f0       	brcs	.+2      	; 0x64ba <DC_MOTOR_SetSpeed+0x26>
    64b8:	4b c0       	rjmp	.+150    	; 0x6550 <DC_MOTOR_SetSpeed+0xbc>
	{
		switch(DC_MOTOR_AstrDcMotorConfig[Copy_u8DcMotorID].DC_MOTOR_enuEnPin)
    64ba:	8a 81       	ldd	r24, Y+2	; 0x02
    64bc:	28 2f       	mov	r18, r24
    64be:	30 e0       	ldi	r19, 0x00	; 0
    64c0:	c9 01       	movw	r24, r18
    64c2:	88 0f       	add	r24, r24
    64c4:	99 1f       	adc	r25, r25
    64c6:	88 0f       	add	r24, r24
    64c8:	99 1f       	adc	r25, r25
    64ca:	82 0f       	add	r24, r18
    64cc:	93 1f       	adc	r25, r19
    64ce:	fc 01       	movw	r30, r24
    64d0:	e4 51       	subi	r30, 0x14	; 20
    64d2:	fe 4f       	sbci	r31, 0xFE	; 254
    64d4:	80 81       	ld	r24, Z
    64d6:	28 2f       	mov	r18, r24
    64d8:	30 e0       	ldi	r19, 0x00	; 0
    64da:	3d 83       	std	Y+5, r19	; 0x05
    64dc:	2c 83       	std	Y+4, r18	; 0x04
    64de:	8c 81       	ldd	r24, Y+4	; 0x04
    64e0:	9d 81       	ldd	r25, Y+5	; 0x05
    64e2:	82 30       	cpi	r24, 0x02	; 2
    64e4:	91 05       	cpc	r25, r1
    64e6:	11 f1       	breq	.+68     	; 0x652c <DC_MOTOR_SetSpeed+0x98>
    64e8:	2c 81       	ldd	r18, Y+4	; 0x04
    64ea:	3d 81       	ldd	r19, Y+5	; 0x05
    64ec:	23 30       	cpi	r18, 0x03	; 3
    64ee:	31 05       	cpc	r19, r1
    64f0:	54 f4       	brge	.+20     	; 0x6506 <DC_MOTOR_SetSpeed+0x72>
    64f2:	8c 81       	ldd	r24, Y+4	; 0x04
    64f4:	9d 81       	ldd	r25, Y+5	; 0x05
    64f6:	00 97       	sbiw	r24, 0x00	; 0
    64f8:	89 f0       	breq	.+34     	; 0x651c <DC_MOTOR_SetSpeed+0x88>
    64fa:	2c 81       	ldd	r18, Y+4	; 0x04
    64fc:	3d 81       	ldd	r19, Y+5	; 0x05
    64fe:	21 30       	cpi	r18, 0x01	; 1
    6500:	31 05       	cpc	r19, r1
    6502:	79 f0       	breq	.+30     	; 0x6522 <DC_MOTOR_SetSpeed+0x8e>
    6504:	22 c0       	rjmp	.+68     	; 0x654a <DC_MOTOR_SetSpeed+0xb6>
    6506:	8c 81       	ldd	r24, Y+4	; 0x04
    6508:	9d 81       	ldd	r25, Y+5	; 0x05
    650a:	83 30       	cpi	r24, 0x03	; 3
    650c:	91 05       	cpc	r25, r1
    650e:	99 f0       	breq	.+38     	; 0x6536 <DC_MOTOR_SetSpeed+0xa2>
    6510:	2c 81       	ldd	r18, Y+4	; 0x04
    6512:	3d 81       	ldd	r19, Y+5	; 0x05
    6514:	24 30       	cpi	r18, 0x04	; 4
    6516:	31 05       	cpc	r19, r1
    6518:	99 f0       	breq	.+38     	; 0x6540 <DC_MOTOR_SetSpeed+0xac>
    651a:	17 c0       	rjmp	.+46     	; 0x654a <DC_MOTOR_SetSpeed+0xb6>
		{
		case PWM_NONE:
			Local_enuErrorState = ES_NOK;
    651c:	81 e0       	ldi	r24, 0x01	; 1
    651e:	89 83       	std	Y+1, r24	; 0x01
    6520:	19 c0       	rjmp	.+50     	; 0x6554 <DC_MOTOR_SetSpeed+0xc0>
			break;

		case PWM_OC0:
			TIMER0_enuGeneratePWM(Copy_u8DcMotorSpeed);
    6522:	8b 81       	ldd	r24, Y+3	; 0x03
    6524:	0e 94 99 11 	call	0x2332	; 0x2332 <TIMER0_enuGeneratePWM>
			Local_enuErrorState = ES_OK;
    6528:	19 82       	std	Y+1, r1	; 0x01
    652a:	14 c0       	rjmp	.+40     	; 0x6554 <DC_MOTOR_SetSpeed+0xc0>
			break;

		case PWM_OC1A:
			TIMER1_enuGeneratePWM_OCR1A(Copy_u8DcMotorSpeed);
    652c:	8b 81       	ldd	r24, Y+3	; 0x03
    652e:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <TIMER1_enuGeneratePWM_OCR1A>
			Local_enuErrorState = ES_OK;
    6532:	19 82       	std	Y+1, r1	; 0x01
    6534:	0f c0       	rjmp	.+30     	; 0x6554 <DC_MOTOR_SetSpeed+0xc0>
			break;

		case PWM_OC1B:
			TIMER1_enuGeneratePWM_OCR1B(Copy_u8DcMotorSpeed);
    6536:	8b 81       	ldd	r24, Y+3	; 0x03
    6538:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <TIMER1_enuGeneratePWM_OCR1B>
			Local_enuErrorState = ES_OK;
    653c:	19 82       	std	Y+1, r1	; 0x01
    653e:	0a c0       	rjmp	.+20     	; 0x6554 <DC_MOTOR_SetSpeed+0xc0>
			break;

		case PWM_OC2:
			TIMER2_enuGeneratePWM(Copy_u8DcMotorSpeed);
    6540:	8b 81       	ldd	r24, Y+3	; 0x03
    6542:	0e 94 8d 0b 	call	0x171a	; 0x171a <TIMER2_enuGeneratePWM>
			Local_enuErrorState = ES_OK;
    6546:	19 82       	std	Y+1, r1	; 0x01
    6548:	05 c0       	rjmp	.+10     	; 0x6554 <DC_MOTOR_SetSpeed+0xc0>
			break;

		default:
			Local_enuErrorState = ES_NOK;
    654a:	81 e0       	ldi	r24, 0x01	; 1
    654c:	89 83       	std	Y+1, r24	; 0x01
    654e:	02 c0       	rjmp	.+4      	; 0x6554 <DC_MOTOR_SetSpeed+0xc0>
			break;
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    6550:	83 e0       	ldi	r24, 0x03	; 3
    6552:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    6554:	89 81       	ldd	r24, Y+1	; 0x01
}
    6556:	0f 90       	pop	r0
    6558:	0f 90       	pop	r0
    655a:	0f 90       	pop	r0
    655c:	0f 90       	pop	r0
    655e:	0f 90       	pop	r0
    6560:	cf 91       	pop	r28
    6562:	df 91       	pop	r29
    6564:	08 95       	ret

00006566 <BUZZER_enuInit>:
#include "BUZZER_config.h"

extern BUZZER_t BUZZER_AstrBuzzerConfig[BUZZER_NUM];

ES_t BUZZER_enuInit(BUZZER_t *Copy_pAstrBuzzerConfig)
{
    6566:	df 93       	push	r29
    6568:	cf 93       	push	r28
    656a:	00 d0       	rcall	.+0      	; 0x656c <BUZZER_enuInit+0x6>
    656c:	00 d0       	rcall	.+0      	; 0x656e <BUZZER_enuInit+0x8>
    656e:	cd b7       	in	r28, 0x3d	; 61
    6570:	de b7       	in	r29, 0x3e	; 62
    6572:	9c 83       	std	Y+4, r25	; 0x04
    6574:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    6576:	81 e0       	ldi	r24, 0x01	; 1
    6578:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_pAstrBuzzerConfig != NULL)
    657a:	8b 81       	ldd	r24, Y+3	; 0x03
    657c:	9c 81       	ldd	r25, Y+4	; 0x04
    657e:	00 97       	sbiw	r24, 0x00	; 0
    6580:	09 f4       	brne	.+2      	; 0x6584 <BUZZER_enuInit+0x1e>
    6582:	93 c0       	rjmp	.+294    	; 0x66aa <BUZZER_enuInit+0x144>
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < BUZZER_NUM; Local_u8Iterator++)
    6584:	19 82       	std	Y+1, r1	; 0x01
    6586:	8c c0       	rjmp	.+280    	; 0x66a0 <BUZZER_enuInit+0x13a>
		{
			DIO_enuSetPinDirection(Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8PortID, Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8PinID, DIO_u8OUTPUT);
    6588:	89 81       	ldd	r24, Y+1	; 0x01
    658a:	28 2f       	mov	r18, r24
    658c:	30 e0       	ldi	r19, 0x00	; 0
    658e:	c9 01       	movw	r24, r18
    6590:	88 0f       	add	r24, r24
    6592:	99 1f       	adc	r25, r25
    6594:	28 0f       	add	r18, r24
    6596:	39 1f       	adc	r19, r25
    6598:	8b 81       	ldd	r24, Y+3	; 0x03
    659a:	9c 81       	ldd	r25, Y+4	; 0x04
    659c:	fc 01       	movw	r30, r24
    659e:	e2 0f       	add	r30, r18
    65a0:	f3 1f       	adc	r31, r19
    65a2:	40 81       	ld	r20, Z
    65a4:	89 81       	ldd	r24, Y+1	; 0x01
    65a6:	28 2f       	mov	r18, r24
    65a8:	30 e0       	ldi	r19, 0x00	; 0
    65aa:	c9 01       	movw	r24, r18
    65ac:	88 0f       	add	r24, r24
    65ae:	99 1f       	adc	r25, r25
    65b0:	28 0f       	add	r18, r24
    65b2:	39 1f       	adc	r19, r25
    65b4:	8b 81       	ldd	r24, Y+3	; 0x03
    65b6:	9c 81       	ldd	r25, Y+4	; 0x04
    65b8:	fc 01       	movw	r30, r24
    65ba:	e2 0f       	add	r30, r18
    65bc:	f3 1f       	adc	r31, r19
    65be:	91 81       	ldd	r25, Z+1	; 0x01
    65c0:	84 2f       	mov	r24, r20
    65c2:	69 2f       	mov	r22, r25
    65c4:	41 e0       	ldi	r20, 0x01	; 1
    65c6:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <DIO_enuSetPinDirection>
			if(Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8InitState == BUZZER_u8ON)
    65ca:	89 81       	ldd	r24, Y+1	; 0x01
    65cc:	28 2f       	mov	r18, r24
    65ce:	30 e0       	ldi	r19, 0x00	; 0
    65d0:	c9 01       	movw	r24, r18
    65d2:	88 0f       	add	r24, r24
    65d4:	99 1f       	adc	r25, r25
    65d6:	28 0f       	add	r18, r24
    65d8:	39 1f       	adc	r19, r25
    65da:	8b 81       	ldd	r24, Y+3	; 0x03
    65dc:	9c 81       	ldd	r25, Y+4	; 0x04
    65de:	fc 01       	movw	r30, r24
    65e0:	e2 0f       	add	r30, r18
    65e2:	f3 1f       	adc	r31, r19
    65e4:	82 81       	ldd	r24, Z+2	; 0x02
    65e6:	8a 30       	cpi	r24, 0x0A	; 10
    65e8:	19 f5       	brne	.+70     	; 0x6630 <BUZZER_enuInit+0xca>
			{
				Local_enuErrorState = DIO_enuSetPinVal(Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8PortID, Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8PinID, DIO_u8HIGH);
    65ea:	89 81       	ldd	r24, Y+1	; 0x01
    65ec:	28 2f       	mov	r18, r24
    65ee:	30 e0       	ldi	r19, 0x00	; 0
    65f0:	c9 01       	movw	r24, r18
    65f2:	88 0f       	add	r24, r24
    65f4:	99 1f       	adc	r25, r25
    65f6:	28 0f       	add	r18, r24
    65f8:	39 1f       	adc	r19, r25
    65fa:	8b 81       	ldd	r24, Y+3	; 0x03
    65fc:	9c 81       	ldd	r25, Y+4	; 0x04
    65fe:	fc 01       	movw	r30, r24
    6600:	e2 0f       	add	r30, r18
    6602:	f3 1f       	adc	r31, r19
    6604:	40 81       	ld	r20, Z
    6606:	89 81       	ldd	r24, Y+1	; 0x01
    6608:	28 2f       	mov	r18, r24
    660a:	30 e0       	ldi	r19, 0x00	; 0
    660c:	c9 01       	movw	r24, r18
    660e:	88 0f       	add	r24, r24
    6610:	99 1f       	adc	r25, r25
    6612:	28 0f       	add	r18, r24
    6614:	39 1f       	adc	r19, r25
    6616:	8b 81       	ldd	r24, Y+3	; 0x03
    6618:	9c 81       	ldd	r25, Y+4	; 0x04
    661a:	fc 01       	movw	r30, r24
    661c:	e2 0f       	add	r30, r18
    661e:	f3 1f       	adc	r31, r19
    6620:	91 81       	ldd	r25, Z+1	; 0x01
    6622:	84 2f       	mov	r24, r20
    6624:	69 2f       	mov	r22, r25
    6626:	41 e0       	ldi	r20, 0x01	; 1
    6628:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    662c:	8a 83       	std	Y+2, r24	; 0x02
    662e:	35 c0       	rjmp	.+106    	; 0x669a <BUZZER_enuInit+0x134>
			}
			else if(Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8InitState == BUZZER_u8OFF)
    6630:	89 81       	ldd	r24, Y+1	; 0x01
    6632:	28 2f       	mov	r18, r24
    6634:	30 e0       	ldi	r19, 0x00	; 0
    6636:	c9 01       	movw	r24, r18
    6638:	88 0f       	add	r24, r24
    663a:	99 1f       	adc	r25, r25
    663c:	28 0f       	add	r18, r24
    663e:	39 1f       	adc	r19, r25
    6640:	8b 81       	ldd	r24, Y+3	; 0x03
    6642:	9c 81       	ldd	r25, Y+4	; 0x04
    6644:	fc 01       	movw	r30, r24
    6646:	e2 0f       	add	r30, r18
    6648:	f3 1f       	adc	r31, r19
    664a:	82 81       	ldd	r24, Z+2	; 0x02
    664c:	8b 30       	cpi	r24, 0x0B	; 11
    664e:	19 f5       	brne	.+70     	; 0x6696 <BUZZER_enuInit+0x130>
			{
				Local_enuErrorState = DIO_enuSetPinVal(Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8PortID, Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8PinID, DIO_u8LOW);
    6650:	89 81       	ldd	r24, Y+1	; 0x01
    6652:	28 2f       	mov	r18, r24
    6654:	30 e0       	ldi	r19, 0x00	; 0
    6656:	c9 01       	movw	r24, r18
    6658:	88 0f       	add	r24, r24
    665a:	99 1f       	adc	r25, r25
    665c:	28 0f       	add	r18, r24
    665e:	39 1f       	adc	r19, r25
    6660:	8b 81       	ldd	r24, Y+3	; 0x03
    6662:	9c 81       	ldd	r25, Y+4	; 0x04
    6664:	fc 01       	movw	r30, r24
    6666:	e2 0f       	add	r30, r18
    6668:	f3 1f       	adc	r31, r19
    666a:	40 81       	ld	r20, Z
    666c:	89 81       	ldd	r24, Y+1	; 0x01
    666e:	28 2f       	mov	r18, r24
    6670:	30 e0       	ldi	r19, 0x00	; 0
    6672:	c9 01       	movw	r24, r18
    6674:	88 0f       	add	r24, r24
    6676:	99 1f       	adc	r25, r25
    6678:	28 0f       	add	r18, r24
    667a:	39 1f       	adc	r19, r25
    667c:	8b 81       	ldd	r24, Y+3	; 0x03
    667e:	9c 81       	ldd	r25, Y+4	; 0x04
    6680:	fc 01       	movw	r30, r24
    6682:	e2 0f       	add	r30, r18
    6684:	f3 1f       	adc	r31, r19
    6686:	91 81       	ldd	r25, Z+1	; 0x01
    6688:	84 2f       	mov	r24, r20
    668a:	69 2f       	mov	r22, r25
    668c:	40 e0       	ldi	r20, 0x00	; 0
    668e:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    6692:	8a 83       	std	Y+2, r24	; 0x02
    6694:	02 c0       	rjmp	.+4      	; 0x669a <BUZZER_enuInit+0x134>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    6696:	83 e0       	ldi	r24, 0x03	; 3
    6698:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;

	if(Copy_pAstrBuzzerConfig != NULL)
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < BUZZER_NUM; Local_u8Iterator++)
    669a:	89 81       	ldd	r24, Y+1	; 0x01
    669c:	8f 5f       	subi	r24, 0xFF	; 255
    669e:	89 83       	std	Y+1, r24	; 0x01
    66a0:	89 81       	ldd	r24, Y+1	; 0x01
    66a2:	88 23       	and	r24, r24
    66a4:	09 f4       	brne	.+2      	; 0x66a8 <BUZZER_enuInit+0x142>
    66a6:	70 cf       	rjmp	.-288    	; 0x6588 <BUZZER_enuInit+0x22>
    66a8:	02 c0       	rjmp	.+4      	; 0x66ae <BUZZER_enuInit+0x148>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    66aa:	82 e0       	ldi	r24, 0x02	; 2
    66ac:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    66ae:	8a 81       	ldd	r24, Y+2	; 0x02
}
    66b0:	0f 90       	pop	r0
    66b2:	0f 90       	pop	r0
    66b4:	0f 90       	pop	r0
    66b6:	0f 90       	pop	r0
    66b8:	cf 91       	pop	r28
    66ba:	df 91       	pop	r29
    66bc:	08 95       	ret

000066be <BUZZER_enuTurnON>:

ES_t BUZZER_enuTurnON(u8 Copy_u8BuzzerID)
{
    66be:	df 93       	push	r29
    66c0:	cf 93       	push	r28
    66c2:	00 d0       	rcall	.+0      	; 0x66c4 <BUZZER_enuTurnON+0x6>
    66c4:	cd b7       	in	r28, 0x3d	; 61
    66c6:	de b7       	in	r29, 0x3e	; 62
    66c8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    66ca:	81 e0       	ldi	r24, 0x01	; 1
    66cc:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8BuzzerID < BUZZER_NUM)
    66ce:	8a 81       	ldd	r24, Y+2	; 0x02
    66d0:	88 23       	and	r24, r24
    66d2:	e1 f5       	brne	.+120    	; 0x674c <BUZZER_enuTurnON+0x8e>
	{
		DIO_enuSetPinDirection(BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PortID, BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PinID, DIO_u8OUTPUT);
    66d4:	8a 81       	ldd	r24, Y+2	; 0x02
    66d6:	28 2f       	mov	r18, r24
    66d8:	30 e0       	ldi	r19, 0x00	; 0
    66da:	c9 01       	movw	r24, r18
    66dc:	88 0f       	add	r24, r24
    66de:	99 1f       	adc	r25, r25
    66e0:	82 0f       	add	r24, r18
    66e2:	93 1f       	adc	r25, r19
    66e4:	fc 01       	movw	r30, r24
    66e6:	e9 50       	subi	r30, 0x09	; 9
    66e8:	fe 4f       	sbci	r31, 0xFE	; 254
    66ea:	40 81       	ld	r20, Z
    66ec:	8a 81       	ldd	r24, Y+2	; 0x02
    66ee:	28 2f       	mov	r18, r24
    66f0:	30 e0       	ldi	r19, 0x00	; 0
    66f2:	c9 01       	movw	r24, r18
    66f4:	88 0f       	add	r24, r24
    66f6:	99 1f       	adc	r25, r25
    66f8:	82 0f       	add	r24, r18
    66fa:	93 1f       	adc	r25, r19
    66fc:	fc 01       	movw	r30, r24
    66fe:	e8 50       	subi	r30, 0x08	; 8
    6700:	fe 4f       	sbci	r31, 0xFE	; 254
    6702:	90 81       	ld	r25, Z
    6704:	84 2f       	mov	r24, r20
    6706:	69 2f       	mov	r22, r25
    6708:	41 e0       	ldi	r20, 0x01	; 1
    670a:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <DIO_enuSetPinDirection>
		Local_enuErrorState = DIO_enuSetPinVal(BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PortID, BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PinID, DIO_u8HIGH);
    670e:	8a 81       	ldd	r24, Y+2	; 0x02
    6710:	28 2f       	mov	r18, r24
    6712:	30 e0       	ldi	r19, 0x00	; 0
    6714:	c9 01       	movw	r24, r18
    6716:	88 0f       	add	r24, r24
    6718:	99 1f       	adc	r25, r25
    671a:	82 0f       	add	r24, r18
    671c:	93 1f       	adc	r25, r19
    671e:	fc 01       	movw	r30, r24
    6720:	e9 50       	subi	r30, 0x09	; 9
    6722:	fe 4f       	sbci	r31, 0xFE	; 254
    6724:	40 81       	ld	r20, Z
    6726:	8a 81       	ldd	r24, Y+2	; 0x02
    6728:	28 2f       	mov	r18, r24
    672a:	30 e0       	ldi	r19, 0x00	; 0
    672c:	c9 01       	movw	r24, r18
    672e:	88 0f       	add	r24, r24
    6730:	99 1f       	adc	r25, r25
    6732:	82 0f       	add	r24, r18
    6734:	93 1f       	adc	r25, r19
    6736:	fc 01       	movw	r30, r24
    6738:	e8 50       	subi	r30, 0x08	; 8
    673a:	fe 4f       	sbci	r31, 0xFE	; 254
    673c:	90 81       	ld	r25, Z
    673e:	84 2f       	mov	r24, r20
    6740:	69 2f       	mov	r22, r25
    6742:	41 e0       	ldi	r20, 0x01	; 1
    6744:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    6748:	89 83       	std	Y+1, r24	; 0x01
    674a:	02 c0       	rjmp	.+4      	; 0x6750 <BUZZER_enuTurnON+0x92>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    674c:	83 e0       	ldi	r24, 0x03	; 3
    674e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    6750:	89 81       	ldd	r24, Y+1	; 0x01
}
    6752:	0f 90       	pop	r0
    6754:	0f 90       	pop	r0
    6756:	cf 91       	pop	r28
    6758:	df 91       	pop	r29
    675a:	08 95       	ret

0000675c <BUZZER_enuTurnOFF>:

ES_t BUZZER_enuTurnOFF(u8 Copy_u8BuzzerID)
{
    675c:	df 93       	push	r29
    675e:	cf 93       	push	r28
    6760:	00 d0       	rcall	.+0      	; 0x6762 <BUZZER_enuTurnOFF+0x6>
    6762:	cd b7       	in	r28, 0x3d	; 61
    6764:	de b7       	in	r29, 0x3e	; 62
    6766:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    6768:	81 e0       	ldi	r24, 0x01	; 1
    676a:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8BuzzerID < BUZZER_NUM)
    676c:	8a 81       	ldd	r24, Y+2	; 0x02
    676e:	88 23       	and	r24, r24
    6770:	e1 f5       	brne	.+120    	; 0x67ea <BUZZER_enuTurnOFF+0x8e>
	{
		DIO_enuSetPinDirection(BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PortID, BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PinID, DIO_u8OUTPUT);
    6772:	8a 81       	ldd	r24, Y+2	; 0x02
    6774:	28 2f       	mov	r18, r24
    6776:	30 e0       	ldi	r19, 0x00	; 0
    6778:	c9 01       	movw	r24, r18
    677a:	88 0f       	add	r24, r24
    677c:	99 1f       	adc	r25, r25
    677e:	82 0f       	add	r24, r18
    6780:	93 1f       	adc	r25, r19
    6782:	fc 01       	movw	r30, r24
    6784:	e9 50       	subi	r30, 0x09	; 9
    6786:	fe 4f       	sbci	r31, 0xFE	; 254
    6788:	40 81       	ld	r20, Z
    678a:	8a 81       	ldd	r24, Y+2	; 0x02
    678c:	28 2f       	mov	r18, r24
    678e:	30 e0       	ldi	r19, 0x00	; 0
    6790:	c9 01       	movw	r24, r18
    6792:	88 0f       	add	r24, r24
    6794:	99 1f       	adc	r25, r25
    6796:	82 0f       	add	r24, r18
    6798:	93 1f       	adc	r25, r19
    679a:	fc 01       	movw	r30, r24
    679c:	e8 50       	subi	r30, 0x08	; 8
    679e:	fe 4f       	sbci	r31, 0xFE	; 254
    67a0:	90 81       	ld	r25, Z
    67a2:	84 2f       	mov	r24, r20
    67a4:	69 2f       	mov	r22, r25
    67a6:	41 e0       	ldi	r20, 0x01	; 1
    67a8:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <DIO_enuSetPinDirection>
		Local_enuErrorState = DIO_enuSetPinVal(BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PortID, BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PinID, DIO_u8LOW);
    67ac:	8a 81       	ldd	r24, Y+2	; 0x02
    67ae:	28 2f       	mov	r18, r24
    67b0:	30 e0       	ldi	r19, 0x00	; 0
    67b2:	c9 01       	movw	r24, r18
    67b4:	88 0f       	add	r24, r24
    67b6:	99 1f       	adc	r25, r25
    67b8:	82 0f       	add	r24, r18
    67ba:	93 1f       	adc	r25, r19
    67bc:	fc 01       	movw	r30, r24
    67be:	e9 50       	subi	r30, 0x09	; 9
    67c0:	fe 4f       	sbci	r31, 0xFE	; 254
    67c2:	40 81       	ld	r20, Z
    67c4:	8a 81       	ldd	r24, Y+2	; 0x02
    67c6:	28 2f       	mov	r18, r24
    67c8:	30 e0       	ldi	r19, 0x00	; 0
    67ca:	c9 01       	movw	r24, r18
    67cc:	88 0f       	add	r24, r24
    67ce:	99 1f       	adc	r25, r25
    67d0:	82 0f       	add	r24, r18
    67d2:	93 1f       	adc	r25, r19
    67d4:	fc 01       	movw	r30, r24
    67d6:	e8 50       	subi	r30, 0x08	; 8
    67d8:	fe 4f       	sbci	r31, 0xFE	; 254
    67da:	90 81       	ld	r25, Z
    67dc:	84 2f       	mov	r24, r20
    67de:	69 2f       	mov	r22, r25
    67e0:	40 e0       	ldi	r20, 0x00	; 0
    67e2:	0e 94 55 1b 	call	0x36aa	; 0x36aa <DIO_enuSetPinVal>
    67e6:	89 83       	std	Y+1, r24	; 0x01
    67e8:	02 c0       	rjmp	.+4      	; 0x67ee <BUZZER_enuTurnOFF+0x92>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    67ea:	83 e0       	ldi	r24, 0x03	; 3
    67ec:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    67ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    67f0:	0f 90       	pop	r0
    67f2:	0f 90       	pop	r0
    67f4:	cf 91       	pop	r28
    67f6:	df 91       	pop	r29
    67f8:	08 95       	ret

000067fa <Sensors_enuInit>:
#include "Sensors_int.h"
#include "Sensors_priv.h"
#include "Sensors_config.h"

ES_t Sensors_enuInit(void)
{
    67fa:	df 93       	push	r29
    67fc:	cf 93       	push	r28
    67fe:	0f 92       	push	r0
    6800:	cd b7       	in	r28, 0x3d	; 61
    6802:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    6804:	81 e0       	ldi	r24, 0x01	; 1
    6806:	89 83       	std	Y+1, r24	; 0x01

	/* Initialize ADC */
	ADC_enuInit();
    6808:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <ADC_enuInit>

	/* Initialize LDR --> PORTA PIN0 */
	LDR_enuInit(&LDR_Config);
    680c:	88 e3       	ldi	r24, 0x38	; 56
    680e:	92 e0       	ldi	r25, 0x02	; 2
    6810:	0e 94 b5 23 	call	0x476a	; 0x476a <LDR_enuInit>

	/* Initialize Soil Moisture --> PORTA PIN1 */
	Soil_Moisture_enuInit(&Soil_Moisture_AstrSoilMoistureConfig);
    6814:	88 ed       	ldi	r24, 0xD8	; 216
    6816:	91 e0       	ldi	r25, 0x01	; 1
    6818:	0e 94 b7 20 	call	0x416e	; 0x416e <Soil_Moisture_enuInit>

	/* Initialize DHT11 --> PORTA PIN2 */
	DHT11_Init();
    681c:	0e 94 8f 2c 	call	0x591e	; 0x591e <DHT11_Init>

	Local_enuErrorState = ES_OK;
    6820:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    6822:	89 81       	ldd	r24, Y+1	; 0x01
}
    6824:	0f 90       	pop	r0
    6826:	cf 91       	pop	r28
    6828:	df 91       	pop	r29
    682a:	08 95       	ret

0000682c <Sensors_enuGetReadings>:

ES_t Sensors_enuGetReadings(Data_Reading_t *Copy_PstrSensorsReading)
{
    682c:	0f 93       	push	r16
    682e:	1f 93       	push	r17
    6830:	df 93       	push	r29
    6832:	cf 93       	push	r28
    6834:	cd b7       	in	r28, 0x3d	; 61
    6836:	de b7       	in	r29, 0x3e	; 62
    6838:	27 97       	sbiw	r28, 0x07	; 7
    683a:	0f b6       	in	r0, 0x3f	; 63
    683c:	f8 94       	cli
    683e:	de bf       	out	0x3e, r29	; 62
    6840:	0f be       	out	0x3f, r0	; 63
    6842:	cd bf       	out	0x3d, r28	; 61
    6844:	9f 83       	std	Y+7, r25	; 0x07
    6846:	8e 83       	std	Y+6, r24	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
    6848:	81 e0       	ldi	r24, 0x01	; 1
    684a:	89 83       	std	Y+1, r24	; 0x01

	u16 Local_u16ADCvalue_LDR = 0, Local_u16ADCvalue_Soil;
    684c:	1b 82       	std	Y+3, r1	; 0x03
    684e:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_PstrSensorsReading != NULL)
    6850:	8e 81       	ldd	r24, Y+6	; 0x06
    6852:	9f 81       	ldd	r25, Y+7	; 0x07
    6854:	00 97       	sbiw	r24, 0x00	; 0
    6856:	d9 f1       	breq	.+118    	; 0x68ce <Sensors_enuGetReadings+0xa2>
	{
		/* Get LDR value */
		LDR_enuGetValue(&Local_u16ADCvalue_LDR, LDR_1);
    6858:	ce 01       	movw	r24, r28
    685a:	02 96       	adiw	r24, 0x02	; 2
    685c:	60 e0       	ldi	r22, 0x00	; 0
    685e:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <LDR_enuGetValue>
		Copy_PstrSensorsReading->Light_Intensity = Math_Mapping(0, 100, 0, 1023, Local_u16ADCvalue_LDR);
    6862:	8a 81       	ldd	r24, Y+2	; 0x02
    6864:	9b 81       	ldd	r25, Y+3	; 0x03
    6866:	fc 01       	movw	r30, r24
    6868:	80 e0       	ldi	r24, 0x00	; 0
    686a:	90 e0       	ldi	r25, 0x00	; 0
    686c:	64 e6       	ldi	r22, 0x64	; 100
    686e:	70 e0       	ldi	r23, 0x00	; 0
    6870:	40 e0       	ldi	r20, 0x00	; 0
    6872:	50 e0       	ldi	r21, 0x00	; 0
    6874:	2f ef       	ldi	r18, 0xFF	; 255
    6876:	33 e0       	ldi	r19, 0x03	; 3
    6878:	8f 01       	movw	r16, r30
    687a:	0e 94 56 20 	call	0x40ac	; 0x40ac <Math_Mapping>
    687e:	ee 81       	ldd	r30, Y+6	; 0x06
    6880:	ff 81       	ldd	r31, Y+7	; 0x07
    6882:	83 83       	std	Z+3, r24	; 0x03

		/* Get Soil Moisture value */
		Soil_Moisture_enuGetMoisureVal(SOIL_MOISTURE_1, &Local_u16ADCvalue_Soil);
    6884:	9e 01       	movw	r18, r28
    6886:	2c 5f       	subi	r18, 0xFC	; 252
    6888:	3f 4f       	sbci	r19, 0xFF	; 255
    688a:	80 e0       	ldi	r24, 0x00	; 0
    688c:	b9 01       	movw	r22, r18
    688e:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <Soil_Moisture_enuGetMoisureVal>
		Copy_PstrSensorsReading->Soil_Moisture = Math_Mapping(0, 100, 0, 1023, Local_u16ADCvalue_Soil);
    6892:	8c 81       	ldd	r24, Y+4	; 0x04
    6894:	9d 81       	ldd	r25, Y+5	; 0x05
    6896:	fc 01       	movw	r30, r24
    6898:	80 e0       	ldi	r24, 0x00	; 0
    689a:	90 e0       	ldi	r25, 0x00	; 0
    689c:	64 e6       	ldi	r22, 0x64	; 100
    689e:	70 e0       	ldi	r23, 0x00	; 0
    68a0:	40 e0       	ldi	r20, 0x00	; 0
    68a2:	50 e0       	ldi	r21, 0x00	; 0
    68a4:	2f ef       	ldi	r18, 0xFF	; 255
    68a6:	33 e0       	ldi	r19, 0x03	; 3
    68a8:	8f 01       	movw	r16, r30
    68aa:	0e 94 56 20 	call	0x40ac	; 0x40ac <Math_Mapping>
    68ae:	ee 81       	ldd	r30, Y+6	; 0x06
    68b0:	ff 81       	ldd	r31, Y+7	; 0x07
    68b2:	82 83       	std	Z+2, r24	; 0x02

		/* Get Temp & Humi value */
		DHT_GetReadings(&Copy_PstrSensorsReading->Temperture, &Copy_PstrSensorsReading->Humidity);
    68b4:	4e 81       	ldd	r20, Y+6	; 0x06
    68b6:	5f 81       	ldd	r21, Y+7	; 0x07
    68b8:	8e 81       	ldd	r24, Y+6	; 0x06
    68ba:	9f 81       	ldd	r25, Y+7	; 0x07
    68bc:	9c 01       	movw	r18, r24
    68be:	2f 5f       	subi	r18, 0xFF	; 255
    68c0:	3f 4f       	sbci	r19, 0xFF	; 255
    68c2:	ca 01       	movw	r24, r20
    68c4:	b9 01       	movw	r22, r18
    68c6:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <DHT_GetReadings>

		Local_enuErrorState = ES_OK;
    68ca:	19 82       	std	Y+1, r1	; 0x01
    68cc:	02 c0       	rjmp	.+4      	; 0x68d2 <Sensors_enuGetReadings+0xa6>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    68ce:	82 e0       	ldi	r24, 0x02	; 2
    68d0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    68d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    68d4:	27 96       	adiw	r28, 0x07	; 7
    68d6:	0f b6       	in	r0, 0x3f	; 63
    68d8:	f8 94       	cli
    68da:	de bf       	out	0x3e, r29	; 62
    68dc:	0f be       	out	0x3f, r0	; 63
    68de:	cd bf       	out	0x3d, r28	; 61
    68e0:	cf 91       	pop	r28
    68e2:	df 91       	pop	r29
    68e4:	1f 91       	pop	r17
    68e6:	0f 91       	pop	r16
    68e8:	08 95       	ret

000068ea <Diplay_enuInit>:
#include "Display_int.h"
#include "Display_config.h"
#include "Display_priv.h"

ES_t Diplay_enuInit(void)
{
    68ea:	df 93       	push	r29
    68ec:	cf 93       	push	r28
    68ee:	0f 92       	push	r0
    68f0:	cd b7       	in	r28, 0x3d	; 61
    68f2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    68f4:	81 e0       	ldi	r24, 0x01	; 1
    68f6:	89 83       	std	Y+1, r24	; 0x01

	LCD_enuInit();
    68f8:	0e 94 13 24 	call	0x4826	; 0x4826 <LCD_enuInit>

	Local_enuErrorState = ES_OK;
    68fc:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    68fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    6900:	0f 90       	pop	r0
    6902:	cf 91       	pop	r28
    6904:	df 91       	pop	r29
    6906:	08 95       	ret

00006908 <Display_enuReading>:


ES_t Display_enuReading(Data_Reading_t *Copy_PstrSensorsReading)
{
    6908:	df 93       	push	r29
    690a:	cf 93       	push	r28
    690c:	00 d0       	rcall	.+0      	; 0x690e <Display_enuReading+0x6>
    690e:	0f 92       	push	r0
    6910:	cd b7       	in	r28, 0x3d	; 61
    6912:	de b7       	in	r29, 0x3e	; 62
    6914:	9b 83       	std	Y+3, r25	; 0x03
    6916:	8a 83       	std	Y+2, r24	; 0x02
	 * Temp: 00C||Humi: 55%
	 * Soil: 60 %||LDR: 60%
	 * --------------------
	 * << State: Normal >>
	 */
	ES_t Local_enuErrorState = ES_NOK;
    6918:	81 e0       	ldi	r24, 0x01	; 1
    691a:	89 83       	std	Y+1, r24	; 0x01

	LCD_enuGoToPosition(0,0);
    691c:	80 e0       	ldi	r24, 0x00	; 0
    691e:	60 e0       	ldi	r22, 0x00	; 0
    6920:	0e 94 b8 2a 	call	0x5570	; 0x5570 <LCD_enuGoToPosition>
	LCD_enuWriteString("Temp: ");
    6924:	87 e6       	ldi	r24, 0x67	; 103
    6926:	90 e0       	ldi	r25, 0x00	; 0
    6928:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <LCD_enuWriteString>
	LCD_enuWriteIntNumber(Copy_PstrSensorsReading->Temperture);
    692c:	ea 81       	ldd	r30, Y+2	; 0x02
    692e:	fb 81       	ldd	r31, Y+3	; 0x03
    6930:	80 81       	ld	r24, Z
    6932:	88 2f       	mov	r24, r24
    6934:	90 e0       	ldi	r25, 0x00	; 0
    6936:	a0 e0       	ldi	r26, 0x00	; 0
    6938:	b0 e0       	ldi	r27, 0x00	; 0
    693a:	bc 01       	movw	r22, r24
    693c:	cd 01       	movw	r24, r26
    693e:	0e 94 9f 2b 	call	0x573e	; 0x573e <LCD_enuWriteIntNumber>
	LCD_enuWriteString("C  ");
    6942:	8e e6       	ldi	r24, 0x6E	; 110
    6944:	90 e0       	ldi	r25, 0x00	; 0
    6946:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <LCD_enuWriteString>
	LCD_enuGoToPosition(0,10);
    694a:	80 e0       	ldi	r24, 0x00	; 0
    694c:	6a e0       	ldi	r22, 0x0A	; 10
    694e:	0e 94 b8 2a 	call	0x5570	; 0x5570 <LCD_enuGoToPosition>
	LCD_enuWriteString("Humi: ");
    6952:	82 e7       	ldi	r24, 0x72	; 114
    6954:	90 e0       	ldi	r25, 0x00	; 0
    6956:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <LCD_enuWriteString>
	LCD_enuWriteIntNumber(Copy_PstrSensorsReading->Humidity);
    695a:	ea 81       	ldd	r30, Y+2	; 0x02
    695c:	fb 81       	ldd	r31, Y+3	; 0x03
    695e:	81 81       	ldd	r24, Z+1	; 0x01
    6960:	88 2f       	mov	r24, r24
    6962:	90 e0       	ldi	r25, 0x00	; 0
    6964:	a0 e0       	ldi	r26, 0x00	; 0
    6966:	b0 e0       	ldi	r27, 0x00	; 0
    6968:	bc 01       	movw	r22, r24
    696a:	cd 01       	movw	r24, r26
    696c:	0e 94 9f 2b 	call	0x573e	; 0x573e <LCD_enuWriteIntNumber>
	LCD_enuWriteString("%  ");
    6970:	89 e7       	ldi	r24, 0x79	; 121
    6972:	90 e0       	ldi	r25, 0x00	; 0
    6974:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <LCD_enuWriteString>

	LCD_enuGoToPosition(1,0);
    6978:	81 e0       	ldi	r24, 0x01	; 1
    697a:	60 e0       	ldi	r22, 0x00	; 0
    697c:	0e 94 b8 2a 	call	0x5570	; 0x5570 <LCD_enuGoToPosition>
	LCD_enuWriteString("Soil: ");
    6980:	8d e7       	ldi	r24, 0x7D	; 125
    6982:	90 e0       	ldi	r25, 0x00	; 0
    6984:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <LCD_enuWriteString>
	LCD_enuWriteIntNumber(Copy_PstrSensorsReading->Soil_Moisture);
    6988:	ea 81       	ldd	r30, Y+2	; 0x02
    698a:	fb 81       	ldd	r31, Y+3	; 0x03
    698c:	82 81       	ldd	r24, Z+2	; 0x02
    698e:	88 2f       	mov	r24, r24
    6990:	90 e0       	ldi	r25, 0x00	; 0
    6992:	a0 e0       	ldi	r26, 0x00	; 0
    6994:	b0 e0       	ldi	r27, 0x00	; 0
    6996:	bc 01       	movw	r22, r24
    6998:	cd 01       	movw	r24, r26
    699a:	0e 94 9f 2b 	call	0x573e	; 0x573e <LCD_enuWriteIntNumber>
	LCD_enuWriteString("%  ");
    699e:	89 e7       	ldi	r24, 0x79	; 121
    69a0:	90 e0       	ldi	r25, 0x00	; 0
    69a2:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <LCD_enuWriteString>
	LCD_enuGoToPosition(1,10);
    69a6:	81 e0       	ldi	r24, 0x01	; 1
    69a8:	6a e0       	ldi	r22, 0x0A	; 10
    69aa:	0e 94 b8 2a 	call	0x5570	; 0x5570 <LCD_enuGoToPosition>
	LCD_enuWriteString("LDRI: ");
    69ae:	84 e8       	ldi	r24, 0x84	; 132
    69b0:	90 e0       	ldi	r25, 0x00	; 0
    69b2:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <LCD_enuWriteString>
	LCD_enuWriteIntNumber(Copy_PstrSensorsReading->Light_Intensity);
    69b6:	ea 81       	ldd	r30, Y+2	; 0x02
    69b8:	fb 81       	ldd	r31, Y+3	; 0x03
    69ba:	83 81       	ldd	r24, Z+3	; 0x03
    69bc:	88 2f       	mov	r24, r24
    69be:	90 e0       	ldi	r25, 0x00	; 0
    69c0:	a0 e0       	ldi	r26, 0x00	; 0
    69c2:	b0 e0       	ldi	r27, 0x00	; 0
    69c4:	bc 01       	movw	r22, r24
    69c6:	cd 01       	movw	r24, r26
    69c8:	0e 94 9f 2b 	call	0x573e	; 0x573e <LCD_enuWriteIntNumber>
	LCD_enuWriteString("%  ");
    69cc:	89 e7       	ldi	r24, 0x79	; 121
    69ce:	90 e0       	ldi	r25, 0x00	; 0
    69d0:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <LCD_enuWriteString>

	LCD_enuGoToPosition(2,0);
    69d4:	82 e0       	ldi	r24, 0x02	; 2
    69d6:	60 e0       	ldi	r22, 0x00	; 0
    69d8:	0e 94 b8 2a 	call	0x5570	; 0x5570 <LCD_enuGoToPosition>
	LCD_enuWriteString("--------------------");
    69dc:	8b e8       	ldi	r24, 0x8B	; 139
    69de:	90 e0       	ldi	r25, 0x00	; 0
    69e0:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <LCD_enuWriteString>

	LCD_enuGoToPosition(3,0);
    69e4:	83 e0       	ldi	r24, 0x03	; 3
    69e6:	60 e0       	ldi	r22, 0x00	; 0
    69e8:	0e 94 b8 2a 	call	0x5570	; 0x5570 <LCD_enuGoToPosition>
	if(Copy_PstrSensorsReading->State == AGMS_NORMAL)
    69ec:	ea 81       	ldd	r30, Y+2	; 0x02
    69ee:	fb 81       	ldd	r31, Y+3	; 0x03
    69f0:	84 81       	ldd	r24, Z+4	; 0x04
    69f2:	81 30       	cpi	r24, 0x01	; 1
    69f4:	29 f4       	brne	.+10     	; 0x6a00 <Display_enuReading+0xf8>
		LCD_enuWriteString("<< State: Normal >>");
    69f6:	80 ea       	ldi	r24, 0xA0	; 160
    69f8:	90 e0       	ldi	r25, 0x00	; 0
    69fa:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <LCD_enuWriteString>
    69fe:	09 c0       	rjmp	.+18     	; 0x6a12 <Display_enuReading+0x10a>
	else if(Copy_PstrSensorsReading->State == AGMS_ERROR)
    6a00:	ea 81       	ldd	r30, Y+2	; 0x02
    6a02:	fb 81       	ldd	r31, Y+3	; 0x03
    6a04:	84 81       	ldd	r24, Z+4	; 0x04
    6a06:	88 23       	and	r24, r24
    6a08:	21 f4       	brne	.+8      	; 0x6a12 <Display_enuReading+0x10a>
		LCD_enuWriteString("<< State: Error >>");
    6a0a:	84 eb       	ldi	r24, 0xB4	; 180
    6a0c:	90 e0       	ldi	r25, 0x00	; 0
    6a0e:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <LCD_enuWriteString>

	return Local_enuErrorState;
    6a12:	89 81       	ldd	r24, Y+1	; 0x01
}
    6a14:	0f 90       	pop	r0
    6a16:	0f 90       	pop	r0
    6a18:	0f 90       	pop	r0
    6a1a:	cf 91       	pop	r28
    6a1c:	df 91       	pop	r29
    6a1e:	08 95       	ret

00006a20 <AC_enuInitSystem>:
#include "Automatic_Control_int.h"
#include "Automatic_Control_config.h"
#include "Automatic_Control_priv.h"

ES_t AC_enuInitSystem(void)
{
    6a20:	df 93       	push	r29
    6a22:	cf 93       	push	r28
    6a24:	0f 92       	push	r0
    6a26:	cd b7       	in	r28, 0x3d	; 61
    6a28:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    6a2a:	81 e0       	ldi	r24, 0x01	; 1
    6a2c:	89 83       	std	Y+1, r24	; 0x01

	/* initialize LED System & Lamp of LDR */
	LED_enuINIT(&LED_AstrLedConfig);
    6a2e:	89 ed       	ldi	r24, 0xD9	; 217
    6a30:	91 e0       	ldi	r25, 0x01	; 1
    6a32:	0e 94 1c 21 	call	0x4238	; 0x4238 <LED_enuINIT>

	/* initialize DC Motors */
	DC_MOTOR_enuInit(&DC_MOTOR_AstrDcMotorConfig);
    6a36:	88 ee       	ldi	r24, 0xE8	; 232
    6a38:	91 e0       	ldi	r25, 0x01	; 1
    6a3a:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <DC_MOTOR_enuInit>

	/* initialize Buzzer of System*/
	BUZZER_enuInit(&BUZZER_AstrBuzzerConfig);
    6a3e:	87 ef       	ldi	r24, 0xF7	; 247
    6a40:	91 e0       	ldi	r25, 0x01	; 1
    6a42:	0e 94 b3 32 	call	0x6566	; 0x6566 <BUZZER_enuInit>
	 * OC0  --> PB3
	 * OC1A --> PD5
	 * OC1B --> PD4
	 * OC2  --> PD7
	 */
	DIO_enuSetPinDirection(DIO_u8PORTB, DIO_u8PIN3, DIO_u8OUTPUT);
    6a46:	81 e0       	ldi	r24, 0x01	; 1
    6a48:	63 e0       	ldi	r22, 0x03	; 3
    6a4a:	41 e0       	ldi	r20, 0x01	; 1
    6a4c:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8PORTD, DIO_u8PIN4, DIO_u8OUTPUT);
    6a50:	83 e0       	ldi	r24, 0x03	; 3
    6a52:	64 e0       	ldi	r22, 0x04	; 4
    6a54:	41 e0       	ldi	r20, 0x01	; 1
    6a56:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8PORTD, DIO_u8PIN5, DIO_u8OUTPUT);
    6a5a:	83 e0       	ldi	r24, 0x03	; 3
    6a5c:	65 e0       	ldi	r22, 0x05	; 5
    6a5e:	41 e0       	ldi	r20, 0x01	; 1
    6a60:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8PORTD, DIO_u8PIN7, DIO_u8OUTPUT);
    6a64:	83 e0       	ldi	r24, 0x03	; 3
    6a66:	67 e0       	ldi	r22, 0x07	; 7
    6a68:	41 e0       	ldi	r20, 0x01	; 1
    6a6a:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <DIO_enuSetPinDirection>

	/* initialize Timers
	 * Timer0 --> Lamp of LDR --> Fast PWM
	 * Timer1 --> Fan & Heaters --> Fast PWM (Top Not OCR1A or OCR1B)
	 * Timer2 --> Pumb --> Fast PWM*/
	TIMER0_enuInit();
    6a6e:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <TIMER0_enuInit>
	TIMER1_enuInit();
    6a72:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <TIMER1_enuInit>
	TIMER2_enuInit();
    6a76:	0e 94 3a 0b 	call	0x1674	; 0x1674 <TIMER2_enuInit>

	/* initialize EXTI1 for Buzzer */
	EXTI_enuInit(&EXTI_AStrEXTI_Config);
    6a7a:	8f ec       	ldi	r24, 0xCF	; 207
    6a7c:	91 e0       	ldi	r25, 0x01	; 1
    6a7e:	0e 94 ab 14 	call	0x2956	; 0x2956 <EXTI_enuInit>
	EXTI_enuCallBackFunc(AC_Buzzer_stvidCallBack, NULL, EXTI1);
    6a82:	87 e8       	ldi	r24, 0x87	; 135
    6a84:	96 e3       	ldi	r25, 0x36	; 54
    6a86:	60 e0       	ldi	r22, 0x00	; 0
    6a88:	70 e0       	ldi	r23, 0x00	; 0
    6a8a:	41 e0       	ldi	r20, 0x01	; 1
    6a8c:	0e 94 0a 18 	call	0x3014	; 0x3014 <EXTI_enuCallBackFunc>
	EXTI_enuEnable(EXTI1);
    6a90:	81 e0       	ldi	r24, 0x01	; 1
    6a92:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <EXTI_enuEnable>

	/* enable GIE */
	GIE_enuGloable_Interrupt_Enable();
    6a96:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <GIE_enuGloable_Interrupt_Enable>

	Local_enuErrorState = ES_OK;
    6a9a:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    6a9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    6a9e:	0f 90       	pop	r0
    6aa0:	cf 91       	pop	r28
    6aa2:	df 91       	pop	r29
    6aa4:	08 95       	ret

00006aa6 <AC_enuControlHeatSystem>:

ES_t AC_enuControlHeatSystem(u8 Copy_u8Temp, u8 Copy_u8Hemu)
{
    6aa6:	0f 93       	push	r16
    6aa8:	1f 93       	push	r17
    6aaa:	df 93       	push	r29
    6aac:	cf 93       	push	r28
    6aae:	00 d0       	rcall	.+0      	; 0x6ab0 <AC_enuControlHeatSystem+0xa>
    6ab0:	00 d0       	rcall	.+0      	; 0x6ab2 <AC_enuControlHeatSystem+0xc>
    6ab2:	0f 92       	push	r0
    6ab4:	cd b7       	in	r28, 0x3d	; 61
    6ab6:	de b7       	in	r29, 0x3e	; 62
    6ab8:	8c 83       	std	Y+4, r24	; 0x04
    6aba:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    6abc:	81 e0       	ldi	r24, 0x01	; 1
    6abe:	8b 83       	std	Y+3, r24	; 0x03
	u8 Heater_u8Duty = 0, Fan_u8Duty;
    6ac0:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_u8Temp < TEMP_MIN && Copy_u8Hemu < HUMI_MIN)
    6ac2:	8c 81       	ldd	r24, Y+4	; 0x04
    6ac4:	82 31       	cpi	r24, 0x12	; 18
    6ac6:	d0 f4       	brcc	.+52     	; 0x6afc <AC_enuControlHeatSystem+0x56>
    6ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    6aca:	88 32       	cpi	r24, 0x28	; 40
    6acc:	b8 f4       	brcc	.+46     	; 0x6afc <AC_enuControlHeatSystem+0x56>
	{
		//Heater On
		/*
		 * map the value of temp between 10-->18 to out duty 50-->100 to turn on the heater
		 */
		DC_MOTOR_enuOnCW(HEATER_MOTOR);
    6ace:	81 e0       	ldi	r24, 0x01	; 1
    6ad0:	0e 94 42 31 	call	0x6284	; 0x6284 <DC_MOTOR_enuOnCW>
		Heater_u8Duty = Math_Mapping(50, 100, TEMP_MIN, TEMP_ERROR_MIN, Copy_u8Temp);
    6ad4:	8c 81       	ldd	r24, Y+4	; 0x04
    6ad6:	e8 2f       	mov	r30, r24
    6ad8:	f0 e0       	ldi	r31, 0x00	; 0
    6ada:	82 e3       	ldi	r24, 0x32	; 50
    6adc:	90 e0       	ldi	r25, 0x00	; 0
    6ade:	64 e6       	ldi	r22, 0x64	; 100
    6ae0:	70 e0       	ldi	r23, 0x00	; 0
    6ae2:	42 e1       	ldi	r20, 0x12	; 18
    6ae4:	50 e0       	ldi	r21, 0x00	; 0
    6ae6:	2a e0       	ldi	r18, 0x0A	; 10
    6ae8:	30 e0       	ldi	r19, 0x00	; 0
    6aea:	8f 01       	movw	r16, r30
    6aec:	0e 94 56 20 	call	0x40ac	; 0x40ac <Math_Mapping>
    6af0:	8a 83       	std	Y+2, r24	; 0x02
		DC_MOTOR_SetSpeed(HEATER_MOTOR, Heater_u8Duty);
    6af2:	81 e0       	ldi	r24, 0x01	; 1
    6af4:	6a 81       	ldd	r22, Y+2	; 0x02
    6af6:	0e 94 4a 32 	call	0x6494	; 0x6494 <DC_MOTOR_SetSpeed>
    6afa:	09 c0       	rjmp	.+18     	; 0x6b0e <AC_enuControlHeatSystem+0x68>
	}
	else if(Copy_u8Temp > (TEMP_MIN+TEMP_HYS) && Copy_u8Hemu > (HUMI_MIN+HUMI_HYS))
    6afc:	8c 81       	ldd	r24, Y+4	; 0x04
    6afe:	85 31       	cpi	r24, 0x15	; 21
    6b00:	30 f0       	brcs	.+12     	; 0x6b0e <AC_enuControlHeatSystem+0x68>
    6b02:	8d 81       	ldd	r24, Y+5	; 0x05
    6b04:	8e 32       	cpi	r24, 0x2E	; 46
    6b06:	18 f0       	brcs	.+6      	; 0x6b0e <AC_enuControlHeatSystem+0x68>
	{
		//Heater Off
		DC_MOTOR_enuOff(HEATER_MOTOR);
    6b08:	81 e0       	ldi	r24, 0x01	; 1
    6b0a:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <DC_MOTOR_enuOff>
	else
	{
		/* Do Nothing */
	}

	if(Copy_u8Temp > TEMP_MAX && Copy_u8Hemu > HUMI_MAX)
    6b0e:	8c 81       	ldd	r24, Y+4	; 0x04
    6b10:	8b 31       	cpi	r24, 0x1B	; 27
    6b12:	d0 f0       	brcs	.+52     	; 0x6b48 <AC_enuControlHeatSystem+0xa2>
    6b14:	8d 81       	ldd	r24, Y+5	; 0x05
    6b16:	87 34       	cpi	r24, 0x47	; 71
    6b18:	b8 f0       	brcs	.+46     	; 0x6b48 <AC_enuControlHeatSystem+0xa2>
	{
		//Fan On
		/*
		 * map the value of temp between 26-->40 to out duty 50-->100 to turn on the on
		 */
		DC_MOTOR_enuOnCW(FAN_MOTOR);
    6b1a:	80 e0       	ldi	r24, 0x00	; 0
    6b1c:	0e 94 42 31 	call	0x6284	; 0x6284 <DC_MOTOR_enuOnCW>
		Fan_u8Duty = Math_Mapping(50, 100, TEMP_MAX, TEMP_ERROR_MAX, Copy_u8Temp);
    6b20:	8c 81       	ldd	r24, Y+4	; 0x04
    6b22:	e8 2f       	mov	r30, r24
    6b24:	f0 e0       	ldi	r31, 0x00	; 0
    6b26:	82 e3       	ldi	r24, 0x32	; 50
    6b28:	90 e0       	ldi	r25, 0x00	; 0
    6b2a:	64 e6       	ldi	r22, 0x64	; 100
    6b2c:	70 e0       	ldi	r23, 0x00	; 0
    6b2e:	4a e1       	ldi	r20, 0x1A	; 26
    6b30:	50 e0       	ldi	r21, 0x00	; 0
    6b32:	28 e2       	ldi	r18, 0x28	; 40
    6b34:	30 e0       	ldi	r19, 0x00	; 0
    6b36:	8f 01       	movw	r16, r30
    6b38:	0e 94 56 20 	call	0x40ac	; 0x40ac <Math_Mapping>
    6b3c:	89 83       	std	Y+1, r24	; 0x01
		DC_MOTOR_SetSpeed(FAN_MOTOR, Fan_u8Duty);
    6b3e:	80 e0       	ldi	r24, 0x00	; 0
    6b40:	69 81       	ldd	r22, Y+1	; 0x01
    6b42:	0e 94 4a 32 	call	0x6494	; 0x6494 <DC_MOTOR_SetSpeed>
    6b46:	09 c0       	rjmp	.+18     	; 0x6b5a <AC_enuControlHeatSystem+0xb4>
	}
	else if(Copy_u8Temp < (TEMP_MAX+TEMP_HYS) && Copy_u8Hemu < (HUMI_MAX+HUMI_HYS))
    6b48:	8c 81       	ldd	r24, Y+4	; 0x04
    6b4a:	8c 31       	cpi	r24, 0x1C	; 28
    6b4c:	30 f4       	brcc	.+12     	; 0x6b5a <AC_enuControlHeatSystem+0xb4>
    6b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    6b50:	8b 34       	cpi	r24, 0x4B	; 75
    6b52:	18 f4       	brcc	.+6      	; 0x6b5a <AC_enuControlHeatSystem+0xb4>
	{
		//Fan Off
		DC_MOTOR_enuOff(FAN_MOTOR);
    6b54:	80 e0       	ldi	r24, 0x00	; 0
    6b56:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <DC_MOTOR_enuOff>
	else
	{
		/* Do Nothing */
	}

	return Local_enuErrorState;
    6b5a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    6b5c:	0f 90       	pop	r0
    6b5e:	0f 90       	pop	r0
    6b60:	0f 90       	pop	r0
    6b62:	0f 90       	pop	r0
    6b64:	0f 90       	pop	r0
    6b66:	cf 91       	pop	r28
    6b68:	df 91       	pop	r29
    6b6a:	1f 91       	pop	r17
    6b6c:	0f 91       	pop	r16
    6b6e:	08 95       	ret

00006b70 <AC_enuControlIrrigationSystem>:

ES_t AC_enuControlIrrigationSystem(u8 Copy_u8SoilMoisture)
{
    6b70:	0f 93       	push	r16
    6b72:	1f 93       	push	r17
    6b74:	df 93       	push	r29
    6b76:	cf 93       	push	r28
    6b78:	00 d0       	rcall	.+0      	; 0x6b7a <AC_enuControlIrrigationSystem+0xa>
    6b7a:	0f 92       	push	r0
    6b7c:	cd b7       	in	r28, 0x3d	; 61
    6b7e:	de b7       	in	r29, 0x3e	; 62
    6b80:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    6b82:	81 e0       	ldi	r24, 0x01	; 1
    6b84:	8a 83       	std	Y+2, r24	; 0x02
	u8 Pump_u8Duty = 0;
    6b86:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8SoilMoisture < SOIL_MIN && Copy_u8SoilMoisture > SOIL_ERROR_MIN)
    6b88:	8b 81       	ldd	r24, Y+3	; 0x03
    6b8a:	8e 31       	cpi	r24, 0x1E	; 30
    6b8c:	d0 f4       	brcc	.+52     	; 0x6bc2 <AC_enuControlIrrigationSystem+0x52>
    6b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    6b90:	8b 30       	cpi	r24, 0x0B	; 11
    6b92:	b8 f0       	brcs	.+46     	; 0x6bc2 <AC_enuControlIrrigationSystem+0x52>
	{
		//Pump On
		/*
		 * map the value of soil moisture between 10-->30 to out duty 50-->100 to turn on the pump
		 */
		DC_MOTOR_enuOnCW(PUMP_MOTOR);
    6b94:	82 e0       	ldi	r24, 0x02	; 2
    6b96:	0e 94 42 31 	call	0x6284	; 0x6284 <DC_MOTOR_enuOnCW>
		Pump_u8Duty = Math_Mapping(50, 100, SOIL_MIN, SOIL_ERROR_MIN, Copy_u8SoilMoisture);
    6b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    6b9c:	e8 2f       	mov	r30, r24
    6b9e:	f0 e0       	ldi	r31, 0x00	; 0
    6ba0:	82 e3       	ldi	r24, 0x32	; 50
    6ba2:	90 e0       	ldi	r25, 0x00	; 0
    6ba4:	64 e6       	ldi	r22, 0x64	; 100
    6ba6:	70 e0       	ldi	r23, 0x00	; 0
    6ba8:	4e e1       	ldi	r20, 0x1E	; 30
    6baa:	50 e0       	ldi	r21, 0x00	; 0
    6bac:	2a e0       	ldi	r18, 0x0A	; 10
    6bae:	30 e0       	ldi	r19, 0x00	; 0
    6bb0:	8f 01       	movw	r16, r30
    6bb2:	0e 94 56 20 	call	0x40ac	; 0x40ac <Math_Mapping>
    6bb6:	89 83       	std	Y+1, r24	; 0x01
		DC_MOTOR_SetSpeed(PUMP_MOTOR, Pump_u8Duty);
    6bb8:	82 e0       	ldi	r24, 0x02	; 2
    6bba:	69 81       	ldd	r22, Y+1	; 0x01
    6bbc:	0e 94 4a 32 	call	0x6494	; 0x6494 <DC_MOTOR_SetSpeed>
    6bc0:	06 c0       	rjmp	.+12     	; 0x6bce <AC_enuControlIrrigationSystem+0x5e>
	}
	else if(Copy_u8SoilMoisture > SOIL_MAX)
    6bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    6bc4:	8d 33       	cpi	r24, 0x3D	; 61
    6bc6:	18 f0       	brcs	.+6      	; 0x6bce <AC_enuControlIrrigationSystem+0x5e>
	{
		//Pump Off
		DC_MOTOR_enuOff(PUMP_MOTOR);
    6bc8:	82 e0       	ldi	r24, 0x02	; 2
    6bca:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <DC_MOTOR_enuOff>
	else
	{
		/* Do Nothing */
	}

	return Local_enuErrorState;
    6bce:	8a 81       	ldd	r24, Y+2	; 0x02
}
    6bd0:	0f 90       	pop	r0
    6bd2:	0f 90       	pop	r0
    6bd4:	0f 90       	pop	r0
    6bd6:	cf 91       	pop	r28
    6bd8:	df 91       	pop	r29
    6bda:	1f 91       	pop	r17
    6bdc:	0f 91       	pop	r16
    6bde:	08 95       	ret

00006be0 <AC_enuControlLightIntensitySystem>:

ES_t AC_enuControlLightIntensitySystem(u8 Copy_u8LDR)
{
    6be0:	0f 93       	push	r16
    6be2:	1f 93       	push	r17
    6be4:	df 93       	push	r29
    6be6:	cf 93       	push	r28
    6be8:	00 d0       	rcall	.+0      	; 0x6bea <AC_enuControlLightIntensitySystem+0xa>
    6bea:	0f 92       	push	r0
    6bec:	cd b7       	in	r28, 0x3d	; 61
    6bee:	de b7       	in	r29, 0x3e	; 62
    6bf0:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    6bf2:	81 e0       	ldi	r24, 0x01	; 1
    6bf4:	8a 83       	std	Y+2, r24	; 0x02
	u8 LDRI_u8Duty = 0;
    6bf6:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8LDR < LDRI_MIN && Copy_u8LDR > LDRI_ERROR_MIN)
    6bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    6bfa:	8d 32       	cpi	r24, 0x2D	; 45
    6bfc:	b8 f4       	brcc	.+46     	; 0x6c2c <AC_enuControlLightIntensitySystem+0x4c>
    6bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    6c00:	85 31       	cpi	r24, 0x15	; 21
    6c02:	a0 f0       	brcs	.+40     	; 0x6c2c <AC_enuControlLightIntensitySystem+0x4c>
	{
		//Lamp On
		/*
		 * map the value of soil moisture between 10-->30 to out duty 50-->100 to turn on the pump
		 */
		LDRI_u8Duty = Math_Mapping(50, 100, LDRI_MIN, LDRI_ERROR_MIN, Copy_u8LDR);
    6c04:	8b 81       	ldd	r24, Y+3	; 0x03
    6c06:	e8 2f       	mov	r30, r24
    6c08:	f0 e0       	ldi	r31, 0x00	; 0
    6c0a:	82 e3       	ldi	r24, 0x32	; 50
    6c0c:	90 e0       	ldi	r25, 0x00	; 0
    6c0e:	64 e6       	ldi	r22, 0x64	; 100
    6c10:	70 e0       	ldi	r23, 0x00	; 0
    6c12:	4d e2       	ldi	r20, 0x2D	; 45
    6c14:	50 e0       	ldi	r21, 0x00	; 0
    6c16:	24 e1       	ldi	r18, 0x14	; 20
    6c18:	30 e0       	ldi	r19, 0x00	; 0
    6c1a:	8f 01       	movw	r16, r30
    6c1c:	0e 94 56 20 	call	0x40ac	; 0x40ac <Math_Mapping>
    6c20:	89 83       	std	Y+1, r24	; 0x01
		LED_enuSetIntensity(LAMP_LED, LDRI_u8Duty);
    6c22:	81 e0       	ldi	r24, 0x01	; 1
    6c24:	69 81       	ldd	r22, Y+1	; 0x01
    6c26:	0e 94 02 23 	call	0x4604	; 0x4604 <LED_enuSetIntensity>
    6c2a:	07 c0       	rjmp	.+14     	; 0x6c3a <AC_enuControlLightIntensitySystem+0x5a>
	}
	else if(Copy_u8LDR > LDRI_MAX)
    6c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    6c2e:	8c 34       	cpi	r24, 0x4C	; 76
    6c30:	20 f0       	brcs	.+8      	; 0x6c3a <AC_enuControlLightIntensitySystem+0x5a>
	{
		//Pump Off
		LED_enuSetIntensity(LAMP_LED, 0);
    6c32:	81 e0       	ldi	r24, 0x01	; 1
    6c34:	60 e0       	ldi	r22, 0x00	; 0
    6c36:	0e 94 02 23 	call	0x4604	; 0x4604 <LED_enuSetIntensity>
	else
	{
		/* Do Nothing */
	}

	return Local_enuErrorState;
    6c3a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    6c3c:	0f 90       	pop	r0
    6c3e:	0f 90       	pop	r0
    6c40:	0f 90       	pop	r0
    6c42:	cf 91       	pop	r28
    6c44:	df 91       	pop	r29
    6c46:	1f 91       	pop	r17
    6c48:	0f 91       	pop	r16
    6c4a:	08 95       	ret

00006c4c <AC_enuControlAlertSystem>:

Buzzer_Forced_stop_t Buzzer_State = SW_BUZZER_PRESSED;

ES_t AC_enuControlAlertSystem(Data_Reading_t *Copy_PstrSystemReadings)
{
    6c4c:	df 93       	push	r29
    6c4e:	cf 93       	push	r28
    6c50:	00 d0       	rcall	.+0      	; 0x6c52 <AC_enuControlAlertSystem+0x6>
    6c52:	0f 92       	push	r0
    6c54:	cd b7       	in	r28, 0x3d	; 61
    6c56:	de b7       	in	r29, 0x3e	; 62
    6c58:	9b 83       	std	Y+3, r25	; 0x03
    6c5a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    6c5c:	81 e0       	ldi	r24, 0x01	; 1
    6c5e:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_PstrSystemReadings->Temperture < TEMP_ERROR_MIN || Copy_PstrSystemReadings->Temperture > TEMP_ERROR_MAX
    6c60:	ea 81       	ldd	r30, Y+2	; 0x02
    6c62:	fb 81       	ldd	r31, Y+3	; 0x03
    6c64:	80 81       	ld	r24, Z
    6c66:	8a 30       	cpi	r24, 0x0A	; 10
    6c68:	18 f1       	brcs	.+70     	; 0x6cb0 <AC_enuControlAlertSystem+0x64>
    6c6a:	ea 81       	ldd	r30, Y+2	; 0x02
    6c6c:	fb 81       	ldd	r31, Y+3	; 0x03
    6c6e:	80 81       	ld	r24, Z
    6c70:	89 32       	cpi	r24, 0x29	; 41
    6c72:	f0 f4       	brcc	.+60     	; 0x6cb0 <AC_enuControlAlertSystem+0x64>
    6c74:	ea 81       	ldd	r30, Y+2	; 0x02
    6c76:	fb 81       	ldd	r31, Y+3	; 0x03
    6c78:	81 81       	ldd	r24, Z+1	; 0x01
    6c7a:	84 31       	cpi	r24, 0x14	; 20
    6c7c:	c8 f0       	brcs	.+50     	; 0x6cb0 <AC_enuControlAlertSystem+0x64>
    6c7e:	ea 81       	ldd	r30, Y+2	; 0x02
    6c80:	fb 81       	ldd	r31, Y+3	; 0x03
    6c82:	81 81       	ldd	r24, Z+1	; 0x01
    6c84:	81 35       	cpi	r24, 0x51	; 81
    6c86:	a0 f4       	brcc	.+40     	; 0x6cb0 <AC_enuControlAlertSystem+0x64>
    6c88:	ea 81       	ldd	r30, Y+2	; 0x02
    6c8a:	fb 81       	ldd	r31, Y+3	; 0x03
    6c8c:	82 81       	ldd	r24, Z+2	; 0x02
    6c8e:	8a 30       	cpi	r24, 0x0A	; 10
    6c90:	78 f0       	brcs	.+30     	; 0x6cb0 <AC_enuControlAlertSystem+0x64>
    6c92:	ea 81       	ldd	r30, Y+2	; 0x02
    6c94:	fb 81       	ldd	r31, Y+3	; 0x03
    6c96:	82 81       	ldd	r24, Z+2	; 0x02
    6c98:	81 35       	cpi	r24, 0x51	; 81
    6c9a:	50 f4       	brcc	.+20     	; 0x6cb0 <AC_enuControlAlertSystem+0x64>
    6c9c:	ea 81       	ldd	r30, Y+2	; 0x02
    6c9e:	fb 81       	ldd	r31, Y+3	; 0x03
    6ca0:	83 81       	ldd	r24, Z+3	; 0x03
    6ca2:	84 31       	cpi	r24, 0x14	; 20
    6ca4:	28 f0       	brcs	.+10     	; 0x6cb0 <AC_enuControlAlertSystem+0x64>
    6ca6:	ea 81       	ldd	r30, Y+2	; 0x02
    6ca8:	fb 81       	ldd	r31, Y+3	; 0x03
    6caa:	83 81       	ldd	r24, Z+3	; 0x03
    6cac:	8b 35       	cpi	r24, 0x5B	; 91
    6cae:	b8 f0       	brcs	.+46     	; 0x6cde <AC_enuControlAlertSystem+0x92>
			|| Copy_PstrSystemReadings->Humidity < HUMI_ERROR_MIN || Copy_PstrSystemReadings->Humidity > HUMI_ERROR_MAX
			|| Copy_PstrSystemReadings->Soil_Moisture < SOIL_ERROR_MIN || Copy_PstrSystemReadings->Soil_Moisture > SOIL_ERROR_MAX
			|| Copy_PstrSystemReadings->Light_Intensity < LDRI_ERROR_MIN || Copy_PstrSystemReadings->Light_Intensity > LDRI_ERROR_MAX)
	{
		if(Buzzer_State == SW_BUZZER_PRESSED)
    6cb0:	80 91 fa 01 	lds	r24, 0x01FA
    6cb4:	81 30       	cpi	r24, 0x01	; 1
    6cb6:	21 f4       	brne	.+8      	; 0x6cc0 <AC_enuControlAlertSystem+0x74>
		{
			BUZZER_enuTurnOFF(SYSTEM_BUZZER);
    6cb8:	80 e0       	ldi	r24, 0x00	; 0
    6cba:	0e 94 ae 33 	call	0x675c	; 0x675c <BUZZER_enuTurnOFF>
    6cbe:	03 c0       	rjmp	.+6      	; 0x6cc6 <AC_enuControlAlertSystem+0x7a>
		}
		else
		{
			BUZZER_enuTurnON(SYSTEM_BUZZER);
    6cc0:	80 e0       	ldi	r24, 0x00	; 0
    6cc2:	0e 94 5f 33 	call	0x66be	; 0x66be <BUZZER_enuTurnON>
		}

		Copy_PstrSystemReadings->State = AGMS_ERROR;
    6cc6:	ea 81       	ldd	r30, Y+2	; 0x02
    6cc8:	fb 81       	ldd	r31, Y+3	; 0x03
    6cca:	14 82       	std	Z+4, r1	; 0x04
		LED_enuTurnOFF(&LED_AstrLedConfig[STATE_LED]);
    6ccc:	89 ed       	ldi	r24, 0xD9	; 217
    6cce:	91 e0       	ldi	r25, 0x01	; 1
    6cd0:	0e 94 bc 22 	call	0x4578	; 0x4578 <LED_enuTurnOFF>
		LED_enuTurnON(&LED_AstrLedConfig[ERROR_LED]);
    6cd4:	83 ee       	ldi	r24, 0xE3	; 227
    6cd6:	91 e0       	ldi	r25, 0x01	; 1
    6cd8:	0e 94 76 22 	call	0x44ec	; 0x44ec <LED_enuTurnON>
    6cdc:	11 c0       	rjmp	.+34     	; 0x6d00 <AC_enuControlAlertSystem+0xb4>
	}
	else
	{
		Copy_PstrSystemReadings->State = AGMS_NORMAL;
    6cde:	ea 81       	ldd	r30, Y+2	; 0x02
    6ce0:	fb 81       	ldd	r31, Y+3	; 0x03
    6ce2:	81 e0       	ldi	r24, 0x01	; 1
    6ce4:	84 83       	std	Z+4, r24	; 0x04
		Buzzer_State = SW_BUZZER_NOT_PRESSED;
    6ce6:	10 92 fa 01 	sts	0x01FA, r1
		BUZZER_enuTurnOFF(SYSTEM_BUZZER);
    6cea:	80 e0       	ldi	r24, 0x00	; 0
    6cec:	0e 94 ae 33 	call	0x675c	; 0x675c <BUZZER_enuTurnOFF>
		LED_enuTurnON(&LED_AstrLedConfig[STATE_LED]);
    6cf0:	89 ed       	ldi	r24, 0xD9	; 217
    6cf2:	91 e0       	ldi	r25, 0x01	; 1
    6cf4:	0e 94 76 22 	call	0x44ec	; 0x44ec <LED_enuTurnON>
		LED_enuTurnOFF(&LED_AstrLedConfig[ERROR_LED]);
    6cf8:	83 ee       	ldi	r24, 0xE3	; 227
    6cfa:	91 e0       	ldi	r25, 0x01	; 1
    6cfc:	0e 94 bc 22 	call	0x4578	; 0x4578 <LED_enuTurnOFF>
	}

	return Local_enuErrorState;
    6d00:	89 81       	ldd	r24, Y+1	; 0x01
}
    6d02:	0f 90       	pop	r0
    6d04:	0f 90       	pop	r0
    6d06:	0f 90       	pop	r0
    6d08:	cf 91       	pop	r28
    6d0a:	df 91       	pop	r29
    6d0c:	08 95       	ret

00006d0e <AC_Buzzer_stvidCallBack>:

static void AC_Buzzer_stvidCallBack(void *Copy_pvidAppPara)
{
    6d0e:	df 93       	push	r29
    6d10:	cf 93       	push	r28
    6d12:	00 d0       	rcall	.+0      	; 0x6d14 <AC_Buzzer_stvidCallBack+0x6>
    6d14:	cd b7       	in	r28, 0x3d	; 61
    6d16:	de b7       	in	r29, 0x3e	; 62
    6d18:	9a 83       	std	Y+2, r25	; 0x02
    6d1a:	89 83       	std	Y+1, r24	; 0x01
	Buzzer_State = SW_BUZZER_PRESSED;
    6d1c:	81 e0       	ldi	r24, 0x01	; 1
    6d1e:	80 93 fa 01 	sts	0x01FA, r24
}
    6d22:	0f 90       	pop	r0
    6d24:	0f 90       	pop	r0
    6d26:	cf 91       	pop	r28
    6d28:	df 91       	pop	r29
    6d2a:	08 95       	ret

00006d2c <AGMS_enuInit_AutomaticControl>:

Data_Reading_t AC_Sensors_Reading;
Data_Reading_t DS_Sensors_Reading;

ES_t AGMS_enuInit_AutomaticControl(void)
{
    6d2c:	df 93       	push	r29
    6d2e:	cf 93       	push	r28
    6d30:	0f 92       	push	r0
    6d32:	cd b7       	in	r28, 0x3d	; 61
    6d34:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    6d36:	81 e0       	ldi	r24, 0x01	; 1
    6d38:	89 83       	std	Y+1, r24	; 0x01

	/* initialize sensors */
	Sensors_enuInit();
    6d3a:	0e 94 fd 33 	call	0x67fa	; 0x67fa <Sensors_enuInit>

	/* initialize communication */
	Communication_enuInitMaster();
    6d3e:	0e 94 0c 09 	call	0x1218	; 0x1218 <Communication_enuInitMaster>

	/* initialize automatic control */
	AC_enuInitSystem();
    6d42:	0e 94 10 35 	call	0x6a20	; 0x6a20 <AC_enuInitSystem>

	return Local_enuErrorState;
    6d46:	89 81       	ldd	r24, Y+1	; 0x01
}
    6d48:	0f 90       	pop	r0
    6d4a:	cf 91       	pop	r28
    6d4c:	df 91       	pop	r29
    6d4e:	08 95       	ret

00006d50 <AGMS_enuRunning_AutomaticControl>:

ES_t AGMS_enuRunning_AutomaticControl(void)
{
    6d50:	df 93       	push	r29
    6d52:	cf 93       	push	r28
    6d54:	cd b7       	in	r28, 0x3d	; 61
    6d56:	de b7       	in	r29, 0x3e	; 62
    6d58:	27 97       	sbiw	r28, 0x07	; 7
    6d5a:	0f b6       	in	r0, 0x3f	; 63
    6d5c:	f8 94       	cli
    6d5e:	de bf       	out	0x3e, r29	; 62
    6d60:	0f be       	out	0x3f, r0	; 63
    6d62:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    6d64:	81 e0       	ldi	r24, 0x01	; 1
    6d66:	89 83       	std	Y+1, r24	; 0x01

	Communication_Frame_t Local_uniCommFrame;

	/* Get Sensor Reading */
	Sensors_enuGetReadings(&AC_Sensors_Reading);
    6d68:	85 e4       	ldi	r24, 0x45	; 69
    6d6a:	92 e0       	ldi	r25, 0x02	; 2
    6d6c:	0e 94 16 34 	call	0x682c	; 0x682c <Sensors_enuGetReadings>

	Local_uniCommFrame.Temp = AC_Sensors_Reading.Temperture;
    6d70:	80 91 45 02 	lds	r24, 0x0245
    6d74:	8a 83       	std	Y+2, r24	; 0x02
	Local_uniCommFrame.Humi = AC_Sensors_Reading.Humidity;
    6d76:	80 91 46 02 	lds	r24, 0x0246
    6d7a:	8b 83       	std	Y+3, r24	; 0x03
	Local_uniCommFrame.Soil = AC_Sensors_Reading.Soil_Moisture;
    6d7c:	80 91 47 02 	lds	r24, 0x0247
    6d80:	8c 83       	std	Y+4, r24	; 0x04
	Local_uniCommFrame.LDRI = AC_Sensors_Reading.Light_Intensity;
    6d82:	80 91 48 02 	lds	r24, 0x0248
    6d86:	8d 83       	std	Y+5, r24	; 0x05
	Local_uniCommFrame.State = AC_Sensors_Reading.State;
    6d88:	80 91 49 02 	lds	r24, 0x0249
    6d8c:	8e 83       	std	Y+6, r24	; 0x06


	/* Send Reading to MCU2 */
	Communication_enuSendFrame(&Local_uniCommFrame);
    6d8e:	ce 01       	movw	r24, r28
    6d90:	02 96       	adiw	r24, 0x02	; 2
    6d92:	0e 94 2a 09 	call	0x1254	; 0x1254 <Communication_enuSendFrame>

	/* Control depend on Reading */
	/* Control Heat System */
	AC_enuControlHeatSystem(AC_Sensors_Reading.Temperture, AC_Sensors_Reading.Humidity);
    6d96:	80 91 45 02 	lds	r24, 0x0245
    6d9a:	90 91 46 02 	lds	r25, 0x0246
    6d9e:	69 2f       	mov	r22, r25
    6da0:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <AC_enuControlHeatSystem>

	/* Control Irrigation System */
	AC_enuControlIrrigationSystem(AC_Sensors_Reading.Soil_Moisture);
    6da4:	80 91 47 02 	lds	r24, 0x0247
    6da8:	0e 94 b8 35 	call	0x6b70	; 0x6b70 <AC_enuControlIrrigationSystem>

	/* Control Light System */
	AC_enuControlLightIntensitySystem(AC_Sensors_Reading.Light_Intensity);
    6dac:	80 91 48 02 	lds	r24, 0x0248
    6db0:	0e 94 f0 35 	call	0x6be0	; 0x6be0 <AC_enuControlLightIntensitySystem>

	/* Control Alert System */
	AC_enuControlAlertSystem(&AC_Sensors_Reading);
    6db4:	85 e4       	ldi	r24, 0x45	; 69
    6db6:	92 e0       	ldi	r25, 0x02	; 2
    6db8:	0e 94 26 36 	call	0x6c4c	; 0x6c4c <AC_enuControlAlertSystem>

	return Local_enuErrorState;
    6dbc:	89 81       	ldd	r24, Y+1	; 0x01
}
    6dbe:	27 96       	adiw	r28, 0x07	; 7
    6dc0:	0f b6       	in	r0, 0x3f	; 63
    6dc2:	f8 94       	cli
    6dc4:	de bf       	out	0x3e, r29	; 62
    6dc6:	0f be       	out	0x3f, r0	; 63
    6dc8:	cd bf       	out	0x3d, r28	; 61
    6dca:	cf 91       	pop	r28
    6dcc:	df 91       	pop	r29
    6dce:	08 95       	ret

00006dd0 <AGMS_enuInit_Display>:

ES_t AGMS_enuInit_Display(void)
{
    6dd0:	df 93       	push	r29
    6dd2:	cf 93       	push	r28
    6dd4:	0f 92       	push	r0
    6dd6:	cd b7       	in	r28, 0x3d	; 61
    6dd8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    6dda:	81 e0       	ldi	r24, 0x01	; 1
    6ddc:	89 83       	std	Y+1, r24	; 0x01

	/* initialize communication */
	Communication_enuInitSlave();
    6dde:	0e 94 1b 09 	call	0x1236	; 0x1236 <Communication_enuInitSlave>

	/* initialize node red */
	NodeRed_Communication_enuInit();
    6de2:	0e 94 47 07 	call	0xe8e	; 0xe8e <NodeRed_Communication_enuInit>

	/* initialize Display */
	Diplay_enuInit();
    6de6:	0e 94 75 34 	call	0x68ea	; 0x68ea <Diplay_enuInit>


	return Local_enuErrorState;
    6dea:	89 81       	ldd	r24, Y+1	; 0x01
}
    6dec:	0f 90       	pop	r0
    6dee:	cf 91       	pop	r28
    6df0:	df 91       	pop	r29
    6df2:	08 95       	ret

00006df4 <AGMS_enuRunning_Display>:

ES_t AGMS_enuRunning_Display(void)
{
    6df4:	df 93       	push	r29
    6df6:	cf 93       	push	r28
    6df8:	cd b7       	in	r28, 0x3d	; 61
    6dfa:	de b7       	in	r29, 0x3e	; 62
    6dfc:	27 97       	sbiw	r28, 0x07	; 7
    6dfe:	0f b6       	in	r0, 0x3f	; 63
    6e00:	f8 94       	cli
    6e02:	de bf       	out	0x3e, r29	; 62
    6e04:	0f be       	out	0x3f, r0	; 63
    6e06:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    6e08:	81 e0       	ldi	r24, 0x01	; 1
    6e0a:	89 83       	std	Y+1, r24	; 0x01
	Communication_Frame_t Local_uniCommFrame;

	/* Read Data from MCU1 */
	Communication_enuReceiveFrame(&Local_uniCommFrame);
    6e0c:	ce 01       	movw	r24, r28
    6e0e:	02 96       	adiw	r24, 0x02	; 2
    6e10:	0e 94 82 09 	call	0x1304	; 0x1304 <Communication_enuReceiveFrame>

	DS_Sensors_Reading.Temperture = Local_uniCommFrame.Temp;
    6e14:	8a 81       	ldd	r24, Y+2	; 0x02
    6e16:	80 93 40 02 	sts	0x0240, r24
	DS_Sensors_Reading.Humidity = Local_uniCommFrame.Humi;
    6e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    6e1c:	80 93 41 02 	sts	0x0241, r24
	DS_Sensors_Reading.Soil_Moisture = Local_uniCommFrame.Soil;
    6e20:	8c 81       	ldd	r24, Y+4	; 0x04
    6e22:	80 93 42 02 	sts	0x0242, r24
	DS_Sensors_Reading.Light_Intensity = Local_uniCommFrame.LDRI;
    6e26:	8d 81       	ldd	r24, Y+5	; 0x05
    6e28:	80 93 43 02 	sts	0x0243, r24
	DS_Sensors_Reading.State = Local_uniCommFrame.State;
    6e2c:	8e 81       	ldd	r24, Y+6	; 0x06
    6e2e:	80 93 44 02 	sts	0x0244, r24

	/* Display Data */
	Display_enuReading(&DS_Sensors_Reading);
    6e32:	80 e4       	ldi	r24, 0x40	; 64
    6e34:	92 e0       	ldi	r25, 0x02	; 2
    6e36:	0e 94 84 34 	call	0x6908	; 0x6908 <Display_enuReading>

	/* Send Data to Node Red */
	NodeRed_Communication_enuSendDatatoServer(&DS_Sensors_Reading);
    6e3a:	80 e4       	ldi	r24, 0x40	; 64
    6e3c:	92 e0       	ldi	r25, 0x02	; 2
    6e3e:	0e 94 5f 07 	call	0xebe	; 0xebe <NodeRed_Communication_enuSendDatatoServer>

	return Local_enuErrorState;
    6e42:	89 81       	ldd	r24, Y+1	; 0x01
}
    6e44:	27 96       	adiw	r28, 0x07	; 7
    6e46:	0f b6       	in	r0, 0x3f	; 63
    6e48:	f8 94       	cli
    6e4a:	de bf       	out	0x3e, r29	; 62
    6e4c:	0f be       	out	0x3f, r0	; 63
    6e4e:	cd bf       	out	0x3d, r28	; 61
    6e50:	cf 91       	pop	r28
    6e52:	df 91       	pop	r29
    6e54:	08 95       	ret

00006e56 <main>:
#define Code	Master


#if Code == Master
int main()
{
    6e56:	df 93       	push	r29
    6e58:	cf 93       	push	r28
    6e5a:	cd b7       	in	r28, 0x3d	; 61
    6e5c:	de b7       	in	r29, 0x3e	; 62
	AGMS_enuInit_AutomaticControl();
    6e5e:	0e 94 96 36 	call	0x6d2c	; 0x6d2c <AGMS_enuInit_AutomaticControl>

	while(1)
	{
		AGMS_enuRunning_AutomaticControl();
    6e62:	0e 94 a8 36 	call	0x6d50	; 0x6d50 <AGMS_enuRunning_AutomaticControl>
    6e66:	fd cf       	rjmp	.-6      	; 0x6e62 <main+0xc>

00006e68 <__mulsi3>:
    6e68:	62 9f       	mul	r22, r18
    6e6a:	d0 01       	movw	r26, r0
    6e6c:	73 9f       	mul	r23, r19
    6e6e:	f0 01       	movw	r30, r0
    6e70:	82 9f       	mul	r24, r18
    6e72:	e0 0d       	add	r30, r0
    6e74:	f1 1d       	adc	r31, r1
    6e76:	64 9f       	mul	r22, r20
    6e78:	e0 0d       	add	r30, r0
    6e7a:	f1 1d       	adc	r31, r1
    6e7c:	92 9f       	mul	r25, r18
    6e7e:	f0 0d       	add	r31, r0
    6e80:	83 9f       	mul	r24, r19
    6e82:	f0 0d       	add	r31, r0
    6e84:	74 9f       	mul	r23, r20
    6e86:	f0 0d       	add	r31, r0
    6e88:	65 9f       	mul	r22, r21
    6e8a:	f0 0d       	add	r31, r0
    6e8c:	99 27       	eor	r25, r25
    6e8e:	72 9f       	mul	r23, r18
    6e90:	b0 0d       	add	r27, r0
    6e92:	e1 1d       	adc	r30, r1
    6e94:	f9 1f       	adc	r31, r25
    6e96:	63 9f       	mul	r22, r19
    6e98:	b0 0d       	add	r27, r0
    6e9a:	e1 1d       	adc	r30, r1
    6e9c:	f9 1f       	adc	r31, r25
    6e9e:	bd 01       	movw	r22, r26
    6ea0:	cf 01       	movw	r24, r30
    6ea2:	11 24       	eor	r1, r1
    6ea4:	08 95       	ret

00006ea6 <__divmodhi4>:
    6ea6:	97 fb       	bst	r25, 7
    6ea8:	09 2e       	mov	r0, r25
    6eaa:	07 26       	eor	r0, r23
    6eac:	0a d0       	rcall	.+20     	; 0x6ec2 <__divmodhi4_neg1>
    6eae:	77 fd       	sbrc	r23, 7
    6eb0:	04 d0       	rcall	.+8      	; 0x6eba <__divmodhi4_neg2>
    6eb2:	49 d0       	rcall	.+146    	; 0x6f46 <__udivmodhi4>
    6eb4:	06 d0       	rcall	.+12     	; 0x6ec2 <__divmodhi4_neg1>
    6eb6:	00 20       	and	r0, r0
    6eb8:	1a f4       	brpl	.+6      	; 0x6ec0 <__divmodhi4_exit>

00006eba <__divmodhi4_neg2>:
    6eba:	70 95       	com	r23
    6ebc:	61 95       	neg	r22
    6ebe:	7f 4f       	sbci	r23, 0xFF	; 255

00006ec0 <__divmodhi4_exit>:
    6ec0:	08 95       	ret

00006ec2 <__divmodhi4_neg1>:
    6ec2:	f6 f7       	brtc	.-4      	; 0x6ec0 <__divmodhi4_exit>
    6ec4:	90 95       	com	r25
    6ec6:	81 95       	neg	r24
    6ec8:	9f 4f       	sbci	r25, 0xFF	; 255
    6eca:	08 95       	ret

00006ecc <__udivmodsi4>:
    6ecc:	a1 e2       	ldi	r26, 0x21	; 33
    6ece:	1a 2e       	mov	r1, r26
    6ed0:	aa 1b       	sub	r26, r26
    6ed2:	bb 1b       	sub	r27, r27
    6ed4:	fd 01       	movw	r30, r26
    6ed6:	0d c0       	rjmp	.+26     	; 0x6ef2 <__udivmodsi4_ep>

00006ed8 <__udivmodsi4_loop>:
    6ed8:	aa 1f       	adc	r26, r26
    6eda:	bb 1f       	adc	r27, r27
    6edc:	ee 1f       	adc	r30, r30
    6ede:	ff 1f       	adc	r31, r31
    6ee0:	a2 17       	cp	r26, r18
    6ee2:	b3 07       	cpc	r27, r19
    6ee4:	e4 07       	cpc	r30, r20
    6ee6:	f5 07       	cpc	r31, r21
    6ee8:	20 f0       	brcs	.+8      	; 0x6ef2 <__udivmodsi4_ep>
    6eea:	a2 1b       	sub	r26, r18
    6eec:	b3 0b       	sbc	r27, r19
    6eee:	e4 0b       	sbc	r30, r20
    6ef0:	f5 0b       	sbc	r31, r21

00006ef2 <__udivmodsi4_ep>:
    6ef2:	66 1f       	adc	r22, r22
    6ef4:	77 1f       	adc	r23, r23
    6ef6:	88 1f       	adc	r24, r24
    6ef8:	99 1f       	adc	r25, r25
    6efa:	1a 94       	dec	r1
    6efc:	69 f7       	brne	.-38     	; 0x6ed8 <__udivmodsi4_loop>
    6efe:	60 95       	com	r22
    6f00:	70 95       	com	r23
    6f02:	80 95       	com	r24
    6f04:	90 95       	com	r25
    6f06:	9b 01       	movw	r18, r22
    6f08:	ac 01       	movw	r20, r24
    6f0a:	bd 01       	movw	r22, r26
    6f0c:	cf 01       	movw	r24, r30
    6f0e:	08 95       	ret

00006f10 <__divmodsi4>:
    6f10:	97 fb       	bst	r25, 7
    6f12:	09 2e       	mov	r0, r25
    6f14:	05 26       	eor	r0, r21
    6f16:	0e d0       	rcall	.+28     	; 0x6f34 <__divmodsi4_neg1>
    6f18:	57 fd       	sbrc	r21, 7
    6f1a:	04 d0       	rcall	.+8      	; 0x6f24 <__divmodsi4_neg2>
    6f1c:	d7 df       	rcall	.-82     	; 0x6ecc <__udivmodsi4>
    6f1e:	0a d0       	rcall	.+20     	; 0x6f34 <__divmodsi4_neg1>
    6f20:	00 1c       	adc	r0, r0
    6f22:	38 f4       	brcc	.+14     	; 0x6f32 <__divmodsi4_exit>

00006f24 <__divmodsi4_neg2>:
    6f24:	50 95       	com	r21
    6f26:	40 95       	com	r20
    6f28:	30 95       	com	r19
    6f2a:	21 95       	neg	r18
    6f2c:	3f 4f       	sbci	r19, 0xFF	; 255
    6f2e:	4f 4f       	sbci	r20, 0xFF	; 255
    6f30:	5f 4f       	sbci	r21, 0xFF	; 255

00006f32 <__divmodsi4_exit>:
    6f32:	08 95       	ret

00006f34 <__divmodsi4_neg1>:
    6f34:	f6 f7       	brtc	.-4      	; 0x6f32 <__divmodsi4_exit>
    6f36:	90 95       	com	r25
    6f38:	80 95       	com	r24
    6f3a:	70 95       	com	r23
    6f3c:	61 95       	neg	r22
    6f3e:	7f 4f       	sbci	r23, 0xFF	; 255
    6f40:	8f 4f       	sbci	r24, 0xFF	; 255
    6f42:	9f 4f       	sbci	r25, 0xFF	; 255
    6f44:	08 95       	ret

00006f46 <__udivmodhi4>:
    6f46:	aa 1b       	sub	r26, r26
    6f48:	bb 1b       	sub	r27, r27
    6f4a:	51 e1       	ldi	r21, 0x11	; 17
    6f4c:	07 c0       	rjmp	.+14     	; 0x6f5c <__udivmodhi4_ep>

00006f4e <__udivmodhi4_loop>:
    6f4e:	aa 1f       	adc	r26, r26
    6f50:	bb 1f       	adc	r27, r27
    6f52:	a6 17       	cp	r26, r22
    6f54:	b7 07       	cpc	r27, r23
    6f56:	10 f0       	brcs	.+4      	; 0x6f5c <__udivmodhi4_ep>
    6f58:	a6 1b       	sub	r26, r22
    6f5a:	b7 0b       	sbc	r27, r23

00006f5c <__udivmodhi4_ep>:
    6f5c:	88 1f       	adc	r24, r24
    6f5e:	99 1f       	adc	r25, r25
    6f60:	5a 95       	dec	r21
    6f62:	a9 f7       	brne	.-22     	; 0x6f4e <__udivmodhi4_loop>
    6f64:	80 95       	com	r24
    6f66:	90 95       	com	r25
    6f68:	bc 01       	movw	r22, r24
    6f6a:	cd 01       	movw	r24, r26
    6f6c:	08 95       	ret

00006f6e <__prologue_saves__>:
    6f6e:	2f 92       	push	r2
    6f70:	3f 92       	push	r3
    6f72:	4f 92       	push	r4
    6f74:	5f 92       	push	r5
    6f76:	6f 92       	push	r6
    6f78:	7f 92       	push	r7
    6f7a:	8f 92       	push	r8
    6f7c:	9f 92       	push	r9
    6f7e:	af 92       	push	r10
    6f80:	bf 92       	push	r11
    6f82:	cf 92       	push	r12
    6f84:	df 92       	push	r13
    6f86:	ef 92       	push	r14
    6f88:	ff 92       	push	r15
    6f8a:	0f 93       	push	r16
    6f8c:	1f 93       	push	r17
    6f8e:	cf 93       	push	r28
    6f90:	df 93       	push	r29
    6f92:	cd b7       	in	r28, 0x3d	; 61
    6f94:	de b7       	in	r29, 0x3e	; 62
    6f96:	ca 1b       	sub	r28, r26
    6f98:	db 0b       	sbc	r29, r27
    6f9a:	0f b6       	in	r0, 0x3f	; 63
    6f9c:	f8 94       	cli
    6f9e:	de bf       	out	0x3e, r29	; 62
    6fa0:	0f be       	out	0x3f, r0	; 63
    6fa2:	cd bf       	out	0x3d, r28	; 61
    6fa4:	09 94       	ijmp

00006fa6 <__epilogue_restores__>:
    6fa6:	2a 88       	ldd	r2, Y+18	; 0x12
    6fa8:	39 88       	ldd	r3, Y+17	; 0x11
    6faa:	48 88       	ldd	r4, Y+16	; 0x10
    6fac:	5f 84       	ldd	r5, Y+15	; 0x0f
    6fae:	6e 84       	ldd	r6, Y+14	; 0x0e
    6fb0:	7d 84       	ldd	r7, Y+13	; 0x0d
    6fb2:	8c 84       	ldd	r8, Y+12	; 0x0c
    6fb4:	9b 84       	ldd	r9, Y+11	; 0x0b
    6fb6:	aa 84       	ldd	r10, Y+10	; 0x0a
    6fb8:	b9 84       	ldd	r11, Y+9	; 0x09
    6fba:	c8 84       	ldd	r12, Y+8	; 0x08
    6fbc:	df 80       	ldd	r13, Y+7	; 0x07
    6fbe:	ee 80       	ldd	r14, Y+6	; 0x06
    6fc0:	fd 80       	ldd	r15, Y+5	; 0x05
    6fc2:	0c 81       	ldd	r16, Y+4	; 0x04
    6fc4:	1b 81       	ldd	r17, Y+3	; 0x03
    6fc6:	aa 81       	ldd	r26, Y+2	; 0x02
    6fc8:	b9 81       	ldd	r27, Y+1	; 0x01
    6fca:	ce 0f       	add	r28, r30
    6fcc:	d1 1d       	adc	r29, r1
    6fce:	0f b6       	in	r0, 0x3f	; 63
    6fd0:	f8 94       	cli
    6fd2:	de bf       	out	0x3e, r29	; 62
    6fd4:	0f be       	out	0x3f, r0	; 63
    6fd6:	cd bf       	out	0x3d, r28	; 61
    6fd8:	ed 01       	movw	r28, r26
    6fda:	08 95       	ret

00006fdc <memcpy>:
    6fdc:	fb 01       	movw	r30, r22
    6fde:	dc 01       	movw	r26, r24
    6fe0:	02 c0       	rjmp	.+4      	; 0x6fe6 <memcpy+0xa>
    6fe2:	01 90       	ld	r0, Z+
    6fe4:	0d 92       	st	X+, r0
    6fe6:	41 50       	subi	r20, 0x01	; 1
    6fe8:	50 40       	sbci	r21, 0x00	; 0
    6fea:	d8 f7       	brcc	.-10     	; 0x6fe2 <memcpy+0x6>
    6fec:	08 95       	ret

00006fee <strcat>:
    6fee:	fb 01       	movw	r30, r22
    6ff0:	dc 01       	movw	r26, r24
    6ff2:	0d 90       	ld	r0, X+
    6ff4:	00 20       	and	r0, r0
    6ff6:	e9 f7       	brne	.-6      	; 0x6ff2 <strcat+0x4>
    6ff8:	11 97       	sbiw	r26, 0x01	; 1
    6ffa:	01 90       	ld	r0, Z+
    6ffc:	0d 92       	st	X+, r0
    6ffe:	00 20       	and	r0, r0
    7000:	e1 f7       	brne	.-8      	; 0x6ffa <strcat+0xc>
    7002:	08 95       	ret

00007004 <strcpy>:
    7004:	fb 01       	movw	r30, r22
    7006:	dc 01       	movw	r26, r24
    7008:	01 90       	ld	r0, Z+
    700a:	0d 92       	st	X+, r0
    700c:	00 20       	and	r0, r0
    700e:	e1 f7       	brne	.-8      	; 0x7008 <strcpy+0x4>
    7010:	08 95       	ret

00007012 <strlen>:
    7012:	fc 01       	movw	r30, r24
    7014:	01 90       	ld	r0, Z+
    7016:	00 20       	and	r0, r0
    7018:	e9 f7       	brne	.-6      	; 0x7014 <strlen+0x2>
    701a:	80 95       	com	r24
    701c:	90 95       	com	r25
    701e:	8e 0f       	add	r24, r30
    7020:	9f 1f       	adc	r25, r31
    7022:	08 95       	ret

00007024 <sprintf>:
    7024:	ae e0       	ldi	r26, 0x0E	; 14
    7026:	b0 e0       	ldi	r27, 0x00	; 0
    7028:	e8 e1       	ldi	r30, 0x18	; 24
    702a:	f8 e3       	ldi	r31, 0x38	; 56
    702c:	0c 94 c5 37 	jmp	0x6f8a	; 0x6f8a <__prologue_saves__+0x1c>
    7030:	0d 89       	ldd	r16, Y+21	; 0x15
    7032:	1e 89       	ldd	r17, Y+22	; 0x16
    7034:	86 e0       	ldi	r24, 0x06	; 6
    7036:	8c 83       	std	Y+4, r24	; 0x04
    7038:	1a 83       	std	Y+2, r17	; 0x02
    703a:	09 83       	std	Y+1, r16	; 0x01
    703c:	8f ef       	ldi	r24, 0xFF	; 255
    703e:	9f e7       	ldi	r25, 0x7F	; 127
    7040:	9e 83       	std	Y+6, r25	; 0x06
    7042:	8d 83       	std	Y+5, r24	; 0x05
    7044:	9e 01       	movw	r18, r28
    7046:	27 5e       	subi	r18, 0xE7	; 231
    7048:	3f 4f       	sbci	r19, 0xFF	; 255
    704a:	ce 01       	movw	r24, r28
    704c:	01 96       	adiw	r24, 0x01	; 1
    704e:	6f 89       	ldd	r22, Y+23	; 0x17
    7050:	78 8d       	ldd	r23, Y+24	; 0x18
    7052:	a9 01       	movw	r20, r18
    7054:	0e 94 36 38 	call	0x706c	; 0x706c <vfprintf>
    7058:	2f 81       	ldd	r18, Y+7	; 0x07
    705a:	38 85       	ldd	r19, Y+8	; 0x08
    705c:	02 0f       	add	r16, r18
    705e:	13 1f       	adc	r17, r19
    7060:	f8 01       	movw	r30, r16
    7062:	10 82       	st	Z, r1
    7064:	2e 96       	adiw	r28, 0x0e	; 14
    7066:	e4 e0       	ldi	r30, 0x04	; 4
    7068:	0c 94 e1 37 	jmp	0x6fc2	; 0x6fc2 <__epilogue_restores__+0x1c>

0000706c <vfprintf>:
    706c:	ab e0       	ldi	r26, 0x0B	; 11
    706e:	b0 e0       	ldi	r27, 0x00	; 0
    7070:	ec e3       	ldi	r30, 0x3C	; 60
    7072:	f8 e3       	ldi	r31, 0x38	; 56
    7074:	0c 94 b7 37 	jmp	0x6f6e	; 0x6f6e <__prologue_saves__>
    7078:	3c 01       	movw	r6, r24
    707a:	2b 01       	movw	r4, r22
    707c:	5a 01       	movw	r10, r20
    707e:	fc 01       	movw	r30, r24
    7080:	17 82       	std	Z+7, r1	; 0x07
    7082:	16 82       	std	Z+6, r1	; 0x06
    7084:	83 81       	ldd	r24, Z+3	; 0x03
    7086:	81 fd       	sbrc	r24, 1
    7088:	03 c0       	rjmp	.+6      	; 0x7090 <vfprintf+0x24>
    708a:	6f ef       	ldi	r22, 0xFF	; 255
    708c:	7f ef       	ldi	r23, 0xFF	; 255
    708e:	c6 c1       	rjmp	.+908    	; 0x741c <vfprintf+0x3b0>
    7090:	9a e0       	ldi	r25, 0x0A	; 10
    7092:	89 2e       	mov	r8, r25
    7094:	1e 01       	movw	r2, r28
    7096:	08 94       	sec
    7098:	21 1c       	adc	r2, r1
    709a:	31 1c       	adc	r3, r1
    709c:	f3 01       	movw	r30, r6
    709e:	23 81       	ldd	r18, Z+3	; 0x03
    70a0:	f2 01       	movw	r30, r4
    70a2:	23 fd       	sbrc	r18, 3
    70a4:	85 91       	lpm	r24, Z+
    70a6:	23 ff       	sbrs	r18, 3
    70a8:	81 91       	ld	r24, Z+
    70aa:	2f 01       	movw	r4, r30
    70ac:	88 23       	and	r24, r24
    70ae:	09 f4       	brne	.+2      	; 0x70b2 <vfprintf+0x46>
    70b0:	b2 c1       	rjmp	.+868    	; 0x7416 <vfprintf+0x3aa>
    70b2:	85 32       	cpi	r24, 0x25	; 37
    70b4:	39 f4       	brne	.+14     	; 0x70c4 <vfprintf+0x58>
    70b6:	23 fd       	sbrc	r18, 3
    70b8:	85 91       	lpm	r24, Z+
    70ba:	23 ff       	sbrs	r18, 3
    70bc:	81 91       	ld	r24, Z+
    70be:	2f 01       	movw	r4, r30
    70c0:	85 32       	cpi	r24, 0x25	; 37
    70c2:	29 f4       	brne	.+10     	; 0x70ce <vfprintf+0x62>
    70c4:	90 e0       	ldi	r25, 0x00	; 0
    70c6:	b3 01       	movw	r22, r6
    70c8:	0e 94 29 3a 	call	0x7452	; 0x7452 <fputc>
    70cc:	e7 cf       	rjmp	.-50     	; 0x709c <vfprintf+0x30>
    70ce:	98 2f       	mov	r25, r24
    70d0:	ff 24       	eor	r15, r15
    70d2:	ee 24       	eor	r14, r14
    70d4:	99 24       	eor	r9, r9
    70d6:	ff e1       	ldi	r31, 0x1F	; 31
    70d8:	ff 15       	cp	r31, r15
    70da:	d0 f0       	brcs	.+52     	; 0x7110 <vfprintf+0xa4>
    70dc:	9b 32       	cpi	r25, 0x2B	; 43
    70de:	69 f0       	breq	.+26     	; 0x70fa <vfprintf+0x8e>
    70e0:	9c 32       	cpi	r25, 0x2C	; 44
    70e2:	28 f4       	brcc	.+10     	; 0x70ee <vfprintf+0x82>
    70e4:	90 32       	cpi	r25, 0x20	; 32
    70e6:	59 f0       	breq	.+22     	; 0x70fe <vfprintf+0x92>
    70e8:	93 32       	cpi	r25, 0x23	; 35
    70ea:	91 f4       	brne	.+36     	; 0x7110 <vfprintf+0xa4>
    70ec:	0e c0       	rjmp	.+28     	; 0x710a <vfprintf+0x9e>
    70ee:	9d 32       	cpi	r25, 0x2D	; 45
    70f0:	49 f0       	breq	.+18     	; 0x7104 <vfprintf+0x98>
    70f2:	90 33       	cpi	r25, 0x30	; 48
    70f4:	69 f4       	brne	.+26     	; 0x7110 <vfprintf+0xa4>
    70f6:	41 e0       	ldi	r20, 0x01	; 1
    70f8:	24 c0       	rjmp	.+72     	; 0x7142 <vfprintf+0xd6>
    70fa:	52 e0       	ldi	r21, 0x02	; 2
    70fc:	f5 2a       	or	r15, r21
    70fe:	84 e0       	ldi	r24, 0x04	; 4
    7100:	f8 2a       	or	r15, r24
    7102:	28 c0       	rjmp	.+80     	; 0x7154 <vfprintf+0xe8>
    7104:	98 e0       	ldi	r25, 0x08	; 8
    7106:	f9 2a       	or	r15, r25
    7108:	25 c0       	rjmp	.+74     	; 0x7154 <vfprintf+0xe8>
    710a:	e0 e1       	ldi	r30, 0x10	; 16
    710c:	fe 2a       	or	r15, r30
    710e:	22 c0       	rjmp	.+68     	; 0x7154 <vfprintf+0xe8>
    7110:	f7 fc       	sbrc	r15, 7
    7112:	29 c0       	rjmp	.+82     	; 0x7166 <vfprintf+0xfa>
    7114:	89 2f       	mov	r24, r25
    7116:	80 53       	subi	r24, 0x30	; 48
    7118:	8a 30       	cpi	r24, 0x0A	; 10
    711a:	70 f4       	brcc	.+28     	; 0x7138 <vfprintf+0xcc>
    711c:	f6 fe       	sbrs	r15, 6
    711e:	05 c0       	rjmp	.+10     	; 0x712a <vfprintf+0xbe>
    7120:	98 9c       	mul	r9, r8
    7122:	90 2c       	mov	r9, r0
    7124:	11 24       	eor	r1, r1
    7126:	98 0e       	add	r9, r24
    7128:	15 c0       	rjmp	.+42     	; 0x7154 <vfprintf+0xe8>
    712a:	e8 9c       	mul	r14, r8
    712c:	e0 2c       	mov	r14, r0
    712e:	11 24       	eor	r1, r1
    7130:	e8 0e       	add	r14, r24
    7132:	f0 e2       	ldi	r31, 0x20	; 32
    7134:	ff 2a       	or	r15, r31
    7136:	0e c0       	rjmp	.+28     	; 0x7154 <vfprintf+0xe8>
    7138:	9e 32       	cpi	r25, 0x2E	; 46
    713a:	29 f4       	brne	.+10     	; 0x7146 <vfprintf+0xda>
    713c:	f6 fc       	sbrc	r15, 6
    713e:	6b c1       	rjmp	.+726    	; 0x7416 <vfprintf+0x3aa>
    7140:	40 e4       	ldi	r20, 0x40	; 64
    7142:	f4 2a       	or	r15, r20
    7144:	07 c0       	rjmp	.+14     	; 0x7154 <vfprintf+0xe8>
    7146:	9c 36       	cpi	r25, 0x6C	; 108
    7148:	19 f4       	brne	.+6      	; 0x7150 <vfprintf+0xe4>
    714a:	50 e8       	ldi	r21, 0x80	; 128
    714c:	f5 2a       	or	r15, r21
    714e:	02 c0       	rjmp	.+4      	; 0x7154 <vfprintf+0xe8>
    7150:	98 36       	cpi	r25, 0x68	; 104
    7152:	49 f4       	brne	.+18     	; 0x7166 <vfprintf+0xfa>
    7154:	f2 01       	movw	r30, r4
    7156:	23 fd       	sbrc	r18, 3
    7158:	95 91       	lpm	r25, Z+
    715a:	23 ff       	sbrs	r18, 3
    715c:	91 91       	ld	r25, Z+
    715e:	2f 01       	movw	r4, r30
    7160:	99 23       	and	r25, r25
    7162:	09 f0       	breq	.+2      	; 0x7166 <vfprintf+0xfa>
    7164:	b8 cf       	rjmp	.-144    	; 0x70d6 <vfprintf+0x6a>
    7166:	89 2f       	mov	r24, r25
    7168:	85 54       	subi	r24, 0x45	; 69
    716a:	83 30       	cpi	r24, 0x03	; 3
    716c:	18 f0       	brcs	.+6      	; 0x7174 <vfprintf+0x108>
    716e:	80 52       	subi	r24, 0x20	; 32
    7170:	83 30       	cpi	r24, 0x03	; 3
    7172:	38 f4       	brcc	.+14     	; 0x7182 <vfprintf+0x116>
    7174:	44 e0       	ldi	r20, 0x04	; 4
    7176:	50 e0       	ldi	r21, 0x00	; 0
    7178:	a4 0e       	add	r10, r20
    717a:	b5 1e       	adc	r11, r21
    717c:	5f e3       	ldi	r21, 0x3F	; 63
    717e:	59 83       	std	Y+1, r21	; 0x01
    7180:	0f c0       	rjmp	.+30     	; 0x71a0 <vfprintf+0x134>
    7182:	93 36       	cpi	r25, 0x63	; 99
    7184:	31 f0       	breq	.+12     	; 0x7192 <vfprintf+0x126>
    7186:	93 37       	cpi	r25, 0x73	; 115
    7188:	79 f0       	breq	.+30     	; 0x71a8 <vfprintf+0x13c>
    718a:	93 35       	cpi	r25, 0x53	; 83
    718c:	09 f0       	breq	.+2      	; 0x7190 <vfprintf+0x124>
    718e:	56 c0       	rjmp	.+172    	; 0x723c <vfprintf+0x1d0>
    7190:	20 c0       	rjmp	.+64     	; 0x71d2 <vfprintf+0x166>
    7192:	f5 01       	movw	r30, r10
    7194:	80 81       	ld	r24, Z
    7196:	89 83       	std	Y+1, r24	; 0x01
    7198:	42 e0       	ldi	r20, 0x02	; 2
    719a:	50 e0       	ldi	r21, 0x00	; 0
    719c:	a4 0e       	add	r10, r20
    719e:	b5 1e       	adc	r11, r21
    71a0:	61 01       	movw	r12, r2
    71a2:	01 e0       	ldi	r16, 0x01	; 1
    71a4:	10 e0       	ldi	r17, 0x00	; 0
    71a6:	12 c0       	rjmp	.+36     	; 0x71cc <vfprintf+0x160>
    71a8:	f5 01       	movw	r30, r10
    71aa:	c0 80       	ld	r12, Z
    71ac:	d1 80       	ldd	r13, Z+1	; 0x01
    71ae:	f6 fc       	sbrc	r15, 6
    71b0:	03 c0       	rjmp	.+6      	; 0x71b8 <vfprintf+0x14c>
    71b2:	6f ef       	ldi	r22, 0xFF	; 255
    71b4:	7f ef       	ldi	r23, 0xFF	; 255
    71b6:	02 c0       	rjmp	.+4      	; 0x71bc <vfprintf+0x150>
    71b8:	69 2d       	mov	r22, r9
    71ba:	70 e0       	ldi	r23, 0x00	; 0
    71bc:	42 e0       	ldi	r20, 0x02	; 2
    71be:	50 e0       	ldi	r21, 0x00	; 0
    71c0:	a4 0e       	add	r10, r20
    71c2:	b5 1e       	adc	r11, r21
    71c4:	c6 01       	movw	r24, r12
    71c6:	0e 94 1e 3a 	call	0x743c	; 0x743c <strnlen>
    71ca:	8c 01       	movw	r16, r24
    71cc:	5f e7       	ldi	r21, 0x7F	; 127
    71ce:	f5 22       	and	r15, r21
    71d0:	14 c0       	rjmp	.+40     	; 0x71fa <vfprintf+0x18e>
    71d2:	f5 01       	movw	r30, r10
    71d4:	c0 80       	ld	r12, Z
    71d6:	d1 80       	ldd	r13, Z+1	; 0x01
    71d8:	f6 fc       	sbrc	r15, 6
    71da:	03 c0       	rjmp	.+6      	; 0x71e2 <vfprintf+0x176>
    71dc:	6f ef       	ldi	r22, 0xFF	; 255
    71de:	7f ef       	ldi	r23, 0xFF	; 255
    71e0:	02 c0       	rjmp	.+4      	; 0x71e6 <vfprintf+0x17a>
    71e2:	69 2d       	mov	r22, r9
    71e4:	70 e0       	ldi	r23, 0x00	; 0
    71e6:	42 e0       	ldi	r20, 0x02	; 2
    71e8:	50 e0       	ldi	r21, 0x00	; 0
    71ea:	a4 0e       	add	r10, r20
    71ec:	b5 1e       	adc	r11, r21
    71ee:	c6 01       	movw	r24, r12
    71f0:	0e 94 13 3a 	call	0x7426	; 0x7426 <strnlen_P>
    71f4:	8c 01       	movw	r16, r24
    71f6:	50 e8       	ldi	r21, 0x80	; 128
    71f8:	f5 2a       	or	r15, r21
    71fa:	f3 fe       	sbrs	r15, 3
    71fc:	07 c0       	rjmp	.+14     	; 0x720c <vfprintf+0x1a0>
    71fe:	1a c0       	rjmp	.+52     	; 0x7234 <vfprintf+0x1c8>
    7200:	80 e2       	ldi	r24, 0x20	; 32
    7202:	90 e0       	ldi	r25, 0x00	; 0
    7204:	b3 01       	movw	r22, r6
    7206:	0e 94 29 3a 	call	0x7452	; 0x7452 <fputc>
    720a:	ea 94       	dec	r14
    720c:	8e 2d       	mov	r24, r14
    720e:	90 e0       	ldi	r25, 0x00	; 0
    7210:	08 17       	cp	r16, r24
    7212:	19 07       	cpc	r17, r25
    7214:	a8 f3       	brcs	.-22     	; 0x7200 <vfprintf+0x194>
    7216:	0e c0       	rjmp	.+28     	; 0x7234 <vfprintf+0x1c8>
    7218:	f6 01       	movw	r30, r12
    721a:	f7 fc       	sbrc	r15, 7
    721c:	85 91       	lpm	r24, Z+
    721e:	f7 fe       	sbrs	r15, 7
    7220:	81 91       	ld	r24, Z+
    7222:	6f 01       	movw	r12, r30
    7224:	90 e0       	ldi	r25, 0x00	; 0
    7226:	b3 01       	movw	r22, r6
    7228:	0e 94 29 3a 	call	0x7452	; 0x7452 <fputc>
    722c:	e1 10       	cpse	r14, r1
    722e:	ea 94       	dec	r14
    7230:	01 50       	subi	r16, 0x01	; 1
    7232:	10 40       	sbci	r17, 0x00	; 0
    7234:	01 15       	cp	r16, r1
    7236:	11 05       	cpc	r17, r1
    7238:	79 f7       	brne	.-34     	; 0x7218 <vfprintf+0x1ac>
    723a:	ea c0       	rjmp	.+468    	; 0x7410 <vfprintf+0x3a4>
    723c:	94 36       	cpi	r25, 0x64	; 100
    723e:	11 f0       	breq	.+4      	; 0x7244 <vfprintf+0x1d8>
    7240:	99 36       	cpi	r25, 0x69	; 105
    7242:	69 f5       	brne	.+90     	; 0x729e <vfprintf+0x232>
    7244:	f7 fe       	sbrs	r15, 7
    7246:	08 c0       	rjmp	.+16     	; 0x7258 <vfprintf+0x1ec>
    7248:	f5 01       	movw	r30, r10
    724a:	20 81       	ld	r18, Z
    724c:	31 81       	ldd	r19, Z+1	; 0x01
    724e:	42 81       	ldd	r20, Z+2	; 0x02
    7250:	53 81       	ldd	r21, Z+3	; 0x03
    7252:	84 e0       	ldi	r24, 0x04	; 4
    7254:	90 e0       	ldi	r25, 0x00	; 0
    7256:	0a c0       	rjmp	.+20     	; 0x726c <vfprintf+0x200>
    7258:	f5 01       	movw	r30, r10
    725a:	80 81       	ld	r24, Z
    725c:	91 81       	ldd	r25, Z+1	; 0x01
    725e:	9c 01       	movw	r18, r24
    7260:	44 27       	eor	r20, r20
    7262:	37 fd       	sbrc	r19, 7
    7264:	40 95       	com	r20
    7266:	54 2f       	mov	r21, r20
    7268:	82 e0       	ldi	r24, 0x02	; 2
    726a:	90 e0       	ldi	r25, 0x00	; 0
    726c:	a8 0e       	add	r10, r24
    726e:	b9 1e       	adc	r11, r25
    7270:	9f e6       	ldi	r25, 0x6F	; 111
    7272:	f9 22       	and	r15, r25
    7274:	57 ff       	sbrs	r21, 7
    7276:	09 c0       	rjmp	.+18     	; 0x728a <vfprintf+0x21e>
    7278:	50 95       	com	r21
    727a:	40 95       	com	r20
    727c:	30 95       	com	r19
    727e:	21 95       	neg	r18
    7280:	3f 4f       	sbci	r19, 0xFF	; 255
    7282:	4f 4f       	sbci	r20, 0xFF	; 255
    7284:	5f 4f       	sbci	r21, 0xFF	; 255
    7286:	e0 e8       	ldi	r30, 0x80	; 128
    7288:	fe 2a       	or	r15, r30
    728a:	ca 01       	movw	r24, r20
    728c:	b9 01       	movw	r22, r18
    728e:	a1 01       	movw	r20, r2
    7290:	2a e0       	ldi	r18, 0x0A	; 10
    7292:	30 e0       	ldi	r19, 0x00	; 0
    7294:	0e 94 55 3a 	call	0x74aa	; 0x74aa <__ultoa_invert>
    7298:	d8 2e       	mov	r13, r24
    729a:	d2 18       	sub	r13, r2
    729c:	40 c0       	rjmp	.+128    	; 0x731e <vfprintf+0x2b2>
    729e:	95 37       	cpi	r25, 0x75	; 117
    72a0:	29 f4       	brne	.+10     	; 0x72ac <vfprintf+0x240>
    72a2:	1f 2d       	mov	r17, r15
    72a4:	1f 7e       	andi	r17, 0xEF	; 239
    72a6:	2a e0       	ldi	r18, 0x0A	; 10
    72a8:	30 e0       	ldi	r19, 0x00	; 0
    72aa:	1d c0       	rjmp	.+58     	; 0x72e6 <vfprintf+0x27a>
    72ac:	1f 2d       	mov	r17, r15
    72ae:	19 7f       	andi	r17, 0xF9	; 249
    72b0:	9f 36       	cpi	r25, 0x6F	; 111
    72b2:	61 f0       	breq	.+24     	; 0x72cc <vfprintf+0x260>
    72b4:	90 37       	cpi	r25, 0x70	; 112
    72b6:	20 f4       	brcc	.+8      	; 0x72c0 <vfprintf+0x254>
    72b8:	98 35       	cpi	r25, 0x58	; 88
    72ba:	09 f0       	breq	.+2      	; 0x72be <vfprintf+0x252>
    72bc:	ac c0       	rjmp	.+344    	; 0x7416 <vfprintf+0x3aa>
    72be:	0f c0       	rjmp	.+30     	; 0x72de <vfprintf+0x272>
    72c0:	90 37       	cpi	r25, 0x70	; 112
    72c2:	39 f0       	breq	.+14     	; 0x72d2 <vfprintf+0x266>
    72c4:	98 37       	cpi	r25, 0x78	; 120
    72c6:	09 f0       	breq	.+2      	; 0x72ca <vfprintf+0x25e>
    72c8:	a6 c0       	rjmp	.+332    	; 0x7416 <vfprintf+0x3aa>
    72ca:	04 c0       	rjmp	.+8      	; 0x72d4 <vfprintf+0x268>
    72cc:	28 e0       	ldi	r18, 0x08	; 8
    72ce:	30 e0       	ldi	r19, 0x00	; 0
    72d0:	0a c0       	rjmp	.+20     	; 0x72e6 <vfprintf+0x27a>
    72d2:	10 61       	ori	r17, 0x10	; 16
    72d4:	14 fd       	sbrc	r17, 4
    72d6:	14 60       	ori	r17, 0x04	; 4
    72d8:	20 e1       	ldi	r18, 0x10	; 16
    72da:	30 e0       	ldi	r19, 0x00	; 0
    72dc:	04 c0       	rjmp	.+8      	; 0x72e6 <vfprintf+0x27a>
    72de:	14 fd       	sbrc	r17, 4
    72e0:	16 60       	ori	r17, 0x06	; 6
    72e2:	20 e1       	ldi	r18, 0x10	; 16
    72e4:	32 e0       	ldi	r19, 0x02	; 2
    72e6:	17 ff       	sbrs	r17, 7
    72e8:	08 c0       	rjmp	.+16     	; 0x72fa <vfprintf+0x28e>
    72ea:	f5 01       	movw	r30, r10
    72ec:	60 81       	ld	r22, Z
    72ee:	71 81       	ldd	r23, Z+1	; 0x01
    72f0:	82 81       	ldd	r24, Z+2	; 0x02
    72f2:	93 81       	ldd	r25, Z+3	; 0x03
    72f4:	44 e0       	ldi	r20, 0x04	; 4
    72f6:	50 e0       	ldi	r21, 0x00	; 0
    72f8:	08 c0       	rjmp	.+16     	; 0x730a <vfprintf+0x29e>
    72fa:	f5 01       	movw	r30, r10
    72fc:	80 81       	ld	r24, Z
    72fe:	91 81       	ldd	r25, Z+1	; 0x01
    7300:	bc 01       	movw	r22, r24
    7302:	80 e0       	ldi	r24, 0x00	; 0
    7304:	90 e0       	ldi	r25, 0x00	; 0
    7306:	42 e0       	ldi	r20, 0x02	; 2
    7308:	50 e0       	ldi	r21, 0x00	; 0
    730a:	a4 0e       	add	r10, r20
    730c:	b5 1e       	adc	r11, r21
    730e:	a1 01       	movw	r20, r2
    7310:	0e 94 55 3a 	call	0x74aa	; 0x74aa <__ultoa_invert>
    7314:	d8 2e       	mov	r13, r24
    7316:	d2 18       	sub	r13, r2
    7318:	8f e7       	ldi	r24, 0x7F	; 127
    731a:	f8 2e       	mov	r15, r24
    731c:	f1 22       	and	r15, r17
    731e:	f6 fe       	sbrs	r15, 6
    7320:	0b c0       	rjmp	.+22     	; 0x7338 <vfprintf+0x2cc>
    7322:	5e ef       	ldi	r21, 0xFE	; 254
    7324:	f5 22       	and	r15, r21
    7326:	d9 14       	cp	r13, r9
    7328:	38 f4       	brcc	.+14     	; 0x7338 <vfprintf+0x2cc>
    732a:	f4 fe       	sbrs	r15, 4
    732c:	07 c0       	rjmp	.+14     	; 0x733c <vfprintf+0x2d0>
    732e:	f2 fc       	sbrc	r15, 2
    7330:	05 c0       	rjmp	.+10     	; 0x733c <vfprintf+0x2d0>
    7332:	8f ee       	ldi	r24, 0xEF	; 239
    7334:	f8 22       	and	r15, r24
    7336:	02 c0       	rjmp	.+4      	; 0x733c <vfprintf+0x2d0>
    7338:	1d 2d       	mov	r17, r13
    733a:	01 c0       	rjmp	.+2      	; 0x733e <vfprintf+0x2d2>
    733c:	19 2d       	mov	r17, r9
    733e:	f4 fe       	sbrs	r15, 4
    7340:	0d c0       	rjmp	.+26     	; 0x735c <vfprintf+0x2f0>
    7342:	fe 01       	movw	r30, r28
    7344:	ed 0d       	add	r30, r13
    7346:	f1 1d       	adc	r31, r1
    7348:	80 81       	ld	r24, Z
    734a:	80 33       	cpi	r24, 0x30	; 48
    734c:	19 f4       	brne	.+6      	; 0x7354 <vfprintf+0x2e8>
    734e:	99 ee       	ldi	r25, 0xE9	; 233
    7350:	f9 22       	and	r15, r25
    7352:	08 c0       	rjmp	.+16     	; 0x7364 <vfprintf+0x2f8>
    7354:	1f 5f       	subi	r17, 0xFF	; 255
    7356:	f2 fe       	sbrs	r15, 2
    7358:	05 c0       	rjmp	.+10     	; 0x7364 <vfprintf+0x2f8>
    735a:	03 c0       	rjmp	.+6      	; 0x7362 <vfprintf+0x2f6>
    735c:	8f 2d       	mov	r24, r15
    735e:	86 78       	andi	r24, 0x86	; 134
    7360:	09 f0       	breq	.+2      	; 0x7364 <vfprintf+0x2f8>
    7362:	1f 5f       	subi	r17, 0xFF	; 255
    7364:	0f 2d       	mov	r16, r15
    7366:	f3 fc       	sbrc	r15, 3
    7368:	14 c0       	rjmp	.+40     	; 0x7392 <vfprintf+0x326>
    736a:	f0 fe       	sbrs	r15, 0
    736c:	0f c0       	rjmp	.+30     	; 0x738c <vfprintf+0x320>
    736e:	1e 15       	cp	r17, r14
    7370:	10 f0       	brcs	.+4      	; 0x7376 <vfprintf+0x30a>
    7372:	9d 2c       	mov	r9, r13
    7374:	0b c0       	rjmp	.+22     	; 0x738c <vfprintf+0x320>
    7376:	9d 2c       	mov	r9, r13
    7378:	9e 0c       	add	r9, r14
    737a:	91 1a       	sub	r9, r17
    737c:	1e 2d       	mov	r17, r14
    737e:	06 c0       	rjmp	.+12     	; 0x738c <vfprintf+0x320>
    7380:	80 e2       	ldi	r24, 0x20	; 32
    7382:	90 e0       	ldi	r25, 0x00	; 0
    7384:	b3 01       	movw	r22, r6
    7386:	0e 94 29 3a 	call	0x7452	; 0x7452 <fputc>
    738a:	1f 5f       	subi	r17, 0xFF	; 255
    738c:	1e 15       	cp	r17, r14
    738e:	c0 f3       	brcs	.-16     	; 0x7380 <vfprintf+0x314>
    7390:	04 c0       	rjmp	.+8      	; 0x739a <vfprintf+0x32e>
    7392:	1e 15       	cp	r17, r14
    7394:	10 f4       	brcc	.+4      	; 0x739a <vfprintf+0x32e>
    7396:	e1 1a       	sub	r14, r17
    7398:	01 c0       	rjmp	.+2      	; 0x739c <vfprintf+0x330>
    739a:	ee 24       	eor	r14, r14
    739c:	04 ff       	sbrs	r16, 4
    739e:	0f c0       	rjmp	.+30     	; 0x73be <vfprintf+0x352>
    73a0:	80 e3       	ldi	r24, 0x30	; 48
    73a2:	90 e0       	ldi	r25, 0x00	; 0
    73a4:	b3 01       	movw	r22, r6
    73a6:	0e 94 29 3a 	call	0x7452	; 0x7452 <fputc>
    73aa:	02 ff       	sbrs	r16, 2
    73ac:	1d c0       	rjmp	.+58     	; 0x73e8 <vfprintf+0x37c>
    73ae:	01 fd       	sbrc	r16, 1
    73b0:	03 c0       	rjmp	.+6      	; 0x73b8 <vfprintf+0x34c>
    73b2:	88 e7       	ldi	r24, 0x78	; 120
    73b4:	90 e0       	ldi	r25, 0x00	; 0
    73b6:	0e c0       	rjmp	.+28     	; 0x73d4 <vfprintf+0x368>
    73b8:	88 e5       	ldi	r24, 0x58	; 88
    73ba:	90 e0       	ldi	r25, 0x00	; 0
    73bc:	0b c0       	rjmp	.+22     	; 0x73d4 <vfprintf+0x368>
    73be:	80 2f       	mov	r24, r16
    73c0:	86 78       	andi	r24, 0x86	; 134
    73c2:	91 f0       	breq	.+36     	; 0x73e8 <vfprintf+0x37c>
    73c4:	01 ff       	sbrs	r16, 1
    73c6:	02 c0       	rjmp	.+4      	; 0x73cc <vfprintf+0x360>
    73c8:	8b e2       	ldi	r24, 0x2B	; 43
    73ca:	01 c0       	rjmp	.+2      	; 0x73ce <vfprintf+0x362>
    73cc:	80 e2       	ldi	r24, 0x20	; 32
    73ce:	f7 fc       	sbrc	r15, 7
    73d0:	8d e2       	ldi	r24, 0x2D	; 45
    73d2:	90 e0       	ldi	r25, 0x00	; 0
    73d4:	b3 01       	movw	r22, r6
    73d6:	0e 94 29 3a 	call	0x7452	; 0x7452 <fputc>
    73da:	06 c0       	rjmp	.+12     	; 0x73e8 <vfprintf+0x37c>
    73dc:	80 e3       	ldi	r24, 0x30	; 48
    73de:	90 e0       	ldi	r25, 0x00	; 0
    73e0:	b3 01       	movw	r22, r6
    73e2:	0e 94 29 3a 	call	0x7452	; 0x7452 <fputc>
    73e6:	9a 94       	dec	r9
    73e8:	d9 14       	cp	r13, r9
    73ea:	c0 f3       	brcs	.-16     	; 0x73dc <vfprintf+0x370>
    73ec:	da 94       	dec	r13
    73ee:	f1 01       	movw	r30, r2
    73f0:	ed 0d       	add	r30, r13
    73f2:	f1 1d       	adc	r31, r1
    73f4:	80 81       	ld	r24, Z
    73f6:	90 e0       	ldi	r25, 0x00	; 0
    73f8:	b3 01       	movw	r22, r6
    73fa:	0e 94 29 3a 	call	0x7452	; 0x7452 <fputc>
    73fe:	dd 20       	and	r13, r13
    7400:	a9 f7       	brne	.-22     	; 0x73ec <vfprintf+0x380>
    7402:	06 c0       	rjmp	.+12     	; 0x7410 <vfprintf+0x3a4>
    7404:	80 e2       	ldi	r24, 0x20	; 32
    7406:	90 e0       	ldi	r25, 0x00	; 0
    7408:	b3 01       	movw	r22, r6
    740a:	0e 94 29 3a 	call	0x7452	; 0x7452 <fputc>
    740e:	ea 94       	dec	r14
    7410:	ee 20       	and	r14, r14
    7412:	c1 f7       	brne	.-16     	; 0x7404 <vfprintf+0x398>
    7414:	43 ce       	rjmp	.-890    	; 0x709c <vfprintf+0x30>
    7416:	f3 01       	movw	r30, r6
    7418:	66 81       	ldd	r22, Z+6	; 0x06
    741a:	77 81       	ldd	r23, Z+7	; 0x07
    741c:	cb 01       	movw	r24, r22
    741e:	2b 96       	adiw	r28, 0x0b	; 11
    7420:	e2 e1       	ldi	r30, 0x12	; 18
    7422:	0c 94 d3 37 	jmp	0x6fa6	; 0x6fa6 <__epilogue_restores__>

00007426 <strnlen_P>:
    7426:	fc 01       	movw	r30, r24
    7428:	05 90       	lpm	r0, Z+
    742a:	61 50       	subi	r22, 0x01	; 1
    742c:	70 40       	sbci	r23, 0x00	; 0
    742e:	01 10       	cpse	r0, r1
    7430:	d8 f7       	brcc	.-10     	; 0x7428 <strnlen_P+0x2>
    7432:	80 95       	com	r24
    7434:	90 95       	com	r25
    7436:	8e 0f       	add	r24, r30
    7438:	9f 1f       	adc	r25, r31
    743a:	08 95       	ret

0000743c <strnlen>:
    743c:	fc 01       	movw	r30, r24
    743e:	61 50       	subi	r22, 0x01	; 1
    7440:	70 40       	sbci	r23, 0x00	; 0
    7442:	01 90       	ld	r0, Z+
    7444:	01 10       	cpse	r0, r1
    7446:	d8 f7       	brcc	.-10     	; 0x743e <strnlen+0x2>
    7448:	80 95       	com	r24
    744a:	90 95       	com	r25
    744c:	8e 0f       	add	r24, r30
    744e:	9f 1f       	adc	r25, r31
    7450:	08 95       	ret

00007452 <fputc>:
    7452:	0f 93       	push	r16
    7454:	1f 93       	push	r17
    7456:	cf 93       	push	r28
    7458:	df 93       	push	r29
    745a:	8c 01       	movw	r16, r24
    745c:	eb 01       	movw	r28, r22
    745e:	8b 81       	ldd	r24, Y+3	; 0x03
    7460:	81 ff       	sbrs	r24, 1
    7462:	1b c0       	rjmp	.+54     	; 0x749a <fputc+0x48>
    7464:	82 ff       	sbrs	r24, 2
    7466:	0d c0       	rjmp	.+26     	; 0x7482 <fputc+0x30>
    7468:	2e 81       	ldd	r18, Y+6	; 0x06
    746a:	3f 81       	ldd	r19, Y+7	; 0x07
    746c:	8c 81       	ldd	r24, Y+4	; 0x04
    746e:	9d 81       	ldd	r25, Y+5	; 0x05
    7470:	28 17       	cp	r18, r24
    7472:	39 07       	cpc	r19, r25
    7474:	64 f4       	brge	.+24     	; 0x748e <fputc+0x3c>
    7476:	e8 81       	ld	r30, Y
    7478:	f9 81       	ldd	r31, Y+1	; 0x01
    747a:	01 93       	st	Z+, r16
    747c:	f9 83       	std	Y+1, r31	; 0x01
    747e:	e8 83       	st	Y, r30
    7480:	06 c0       	rjmp	.+12     	; 0x748e <fputc+0x3c>
    7482:	e8 85       	ldd	r30, Y+8	; 0x08
    7484:	f9 85       	ldd	r31, Y+9	; 0x09
    7486:	80 2f       	mov	r24, r16
    7488:	09 95       	icall
    748a:	89 2b       	or	r24, r25
    748c:	31 f4       	brne	.+12     	; 0x749a <fputc+0x48>
    748e:	8e 81       	ldd	r24, Y+6	; 0x06
    7490:	9f 81       	ldd	r25, Y+7	; 0x07
    7492:	01 96       	adiw	r24, 0x01	; 1
    7494:	9f 83       	std	Y+7, r25	; 0x07
    7496:	8e 83       	std	Y+6, r24	; 0x06
    7498:	02 c0       	rjmp	.+4      	; 0x749e <fputc+0x4c>
    749a:	0f ef       	ldi	r16, 0xFF	; 255
    749c:	1f ef       	ldi	r17, 0xFF	; 255
    749e:	c8 01       	movw	r24, r16
    74a0:	df 91       	pop	r29
    74a2:	cf 91       	pop	r28
    74a4:	1f 91       	pop	r17
    74a6:	0f 91       	pop	r16
    74a8:	08 95       	ret

000074aa <__ultoa_invert>:
    74aa:	fa 01       	movw	r30, r20
    74ac:	aa 27       	eor	r26, r26
    74ae:	28 30       	cpi	r18, 0x08	; 8
    74b0:	51 f1       	breq	.+84     	; 0x7506 <__ultoa_invert+0x5c>
    74b2:	20 31       	cpi	r18, 0x10	; 16
    74b4:	81 f1       	breq	.+96     	; 0x7516 <__ultoa_invert+0x6c>
    74b6:	e8 94       	clt
    74b8:	6f 93       	push	r22
    74ba:	6e 7f       	andi	r22, 0xFE	; 254
    74bc:	6e 5f       	subi	r22, 0xFE	; 254
    74be:	7f 4f       	sbci	r23, 0xFF	; 255
    74c0:	8f 4f       	sbci	r24, 0xFF	; 255
    74c2:	9f 4f       	sbci	r25, 0xFF	; 255
    74c4:	af 4f       	sbci	r26, 0xFF	; 255
    74c6:	b1 e0       	ldi	r27, 0x01	; 1
    74c8:	3e d0       	rcall	.+124    	; 0x7546 <__ultoa_invert+0x9c>
    74ca:	b4 e0       	ldi	r27, 0x04	; 4
    74cc:	3c d0       	rcall	.+120    	; 0x7546 <__ultoa_invert+0x9c>
    74ce:	67 0f       	add	r22, r23
    74d0:	78 1f       	adc	r23, r24
    74d2:	89 1f       	adc	r24, r25
    74d4:	9a 1f       	adc	r25, r26
    74d6:	a1 1d       	adc	r26, r1
    74d8:	68 0f       	add	r22, r24
    74da:	79 1f       	adc	r23, r25
    74dc:	8a 1f       	adc	r24, r26
    74de:	91 1d       	adc	r25, r1
    74e0:	a1 1d       	adc	r26, r1
    74e2:	6a 0f       	add	r22, r26
    74e4:	71 1d       	adc	r23, r1
    74e6:	81 1d       	adc	r24, r1
    74e8:	91 1d       	adc	r25, r1
    74ea:	a1 1d       	adc	r26, r1
    74ec:	20 d0       	rcall	.+64     	; 0x752e <__ultoa_invert+0x84>
    74ee:	09 f4       	brne	.+2      	; 0x74f2 <__ultoa_invert+0x48>
    74f0:	68 94       	set
    74f2:	3f 91       	pop	r19
    74f4:	2a e0       	ldi	r18, 0x0A	; 10
    74f6:	26 9f       	mul	r18, r22
    74f8:	11 24       	eor	r1, r1
    74fa:	30 19       	sub	r19, r0
    74fc:	30 5d       	subi	r19, 0xD0	; 208
    74fe:	31 93       	st	Z+, r19
    7500:	de f6       	brtc	.-74     	; 0x74b8 <__ultoa_invert+0xe>
    7502:	cf 01       	movw	r24, r30
    7504:	08 95       	ret
    7506:	46 2f       	mov	r20, r22
    7508:	47 70       	andi	r20, 0x07	; 7
    750a:	40 5d       	subi	r20, 0xD0	; 208
    750c:	41 93       	st	Z+, r20
    750e:	b3 e0       	ldi	r27, 0x03	; 3
    7510:	0f d0       	rcall	.+30     	; 0x7530 <__ultoa_invert+0x86>
    7512:	c9 f7       	brne	.-14     	; 0x7506 <__ultoa_invert+0x5c>
    7514:	f6 cf       	rjmp	.-20     	; 0x7502 <__ultoa_invert+0x58>
    7516:	46 2f       	mov	r20, r22
    7518:	4f 70       	andi	r20, 0x0F	; 15
    751a:	40 5d       	subi	r20, 0xD0	; 208
    751c:	4a 33       	cpi	r20, 0x3A	; 58
    751e:	18 f0       	brcs	.+6      	; 0x7526 <__ultoa_invert+0x7c>
    7520:	49 5d       	subi	r20, 0xD9	; 217
    7522:	31 fd       	sbrc	r19, 1
    7524:	40 52       	subi	r20, 0x20	; 32
    7526:	41 93       	st	Z+, r20
    7528:	02 d0       	rcall	.+4      	; 0x752e <__ultoa_invert+0x84>
    752a:	a9 f7       	brne	.-22     	; 0x7516 <__ultoa_invert+0x6c>
    752c:	ea cf       	rjmp	.-44     	; 0x7502 <__ultoa_invert+0x58>
    752e:	b4 e0       	ldi	r27, 0x04	; 4
    7530:	a6 95       	lsr	r26
    7532:	97 95       	ror	r25
    7534:	87 95       	ror	r24
    7536:	77 95       	ror	r23
    7538:	67 95       	ror	r22
    753a:	ba 95       	dec	r27
    753c:	c9 f7       	brne	.-14     	; 0x7530 <__ultoa_invert+0x86>
    753e:	00 97       	sbiw	r24, 0x00	; 0
    7540:	61 05       	cpc	r22, r1
    7542:	71 05       	cpc	r23, r1
    7544:	08 95       	ret
    7546:	9b 01       	movw	r18, r22
    7548:	ac 01       	movw	r20, r24
    754a:	0a 2e       	mov	r0, r26
    754c:	06 94       	lsr	r0
    754e:	57 95       	ror	r21
    7550:	47 95       	ror	r20
    7552:	37 95       	ror	r19
    7554:	27 95       	ror	r18
    7556:	ba 95       	dec	r27
    7558:	c9 f7       	brne	.-14     	; 0x754c <__ultoa_invert+0xa2>
    755a:	62 0f       	add	r22, r18
    755c:	73 1f       	adc	r23, r19
    755e:	84 1f       	adc	r24, r20
    7560:	95 1f       	adc	r25, r21
    7562:	a0 1d       	adc	r26, r0
    7564:	08 95       	ret

00007566 <_exit>:
    7566:	f8 94       	cli

00007568 <__stop_program>:
    7568:	ff cf       	rjmp	.-2      	; 0x7568 <__stop_program>
